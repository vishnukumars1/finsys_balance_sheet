#Finsys Final
from django.shortcuts import render
from django.contrib.auth import authenticate, login, logout
from django.shortcuts import render,redirect
from django.contrib.auth.models import User, auth
from . models import *
from django.contrib import messages
from django.utils.crypto import get_random_string
from datetime import date
from datetime import timedelta
import random
import string
import io
from django.http import JsonResponse, HttpResponse
from django.db.models import Q
from django.template.loader import get_template
from xhtml2pdf import pisa
from django.core.mail import send_mail, EmailMessage
from io import BytesIO
from django.conf import settings
from django.shortcuts import render, redirect, get_object_or_404
from django.utils import timezone
from datetime import datetime
from datetime import date,datetime
from django.db.models import Sum,F,IntegerField,Q
from django.db.models.functions import ExtractMonth,ExtractYear,Cast
from django.core.mail import EmailMessage
from django.urls import reverse
from django.http import HttpResponse
from django.db import IntegrityError
from django.shortcuts import get_object_or_404
from django.db import models
from bs4 import BeautifulSoup
from openpyxl import Workbook
from openpyxl import load_workbook
from django.http import HttpResponse,HttpResponseRedirect
from datetime import date
from django.db.models import Max
import logging
import re   
import os
from decimal import Decimal
import calendar
from calendar import monthrange,month_name
import json
import base64
from django.core.files.base import ContentFile 
from django.core.mail import EmailMultiAlternatives
from django.db import transaction
from django.utils.dateparse import parse_date
from django.core import serializers
from django.template.loader import render_to_string
from django.http import JsonResponse, HttpResponseBadRequest
from django.views.decorators.csrf import csrf_exempt
from django.db.models import F,Value,Count,CharField

def Fin_index(request):
    return render(request,'Fin_index.html')


def Fin_login(request):
    if request.method == 'POST':
        user_name = request.POST['username']
        passw = request.POST['password']
    
        log_user = auth.authenticate(username = user_name,
                                  password = passw)
    
        if log_user is not None:
            auth.login(request, log_user)

        # ---super admin---

            if request.user.is_staff==1:
                return redirect('Fin_Adminhome') 
            
        # -------distributor ------    
            
        if Fin_Login_Details.objects.filter(User_name = user_name,password = passw).exists():
            data =  Fin_Login_Details.objects.get(User_name = user_name,password = passw)  
            if data.User_Type == 'Distributor':
                did = Fin_Distributors_Details.objects.get(Login_Id=data.id) 
                if did.Admin_approval_status == 'Accept':
                    request.session["s_id"]=data.id
                    if 's_id' in request.session:
                        if request.session.has_key('s_id'):
                            s_id = request.session['s_id']
                            print(s_id)
                            
                            current_day=date.today() 
                            if current_day > did.End_date:
                                print("wrong")
                                   
                                if not Fin_Payment_Terms_updation.objects.filter(Login_Id = data, status = "New").exists():
                                    return redirect('Fin_Wrong')
                                else:
                                    messages.info(request, 'Term Updation Request is pending..')
                                    return redirect('Fin_DistributorReg')
                            else:
                                return redirect('Fin_DHome')
                            
                    else:
                        return redirect('/')
                else:
                    messages.info(request, 'Approval is Pending..')
                    return redirect('Fin_DistributorReg')
                      
            if data.User_Type == 'Company':
                cid = Fin_Company_Details.objects.get(Login_Id=data.id) 
                if cid.Admin_approval_status == 'Accept' or cid.Distributor_approval_status == 'Accept':
                    request.session["s_id"]=data.id
                    if 's_id' in request.session:
                        if request.session.has_key('s_id'):
                            s_id = request.session['s_id']
                            print(s_id)
                            com = Fin_Company_Details.objects.get(Login_Id = s_id)
                            

                            current_day=date.today() 
                            if current_day > com.End_date:
                                print("wrong")
                                   
                                if not Fin_Payment_Terms_updation.objects.filter(Login_Id = data, status = "New").exists():
                                    return redirect('Fin_Wrong')
                                else:
                                    messages.info(request, 'Term Updation Request is pending..')
                                    return redirect('Fin_CompanyReg')
                            else:
                                return redirect('Fin_Com_Home')
                    else:
                        return redirect('/')
                else:
                    messages.info(request, 'Approval is Pending..')
                    return redirect('Fin_CompanyReg')  
            if data.User_Type == 'Staff': 
                cid = Fin_Staff_Details.objects.get(Login_Id=data.id)   
                if cid.Company_approval_status == 'Accept':
                    request.session["s_id"]=data.id
                    if 's_id' in request.session:
                        if request.session.has_key('s_id'):
                            s_id = request.session['s_id']
                            print(s_id)
                            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
                            

                            current_day=date.today() 
                            if current_day > com.company_id.End_date:
                                print("wrong")
                                messages.info(request, 'Your Account Temporary blocked')
                                return redirect('Fin_StaffReg') 
                            else:
                                return redirect('Fin_Com_Home')
                    else:
                        return redirect('/')
                else:
                    messages.info(request, 'Approval is Pending..')
                    return redirect('Fin_StaffReg') 
        else:
            messages.info(request, 'Invalid Username or Password. Try Again.')
            return redirect('Fin_CompanyReg')  
    else:  
        return redirect('Fin_CompanyReg') 
  

def logout(request):
    request.session["uid"] = ""
    auth.logout(request)
    return redirect('Fin_index')  

                    


 
    
# ---------------------------start admin ------------------------------------   


def Fin_Adminhome(request):
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    context = {
        'noti':noti,
        'n':n
    }
    return render(request,'Admin/Fin_Adminhome.html',context)

def Fin_PaymentTerm(request):
    terms = Fin_Payment_Terms.objects.all()
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    return render(request,'Admin/Fin_Payment_Terms.html',{'terms':terms,'noti':noti,'n':n})

def Fin_add_payment_terms(request):
  if request.method == 'POST':
    num=int(request.POST['num'])
    select=request.POST['select']
    if select == 'Years':
      days=int(num)*365
      pt = Fin_Payment_Terms(payment_terms_number = num,payment_terms_value = select,days = days)
      pt.save()
      messages.success(request, 'Payment term is added')
      return redirect('Fin_PaymentTerm')

    else:  
      days=int(num*30)
      pt = Fin_Payment_Terms(payment_terms_number = num,payment_terms_value = select,days = days)
      pt.save()
      messages.success(request, 'Payment term is added')
      return redirect('Fin_PaymentTerm')


  return redirect('Fin_PaymentTerm')

def Fin_ADistributor(request):
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    return render(request,"Admin/Fin_ADistributor.html",{'noti':noti,'n':n})

def Fin_Distributor_Request(request):
   data = Fin_Distributors_Details.objects.filter(Admin_approval_status = "NULL")
   print(data)
   noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
   n = len(noti)
   return render(request,"Admin/Fin_Distributor_Request.html",{'data':data,'noti':noti,'n':n})

def Fin_Distributor_Req_overview(request,id):
    data = Fin_Distributors_Details.objects.get(id=id)
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    return render(request,"Admin/Fin_Distributor_Req_overview.html",{'data':data,'noti':noti,'n':n})

def Fin_DReq_Accept(request,id):
   data = Fin_Distributors_Details.objects.get(id=id)
   data.Admin_approval_status = 'Accept'
   data.save()
   return redirect('Fin_Distributor_Request')

def Fin_DReq_Reject(request,id):
   data = Fin_Distributors_Details.objects.get(id=id)
   data.Login_Id.delete()
   data.delete()
   return redirect('Fin_Distributor_Request')

def Fin_Distributor_delete(request,id):
   data = Fin_Distributors_Details.objects.get(id=id)
   data.Login_Id.delete()
   data.delete()
   return redirect('Fin_All_distributors')

def Fin_All_distributors(request):
   data = Fin_Distributors_Details.objects.filter(Admin_approval_status = "Accept")
   print(data)
   noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
   n = len(noti)
   return render(request,"Admin/Fin_All_distributors.html",{'data':data,'noti':noti,'n':n})

def Fin_All_Distributor_Overview(request,id):
   data = Fin_Distributors_Details.objects.get(id=id)
   noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
   n = len(noti)
   return render(request,"Admin/Fin_All_Distributor_Overview.html",{'data':data,'noti':noti,'n':n})  

def Fin_AClients(request):
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    return render(request,"Admin/Fin_AClients.html",{'noti':noti,'n':n})


def Fin_AClients_Request(request):
    data = Fin_Company_Details.objects.filter(Registration_Type = "self", Admin_approval_status = "NULL")
    print(data)
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    return render(request,"Admin/Fin_AClients_Request.html",{'data':data,'noti':noti,'n':n})

def Fin_AClients_Request_OverView(request,id):
    data = Fin_Company_Details.objects.get(id=id)
    allmodules = Fin_Modules_List.objects.get(company_id = id,status = "New")
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    return render(request,'Admin/Fin_AClients_Request_OverView.html',{'data':data,'allmodules':allmodules,'noti':noti,'n':n})

def Fin_Client_Req_Accept(request,id):
   data = Fin_Company_Details.objects.get(id=id)
   data.Admin_approval_status = 'Accept'
   data.save()
   return redirect('Fin_AClients_Request')

def Fin_Client_Req_Reject(request,id):
   data = Fin_Company_Details.objects.get(id=id)
   data.Login_Id.delete()
   data.delete()
   return redirect('Fin_AClients_Request')

def Fin_Client_delete(request,id):
   data = Fin_Company_Details.objects.get(id=id)
   data.Login_Id.delete()
   data.delete()
   return redirect('Fin_Admin_clients')

def Fin_Admin_clients(request):
   data = Fin_Company_Details.objects.filter(Admin_approval_status = "Accept")
   print(data)
   noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
   n = len(noti)
   return render(request,"Admin/Fin_Admin_clients.html",{'data':data,'noti':noti,'n':n})

def Fin_Admin_clients_overview(request,id):
   data = Fin_Company_Details.objects.get(id=id)
   allmodules = Fin_Modules_List.objects.get(company_id = id,status = "New")
   noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
   n = len(noti)
   return render(request,"Admin/Fin_Admin_clients_overview.html",{'data':data,'allmodules':allmodules,'noti':noti,'n':n})   

def Fin_Anotification(request):
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    context = {
        'noti':noti,
        'n':n
    }
    return render(request,'Admin/Fin_Anotification.html',context) 

def  Fin_Anoti_Overview(request,id):
    noti = Fin_ANotification.objects.filter(status = 'New')
    n = len(noti)

    
    data = Fin_ANotification.objects.get(id=id)

    if data.Login_Id.User_Type == "Company":

        if data.Modules_List :
            allmodules = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "New")
            allmodules1 = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "pending")

            modules_pending = Fin_Modules_List.objects.filter(Login_Id = data.Login_Id,status = "pending")
            current_modules = Fin_Modules_List.objects.filter(Login_Id = data.Login_Id,status = "New")

            # Extract the field names related to modules
            module_fields = [field.name for field in Fin_Modules_List._meta.fields if field.name not in ['id', 'company', 'status', 'update_action','company_id', 'Login_Id' ]]

            # Get the previous and new values for the selected modules
            previous_values = current_modules.values(*module_fields).first()
            new_values = modules_pending.values(*module_fields).first()

            # Iterate through the dictionary and replace None with 0
            for key, value in previous_values.items():
                if value is None:
                    previous_values[key] = 0

            # Iterate through the dictionary and replace None with 0
            for key, value in new_values.items():
                if value is None:
                    new_values[key] = 0

            # Identify added and deducted modules
            added_modules = {}
            deducted_modules = {}

            for field in module_fields:
                if new_values[field] > previous_values[field]:
                    added_modules[field] = new_values[field] - previous_values[field]
                elif new_values[field] < previous_values[field]:
                    deducted_modules[field] = previous_values[field] - new_values[field]
            
           
            context = {
                'noti':noti,
                'n':n,
                'data':data,
                'allmodules':allmodules,
                'allmodules1':allmodules1,
                'current_modules': current_modules,
                'modules_pending': modules_pending,
                'previous_values': previous_values,
                'new_values': new_values,
                'added_modules': added_modules,
                'deducted_modules': deducted_modules,
            }
            return render(request,'Admin/Fin_Anoti_Overview.html',context)
        else:
            data1 = Fin_Company_Details.objects.get(Login_Id = data.Login_Id)
            context = {
                'noti':noti,
                'n':n,
                'data1':data1,
                'data':data,
                
            }
            return render(request,'Admin/Fin_Anoti_Overview.html',context)
    else:
        data1 = Fin_Distributors_Details.objects.get(Login_Id = data.Login_Id)
        context = {
                'noti':noti,
                'n':n,
                'data1':data1,
                'data':data,
                
            }

        return render(request,'Admin/Fin_Anoti_Overview.html',context)

def  Fin_Module_Updation_Accept(request,id):
    data = Fin_ANotification.objects.get(id=id)
    allmodules = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "New")
    allmodules.delete()

    allmodules1 = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "pending")
    allmodules1.status = "New"
    allmodules1.save()

    data.status = 'old'
    data.save()

    # notification
    notification=Fin_CNotification.objects.create(Login_Id=allmodules1.Login_Id, Company_id=allmodules1.company_id,Title='Modules Updated..!',Discription='Your module update request is approved')

    return redirect('Fin_Anotification')

def  Fin_Module_Updation_Reject(request,id):
    data = Fin_ANotification.objects.get(id=id)
    allmodules = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "pending")
    allmodules.delete()

    data.delete()

    return redirect('Fin_Anotification')

def  Fin_payment_terms_Updation_Accept(request,id):
    data = Fin_ANotification.objects.get(id=id)
    com = Fin_Company_Details.objects.get(Login_Id = data.Login_Id)
    terms=Fin_Payment_Terms.objects.get(id=data.PaymentTerms_updation.Payment_Term.id)

    title=['Trial Period Alert','Payment Terms Alert',]
    cnoti = Fin_CNotification.objects.filter(Company_id = com, Title__in=title)
    cnoti.update(status='old')

    anoti= Fin_ANotification.objects.filter(Login_Id = com.Login_Id, Title__in=title) 
    anoti.update(status='old')
    
    
    start=com.End_date + timedelta(days=1)
    com.Start_Date = start
    days=int(terms.days)

    end= start + timedelta(days=days)
    com.End_date = end
    com.Payment_Term = terms
    com.save()

    data.status = 'old'
    data.save()

    upt = Fin_Payment_Terms_updation.objects.get(id = data.PaymentTerms_updation.id)
    upt.status = 'old'
    upt.save()

    

    # notification
    message=f'Your new plan is activated and ends on {end}'
    notification=Fin_CNotification.objects.create(Login_Id=com.Login_Id, Company_id=com,Title='New Plan Activated..!',Discription=message)

    return redirect('Fin_adminTermExtensionRequests')

def  Fin_payment_terms_Updation_Reject(request,id):
    data = Fin_ANotification.objects.get(id=id)

    upt = Fin_Payment_Terms_updation.objects.get(id = data.PaymentTerms_updation.id)

    upt.delete()
    data.delete()

    return redirect('Fin_adminTermExtensionRequests')


def  Fin_ADpayment_terms_Updation_Accept(request,id):
    data = Fin_ANotification.objects.get(id=id)
    com = Fin_Distributors_Details.objects.get(Login_Id = data.Login_Id)
    terms=Fin_Payment_Terms.objects.get(id=data.PaymentTerms_updation.Payment_Term.id)
    
    start=com.End_date + timedelta(days=1)
    com.Start_Date =start
    days=int(terms.days)

    end= start + timedelta(days=days)
    com.End_date = end
    com.Payment_Term = terms
    com.save()

    data.status = 'old'
    data.save()

    upt = Fin_Payment_Terms_updation.objects.get(id = data.PaymentTerms_updation.id)
    upt.status = 'old'
    upt.save()

    title=['Trial Period Alert','Payment Terms Alert',]
    dnoti = Fin_DNotification.objects.filter(Distributor_id = com,Title__in=title)
    dnoti.update(status='old')

    anoti= Fin_ANotification.objects.filter(Login_Id = com.Login_Id, Title__in=title) 
    anoti.update(status='old')

    # notification
    message=f'Your new plan is activated and ends on {end}'
    notification=Fin_DNotification.objects.create(Login_Id=com.Login_Id, Distributor_id=com,Title='New Plan Activated..!',Discription=message)  

    return redirect('Fin_Anotification')


def  Fin_ADpayment_terms_Updation_Reject(request,id):
    data = Fin_ANotification.objects.get(id=id)

    upt = Fin_Payment_Terms_updation.objects.get(id = data.PaymentTerms_updation.id)

    upt.delete()
    data.delete()

    return redirect('Fin_Anotification')

 
# ---------------------------end admin ------------------------------------ 






# ---------------------------start distributor------------------------------------   

def Fin_DHome(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Distributors_Details.objects.get(Login_Id = s_id)
        current_day=date.today() 
        diff = (data.End_date - current_day).days
        num = 20

        payment_request=Fin_Payment_Terms_updation.objects.filter(Login_Id=data.Login_Id,status='New').exists()


        title2=['Modules Updated..!','New Plan Activated..!','Change Payment Terms']
        today_date = datetime.now().date()
        notification=Fin_DNotification.objects.filter(status = 'New',Distributor_id = data,Title__in=title2,Noti_date__lt=today_date)
        notification.update(status='old')

        dis_name=data.Login_Id.First_name +"  "+ data.Login_Id.Last_name
        if not Fin_DNotification.objects.filter(Login_Id = data.Login_Id,Distributor_id = data,Title="Payment Terms Alert", status = 'New').exists() and diff <= 20:
            n = Fin_DNotification(Login_Id=data.Login_Id, Distributor_id = data, Title="Payment Terms Alert", Discription="Your Payment Terms End Soon")
            n.save()
            d = Fin_ANotification(Login_Id=data.Login_Id, Title="Payment Terms Alert", Discription=f"Current  payment terms of {dis_name} is expiring")
            d.save()
        noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id = data.id).order_by('-id','-Noti_date')
        n = len(noti)
        
        # Calculate the date 20 days before the end date for payment term renew
        reminder_date = data.End_date - timedelta(days=20)    
        current_date = date.today()
        alert_message = current_date >= reminder_date
        
        # Calculate the number of days between the reminder date and end date
        days_left = (data.End_date - current_date).days
          
        context = {
            'noti':noti,
            'n':n,
            'data':data,
            'alert_message':alert_message,
            'days_left':days_left,
            'payment_request':payment_request,
        }
        return render(request,'Distributor/Fin_DHome.html',context)
    else:
       return redirect('/')   
 

def Fin_DistributorReg(request):
    terms = Fin_Payment_Terms.objects.all()
    context = {
       'terms':terms
    }
    return render(request,'Distributor/Fin_DistributorReg.html',context)

def Fin_DReg_Action(request):
    if request.method == 'POST':
      first_name = request.POST['first_name']
      last_name = request.POST['last_name']
      email = request.POST['email']
      user_name = request.POST['username']
      password = request.POST['dpassword']

      if Fin_Login_Details.objects.filter(User_name=user_name).exists():
        messages.info(request, 'This username already exists. Sign up again')
        return redirect('Fin_DistributorReg')
      
      elif Fin_Distributors_Details.objects.filter(Email=email).exists():
        messages.info(request, 'This email already exists. Sign up again')
        return redirect('Fin_DistributorReg')
      else:
        dlog = Fin_Login_Details(First_name = first_name,Last_name = last_name,
                                User_name = user_name,password = password,
                                User_Type = 'Distributor')
        dlog.save()

        code_length = 8  
        characters = string.ascii_letters + string.digits  # Letters and numbers

        while True:
            unique_code = ''.join(random.choice(characters) for _ in range(code_length))
        
            # Check if the code already exists in the table
            if not Fin_Company_Details.objects.filter(Company_Code = unique_code).exists():
              break 

        ddata = Fin_Distributors_Details(Email = email,Login_Id = dlog,Distributor_Code = unique_code,Admin_approval_status = "NULL")
        ddata.save()
        return redirect('Fin_DReg2',dlog.id)    

        # code=get_random_string(length=6)
        # if Fin_Distributors_Details.objects.filter( Distributor_Code = code).exists():
        #     code2=get_random_string(length=6)

        #     ddata = Fin_Distributors_Details(Email = email,Login_Id = dlog,Distributor_Code = code2,Admin_approval_status = "NULL")
        #     ddata.save()
        #     return redirect('Fin_DReg2',dlog.id)
        # else:
        #     ddata = Fin_Distributors_Details(Email = email,Login_Id = dlog,Distributor_Code = code,Admin_approval_status = "NULL")
        #     ddata.save()
        #     return redirect('Fin_DReg2',dlog.id)
 
    return redirect('Fin_DistributorReg')

def Fin_DReg2(request,id):
    dlog = Fin_Login_Details.objects.get(id = id)
    ddata = Fin_Distributors_Details.objects.get(Login_Id = id)
    terms = Fin_Payment_Terms.objects.all()
    context = {
       'terms':terms,
       'dlog':dlog,
       'ddata':ddata
    }
    return render(request,'Distributor/Fin_DReg2.html',context)

def Fin_DReg2_Action2(request,id):
   if request.method == 'POST':
      ddata = Fin_Distributors_Details.objects.get(Login_Id = id)

      ddata.Contact = request.POST['phone']
      ddata.Image=request.FILES.get('img')

      payment_term = request.POST['payment_term']
      terms=Fin_Payment_Terms.objects.get(id=payment_term)
    
      start_date=date.today()
      days=int(terms.days)

      end= date.today() + timedelta(days=days)
      End_date=end

      ddata.Payment_Term  = terms
      ddata.Start_Date = start_date
      ddata.End_date = End_date

      ddata.save()
      return redirect('Fin_DistributorReg')
   return render('Fin_DReg2',id)  

def Fin_DClient_req(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Distributors_Details.objects.get(Login_Id = s_id)
        data1 = Fin_Company_Details.objects.filter(Registration_Type = "distributor",Distributor_approval_status = "NULL",Distributor_id = data.id)
        noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id = data.id)
        n = len(noti)
        return render(request,'Distributor/Fin_DClient_req.html',{'data':data,'data1':data1,'noti':noti,'n':n})
    else:
       return redirect('/') 
    
def Fin_DClient_req_overview(request,id):
    data = Fin_Company_Details.objects.get(id=id)
    allmodules = Fin_Modules_List.objects.get(company_id = id,status = "New")
    noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id = data.id)
    n = len(noti)
    return render(request,'Distributor/Fin_DClient_req_overview.html',{'data':data,'allmodules':allmodules,'noti':noti,'n':n})    
    
def Fin_DClient_Req_Accept(request,id):
   data = Fin_Company_Details.objects.get(id=id)
   data.Distributor_approval_status = 'Accept'
   data.save()
   return redirect('Fin_DClient_req')

def Fin_DClient_Req_Reject(request,id):
   data = Fin_Company_Details.objects.get(id=id)
   data.Login_Id.delete()
   data.delete()
   return redirect('Fin_DClient_req')   

def Fin_DClients(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Distributors_Details.objects.get(Login_Id = s_id)
        data1 = Fin_Company_Details.objects.filter(Registration_Type = "distributor",Distributor_approval_status = "Accept",Distributor_id = data.id)
        noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id = data.id)
        n = len(noti)
        return render(request,'Distributor/Fin_DClients.html',{'data':data,'data1':data1,'noti':noti,'n':n})
    else:
       return redirect('/')  
   
def Fin_DClients_overview(request,id):
    data = Fin_Company_Details.objects.get(id=id)
    allmodules = Fin_Modules_List.objects.get(company_id = id,status = "New")
    noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id = data.id)
    n = len(noti)
    return render(request,'Distributor/Fin_DClients_overview.html',{'data':data,'allmodules':allmodules,'noti':noti,'n':n})

def Fin_DClient_remove(request,id):
   data = Fin_Company_Details.objects.get(id=id)
   data.Login_Id.delete()
   data.delete()
   return redirect('Fin_DClients') 
    
def Fin_DProfile(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Distributors_Details.objects.get(Login_Id = s_id)
        data1 = Fin_Company_Details.objects.filter(Registration_Type = "distributor",Distributor_approval_status = "Accept",Distributor_id = data.id)
        terms = Fin_Payment_Terms.objects.all()

        payment_request=Fin_Payment_Terms_updation.objects.filter(Login_Id=data.Login_Id,status='New').exists()


        noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id = data.id)
        n = len(noti)
        return render(request,'Distributor/Fin_DProfile.html',{'data':data,'data1':data1,'terms':terms,'noti':noti,'n':n,'payment_request':payment_request})
    else:
       return redirect('/')   
    
def Fin_Dnotification(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Distributors_Details.objects.get(Login_Id = s_id)

        noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id = data.id).order_by('-id','-Noti_date')
        n = len(noti)
        context = {
            'noti':noti,
            'n':n,
            'data':data
        }
        return render(request,'Distributor/Fin_Dnotification.html',context)  
    else:
       return redirect('/') 
    

def  Fin_Dnoti_Overview(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        d = Fin_Distributors_Details.objects.get(Login_Id = s_id)
        noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id = d.id)
        n = len(noti)

        

        data = Fin_DNotification.objects.get(id=id)

        if data.Modules_List :
            allmodules = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "New")
            allmodules1 = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "pending")

            modules_pending = Fin_Modules_List.objects.filter(Login_Id = data.Login_Id,status = "pending")
            current_modules = Fin_Modules_List.objects.filter(Login_Id = data.Login_Id,status = "New")

            # Extract the field names related to modules
            module_fields = [field.name for field in Fin_Modules_List._meta.fields if field.name not in ['id', 'company', 'status', 'update_action','company_id', 'Login_Id' ]]

            # Get the previous and new values for the selected modules
            previous_values = current_modules.values(*module_fields).first()
            new_values = modules_pending.values(*module_fields).first()

            # Iterate through the dictionary and replace None with 0
            for key, value in previous_values.items():
                if value is None:
                    previous_values[key] = 0

            # Iterate through the dictionary and replace None with 0
            for key, value in new_values.items():
                if value is None:
                    new_values[key] = 0

            # Identify added and deducted modules
            added_modules = {}
            deducted_modules = {}

            for field in module_fields:
                if new_values[field] > previous_values[field]:
                    added_modules[field] = new_values[field] - previous_values[field]
                elif new_values[field] < previous_values[field]:
                    deducted_modules[field] = previous_values[field] - new_values[field]


            context = {
                'noti':noti,
                'n':n,
                'data':data,
                'allmodules':allmodules,
                'allmodules1':allmodules1,
                'current_modules': current_modules,
                'modules_pending': modules_pending,
                'previous_values': previous_values,
                'new_values': new_values,
                'added_modules': added_modules,
                'deducted_modules': deducted_modules,
            }
            return render(request,'Distributor/Fin_Dnoti_Overview.html',context)

        else:
            data1 = Fin_Company_Details.objects.get(Login_Id = data.Login_Id)
            context = {
                'noti':noti,
                'n':n,
                'data1':data1,
                'data':data,
                
            }
            return render(request,'Distributor/Fin_Dnoti_Overview.html',context)    
    else:
       return redirect('/') 


def  Fin_DModule_Updation_Accept(request,id):
    data = Fin_DNotification.objects.get(id=id)
    allmodules = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "New")
    allmodules.delete()

    allmodules1 = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "pending")
    allmodules1.status = "New"
    allmodules1.save()

    data.status = 'old'
    data.save()

    # notification
    notification=Fin_CNotification.objects.create(Login_Id=allmodules1.Login_Id, Company_id=allmodules1.company_id,Title='Modules Updated..!',Discription='Your module update request is approved')

    return redirect('Fin_Dnotification')


def  Fin_DModule_Updation_Reject(request,id):
    data = Fin_DNotification.objects.get(id=id)
    allmodules = Fin_Modules_List.objects.get(Login_Id = data.Login_Id,status = "pending")
    allmodules.delete()

    data.delete()

    return redirect('Fin_Dnotification')


def  Fin_Dpayment_terms_Updation_Accept(request,id):
    data = Fin_DNotification.objects.get(id=id)
    com = Fin_Company_Details.objects.get(Login_Id = data.Login_Id)
    terms=Fin_Payment_Terms.objects.get(id=data.PaymentTerms_updation.Payment_Term.id)

    title=['Trial Period Alert','Payment Terms Alert']
    cnoti = Fin_CNotification.objects.filter(Company_id = com, Title__in=title)
    dnoti = Fin_DNotification.objects.filter(Distributor_id = com.Distributor_id,Login_Id=com.Login_Id,Title__in=title)
    dnoti.update(status='old')

    
    for c in cnoti:
        c.status = 'old'
        c.save()  
    
    start=com.End_date + timedelta(days=1)
    com.Start_Date = start
    days=int(terms.days)

    end= start + timedelta(days=days)
    com.End_date = end
    com.Payment_Term = terms
    com.save()

    data.status = 'old'
    data.save()

    upt = Fin_Payment_Terms_updation.objects.get(id = data.PaymentTerms_updation.id)
    upt.status = 'old'
    upt.save()

    # notification
    message=f'Your new plan is activated and ends on {end}'
    notification=Fin_CNotification.objects.create(Login_Id=com.Login_Id, Company_id=com,Title='New Plan Activated..!',Discription=message)

    return redirect('Fin_Dnotification')


def  Fin_Dpayment_terms_Updation_Reject(request,id):
    data = Fin_DNotification.objects.get(id=id)

    upt = Fin_Payment_Terms_updation.objects.get(id = data.PaymentTerms_updation.id)

    upt.delete()
    data.delete()

    return redirect('Fin_Dnotification')    


def Fin_DChange_payment_terms(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        
        if request.method == 'POST':
            data = Fin_Login_Details.objects.get(id = s_id)
            com = Fin_Distributors_Details.objects.get(Login_Id = s_id)
            pt = request.POST['payment_term']

            if Fin_Payment_Terms_updation.objects.filter(Login_Id=com.Login_Id,status='New').exists():
                return redirect('Fin_DProfile')

            pay = Fin_Payment_Terms.objects.get(id=pt)

            data1 = Fin_Payment_Terms_updation(Login_Id = data,Payment_Term = pay)
            data1.save()

            
            noti = Fin_ANotification(Login_Id = data,PaymentTerms_updation = data1,Title = "Change Payment Terms",Discription = com.Login_Id.First_name + ' ' + com.Login_Id.Last_name + " wants to subscribe a new plan")
            noti.save()
              


        
            return redirect('Fin_DProfile')
    else:
       return redirect('/') 


def Fin_Edit_Dprofile(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        com = Fin_Distributors_Details.objects.get(Login_Id = s_id)
        data = Fin_Distributors_Details.objects.get(Login_Id = s_id)

        noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id = data.id)
        n = len(noti)

        context ={
            'com':com,
            'data':data,
            'n':n,
            'noti':noti
        }

        return render(request,"Distributor/Fin_Edit_Dprofile.html",context)    
    else:
       return redirect('/')    
    
def Fin_Edit_Dprofile_Action(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        com = Fin_Distributors_Details.objects.get(Login_Id = s_id)
        if request.method == 'POST':
            com.Login_Id.First_name = request.POST['first_name']
            com.Login_Id.Last_name = request.POST['last_name']
            com.Email = request.POST['email']
            com.Contact = request.POST['contact']
            
            com.Image  = request.FILES.get('img')
            

            com.Login_Id.save()
            com.save()

            return redirect('Fin_DProfile')
        return redirect('Fin_Edit_Dprofile')     
    else:
       return redirect('/')     

      
# ---------------------------end distributor------------------------------------  


             
# ---------------------------start staff------------------------------------   
    

def Fin_StaffReg(request):
    return render(request,'company/Fin_StaffReg.html')

def Fin_staffReg_action(request):
   if request.method == 'POST':
        first_name = request.POST['first_name']
        last_name = request.POST['last_name']
        email = request.POST['email']
        user_name = request.POST['cusername']
        password = request.POST['cpassword'] 
        cid = request.POST['Company_Code']
        if Fin_Company_Details.objects.filter(Company_Code = cid ).exists():
            com =Fin_Company_Details.objects.get(Company_Code = cid )

            if Fin_Staff_Details.objects.filter(company_id=com,Login_Id__User_name=user_name).exists():
                messages.info(request, 'This username already exists. Sign up again')
                return redirect('Fin_StaffReg')

            if Fin_Login_Details.objects.filter(User_name=user_name,password = password).exists():
                messages.info(request, 'This username and password already exists. Sign up again')
                return redirect('Fin_StaffReg')
        
            elif Fin_Staff_Details.objects.filter(Email=email).exists():
                messages.info(request, 'This email already exists. Sign up again')
                return redirect('Fin_StaffReg')
            else:
                dlog = Fin_Login_Details(First_name = first_name,Last_name = last_name,
                                    User_name = user_name,password = password,
                                    User_Type = 'Staff')
                dlog.save()

                ddata = Fin_Staff_Details(Email = email,Login_Id = dlog,Company_approval_status = "NULL",company_id = com)
                ddata.save()
                return redirect('Fin_StaffReg2',dlog.id)
        else:
            messages.info(request, 'This company code  not exists. Sign up again')  
            return redirect('Fin_StaffReg')    
        
def Fin_StaffReg2(request,id):
    dlog = Fin_Login_Details.objects.get(id = id)
    ddata = Fin_Staff_Details.objects.get(Login_Id = id)
    context = {
       'dlog':dlog,
       'ddata':ddata
    }
    return render(request,'company/Fin_StaffReg2.html',context)

def Fin_StaffReg2_Action(request,id):
    if request.method == 'POST':
        
        staff = Fin_Staff_Details.objects.get(Login_Id = id)
        log = Fin_Login_Details.objects.get(id = id)

        staff.Login_Id = log
           
        staff.contact = request.POST['phone']
        staff.img=request.FILES.get('img')
        staff.Company_approval_status = "Null"
        staff.save()
        print("Staff Registration Complete")
    
        return redirect('Fin_StaffReg')
        
    else:
        return redirect('Fin_StaffReg2',id)
# ---------------------------end staff------------------------------------ 


    
# ---------------------------start company------------------------------------ 

def Fin_Com_Home(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')

            payment_request=Fin_Payment_Terms_updation.objects.filter(Login_Id=com.Login_Id,status='New').exists()


            title2=['Modules Updated..!','New Plan Activated..!']
            today_date = datetime.now().date()
            notification=Fin_CNotification.objects.filter(status = 'New',Company_id = com,Title__in=title2,Noti_date__lt=today_date).order_by('-id','-Noti_date')
            notification.update(status='old')

            current_day=date.today() 
            diff = (com.End_date - current_day).days
            
            # payment term and trial period alert notifications for notifation page
            cmp_name=com.Company_name
            if com.Payment_Term:
                if not Fin_CNotification.objects.filter(Company_id=com, Title="Payment Terms Alert",status = 'New').exists() and diff <= 20:
                    
                    n = Fin_CNotification(Login_Id=data, Company_id=com, Title="Payment Terms Alert", Discription="Your Payment Terms End Soon")
                    n.save()
                    if com.Registration_Type == 'self':
                        d = Fin_ANotification(Login_Id=data, Title="Payment Terms Alert", Discription=f"Current  payment terms of {cmp_name} is expiring")
                    else:
                        d = Fin_DNotification(Login_Id=data, Distributor_id=com.Distributor_id, Title="Payment Terms Alert", Discription=f"Current  payment terms of {cmp_name} is expiring")

                    d.save()
            else:
                if not Fin_CNotification.objects.filter(Company_id=com, Title="Trial Period Alert",status = 'New').exists() and diff <= 10:
                    n = Fin_CNotification(Login_Id=data, Company_id=com, Title="Trial Period Alert", Discription="Your Trial Period End Soon")
                    n.save()
                    if com.Registration_Type == 'self':
                        d = Fin_ANotification(Login_Id=data, Title="Payment Terms Alert", Discription=f"Current  payment terms of {cmp_name} is expiring")
                    else:
                        d = Fin_DNotification(Login_Id=data, Distributor_id=com.Distributor_id, Title="Payment Terms Alert", Discription=f"Current  payment terms of {cmp_name} is expiring")

                    d.save()

            noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com).order_by('-id','-Noti_date')
            n = len(noti)

            # Calculate the date 20 days before the end date for payment term renew and 10 days before for trial period renew
            if com.Payment_Term:
                reminder_date = com.End_date - timedelta(days=20)
            else:
                reminder_date = com.End_date - timedelta(days=10)
            current_date = date.today()
            alert_message = current_date >= reminder_date
            
            # Calculate the number of days between the reminder date and end date
            days_left = (com.End_date - current_date).days

            context = {
                'allmodules':allmodules,
                'com':com,
                'data':data,
                'noti':noti,
                'n':n,
                'alert_message':alert_message,
                'days_left':days_left,
                'payment_request':payment_request,
                }

            return render(request,'company/Fin_Com_Home.html',context)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            return render(request,'company/Fin_Com_Home.html',{'allmodules':allmodules,'com':com,'data':data})
    else:
       return redirect('/') 


def Fin_Cnotification(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')


            title=['Trial Period Alert','Payment Terms Alert']
            title2=['Modules Updated..!','New Plan Activated..!']
            today_date = datetime.now().date()
            notification=Fin_CNotification.objects.filter(status = 'New',Company_id = com,Title__in=title2,Noti_date__lt=today_date).order_by('-id','-Noti_date')
            notification.update(status='old')

            noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com).order_by('-id','-Noti_date')
            n = len(noti)

            payment_term_notification=Fin_CNotification.objects.filter(status = 'New',Company_id = com,Title__in=title).order_by('-id','-Noti_date')
            other_notification=Fin_CNotification.objects.filter(status = 'New',Company_id = com,Title__in=title2,date_created=today_date).order_by('-id','-Noti_date')
           

            
            context = {
                'allmodules':allmodules,
                'com':com,
                'data':data,
                'noti':noti,
                'n':n,
                'payment_term_notification':payment_term_notification,
                'other_notification':other_notification,
                
            }
            return render(request,'company/Fin_Cnotification.html',context)  
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            context = {
                'allmodules':allmodules,
                'com':com,
                'data':data,
                
            }
            return render(request,'company/Fin_Cnotification.html',context)
    else:
       return redirect('/')     

     

def Fin_CompanyReg(request):
    return render(request,'company/Fin_CompanyReg.html')

def Fin_companyReg_action(request):
   if request.method == 'POST':
        first_name = request.POST['first_name']
        last_name = request.POST['last_name']
        email = request.POST['email']
        user_name = request.POST['cusername']
        password = request.POST['cpassword']


        if Fin_Login_Details.objects.filter(User_name=user_name).exists():
            messages.info(request, 'This username already exists. Sign up again')
            return redirect('Fin_CompanyReg')
      
        elif Fin_Company_Details.objects.filter(Email=email).exists():
            messages.info(request, 'This email already exists. Sign up again')
            return redirect('Fin_CompanyReg')
        else:
            dlog = Fin_Login_Details(First_name = first_name,Last_name = last_name,
                                User_name = user_name,password = password,
                                User_Type = 'Company')
            dlog.save()

        code_length = 8  
        characters = string.ascii_letters + string.digits  # Letters and numbers

        while True:
            unique_code = ''.join(random.choice(characters) for _ in range(code_length))
        
            # Check if the code already exists in the table
            if not Fin_Company_Details.objects.filter(Company_Code = unique_code).exists():
              break  

        ddata = Fin_Company_Details(Email = email,Login_Id = dlog,Company_Code = unique_code,Admin_approval_status = "NULL",Distributor_approval_status = "NULL")
        ddata.save()
        return redirect('Fin_CompanyReg2',dlog.id)      

        # code=get_random_string(length=6)
        # if Fin_Company_Details.objects.filter( Company_Code = code).exists():
        #     code2=get_random_string(length=6)

        #     ddata = Fin_Company_Details(Email = email,Login_Id = dlog,Company_Code = code2,Admin_approval_status = "NULL",Distributor_approval_status = "NULL")
        #     ddata.save()
        #     return redirect('Fin_CompanyReg2',dlog.id)
        # else:
        #     ddata = Fin_Company_Details(Email = email,Login_Id = dlog,Company_Code = code,Admin_approval_status = "NULL",Distributor_approval_status = "NULL")
        #     ddata.save()
        #     return redirect('Fin_CompanyReg2',dlog.id)
 
   return redirect('Fin_DistributorReg')

def Fin_CompanyReg2(request,id):
    data = Fin_Login_Details.objects.get(id=id)
    terms = Fin_Payment_Terms.objects.all()
    return render(request,'company/Fin_CompanyReg2.html',{'data':data,'terms':terms})


def Fin_CompanyReg2_action2(request,id):
    if request.method == 'POST':
        data = Fin_Login_Details.objects.get(id=id)
        com = Fin_Company_Details.objects.get(Login_Id=data.id)

        com.Company_name = request.POST['cname']
        com.Address = request.POST['caddress']
        com.City = request.POST['city']
        com.State = request.POST['state']
        com.Pincode = request.POST['pincode']
        com.Country = request.POST['ccountry']
        com.Image  = request.FILES.get('img1')
        com.Business_name = request.POST['bname']
        com.Industry = request.POST['industry']
        com.Company_Type = request.POST['ctype']
        com.Accountant = request.POST['staff']
        com.Payment_Type = request.POST['paid']
        com.Registration_Type = request.POST['reg_type']
        com.Contact = request.POST['phone']

        dis_code = request.POST['dis_code']
        if dis_code != '':
            if Fin_Distributors_Details.objects.filter(Distributor_Code = dis_code).exists():
                com.Distributor_id = Fin_Distributors_Details.objects.get(Distributor_Code = dis_code)
            else :
                messages.info(request, 'Sorry, distributor id does not exists')
                return redirect('Fin_CompanyReg2',id)
            
        
        # Create a Trial period instance and save to company details
        com.Start_Date=date.today()
        days=int(30)
        end= date.today() + timedelta(days=days)
        com.End_date=end
        com.save()

        # Create a Trial period instance and populate it with form data
        trial_period=TrialPeriod(
            company=com,
            start_date=date.today(),
            end_date=end
        )
        trial_period.save() # Save the instance to the database

        return redirect('Fin_Modules',id)

   
def Fin_Modules(request,id):
    data = Fin_Login_Details.objects.get(id=id)
    return render(request,'company/Fin_Modules.html',{'data':data})    

def Fin_Add_Modules(request,id):
    if request.method == 'POST':
        data = Fin_Login_Details.objects.get(id=id)
        com = Fin_Company_Details.objects.get(Login_Id=data.id)

        # -----ITEMS----

        Items = request.POST.get('c1')
        Price_List = request.POST.get('c2')
        Stock_Adjustment = request.POST.get('c3')


        # --------- CASH & BANK-----
        Cash_in_hand = request.POST.get('c4')
        Offline_Banking = request.POST.get('c5')
        Bank_Reconciliation = request.POST.get('c6')
        UPI = request.POST.get('c7')
        Bank_Holders = request.POST.get('c8')
        Cheque = request.POST.get('c9')
        Loan_Account = request.POST.get('c10')

        #  ------SALES MODULE -------
        Customers = request.POST.get('c11')
        Invoice  = request.POST.get('c12')
        Estimate = request.POST.get('c13')
        Sales_Order = request.POST.get('c14')
        Recurring_Invoice = request.POST.get('c15')
        Retainer_Invoice = request.POST.get('c16')
        Credit_Note = request.POST.get('c17')
        Payment_Received = request.POST.get('c18')
        Delivery_Challan = request.POST.get('c19')

        #  ---------PURCHASE MODULE--------- 
        Vendors = request.POST.get('c20') 
        Bills  = request.POST.get('c21')
        Recurring_Bills = request.POST.get('c22')
        Debit_Note = request.POST.get('c23')
        Purchase_Order = request.POST.get('c24')
        Expenses = request.POST.get('c25')
        Recurring_Expenses = request.POST.get('c26')
        Payment_Made = request.POST.get('c27')
        EWay_Bill = request.POST.get('c28')

        #  -------ACCOUNTS--------- 
        Chart_of_Accounts = request.POST.get('c29') 
        Manual_Journal = request.POST.get('c30')
        Reconcile  = request.POST.get('c36')


        # -------PAYROLL------- 
        Employees = request.POST.get('c31')
        Employees_Loan = request.POST.get('c32')
        Holiday = request.POST.get('c33') 
        Attendance = request.POST.get('c34')
        Salary_Details = request.POST.get('c35')

        modules = Fin_Modules_List(Items = Items,Price_List = Price_List,Stock_Adjustment = Stock_Adjustment,
            Cash_in_hand = Cash_in_hand,Offline_Banking = Offline_Banking,Bank_Reconciliation = Bank_Reconciliation ,
            UPI = UPI,Bank_Holders = Bank_Holders,Cheque = Cheque,Loan_Account = Loan_Account,
            Customers = Customers,Invoice = Invoice,Estimate = Estimate,Sales_Order = Sales_Order,
            Recurring_Invoice = Recurring_Invoice,Retainer_Invoice = Retainer_Invoice,Credit_Note = Credit_Note,
            Payment_Received = Payment_Received,Delivery_Challan = Delivery_Challan,
            Vendors = Vendors,Bills = Bills,Recurring_Bills = Recurring_Bills,Debit_Note = Debit_Note,
            Purchase_Order = Purchase_Order,Expenses = Expenses,Recurring_Expenses = Recurring_Expenses,
            Payment_Made = Payment_Made,EWay_Bill = EWay_Bill,
            Chart_of_Accounts = Chart_of_Accounts,Manual_Journal = Manual_Journal,Reconcile = Reconcile ,
            Employees = Employees,Employees_Loan = Employees_Loan,Holiday = Holiday,
            Attendance = Attendance,Salary_Details = Salary_Details,
            Login_Id = data,company_id = com)
        
        modules.save()

        #Adding Default Units under company
        Fin_Units.objects.create(Company=com, name='BOX')
        Fin_Units.objects.create(Company=com, name='NUMBER')
        Fin_Units.objects.create(Company=com, name='PACK')


        #Adding Default loan terms under company by TINTO MT
        Fin_Loan_Term.objects.create(company=com, duration=3,term='MONTH',days=90)
        Fin_Loan_Term.objects.create(company=com, duration='6',term='MONTH',days=180)
        Fin_Loan_Term.objects.create(company=com, duration=1,term='YEAR',days=365)

        # Adding default accounts for companies

        created_date = date.today()
        account_info = [
            {"company_id": com, "Login_Id": data, "account_type": "Accounts Payable", "account_name": "Accounts Payable", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "This is an account of all the money which you owe to others like a pending bill payment to a vendor,etc.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Accounts Receivable", "account_name": "Accounts Receivable", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "The money that customers owe you becomes the accounts receivable. A good example of this is a payment expected from an invoice sent to your customer.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "Advance Tax", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Any tax which is paid in advance is recorded into the advance tax account. This advance tax payment could be a quarterly, half yearly or yearly payment", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Advertising and Marketing", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Your expenses on promotional, marketing and advertising activities like banners, web-adds, trade shows, etc. are recorded in advertising and marketing account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Automobile Expense", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Transportation related expenses like fuel charges and maintenance charges for automobiles, are included to the automobile expense account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Bad Debt", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Any amount which is lost and is unrecoverable is recorded into the bad debt account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Bank Fees and Charges", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": " Any bank fees levied is recorded into the bank fees and charges account. A bank account maintenance fee, transaction charges, a late payment fee are some examples.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Consultant Expense", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Charges for availing the services of a consultant is recorded as a consultant expenses. The fees paid to a soft skills consultant to impart personality development training for your employees is a good example.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Cost Of Goods Sold", "account_name": "Cost of Goods Sold", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account which tracks the value of the goods sold.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Credit Card Charges", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": " Service fees for transactions , balance transfer fees, annual credit fees and other charges levied on a credit card are recorded into the credit card account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Depreciation Expense", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Any depreciation in value of your assets can be captured as a depreciation expense.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Income", "account_name": "Discount", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Any reduction on your selling price as a discount can be recorded into the discount account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Equity", "account_name": "Drawings", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "The money withdrawn from a business by its owner can be tracked with this account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "Employee Advance", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Money paid out to an employee in advance can be tracked here till it's repaid or shown to be spent for company purposes", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Liability", "account_name": "Employee Reimbursements", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "This account can be used to track the reimbursements that are due to be paid out to employees.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Expense", "account_name": "Exchange Gain or Loss", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Changing the conversion rate can result in a gain or a loss. You can record this into the exchange gain or loss account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Fixed Asset", "account_name": "Furniture and Equipment", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Purchases of furniture and equipment for your office that can be used for a long period of time usually exceeding one year can be tracked with this account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Income", "account_name": "General Income", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "A general category of account where you can record any income which cannot be recorded into any other category", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Income", "account_name": "Interest Income", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "A percentage of your balances and deposits are given as interest to you by your banks and financial institutions. This interest is recorded into the interest income account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Stock", "account_name": "Inventory Asset", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An account which tracks the value of goods in your inventory.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "IT and Internet Expenses", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Money spent on your IT infrastructure and usage like internet connection, purchasing computer equipment etc is recorded as an IT and Computer Expense", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Janitorial Expense", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "All your janitorial and cleaning expenses are recorded into the janitorial expenses account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Income", "account_name": "Late Fee Income", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Any late fee income is recorded into the late fee income account. The late fee is levied when the payment for an invoice is not received by the due date", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Lodging", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Any expense related to putting up at motels etc while on business travel can be entered here.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Meals and Entertainment", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Expenses on food and entertainment are recorded into this account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Office Supplies", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "All expenses on purchasing office supplies like stationery are recorded into the office supplies account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Other Current Liability", "account_name": "Opening Balance Adjustments", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "This account will hold the difference in the debits and credits entered during the opening balance.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Equity", "account_name": "Opening Balance Offset", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "This is an account where you can record the balance from your previous years earning or the amount set aside for some activities. It is like a buffer account for your funds.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Income", "account_name": "Other Charges", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Miscellaneous charges like adjustments made to the invoice can be recorded in this account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Other Expenses", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": " Any minor expense on activities unrelated to primary business operations is recorded under the other expense account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Equity", "account_name": "Owner's Equity", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "The owners rights to the assets of a company can be quantified in the owner's equity account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Cash", "account_name": "Petty Cash", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "It is a small amount of cash that is used to pay your minor or casual expenses rather than writing a check.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Postage", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Your expenses on ground mails, shipping and air mails can be recorded under the postage account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "Prepaid Expenses", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An asset account that reports amounts paid in advance while purchasing goods or services from a vendor.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Printing and Stationery", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": " Expenses incurred by the organization towards printing and stationery.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Rent Expense", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "The rent paid for your office or any space related to your business can be recorded as a rental expense.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Repairs and Maintenance", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "The costs involved in maintenance and repair of assets is recorded under this account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Equity", "account_name": "Retained Earnings", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "The earnings of your company which are not distributed among the share holders is accounted as retained earnings.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Salaries and Employee Wages", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Salaries for your employees and the wages paid to workers are recorded under the salaries and wages account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Income", "account_name": "Sales", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": " The income from the sales in your business is recorded under the sales account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Income", "account_name": "Shipping Charge", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Shipping charges made to the invoice will be recorded in this account.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Other Liability", "account_name": "Tag Adjustments", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": " This adjustment account tracks the transfers between different reporting tags.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Liability", "account_name": "Tax Payable", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "The amount of money which you owe to your tax authority is recorded under the tax payable account. This amount is a sum of your outstanding in taxes and the tax charged on sales.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Telephone Expense", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "The expenses on your telephone, mobile and fax usage are accounted as telephone expenses.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Travel Expense", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": " Expenses on business travels like hotel bookings, flight charges, etc. are recorded as travel expenses.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Uncategorized", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "This account can be used to temporarily track expenses that are yet to be identified and classified into a particular category.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Cash", "account_name": "Undeposited Funds", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "Record funds received by your company yet to be deposited in a bank as undeposited funds and group them as a current asset in your balance sheet.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Liability", "account_name": "Unearned Revenue", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "A liability account that reports amounts received in advance of providing goods or services. When the goods or services are provided, this account balance is decreased and a revenue account is increased.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Equity", "account_name": "Capital Stock", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": " An equity account that tracks the capital introduced when a business is operated through a company or corporation.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Long Term Liability", "account_name": "Construction Loans", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account that tracks the amount you repay for construction loans.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Contract Assets", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An asset account to track the amount that you receive from your customers while you're yet to complete rendering the services.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Depreciation And Amortisation", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account that is used to track the depreciation of tangible assets and intangible assets, which is amortization.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Equity", "account_name": "Distributions", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An equity account that tracks the payment of stock, cash or physical products to its shareholders.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Equity", "account_name": "Dividends Paid", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An equity account to track the dividends paid when a corporation declares dividend on its common stock.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Other Current Liability", "account_name": "GST Payable", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Liability", "account_name": "Output CGST", "credit_card_no": "", "sub_account": True, "parent_account": "GST Payable", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Liability", "account_name": "Output IGST", "credit_card_no": "", "sub_account": True, "parent_account": "GST Payable", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Liability", "account_name": "Output SGST", "credit_card_no": "", "sub_account": True, "parent_account": "GST Payable", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "GST TCS Receivable", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "GST TDS Receivable", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "Input Tax Credits", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "Input CGST", "credit_card_no": "", "sub_account": True, "parent_account": "Input Tax Credits", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "Input IGST", "credit_card_no": "", "sub_account": True, "parent_account": "Input Tax Credits", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "Input SGST", "credit_card_no": "", "sub_account": True, "parent_account": "Input Tax Credits", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Equity", "account_name": "Investments", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An equity account used to track the amount that you invest.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Cost Of Goods Sold", "account_name": "Job Costing", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account to track the costs that you incur in performing a job or a task.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Cost Of Goods Sold", "account_name": "Labor", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account that tracks the amount that you pay as labor.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Cost Of Goods Sold", "account_name": "Materials", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account that tracks the amount you use in purchasing materials.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Merchandise", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account to track the amount spent on purchasing merchandise.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Long Term Liability", "account_name": "Mortgages", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account that tracks the amounts you pay for the mortgage loan.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Raw Materials And Consumables", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account to track the amount spent on purchasing raw materials and consumables.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "Reverse Charge Tax Input but not due", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "The amount of tax payable for your reverse charge purchases can be tracked here.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "Sales to Customers (Cash)", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Cost Of Goods Sold", "account_name": "Subcontractor", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": " An expense account to track the amount that you pay subcontractors who provide service to you.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Other Current Liability", "account_name": "TDS Payable", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Other Current Asset", "account_name": "TDS Receivable", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Expense", "account_name": "Transportation Expense", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "An expense account to track the amount spent on transporting goods or providing services.", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},

            {"company_id": com, "Login_Id": data, "account_type": "Bank", "account_name": "Bank Account", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Cash", "account_name": "Cash Account", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Credit Card", "account_name": "Credit Card Account", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
            {"company_id": com, "Login_Id": data, "account_type": "Payment Clearing Account", "account_name": "Payment Clearing Account", "credit_card_no": "", "sub_account": "", "parent_account": "", "bank_account_no": None, "account_code": "", "description": "", "balance":0.0, "balance_type" : "", "date" : created_date, "create_status": "default", "status": "active"},
        ]

        for account in account_info:
            if not Fin_Chart_Of_Account.objects.filter(Company = com,account_name=account['account_name']).exists():
                new_account = Fin_Chart_Of_Account(Company=account['company_id'],LoginDetails=account['Login_Id'],account_name=account['account_name'],account_type=account['account_type'],credit_card_no=account['credit_card_no'],sub_account=account['sub_account'],parent_account=account['parent_account'],bank_account_no=account['bank_account_no'],account_code=account['account_code'],description=account['description'],balance=account['balance'],balance_type=account['balance_type'],create_status=account['create_status'],status=account['status'],date=account['date'])
                new_account.save()

        #Adding Default Customer payment under company
        Fin_Company_Payment_Terms.objects.create(Company=com, term_name='Due on Receipt', days=0)
        Fin_Company_Payment_Terms.objects.create(Company=com, term_name='NET 30', days=30)
        Fin_Company_Payment_Terms.objects.create(Company=com, term_name='NET 60', days=60)  
        
        #sumayya-------- Adding default repeat every values for company

        Fin_CompanyRepeatEvery.objects.create(company=com, repeat_every = '3 Month', repeat_type='Month',duration = 3, days=90)
        Fin_CompanyRepeatEvery.objects.create(company=com, repeat_every = '6 Month', repeat_type='Month',duration = 6, days=180)
        Fin_CompanyRepeatEvery.objects.create(company=com, repeat_every = '1 Year', repeat_type='Year',duration=1,days=360)


        # Creating default transport entries with company information---aiswarya
        Fin_Eway_Transportation.objects.create(Name='Bus', Type='Road', Company=com)
        Fin_Eway_Transportation.objects.create(Name='Train', Type='Rail', Company=com)
        Fin_Eway_Transportation.objects.create(Name='Car', Type='Road', Company=com)

        
        Stock_Reason.objects.create(company=com,login_details=data,reason='Stock on fire')
        Stock_Reason.objects.create(company=com,login_details=data,reason='High demand of goods')
        Stock_Reason.objects.create(company=com,login_details=data,reason='Stock written off')
        Stock_Reason.objects.create(company=com,login_details=data,reason='Inventory Revaluation')


        print("add modules")
        return redirect('Fin_CompanyReg')
    return redirect('Fin_Modules',id)

def Fin_Edit_Modules(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        module_request=Fin_Modules_List.objects.filter(company_id=com, status = 'pending')
           
        return render(request,'company/Fin_Edit_Modules.html',{'allmodules':allmodules,'com':com,'module_request': module_request,})
       
    else:
       return redirect('/') 
       
def Fin_Edit_Modules_Action(request): 
    if 's_id' in request.session:
        s_id = request.session['s_id']
        
        if request.method == 'POST':
            data = Fin_Login_Details.objects.get(id = s_id)
        
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

            # -----ITEMS----

            Items = request.POST.get('c1')
            Price_List = request.POST.get('c2')
            Stock_Adjustment = request.POST.get('c3')


            # --------- CASH & BANK-----
            Cash_in_hand = request.POST.get('c4')
            Offline_Banking = request.POST.get('c5')
            Bank_Reconciliation = request.POST.get('c6')
            UPI = request.POST.get('c7')
            Bank_Holders = request.POST.get('c8')
            Cheque = request.POST.get('c9')
            Loan_Account = request.POST.get('c10')

            #  ------SALES MODULE -------
            Customers = request.POST.get('c11')
            Invoice  = request.POST.get('c12')
            Estimate = request.POST.get('c13')
            Sales_Order = request.POST.get('c14')
            Recurring_Invoice = request.POST.get('c15')
            Retainer_Invoice = request.POST.get('c16')
            Credit_Note = request.POST.get('c17')
            Payment_Received = request.POST.get('c18')
            Delivery_Challan = request.POST.get('c19')

            #  ---------PURCHASE MODULE--------- 
            Vendors = request.POST.get('c20') 
            Bills  = request.POST.get('c21')
            Recurring_Bills = request.POST.get('c22')
            Debit_Note = request.POST.get('c23')
            Purchase_Order = request.POST.get('c24')
            Expenses = request.POST.get('c25')
            Recurring_Expenses = request.POST.get('c26')
            Payment_Made = request.POST.get('c27')
            EWay_Bill = request.POST.get('c28')

            #  -------ACCOUNTS--------- 
            Chart_of_Accounts = request.POST.get('c29') 
            Manual_Journal = request.POST.get('c30')
            Reconcile  = request.POST.get('c36')


            # -------PAYROLL------- 
            Employees = request.POST.get('c31')
            Employees_Loan = request.POST.get('c32')
            Holiday = request.POST.get('c33') 
            Attendance = request.POST.get('c34')
            Salary_Details = request.POST.get('c35')

            modules = Fin_Modules_List(Items = Items,Price_List = Price_List,Stock_Adjustment = Stock_Adjustment,
                Cash_in_hand = Cash_in_hand,Offline_Banking = Offline_Banking,Bank_Reconciliation = Bank_Reconciliation ,
                UPI = UPI,Bank_Holders = Bank_Holders,Cheque = Cheque,Loan_Account = Loan_Account,
                Customers = Customers,Invoice = Invoice,Estimate = Estimate,Sales_Order = Sales_Order,
                Recurring_Invoice = Recurring_Invoice,Retainer_Invoice = Retainer_Invoice,Credit_Note = Credit_Note,
                Payment_Received = Payment_Received,Delivery_Challan = Delivery_Challan,
                Vendors = Vendors,Bills = Bills,Recurring_Bills = Recurring_Bills,Debit_Note = Debit_Note,
                Purchase_Order = Purchase_Order,Expenses = Expenses,Recurring_Expenses = Recurring_Expenses,
                Payment_Made = Payment_Made,EWay_Bill = EWay_Bill,
                Chart_of_Accounts = Chart_of_Accounts,Manual_Journal = Manual_Journal,Reconcile = Reconcile ,
                Employees = Employees,Employees_Loan = Employees_Loan,Holiday = Holiday,
                Attendance = Attendance,Salary_Details = Salary_Details,
                Login_Id = data,company_id = com,status = 'pending')
            
            modules.save()
            data1=Fin_Modules_List.objects.filter(company_id = com).update(update_action=1)

            if com.Registration_Type == 'self':
                noti = Fin_ANotification(Login_Id = data,Modules_List = modules,Title = "Module Updation",Discription = com.Company_name + " wants to update current Modules")
                noti.save()
            else:
                noti = Fin_DNotification(Distributor_id = com.Distributor_id,Login_Id = data,Modules_List = modules,Title = "Module Updation",Discription = com.Company_name + " wants to update current Modules")
                noti.save()   

            print("edit modules")
            return redirect('Fin_Company_Profile')
        return redirect('Fin_Edit_Modules')
       
    else:
       return redirect('/')   
    


def Fin_Company_Profile(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            terms = Fin_Payment_Terms.objects.all()
            
            payment_request=Fin_Payment_Terms_updation.objects.filter(Login_Id=com.Login_Id,status='New').exists()

            noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com)
            n = len(noti)
            return render(request,'company/Fin_Company_Profile.html',{'allmodules':allmodules,'com':com,'data':data,'terms':terms,'noti':noti,'n':n,'payment_request':payment_request})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            return render(request,'company/Fin_Company_Profile.html',{'allmodules':allmodules,'com':com,'data':data})
        
    else:
       return redirect('/') 

    
def Fin_Staff_Req(request): 
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        data1 = Fin_Staff_Details.objects.filter(company_id = com.id,Company_approval_status = "NULL")
        allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        return render(request,'company/Fin_Staff_Req.html',{'com':com,'data':data,'allmodules':allmodules,'data1':data1})
    else:
       return redirect('/') 

def Fin_Staff_Req_Accept(request,id):
   data = Fin_Staff_Details.objects.get(id=id)
   data.Company_approval_status = 'Accept'
   data.save()
   return redirect('Fin_Staff_Req')

def Fin_Staff_Req_Reject(request,id):
   data = Fin_Staff_Details.objects.get(id=id)
   data.Login_Id.delete()
   data.delete()
   return redirect('Fin_Staff_Req')  

def Fin_Staff_delete(request,id):
   data = Fin_Staff_Details.objects.get(id=id)
   data.Login_Id.delete()
   data.delete()
   return redirect('Fin_All_Staff')  

def Fin_All_Staff(request): 
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        data1 = Fin_Staff_Details.objects.filter(company_id = com.id,Company_approval_status = "Accept")
        allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        return render(request,'company/Fin_All_Staff.html',{'com':com,'data':data,'allmodules':allmodules,'data1':data1})
    else:
       return redirect('/')  


def Fin_Change_payment_terms(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        
        if request.method == 'POST':
            data = Fin_Login_Details.objects.get(id = s_id)
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            pt = request.POST['payment_term']

            pay = Fin_Payment_Terms.objects.get(id=pt)

            data1 = Fin_Payment_Terms_updation(Login_Id = data,Payment_Term = pay)
            data1.save()

            if com.Registration_Type == 'self':
                noti = Fin_ANotification(Login_Id = data,PaymentTerms_updation = data1,Title = "Change Payment Terms",Discription = com.Company_name + " wants to subscribe a new plan")
                noti.save()
            else:
                noti = Fin_DNotification(Distributor_id = com.Distributor_id,Login_Id = data,PaymentTerms_updation = data1,Title = "Change Payment Terms",Discription = com.Company_name + " wants to subscribe a new plan")
                noti.save()      


        
            return redirect('Fin_Company_Profile')
    else:
       return redirect('/') 
    
def Fin_Wrong(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
           com = Fin_Distributors_Details.objects.get(Login_Id = s_id)     
        terms = Fin_Payment_Terms.objects.all()
        context= {
            'com':com,
            'terms':terms
        }
        return render(request,"company/Fin_Wrong.html",context)    
    else:
       return redirect('/') 
    
def Fin_Wrong_Action(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        
        if request.method == 'POST':
            data = Fin_Login_Details.objects.get(id = s_id)

            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id = s_id)
                pt = request.POST['payment_term']

                pay = Fin_Payment_Terms.objects.get(id=pt)

                data1 = Fin_Payment_Terms_updation(Login_Id = data,Payment_Term = pay)
                data1.save()

                if com.Registration_Type == 'self':
                    noti = Fin_ANotification(Login_Id = data,PaymentTerms_updation = data1,Title = "Change Payment Terms",Discription = com.Company_name + " is change Payment Terms")
                    noti.save()
                else:
                    noti = Fin_DNotification(Distributor_id = com.Distributor_id,Login_Id = data,PaymentTerms_updation = data1,Title = "Change Payment Terms",Discription = com.Company_name + " is change Payment Terms")
                    noti.save()    

                module_request=Fin_Modules_List.objects.filter(company_id=com, status = 'pending')
                if module_request:
                    module_request.delete()

                allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
                    
                return render(request,'company/Fin_TermUpdate_Modules.html',{'allmodules':allmodules,'com':com})
                # return redirect('Fin_CompanyReg')
            else:
                com = Fin_Distributors_Details.objects.get(Login_Id = s_id)
                pt = request.POST['payment_term']

                pay = Fin_Payment_Terms.objects.get(id=pt)

                data1 = Fin_Payment_Terms_updation(Login_Id = data,Payment_Term = pay)
                data1.save()

                noti = Fin_ANotification(Login_Id = data,PaymentTerms_updation = data1,Title = "Change Payment Terms",Discription = com.Login_Id.First_name + com.Login_Id.Last_name + " is change Payment Terms")
                noti.save()

                return redirect('Fin_DistributorReg')



    else:
       return redirect('/')  

def Fin_Edit_Company_profile(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com)
        n = len(noti)

        context ={
            'com':com,
            'data':data,
            'n':n,
            'noti':noti


        }

        return render(request,"company/Fin_Edit_Company_profile.html",context)    
    else:
       return redirect('/') 
    

def Fin_Edit_Company_profile_Action(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        if request.method == 'POST':
            com.Login_Id.First_name = request.POST['first_name']
            com.Login_Id.Last_name = request.POST['last_name']
            com.Email = request.POST['email']
            com.Contact = request.POST['contact']
            com.Company_name = request.POST['cname']
            com.Address = request.POST['caddress']
            com.City = request.POST['city']
            com.State = request.POST['state']
            com.Pincode = request.POST['pincode']
            com.Business_name = request.POST['bname']
            com.Pan_NO = request.POST['pannum']
            com.GST_Type = request.POST.get('gsttype')
            com.GST_NO = request.POST.get('gstnum')
            com.Industry = request.POST['industry']
            com.Company_Type = request.POST['ctype']
            com.Image = request.FILES.get('img')
            
            gst_type=request.POST.get('gsttype')
            gst_no=request.POST.get('gstnum')
            gst=['unregistered Business','Overseas','Consumer']
            if gst_type in gst:
                com.Login_Id.save()
                com.save()
                messages.success(request,'Profile Updated')
                return redirect('Fin_Company_Profile')
            else:
                if gst_no == '':

                    messages.error(request,'GST number cannot be empty,')
                    return redirect('Fin_Edit_Company_profile')
                else:
                    com.Login_Id.save()
                    com.save()
                    messages.success(request,'Profile Updated')
                    return redirect('Fin_Company_Profile')

           
        return redirect('Fin_Edit_Company_profile')     
    else:
       return redirect('/') 
    
def Fin_Edit_Staff_profile(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        com = Fin_Staff_Details.objects.get(Login_Id = s_id)

        context ={
            'com':com
        }

        return render(request,"company/Fin_Edit_Staff_profile.html",context)    
    else:
       return redirect('/')    
    
def Fin_Edit_Staff_profile_Action(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        if request.method == 'POST':
            com.Login_Id.First_name = request.POST['first_name']
            com.Login_Id.Last_name = request.POST['last_name']
            com.Email = request.POST['email']
            com.contact = request.POST['contact']
            
            com.img = request.FILES.get('img')
            

            com.Login_Id.save()
            com.save()

            return redirect('Fin_Company_Profile')
        return redirect('Fin_Edit_Staff_profile')     
    else:
       return redirect('/')     
      
    
# ---------------------------end company------------------------------------     


# ------------------shemeem-----Items&ChartOfAccounts-----------------------

# Items
def Fin_items(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            items = Fin_Items.objects.filter(Company = com)
            return render(request,'company/Fin_Items.html',{'allmodules':allmodules,'com':com,'data':data,'items':items})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            items = Fin_Items.objects.filter(Company = com.company_id)
            return render(request,'company/Fin_Items.html',{'allmodules':allmodules,'com':com,'data':data,'items':items})
    else:
       return redirect('/')

def Fin_createItem(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            units = Fin_Units.objects.filter(Company = com)
            acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')
            return render(request,'company/Fin_Add_Item.html',{'allmodules':allmodules,'com':com,'data':data,'units':units, 'accounts':acc})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            units = Fin_Units.objects.filter(Company = com.company_id)
            acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com.company_id).order_by('account_name')
            return render(request,'company/Fin_Add_Item.html',{'allmodules':allmodules,'com':com,'data':data,'units':units, 'accounts':acc})
    else:
       return redirect('/')

def Fin_createNewItem(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            name = request.POST['name']
            type = request.POST['type']
            unit = request.POST.get('unit')
            if request.POST['hsn']:
                hsn = request.POST['hsn']
                sac = None
            elif request.POST['sac']:
                sac = request.POST['sac']
                hsn = None
            tax = request.POST['taxref']
            gstTax = 0 if tax == 'non taxable' else request.POST['intra_st']
            igstTax = 0 if tax == 'non taxable' else request.POST['inter_st']
            purPrice = request.POST['pcost']
            purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
            purDesc = request.POST['pur_desc']
            salePrice = request.POST['salesprice']
            saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
            saleDesc = request.POST['sale_desc']
            inventory = request.POST.get('invacc')
            stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
            stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
            minStock = request.POST['min_stock']
            createdDate = date.today()
            
            #save item and transaction if item or hsn doesn't exists already
            if Fin_Items.objects.filter(Company=com, name__iexact=name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif Fin_Items.objects.filter(Q(Company=com) & (Q(hsn__iexact=hsn) & Q(hsn__isnull=False))).exists():
                res = f"HSN - {hsn} already exists, try another.!"
                return JsonResponse({'status': False, 'message':res})
            elif Fin_Items.objects.filter(Q(Company=com) & (Q(sac__iexact=sac) & Q(sac__isnull=False))).exists():
                res = f"SAC - {sac} already exists, try another.!"
                return JsonResponse({'status': False, 'message':res})
            else:
                item = Fin_Items(
                    Company = com,
                    LoginDetails = data,
                    name = name,
                    item_type = type,
                    unit = unit,
                    hsn = hsn,
                    sac = sac,
                    tax_reference = tax,
                    intra_state_tax = gstTax,
                    inter_state_tax = igstTax,
                    sales_account = saleAccount,
                    selling_price = salePrice,
                    sales_description = saleDesc,
                    purchase_account = purAccount,
                    purchase_price = purPrice,
                    purchase_description = purDesc,
                    item_created = createdDate,
                    min_stock = minStock,
                    inventory_account = inventory,
                    opening_stock = stock,
                    current_stock = stock,
                    stock_in = 0,
                    stock_out = 0,
                    stock_unit_rate = stockUnitRate,
                    status = 'Active'
                )
                item.save()

                #save transaction

                Fin_Items_Transaction_History.objects.create(
                    Company = com,
                    LoginDetails = data,
                    item = item,
                    action = 'Created'
                )
                
                return redirect(Fin_items)

        return redirect(Fin_createItem)
    else:
       return redirect('/')

def Fin_viewItem(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        item = Fin_Items.objects.get(id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        hist = Fin_Items_Transaction_History.objects.filter(Company = cmp, item = item).last()
        cmt = Fin_Items_Comments.objects.filter(item = item)
        
        transactions = []
        if item.opening_stock != 0:
            det = {
                'type':'Opening Stock',
                'name':'',
                'date':item.item_created,
                'qty': item.opening_stock,
                'price':item.selling_price,
                'status': item.status
            }
            transactions.append(det)
        estItems = Fin_Estimate_Items.objects.filter(Item = item)
        if estItems:
            for es in estItems:
                det = {
                    'type':'Estimate',
                    'name':es.Estimate.Customer.first_name+" "+es.Estimate.Customer.last_name,
                    'date':es.Estimate.estimate_date,
                    'qty': es.quantity,
                    'price':es.price,
                    'status':es.Estimate.status
                }
                transactions.append(det)

        soItems = Fin_Sales_Order_Items.objects.filter(Item = item)
        if soItems:
            for so in soItems:
                det = {
                    'type':'Sales Order',
                    'name':so.SalesOrder.Customer.first_name+" "+so.SalesOrder.Customer.last_name,
                    'date':so.SalesOrder.sales_order_date,
                    'qty': so.quantity,
                    'price':so.price,
                    'status':so.SalesOrder.status
                }
                transactions.append(det)

        invItems = Fin_Invoice_Items.objects.filter(Item = item)
        if invItems:
            for iv in invItems:
                det = {
                    'type':'Invoice',
                    'name':iv.Invoice.Customer.first_name+" "+iv.Invoice.Customer.last_name,
                    'date':iv.Invoice.invoice_date,
                    'qty': iv.quantity,
                    'price':iv.price,
                    'status':iv.Invoice.status
                }
                transactions.append(det)

        crdItems = Fin_CreditNote_Items.objects.filter(items = item)
        if crdItems:
            for cr in crdItems:
                det = {
                    'type':'Credit Note',
                    'name':cr.creditnote.Customer.first_name+" "+cr.creditnote.Customer.last_name,
                    'date':cr.creditnote.creditnote_date,
                    'qty': cr.quantity,
                    'price':cr.price,
                    'status':cr.creditnote.status
                }
                transactions.append(det)

        rtInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = item)
        if rtInvItems:
            for rt in rtInvItems:
                det = {
                    'type':'Retainer Invoice',
                    'name':rt.Ret_Inv.Customer.first_name+" "+rt.Ret_Inv.Customer.last_name,
                    'date':rt.Ret_Inv.Retainer_Invoice_date,
                    'qty': rt.Quantity,
                    'price':rt.Price,
                    'status':rt.Ret_Inv.status
                }
                transactions.append(det)

        chlItems = Fin_Delivery_Challan_Items.objects.filter(items = item)
        if chlItems:
            for ch in chlItems:
                det = {
                    'type':'Delivery Challan',
                    'name':ch.delivery_challan.Customer.first_name+" "+ch.delivery_challan.Customer.last_name,
                    'date':ch.delivery_challan.challan_date,
                    'qty': ch.quantity,
                    'price':ch.price,
                    'status':ch.delivery_challan.status
                }
                transactions.append(det)

        recItems = Fin_Recurring_Invoice_Items.objects.filter(Item = item)
        if recItems:
            for rec in recItems:
                det = {
                    'type':'Recurring Invoice',
                    'name':rec.RecInvoice.Customer.first_name+" "+rec.RecInvoice.Customer.last_name,
                    'date':rec.RecInvoice.start_date,
                    'qty': rec.quantity,
                    'price':rec.price,
                    'status':rec.RecInvoice.status
                }
                transactions.append(det)

        poItems = Fin_Purchase_Order_Items.objects.filter(Item = item)
        if poItems:
            for po in poItems:
                det = {
                    'type':'Purchase Order',
                    'name':po.PurchaseOrder.Vendor.first_name+" "+po.PurchaseOrder.Vendor.last_name,
                    'date':po.PurchaseOrder.purchase_order_date,
                    'qty': po.quantity,
                    'price':po.price,
                    'status':po.PurchaseOrder.status
                }
                transactions.append(det)

        blItems = Fin_Purchase_Bill_Item.objects.filter(item = item)
        if blItems:
            for bl in blItems:
                det = {
                    'type':'Bill',
                    'name':bl.pbill.vendor.first_name+" "+bl.pbill.vendor.last_name,
                    'date':bl.pbill.bill_date,
                    'qty': bl.qty,
                    'price':bl.price,
                    'status':bl.pbill.status
                }
                transactions.append(det)

        dbtItems = Fin_Debit_Note_Items.objects.filter(items = item)
        if dbtItems:
            for dbt in dbtItems:
                det = {
                    'type':'Debit Note',
                    'name':dbt.debit_note.Vendor.first_name+" "+dbt.debit_note.Vendor.last_name,
                    'date':dbt.debit_note.debit_note_date,
                    'qty': dbt.quantity,
                    'price':dbt.price,
                    'status':dbt.debit_note.status
                }
                transactions.append(det)

        rbItems = Fin_Recurring_Bill_Items.objects.filter(items = item)
        if rbItems:
            for rb in rbItems:
                det = {
                    'type':'Recurring Bill',
                    'name':rb.recurring_bill.vendor.first_name+" "+rb.recurring_bill.vendor.last_name,
                    'date':rb.recurring_bill.date,
                    'qty': rb.quantity,
                    'price':rb.price,
                    'status':rb.recurring_bill.status
                }
                transactions.append(det)

        ewItems = Fin_Eway_Items.objects.filter(Item = item)
        if ewItems:
            for ew in ewItems:
                det = {
                    'type':'EWay Bill',
                    'name':ew.Ewaybills.Customer.first_name+" "+ew.Ewaybills.Customer.last_name,
                    'date':ew.Ewaybills.BillDate,
                    'qty': ew.quantity,
                    'price':ew.price,
                    'status':ew.Ewaybills.Status
                }
                transactions.append(det)
        
        
        context = {'allmodules':allmodules,'com':com,'data':data,'item':item, 'history': hist,'comments':cmt, 'transactions':transactions}
        return render(request,'company/Fin_View_Item.html',context)
    else:
       return redirect('/')
    
def Fin_saveItemUnit(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == "POST":
            name = request.POST['name'].upper()

            if not Fin_Units.objects.filter(Company = com, name__iexact = name).exists():
                unit = Fin_Units(
                    Company = com,
                    name = name
                )
                unit.save()
                return JsonResponse({'status':True})
            else:
                return JsonResponse({'status':False, 'message':'Unit already exists.!'})

def Fin_getItemUnits(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        list= []
        option_objects = Fin_Units.objects.filter(Company = com)

        for item in option_objects:
            itemUnitDict = {
                'name': item.name,
            }
            list.append(itemUnitDict)

        return JsonResponse({'units':list},safe=False)
    
def Fin_createNewAccountFromItems(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            name = request.POST['account_name']
            type = request.POST['account_type']
            subAcc = True if request.POST['subAccountCheckBox'] == 'true' else False
            parentAcc = request.POST['parent_account'] if subAcc == True else None
            accCode = request.POST['account_code']
            bankAccNum = None
            desc = request.POST['description']
            
            createdDate = date.today()
            
            #save account and transaction if account doesn't exists already
            if Fin_Chart_Of_Account.objects.filter(Company=com, account_name__iexact=name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            else:
                account = Fin_Chart_Of_Account(
                    Company = com,
                    LoginDetails = data,
                    account_type = type,
                    account_name = name,
                    account_code = accCode,
                    description = desc,
                    balance = 0.0,
                    balance_type = None,
                    credit_card_no = None,
                    sub_account = subAcc,
                    parent_account = parentAcc,
                    bank_account_no = bankAccNum,
                    date = createdDate,
                    create_status = 'added',
                    status = 'active'
                )
                account.save()

                #save transaction

                Fin_ChartOfAccount_History.objects.create(
                    Company = com,
                    LoginDetails = data,
                    account = account,
                    action = 'Created'
                )
                
                list= []
                account_objects = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense'), Company=com).order_by('account_name')

                for account in account_objects:
                    accounts = {
                        'name': account.account_name,
                    }
                    list.append(accounts)

                return JsonResponse({'status':True,'accounts':list},safe=False)

        return JsonResponse({'status':False})
    else:
       return redirect('/')
    
def Fin_changeItemStatus(request,id,status):
    if 's_id' in request.session:
        
        item = Fin_Items.objects.get(id = id)
        item.status = status
        item.save()
        return redirect(Fin_viewItem, id)

def Fin_editItem(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        item = Fin_Items.objects.get(id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            units = Fin_Units.objects.filter(Company = com)
            acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')
            return render(request,'company/Fin_Edit_Item.html',{'allmodules':allmodules,'com':com,'data':data,'units':units, 'accounts':acc, 'item':item})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            units = Fin_Units.objects.filter(Company = com.company_id)
            acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com.company_id).order_by('account_name')
            return render(request,'company/Fin_Edit_Item.html',{'allmodules':allmodules,'com':com,'data':data,'units':units, 'accounts':acc, 'item':item})
    else:
       return redirect('/')
    

def Fin_updateItem(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        item = Fin_Items.objects.get(id = id)
        if request.method == 'POST':
            name = request.POST['name']
            type = request.POST['type']
            unit = request.POST.get('unit')
            if request.POST['hsn']:
                hsn = request.POST['hsn']
                sac = None
            elif request.POST['sac']:
                sac = request.POST['sac']
                hsn = None
            tax = request.POST['taxref']
            gstTax = 0 if tax == 'non taxable' else request.POST['intra_st']
            igstTax = 0 if tax == 'non taxable' else request.POST['inter_st']
            purPrice = request.POST['pcost']
            purAccount =  None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
            purDesc = request.POST['pur_desc']
            salePrice = request.POST['salesprice']
            saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
            saleDesc = request.POST['sale_desc']
            inventory = request.POST.get('invacc')
            stock = item.opening_stock if request.POST.get('stock') == "" else request.POST.get('stock')
            stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
            minStock = request.POST['min_stock']
            createdDate = date.today()

            oldOpen = int(item.opening_stock)
            newOpen = int(stock)
            diff = abs(oldOpen - newOpen)

            
            #save item and transaction if item or hsn doesn't exists already
            if item.name != name and Fin_Items.objects.filter(Company=com, name__iexact=name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            if item.hsn and hsn != None:
                if int(item.hsn) != int(hsn) and Fin_Items.objects.filter(Company = com, hsn__iexact=hsn).exists():
                    res = f'<script>alert("HSN - {hsn} already exists, try another.!");window.history.back();</script>'
                    return HttpResponse(res)
            if item.sac and sac != None:
                if int(item.sac) != int(sac) and Fin_Items.objects.filter(Company = com, sac__iexact=sac).exists():
                    res = f'<script>alert("SAC - {sac} already exists, try another.!");window.history.back();</script>'
                    return HttpResponse(res)
            # else:
            item.Company = com
            item.LoginDetails = data
            item.name = name
            item.item_type = type
            item.unit = unit
            item.hsn = hsn
            item.sac = sac
            item.tax_reference = tax
            item.intra_state_tax = gstTax
            item.inter_state_tax = igstTax
            item.sales_account = saleAccount
            item.selling_price = salePrice
            item.sales_description = saleDesc
            item.purchase_account = purAccount
            item.purchase_price = purPrice
            item.purchase_description = purDesc
            item.item_created = createdDate
            item.min_stock = minStock
            item.inventory_account = inventory
            
            if item.opening_stock != int(stock) and oldOpen > newOpen:
                item.current_stock -= diff
            elif item.opening_stock != int(stock) and oldOpen < newOpen:
                item.current_stock += diff
            
            item.opening_stock = stock
            item.stock_unit_rate = stockUnitRate

            item.save()

            #save transaction

            Fin_Items_Transaction_History.objects.create(
                Company = com,
                LoginDetails = data,
                item = item,
                action = 'Edited'
            )
            
            return redirect(Fin_viewItem, item.id)

        return redirect(Fin_editItem, item.id)
    else:
       return redirect('/')

def Fin_deleteItem(request, id):
    if 's_id' in request.session:
        item = Fin_Items.objects.get(id = id)
        #check whether any transaction are completed for the item(sales,purchase,estimate,bill etc.), if so, restrict deletion.

        item.delete()
        return redirect(Fin_items)

def Fin_itemHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        itm = Fin_Items.objects.get(id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            his = Fin_Items_Transaction_History.objects.filter(Company = com , item = itm)
            return render(request,'company/Fin_Item_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'item':itm})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            his = Fin_Items_Transaction_History.objects.filter(Company = com.company_id, item = itm)
            return render(request,'company/Fin_Item_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'item':itm})
    else:
       return redirect('/')

def Fin_itemTransactionPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        
        item = Fin_Items.objects.get(id = id)
        stock = int(item.current_stock)
        rate = float(item.stock_unit_rate)
        stockValue = float(stock * rate)

        transactions = []
        if item.opening_stock != 0:
            det = {
                'type':'Opening Stock',
                'name':'',
                'date':item.item_created,
                'qty': item.opening_stock,
                'price':item.selling_price,
                'status': item.status
            }
            transactions.append(det)
        estItems = Fin_Estimate_Items.objects.filter(Item = item)
        if estItems:
            for es in estItems:
                det = {
                    'type':'Estimate',
                    'name':es.Estimate.Customer.first_name+" "+es.Estimate.Customer.last_name,
                    'date':es.Estimate.estimate_date,
                    'qty': es.quantity,
                    'price':es.price,
                    'status':es.Estimate.status
                }
                transactions.append(det)

        soItems = Fin_Sales_Order_Items.objects.filter(Item = item)
        if soItems:
            for so in soItems:
                det = {
                    'type':'Sales Order',
                    'name':so.SalesOrder.Customer.first_name+" "+so.SalesOrder.Customer.last_name,
                    'date':so.SalesOrder.sales_order_date,
                    'qty': so.quantity,
                    'price':so.price,
                    'status':so.SalesOrder.status
                }
                transactions.append(det)

        invItems = Fin_Invoice_Items.objects.filter(Item = item)
        if invItems:
            for iv in invItems:
                det = {
                    'type':'Invoice',
                    'name':iv.Invoice.Customer.first_name+" "+iv.Invoice.Customer.last_name,
                    'date':iv.Invoice.invoice_date,
                    'qty': iv.quantity,
                    'price':iv.price,
                    'status':iv.Invoice.status
                }
                transactions.append(det)

        crdItems = Fin_CreditNote_Items.objects.filter(items = item)
        if crdItems:
            for cr in crdItems:
                det = {
                    'type':'Credit Note',
                    'name':cr.creditnote.Customer.first_name+" "+cr.creditnote.Customer.last_name,
                    'date':cr.creditnote.creditnote_date,
                    'qty': cr.quantity,
                    'price':cr.price,
                    'status':cr.creditnote.status
                }
                transactions.append(det)

        rtInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = item)
        if rtInvItems:
            for rt in rtInvItems:
                det = {
                    'type':'Retainer Invoice',
                    'name':rt.Ret_Inv.Customer.first_name+" "+rt.Ret_Inv.Customer.last_name,
                    'date':rt.Ret_Inv.Retainer_Invoice_date,
                    'qty': rt.Quantity,
                    'price':rt.Price,
                    'status':rt.Ret_Inv.status
                }
                transactions.append(det)

        chlItems = Fin_Delivery_Challan_Items.objects.filter(items = item)
        if chlItems:
            for ch in chlItems:
                det = {
                    'type':'Delivery Challan',
                    'name':ch.delivery_challan.Customer.first_name+" "+ch.delivery_challan.Customer.last_name,
                    'date':ch.delivery_challan.challan_date,
                    'qty': ch.quantity,
                    'price':ch.price,
                    'status':ch.delivery_challan.status
                }
                transactions.append(det)

        recItems = Fin_Recurring_Invoice_Items.objects.filter(Item = item)
        if recItems:
            for rec in recItems:
                det = {
                    'type':'Recurring Invoice',
                    'name':rec.RecInvoice.Customer.first_name+" "+rec.RecInvoice.Customer.last_name,
                    'date':rec.RecInvoice.start_date,
                    'qty': rec.quantity,
                    'price':rec.price,
                    'status':rec.RecInvoice.status
                }
                transactions.append(det)

        poItems = Fin_Purchase_Order_Items.objects.filter(Item = item)
        if poItems:
            for po in poItems:
                det = {
                    'type':'Purchase Order',
                    'name':po.PurchaseOrder.Vendor.first_name+" "+po.PurchaseOrder.Vendor.last_name,
                    'date':po.PurchaseOrder.purchase_order_date,
                    'qty': po.quantity,
                    'price':po.price,
                    'status':po.PurchaseOrder.status
                }
                transactions.append(det)

        blItems = Fin_Purchase_Bill_Item.objects.filter(item = item)
        if blItems:
            for bl in blItems:
                det = {
                    'type':'Bill',
                    'name':bl.pbill.vendor.first_name+" "+bl.pbill.vendor.last_name,
                    'date':bl.pbill.bill_date,
                    'qty': bl.qty,
                    'price':bl.price,
                    'status':bl.pbill.status
                }
                transactions.append(det)

        dbtItems = Fin_Debit_Note_Items.objects.filter(items = item)
        if dbtItems:
            for dbt in dbtItems:
                det = {
                    'type':'Debit Note',
                    'name':dbt.debit_note.Vendor.first_name+" "+dbt.debit_note.Vendor.last_name,
                    'date':dbt.debit_note.debit_note_date,
                    'qty': dbt.quantity,
                    'price':dbt.price,
                    'status':dbt.debit_note.status
                }
                transactions.append(det)

        rbItems = Fin_Recurring_Bill_Items.objects.filter(items = item)
        if rbItems:
            for rb in rbItems:
                det = {
                    'type':'Recurring Bill',
                    'name':rb.recurring_bill.vendor.first_name+" "+rb.recurring_bill.vendor.last_name,
                    'date':rb.recurring_bill.date,
                    'qty': rb.quantity,
                    'price':rb.price,
                    'status':rb.recurring_bill.status
                }
                transactions.append(det)

        ewItems = Fin_Eway_Items.objects.filter(Item = item)
        if ewItems:
            for ew in ewItems:
                det = {
                    'type':'EWay Bill',
                    'name':ew.Ewaybills.Customer.first_name+" "+ew.Ewaybills.Customer.last_name,
                    'date':ew.Ewaybills.BillDate,
                    'qty': ew.quantity,
                    'price':ew.price,
                    'status':ew.Ewaybills.Status
                }
                transactions.append(det)
    
        context = {'item': item, 'stockValue':stockValue, 'transactions':transactions}
        
        template_path = 'company/Fin_Item_Transaction_Pdf.html'
        fname = 'Item_transactions_'+item.name
        # return render(request, 'company/Fin_Item_Transaction_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')
    
def Fin_shareItemTransactionsToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        item = Fin_Items.objects.get(id = id)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                stock = int(item.current_stock)
                rate = float(item.stock_unit_rate)
                stockValue = float(stock * rate)

                transactions = []
                if item.opening_stock != 0:
                    det = {
                        'type':'Opening Stock',
                        'name':'',
                        'date':item.item_created,
                        'qty': item.opening_stock,
                        'price':item.selling_price,
                        'status': item.status
                    }
                    transactions.append(det)
                estItems = Fin_Estimate_Items.objects.filter(Item = item)
                if estItems:
                    for es in estItems:
                        det = {
                            'type':'Estimate',
                            'name':es.Estimate.Customer.first_name+" "+es.Estimate.Customer.last_name,
                            'date':es.Estimate.estimate_date,
                            'qty': es.quantity,
                            'price':es.price,
                            'status':es.Estimate.status
                        }
                        transactions.append(det)

                soItems = Fin_Sales_Order_Items.objects.filter(Item = item)
                if soItems:
                    for so in soItems:
                        det = {
                            'type':'Sales Order',
                            'name':so.SalesOrder.Customer.first_name+" "+so.SalesOrder.Customer.last_name,
                            'date':so.SalesOrder.sales_order_date,
                            'qty': so.quantity,
                            'price':so.price,
                            'status':so.SalesOrder.status
                        }
                        transactions.append(det)

                invItems = Fin_Invoice_Items.objects.filter(Item = item)
                if invItems:
                    for iv in invItems:
                        det = {
                            'type':'Invoice',
                            'name':iv.Invoice.Customer.first_name+" "+iv.Invoice.Customer.last_name,
                            'date':iv.Invoice.invoice_date,
                            'qty': iv.quantity,
                            'price':iv.price,
                            'status':iv.Invoice.status
                        }
                        transactions.append(det)

                crdItems = Fin_CreditNote_Items.objects.filter(items = item)
                if crdItems:
                    for cr in crdItems:
                        det = {
                            'type':'Credit Note',
                            'name':cr.creditnote.Customer.first_name+" "+cr.creditnote.Customer.last_name,
                            'date':cr.creditnote.creditnote_date,
                            'qty': cr.quantity,
                            'price':cr.price,
                            'status':cr.creditnote.status
                        }
                        transactions.append(det)

                rtInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = item)
                if rtInvItems:
                    for rt in rtInvItems:
                        det = {
                            'type':'Retainer Invoice',
                            'name':rt.Ret_Inv.Customer.first_name+" "+rt.Ret_Inv.Customer.last_name,
                            'date':rt.Ret_Inv.Retainer_Invoice_date,
                            'qty': rt.Quantity,
                            'price':rt.Price,
                            'status':rt.Ret_Inv.status
                        }
                        transactions.append(det)

                chlItems = Fin_Delivery_Challan_Items.objects.filter(items = item)
                if chlItems:
                    for ch in chlItems:
                        det = {
                            'type':'Delivery Challan',
                            'name':ch.delivery_challan.Customer.first_name+" "+ch.delivery_challan.Customer.last_name,
                            'date':ch.delivery_challan.challan_date,
                            'qty': ch.quantity,
                            'price':ch.price,
                            'status':ch.delivery_challan.status
                        }
                        transactions.append(det)

                recItems = Fin_Recurring_Invoice_Items.objects.filter(Item = item)
                if recItems:
                    for rec in recItems:
                        det = {
                            'type':'Recurring Invoice',
                            'name':rec.RecInvoice.Customer.first_name+" "+rec.RecInvoice.Customer.last_name,
                            'date':rec.RecInvoice.start_date,
                            'qty': rec.quantity,
                            'price':rec.price,
                            'status':rec.RecInvoice.status
                        }
                        transactions.append(det)

                poItems = Fin_Purchase_Order_Items.objects.filter(Item = item)
                if poItems:
                    for po in poItems:
                        det = {
                            'type':'Purchase Order',
                            'name':po.PurchaseOrder.Vendor.first_name+" "+po.PurchaseOrder.Vendor.last_name,
                            'date':po.PurchaseOrder.purchase_order_date,
                            'qty': po.quantity,
                            'price':po.price,
                            'status':po.PurchaseOrder.status
                        }
                        transactions.append(det)

                blItems = Fin_Purchase_Bill_Item.objects.filter(item = item)
                if blItems:
                    for bl in blItems:
                        det = {
                            'type':'Bill',
                            'name':bl.pbill.vendor.first_name+" "+bl.pbill.vendor.last_name,
                            'date':bl.pbill.bill_date,
                            'qty': bl.qty,
                            'price':bl.price,
                            'status':bl.pbill.status
                        }
                        transactions.append(det)

                dbtItems = Fin_Debit_Note_Items.objects.filter(items = item)
                if dbtItems:
                    for dbt in dbtItems:
                        det = {
                            'type':'Debit Note',
                            'name':dbt.debit_note.Vendor.first_name+" "+dbt.debit_note.Vendor.last_name,
                            'date':dbt.debit_note.debit_note_date,
                            'qty': dbt.quantity,
                            'price':dbt.price,
                            'status':dbt.debit_note.status
                        }
                        transactions.append(det)

                rbItems = Fin_Recurring_Bill_Items.objects.filter(items = item)
                if rbItems:
                    for rb in rbItems:
                        det = {
                            'type':'Recurring Bill',
                            'name':rb.recurring_bill.vendor.first_name+" "+rb.recurring_bill.vendor.last_name,
                            'date':rb.recurring_bill.date,
                            'qty': rb.quantity,
                            'price':rb.price,
                            'status':rb.recurring_bill.status
                        }
                        transactions.append(det)

                ewItems = Fin_Eway_Items.objects.filter(Item = item)
                if ewItems:
                    for ew in ewItems:
                        det = {
                            'type':'EWay Bill',
                            'name':ew.Ewaybills.Customer.first_name+" "+ew.Ewaybills.Customer.last_name,
                            'date':ew.Ewaybills.BillDate,
                            'qty': ew.quantity,
                            'price':ew.price,
                            'status':ew.Ewaybills.Status
                        }
                        transactions.append(det)
            
                context = {'item': item, 'stockValue':stockValue, 'transactions':transactions}
                template_path = 'company/Fin_Item_Transaction_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Item_transactions-{item.name}.pdf'
                subject = f"Item_transactions_{item.name}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Transaction details - ITEM-{item.name}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Item Transactions has been shared via email successfully..!')
                return redirect(Fin_viewItem,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewItem, id)
        
def Fin_addItemComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        itm = Fin_Items.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Items_Comments.objects.create(Company = com, item = itm, comments = cmt)
            return redirect(Fin_viewItem, id)
        return redirect(Fin_viewItem, id)
    return redirect('/')

def Fin_deleteItemComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Items_Comments.objects.get(id = id)
        itemId = cmt.item.id
        cmt.delete()
        return redirect(Fin_viewItem, itemId)


# Chart of accounts

def Fin_chartOfAccounts(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            acc = Fin_Chart_Of_Account.objects.filter(Company = com)
            return render(request,'company/Fin_ChartOfAccounts.html',{'allmodules':allmodules,'com':com,'data':data,'accounts':acc})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            acc = Fin_Chart_Of_Account.objects.filter(Company = com.company_id)
            return render(request,'company/Fin_ChartOfAccounts.html',{'allmodules':allmodules,'com':com,'data':data,'accounts':acc})
    else:
       return redirect('/')

def Fin_addAccount(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            return render(request,'company/Fin_Add_Account.html',{'allmodules':allmodules,'com':com,'data':data})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            return render(request,'company/Fin_Add_Account.html',{'allmodules':allmodules,'com':com,'data':data})
    else:
       return redirect('/')
    
def Fin_checkAccounts(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if Fin_Chart_Of_Account.objects.filter(Company = com, account_type = request.GET['type']).exists():
            list= []
            account_objects = Fin_Chart_Of_Account.objects.filter(Company = com, account_type = request.GET['type'])

            for account in account_objects:
                accounts = {
                    'name': account.account_name,
                }
                list.append(accounts)

            return JsonResponse({'status':True,'accounts':list},safe=False)
        else:
            return JsonResponse({'status':False})

def Fin_createAccount(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            name = request.POST['account_name']
            type = request.POST['account_type']
            subAcc = True if 'subAccountCheckBox' in request.POST else False
            parentAcc = request.POST['parent_account'] if 'subAccountCheckBox' in request.POST else None
            accCode = request.POST['account_code']
            bankAccNum = None if request.POST['account_number'] == "" else request.POST['account_number']
            desc = request.POST['description']
            
            createdDate = date.today()
            
            #save account and transaction if account doesn't exists already
            if Fin_Chart_Of_Account.objects.filter(Company=com, account_name__iexact=name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            else:
                account = Fin_Chart_Of_Account(
                    Company = com,
                    LoginDetails = data,
                    account_type = type,
                    account_name = name,
                    account_code = accCode,
                    description = desc,
                    balance = 0.0,
                    balance_type = None,
                    credit_card_no = None,
                    sub_account = subAcc,
                    parent_account = parentAcc,
                    bank_account_no = bankAccNum,
                    date = createdDate,
                    create_status = 'added',
                    status = 'active'
                )
                account.save()

                #save transaction

                Fin_ChartOfAccount_History.objects.create(
                    Company = com,
                    LoginDetails = data,
                    account = account,
                    action = 'Created'
                )
                
                return redirect(Fin_chartOfAccounts)

        return redirect(Fin_createAccount)
    else:
       return redirect('/')

def Fin_accountOverview(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        acc = Fin_Chart_Of_Account.objects.get(id = id)
        transactions = Fin_ChartOfAccount_Transactions.objects.filter(account = acc)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            hist = Fin_ChartOfAccount_History.objects.filter(Company = com, account = acc).last()
            return render(request,'company/Fin_Account_Overview.html',{'allmodules':allmodules,'com':com,'data':data, 'account':acc, 'transactions': transactions, 'history':hist})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            hist = Fin_ChartOfAccount_History.objects.filter(Company = com.company_id, account = acc).last()
            return render(request,'company/Fin_Account_Overview.html',{'allmodules':allmodules,'com':com,'data':data, 'account':acc, 'transactions': transactions, 'history':hist})
    else:
       return redirect('/')
    
def Fin_changeAccountStatus(request,id,status):
    if 's_id' in request.session:
        
        acc = Fin_Chart_Of_Account.objects.get(id = id)
        acc.status = status
        acc.save()
        return redirect(Fin_accountOverview, id)
    
def Fin_accountTransactionPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        
        acc = Fin_Chart_Of_Account.objects.get(id = id)
    
        context = {'account': acc}
        
        template_path = 'company/Fin_Account_Transaction_Pdf.html'
        fname = 'Account_transactions_'+acc.account_name
        # return render(request, 'company/Fin_Account_Transaction_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareAccountTransactionsToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        acc = Fin_Chart_Of_Account.objects.get(id = id)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'account': acc}
                template_path = 'company/Fin_Account_Transaction_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Account_transactions-{acc.account_name}.pdf'
                subject = f"Account_transactions_{acc.account_name}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Transaction details - ACCOUNT-{acc.account_name}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Bill has been shared via email successfully..!')
                return redirect(Fin_accountOverview,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_accountOverview, id)

def Fin_deleteAccount(request, id):
    if 's_id' in request.session:
        acc = Fin_Chart_Of_Account.objects.get( id = id)
        acc.delete()
        return redirect(Fin_chartOfAccounts)

def Fin_editAccount(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            acc = Fin_Chart_Of_Account.objects.get(id = id)
            return render(request,'company/Fin_Edit_Account.html',{'allmodules':allmodules,'com':com,'data':data, 'account':acc})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            acc = Fin_Chart_Of_Account.objects.get(id = id)
            return render(request,'company/Fin_Edit_Account.html',{'allmodules':allmodules,'com':com,'data':data, 'account':acc})
    else:
       return redirect('/')

def Fin_updateAccount(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        acc = Fin_Chart_Of_Account.objects.get(id = id)
        if request.method == 'POST':
            name = request.POST['account_name']
            subAcc = True if 'subAccountCheckBox' in request.POST else False
            parentAcc = request.POST['parent_account'] if 'subAccountCheckBox' in request.POST else None
            accCode = request.POST['account_code']
            bankAccNum = None if request.POST['account_number'] == "" else request.POST['account_number']
            desc = request.POST['description']
            
            #save account and transaction if account doesn't exists already
            if acc.account_name != name and Fin_Chart_Of_Account.objects.filter(Company=com, account_name__iexact=name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            else:
                acc.account_name = name
                acc.account_code = accCode
                acc.description = desc
                acc.sub_account = subAcc
                acc.parent_account = parentAcc
                acc.bank_account_no = bankAccNum
                acc.save()

                #save transaction
                if acc.create_status == 'added':
                    Fin_ChartOfAccount_History.objects.create(
                        Company = com,
                        LoginDetails = data,
                        account = acc,
                        action = 'Edited'
                    )
                
                return redirect(Fin_accountOverview, id)

        return redirect(Fin_editAccount, id)
    else:
       return redirect('/')
    
def Fin_accountHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        acc = Fin_Chart_Of_Account.objects.get(id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            his = Fin_ChartOfAccount_History.objects.filter(Company = com , account = acc)
            return render(request,'company/Fin_Account_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'account':acc})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            his = Fin_ChartOfAccount_History.objects.filter(Company = com.company_id, account = acc)
            return render(request,'company/Fin_Account_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'account':acc})
    else:
       return redirect('/')
       
#End

def Fin_bankholder(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id,status='New')
                bank_holders = Fin_BankHolder.objects.filter(Company=com)
                comments = Fin_BankHolderComment.objects.filter(Company=com)
                history = Fin_BankHolderHistory.objects.filter(Company=com)
                banking_details = Fin_Banking.objects.filter(company=com) 
                
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=s_id)
                # com = staff_details.company_id 
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                bank_holders = Fin_BankHolder.objects.filter(Company=com.company_id)
                comments = Fin_BankHolderComment.objects.filter(Company=com.company_id)
                history = Fin_BankHolderHistory.objects.filter(Company=com.company_id)
                banking_details = Fin_Banking.objects.filter(company=com.company_id) 
            
            sort_by = request.GET.get('sort_by', None)
            if sort_by == 'holder_name':
                bank_holders = bank_holders.order_by('Holder_name')
            elif sort_by == 'bank_name':
                bank_holders = bank_holders.order_by('Bank_name')

            context = {
                'com': com,
                'bank_holders': bank_holders,
                'comments': comments,
                'history': history,
                'sort_by': sort_by,
                'banking_details':banking_details,
                'allmodules':allmodules,
                'data':data,              
            }
            return render(request, 'company/Fin_Bankholders.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')
    else:
        return redirect('/')  


def Fin_addbank(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=data)
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id,status='New')
                bank_names = Fin_Banking.objects.filter(company=com).values_list('bank_name', flat=True).distinct()
                bank_holders = Fin_BankHolder.objects.filter(Company=com)
                comments = Fin_BankHolderComment.objects.filter(Company=com)
                history = Fin_BankHolderHistory.objects.filter(Company=com)
                banking_details = Fin_Banking.objects.filter(company=com)
                bank_history = Fin_BankingHistory.objects.filter(company=com)
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=data)
                # com = staff_details.company_id 
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                bank_names = Fin_Banking.objects.filter(company=com.company_id).values_list('bank_name', flat=True).distinct()
                bank_holders = Fin_BankHolder.objects.filter(Company=com.company_id)
                comments = Fin_BankHolderComment.objects.filter(Company=com.company_id)
                history = Fin_BankHolderHistory.objects.filter(Company=com.company_id)
                banking_details = Fin_Banking.objects.filter(company=com.company_id)
                bank_history = Fin_BankingHistory.objects.filter(company=com.company_id)

           

            context = {
                'com': com,
                'bank_names': bank_names,
                'bank_holders':bank_holders,
                'comments':comments,
                'history':history,
                'banking_details':banking_details,
                'bank_history':bank_history,
                'LoginDetails': data,
                'allmodules':allmodules,
                'data':data,

            }
            return render(request, 'company/Fin_Createbankholder.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/') 
    return redirect('Fin_bankholder')

def Fin_fetchaccountnumbers(request):
    try:
        if request.method == 'GET' and request.headers.get('x-requested-with') == 'XMLHttpRequest':
            selected_bank = request.GET.get('bank_name', None)

            if 's_id' in request.session:
                s_id = request.session['s_id']
                try:
                    user_data = Fin_Login_Details.objects.get(id=s_id)

                    if user_data.User_Type == "Company":
                        company = Fin_Company_Details.objects.get(Login_Id=s_id)
                    else:
                        staff_details = Fin_Staff_Details.objects.get(Login_Id=s_id)
                        company = staff_details.company_id

                    if selected_bank:
                        account_numbers_queryset = Fin_Banking.objects.filter(bank_name=selected_bank, company=company)
                        account_numbers = [
                            {
                                'account_number': account.account_number,
                                'ifsc_code': account.ifsc_code,
                                'branch_name': account.branch_name
                            }
                            for account in account_numbers_queryset
                        ]
                        data = {'account_numbers': account_numbers}
                        return JsonResponse(data, safe=False)
                except Fin_Login_Details.DoesNotExist:
                    return JsonResponse({'error': 'User not found'}, status=404)
            else:
                return JsonResponse({'error': 'User not authenticated'}, status=401)

        return JsonResponse({}, status=400)
    except Exception as e:
        print(f"Error in Fin_fetchaccountnumbers: {str(e)}")
        return JsonResponse({'error': 'Internal Server Error'}, status=500)

def Fin_fetchallbanks(request):
    try:
        if 's_id' in request.session:
            s_id = request.session['s_id']
            user_data = Fin_Login_Details.objects.get(id=s_id)

            if user_data.User_Type == "Company":
                company = Fin_Company_Details.objects.get(Login_Id=s_id)
            else:
                staff_details = Fin_Staff_Details.objects.get(Login_Id=s_id)
                company = staff_details.company_id

            banks = Fin_Banking.objects.filter(company=company).values('bank_name')

            return JsonResponse({'banks': list(banks)})
        else:
            return JsonResponse({'error': 'User not authenticated'}, status=401)
    except Exception as e:
        print(f"Error in Fin_fetchallbanks: {str(e)}")
        return JsonResponse({'error': 'Internal Server Error'}, status=500)
    
def Fin_Bankaccountholder(request):
    selected_bank = None
    error_message_account = ""
    
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)

            if data.User_Type == "Company":
                # Company case
                com = Fin_Company_Details.objects.get(Login_Id=data)
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
                account_holder = Fin_BankHolder.objects.filter(Company=com)
                bank_queryset = Fin_Banking.objects.filter(company=com)

            else:
                # Staff case
                com = Fin_Staff_Details.objects.get(Login_Id=data)
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                account_holder = Fin_BankHolder.objects.filter(Company=com.company_id)
                bank_queryset = Fin_Banking.objects.filter(company=com.company_id)

            if request.method == "POST":
                try:
                    swift_code = request.POST['swiftCode']
                    name = request.POST['name']
                    alias = request.POST['alias']
                    phone_number = request.POST['phone_number']
                    email = request.POST['email']
                    account_type = request.POST['account_type']
                    mailing_name = request.POST['mailingName']
                    address = request.POST['address']
                    country = request.POST['country']
                    state = request.POST['state']
                    pin = request.POST['pin']
                    date = request.POST['date']
                    amount = request.POST['Opening']
                    pan_it_number = request.POST['pan_it_number']
                    registration_type = request.POST['registration_type']
                    gstin_un = request.POST['gstin_un']
                    types = request.POST['termof']
                    set_cheque_book_range = request.POST['set_cheque_book_range']
                    enable_cheque_printing = request.POST['enable_cheque_printing']
                    set_cheque_printing_configuration = request.POST['set_cheque_printing_configuration']
                    if 'bank_name' in request.POST:
                        selected_bank_name = request.POST['bank_name']
                        account_number = request.POST.get('accountNumber', '')
                        ifsc_code = request.POST.get('ifscCode', '')

                        if data.User_Type == "Company":
                            bank_queryset = Fin_Banking.objects.filter(
                                company=com,
                                bank_name=selected_bank_name,
                                account_number=account_number,
                                ifsc_code=ifsc_code
                            )

                            if not bank_queryset.exists():
                                selected_bank = Fin_Banking.objects.create(
                                    company=com,
                                    bank_name=selected_bank_name,
                                    branch_name=request.POST.get('branch_name', ''),
                                    ifsc_code=request.POST.get('ifscCode', ''),
                                    account_number=account_number
                                )
                            else:
                                for bank_instance in bank_queryset:
                                    bank_instance.branch_name = request.POST.get('branch_name', '')
                                    bank_instance.ifsc_code = request.POST.get('ifscCode', '')
                                    bank_instance.save()

                                selected_bank = bank_queryset.first()

                        else:  # This is for 'Staff' scenario
                            bank_queryset = Fin_Banking.objects.filter(
                                company=com.company_id,
                                bank_name=selected_bank_name,
                                account_number=account_number,
                                ifsc_code=ifsc_code
                            )

                            if not bank_queryset.exists():
                                selected_bank = Fin_Banking.objects.create(
                                    company=com.company_id,
                                    bank_name=selected_bank_name,
                                    branch_name=request.POST.get('branch_name', ''),
                                    ifsc_code=request.POST.get('ifscCode', ''),
                                    account_number=account_number
                                )
                            else:
                                for bank_instance in bank_queryset:
                                    bank_instance.branch_name = request.POST.get('branch_name', '')
                                    bank_instance.ifsc_code = request.POST.get('ifscCode', '')
                                    bank_instance.save()

                                selected_bank = bank_queryset.first()

                        if selected_bank is not None:
                            swift_code = request.POST.get('swiftCode', '')

                        if Fin_BankHolder.objects.filter(
                            Q(Account_number=selected_bank.account_number) |
                            Q(phone_number=phone_number) |
                            Q(Pan_it_number=pan_it_number) |
                            Q(Email=email),
                            Company=com if data.User_Type == "Company" else com.company_id
                        ).exists():
                            existing_holder = Fin_BankHolder.objects.filter(
                                Q(Account_number=selected_bank.account_number) |
                                Q(phone_number=phone_number) |
                                Q(Pan_it_number=pan_it_number) |
                                Q(Email=email),
                                Company=com if data.User_Type == "Company" else com.company_id
                            ).first()

                            error_messages = []

                            if existing_holder:
                                if existing_holder.Account_number == account_number:
                                    error_messages.append("Account number is already in use by another holder.")

                                if existing_holder.phone_number == phone_number:
                                    error_messages.append("Phone number is already in use by another holder.")

                                if existing_holder.Pan_it_number == pan_it_number:
                                    error_messages.append("PAN number is already in use by another holder.")

                                if existing_holder.Email == email:
                                    error_messages.append("Email is already in use by another holder.")

                                if registration_type in ['Regular', 'Composition']:
                                    gstin_un = request.POST.get('gstin_un', '')
                                    if Fin_BankHolder.objects.filter(Q(Gstin_un=gstin_un), Company=com if data.User_Type == "Company" else com.company_id).exists():
                                        error_messages.append("GST number is already in use by another holder.")

                            if error_messages:
                                print(f"Errors: {error_messages}")
                                context = {
                                    'bank': bank_queryset,
                                    'error_messages_account': error_messages,
                                    'com': com,
                                    'allmodules': allmodules,
                                    'data': data,
                                }
                                return render(request, 'company/Fin_Createbankholder.html', context)

                    account_holder = Fin_BankHolder(
                        LoginDetails=data,
                        Company=com if data.User_Type == "Company" else com.company_id,
                        Holder_name=name,
                        Alias=alias,
                        phone_number=phone_number,
                        Email=email,
                        Account_type=account_type,
                        Mailing_name=mailing_name,
                        Address=address,
                        Country=country,
                        State=state,
                        Pin=pin,
                        Date=date,
                        ArithmeticErrormount=amount,
                        Open_type=types,
                        Pan_it_number=pan_it_number,
                        Registration_type=registration_type,
                        Gstin_un=gstin_un,
                        Swift_code=swift_code,
                        Bank_name=selected_bank.bank_name,
                        Account_number=selected_bank.account_number,
                        Branch_name=selected_bank.branch_name,
                        Ifsc_code=selected_bank.ifsc_code,
                        Set_cheque_book_range=True if set_cheque_book_range == "Yes" else False,
                        Enable_cheque_printing=True if enable_cheque_printing == "Yes" else False,
                        Set_cheque_printing_configuration=True if set_cheque_printing_configuration == "Yes" else False,
                    )
                    account_holder.save()

                    account_holder.banking_details = selected_bank
                    account_holder.save()

                    Fin_BankHolderHistory.objects.create(
                        # Company=com,
                        Company=com if data.User_Type == "Company" else com.company_id,
                        LoginDetails=data,
                        Holder=account_holder,
                        date=timezone.now(),
                        action='Created'
                    )
                    return redirect('Fin_bankholder')

                except IntegrityError as e:
                    if 'unique constraint' in str(e).lower():
                        error_message_account = "Account details are already in use by another holder."
                    else:
                        error_message_account = "Error in creating bank holder."

                    print(f"Error: {error_message_account}")
                    return HttpResponse(f"Error: {error_message_account}")

            else:
                error_message = "Selected bank is None. Handle this case accordingly."
                print(f"Error: {error_message}")
                bank_queryset = Fin_Banking.objects.filter(company=com if data.User_Type == "Company" else com.company_id)
                context = {'bank': bank_queryset, 'error_message': error_message}
                return render(request, 'company/Fin_Createbankholder.html', context)

        except Fin_Login_Details.DoesNotExist:
            return redirect('/')

    return redirect('Fin_bankholder')

def Fin_AddBankinHolder(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)

            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=data)
                bank_queryset = Fin_Banking.objects.filter(company=com)
            else:
                staff_details = Fin_Staff_Details.objects.get(Login_Id=data)
                com = staff_details.company_id  
                bank_queryset = Fin_Banking.objects.filter(company=com)

            # bank_queryset = Fin_Banking.objects.filter(company=com)

            if request.method == 'POST':
                bank_name = request.POST.get('bank_name')
                ifsc_code = request.POST.get('ifsc_code')
                account_number = request.POST.get('account_number')
                branch_name = request.POST.get('branch_name')

                if not all([bank_name, ifsc_code, account_number, branch_name]):
                    return JsonResponse({'error_message': 'All fields are required'}, status=400)
                
                if bank_queryset.filter(account_number=account_number).exists():
                    return JsonResponse({'error_message': 'Account number already exists for this company'}, status=400)

                new_bank = Fin_Banking(
                    company=com,
                    bank_name=bank_name,
                    ifsc_code=ifsc_code,
                    account_number=account_number,
                    branch_name=branch_name,
                )
                new_bank.save()
                
                return JsonResponse({
                    'bank_name': new_bank.bank_name,
                })

        except Fin_Login_Details.DoesNotExist:
            return redirect('/')
    return JsonResponse({'error_message': 'Invalid request'}, status=400)
    
def Fin_Bankholderview(request, id):
    print(f"Requested ID: {id}")
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=data)
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id,status='New')
                account_holder = get_object_or_404(Fin_BankHolder, id=id)
                try:
                    banking_details = account_holder.banking_details
                except Fin_BankHolder.DoesNotExist:
                    banking_details = None
                last_history_entry = Fin_BankHolderHistory.objects.filter(Holder_id=account_holder).order_by('-date').first()
                comments = Fin_BankHolderComment.objects.filter(Holder=account_holder, Company=com)
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=data)
                # com = staff_details.company_id
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                account_holder = get_object_or_404(Fin_BankHolder, id=id)
                try:
                    banking_details = account_holder.banking_details
                except Fin_BankHolder.DoesNotExist:
                    banking_details = None
                last_history_entry = Fin_BankHolderHistory.objects.filter(Holder_id=account_holder).order_by('date').last()
                comments = Fin_BankHolderComment.objects.filter(Holder=account_holder, Company=com.company_id)


            context = {
                'account_holder': account_holder,
                'banking_details': banking_details,
                'com': com,
                'last_history_entry': last_history_entry,
                'comments': comments,
                'allmodules':allmodules,
                'data':data,
            }

            return render(request, 'company/Fin_Bankholderview.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')  
    return redirect('Fin_bankholder')


def Fin_activebankholder(request, id):
    account_holder = Fin_BankHolder.objects.get(id=id)
    account_holder.is_active = True
    account_holder.save()
    return redirect('Fin_Bankholderview', id=id)


def Fin_inactivatebankaccount(request, id):
    account_holder= Fin_BankHolder.objects.get(id=id)
    account_holder.is_active = False
    account_holder.save()
    return redirect('Fin_Bankholderview', id=id)

def Fin_Editbankholder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
                account_holder = get_object_or_404(Fin_BankHolder, id=id)
                banking_details = account_holder.banking_details  
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=s_id)
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                account_holder = get_object_or_404(Fin_BankHolder, id=id)
                banking_details = account_holder.banking_details  

            context = {
                'com': com,
                'account_holder': account_holder,
                'banking_details': banking_details,
                'allmodules': allmodules,
                'data': data,
            }
            return render(request, 'company/Fin_Editbankholder.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/') 
    return redirect('Fin_bankholder')



def Fin_Editholder(request, id):
    selected_bank = None
    error_message_phone = ""
    error_message_email = ""
    error_message_account = ""
    e = None

    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
                account_holder = get_object_or_404(Fin_BankHolder, id=id, Company=com)

            else:
                com = Fin_Staff_Details.objects.get(Login_Id=s_id)
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                account_holder = get_object_or_404(Fin_BankHolder, id=id, Company=com.company_id)
            
            if request.method == "POST":
                try:
                    name = request.POST.get('name')
                    alias = request.POST.get('alias')
                    phone_number = request.POST.get('phone_number')
                    email = request.POST.get('email')
                    account_type = request.POST.get('account_type')
                    mailing_name = request.POST.get('mailingName')
                    address = request.POST.get('address')
                    country = request.POST.get('country')
                    state = request.POST.get('state')
                    pin = request.POST.get('pin')
                    date_str = request.POST.get('date')
                    amount = request.POST.get('Opening')
                    types = request.POST.get('termof')
                    pan_it_number = request.POST.get('pan_it_number')
                    registration_type = request.POST.get('registration_type')
                    gstin_un = request.POST.get('gstin_un')
                    account_number = request.POST.get('accountNumber')
                    ifsc_code = request.POST.get('ifscCode')
                    swift_code = request.POST.get('swiftCode')
                    bank_name = request.POST.get('bank_name')
                    branch_name = request.POST.get('branch_name')
                    set_cheque_book_range = request.POST.get('set_cheque_book_range')
                    enable_cheque_printing = request.POST.get('enable_cheque_printing')
                    set_cheque_printing_configuration = request.POST.get('set_cheque_printing_configuration')

                    date = datetime.strptime(date_str, '%Y-%m-%d').date()

                    account_holder.Holder_name = name
                    account_holder.Alias = alias
                    account_holder.phone_number = phone_number
                    account_holder.Email = email
                    account_holder.Account_type = account_type
                    account_holder.Account_number = account_number
                    account_holder.Ifsc_code = ifsc_code
                    account_holder.Swift_code = swift_code
                    account_holder.Bank_name = bank_name
                    account_holder.Branch_name = branch_name
                    account_holder.Mailing_name = mailing_name
                    account_holder.Address = address
                    account_holder.Country = country
                    account_holder.State = state
                    account_holder.Pin = pin
                    account_holder.Date = date
                    account_holder.ArithmeticErrormount = amount
                    account_holder.Open_type = types
                    account_holder.Pan_it_number = pan_it_number
                    account_holder.Registration_type = registration_type
                    account_holder.Gstin_un = gstin_un
                    account_holder.Set_cheque_book_range = True if set_cheque_book_range == "Yes" else False
                    account_holder.Enable_cheque_printing = True if enable_cheque_printing == "Yes" else False
                    account_holder.Set_cheque_printing_configuration = True if set_cheque_printing_configuration == "Yes" else False

                    if 'bank_name' in request.POST:
                        selected_bank_name = request.POST['bank_name']
                        account_number = request.POST.get('accountNumber', '')
                        bank_queryset = Fin_Banking.objects.filter(bank_name=selected_bank_name, account_number=account_number, company=com if data.User_Type == "Company" else com.company_id)

                        if not bank_queryset.exists():
                            selected_bank = Fin_Banking.objects.create(
                                company=com if data.User_Type == "Company" else com.company_id,
                                bank_name=selected_bank_name,
                                branch_name=request.POST.get('branch_name', ''),
                                ifsc_code=request.POST.get('ifscCode', ''),
                                account_number=account_number
                            )
                        else:
                            for bank_instance in bank_queryset:
                                bank_instance.branch_name = request.POST.get('branch_name', '')
                                bank_instance.ifsc_code = request.POST.get('ifscCode', '')
                                bank_instance.save()

                            selected_bank = bank_queryset.first()

                       

                        if Fin_BankHolder.objects.filter(
                            Q(Account_number=selected_bank.account_number) |
                            Q(phone_number=phone_number) |
                            Q(Pan_it_number=pan_it_number) |
                            Q(Email=email),
                            Company=com if data.User_Type == "Company" else com.company_id
                        ).exclude(id=id).exists():
                            error_message_account = "Account details are already in use by another holder."
                            print(f"Error: {error_message_account}")
                            context = {
                                'bank': bank_queryset,
                                'error_message_account': error_message_account,
                                'com': com, 
                                'allmodules': allmodules,
                                'data': data,
                                'account_holder' : account_holder,
                            }
                            return render(request, 'company/Fin_Editbankholder.html', context)


                                                                                                                    
                    account_holder.banking_details = selected_bank
                    account_holder.Bank_name = selected_bank.bank_name
                    account_holder.Account_number = selected_bank.account_number
                    account_holder.Branch_name = selected_bank.branch_name
                    account_holder.Ifsc_code = selected_bank.ifsc_code

                    account_holder.save()

                    Fin_BankHolderHistory.objects.create(
                        LoginDetails=data,
                        Company=com if data.User_Type == "Company" else com.company_id,
                        Holder=account_holder,
                        date=date,
                        action='Edited'
                    )
                    return redirect('Fin_Bankholderview', id)

                except IntegrityError as e:
                    error_message_phone = ""
                    error_message_email = ""
                    error_message_account = ""

                    if 'phone_number' in str(e):
                        error_message_phone = "Phone number is already in use by another holder."
                    elif 'email' in str(e):
                        error_message_email = "Email is already in use by another holder."
                    elif 'account_number' in str(e):
                        error_message_account = "Account number is already in use by another holder."
                    else:
                        error_message_account = "Error in creating bank holder."
                    
                    bank_queryset = Fin_Banking.objects.all()
                    context = {
                        'bank': selected_bank,
                        'account_holder': account_holder, 
                        'error_message_phone': error_message_phone,
                        'error_message_email': error_message_email,
                        'error_message_account': error_message_account,
                        'account_holder': account_holder,
                    }
                    return render(request, 'company/Fin_Editbankholder.html', context)

            bank_queryset = Fin_Banking.objects.filter(company=com if data.User_Type == "Company" else com.company_id)
            context = {'bank': bank_queryset, 'account_holder': account_holder}
            return render(request, 'company/Fin_Editbankholder.html', context)

        except Fin_Login_Details.DoesNotExist:
            return redirect('/')

    return redirect('Fin_bankholder')


def Fin_deleteholder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
            else:
                staff_details = Fin_Staff_Details.objects.get(Login_Id=s_id)
                com = staff_details.company_id 
            try:
                account_holder = Fin_BankHolder.objects.get(id=id, Company=com)
                banking_details = account_holder.banking_details
                Fin_BankHolderComment.objects.filter(Holder_id=account_holder).delete()
                Fin_BankHolderHistory.objects.filter(Holder_id=account_holder).delete()
                account_holder.delete()
                banking_details.delete()
                return redirect('Fin_bankholder')
            except Fin_BankHolder.DoesNotExist:
                message = f"Fin_BankHolder instance with ID {id} does not exist for the company {com}"
                return render(request, '404.html', {'message': message}, status=404)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')  
    return redirect('Fin_bankholder')

def Fin_addcomment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)

            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
            else:
                staff_details = Fin_Staff_Details.objects.get(Login_Id=s_id)
                com = staff_details.company_id

            account_holder = get_object_or_404(Fin_BankHolder, id=id)

            if request.method == 'POST':
                comment_text = request.POST.get('comment')
                print("Received Comment Text:", comment_text)

                comment = Fin_BankHolderComment.objects.create(
                    comment_text=comment_text,
                    Holder=account_holder,
                    LoginDetails=data,
                    Company=com
                )
                comment.save()
                print("Comment Saved in the Database")

            comments = Fin_BankHolderComment.objects.filter(Holder=account_holder, Company=com)
            print("Comments in view:", comments)

            if account_holder.id is not None:
                return redirect(reverse('Fin_Bankholderview', kwargs={'id': id}))
            else:
                return HttpResponse("Invalid account holder ID")

        except Fin_Login_Details.DoesNotExist:
            print("Error: Fin_Login_Details.DoesNotExist")
            return redirect('/')

    print("Redirecting to /")
    return redirect('/') 



def Fin_deletecomment(request, id):
    comment = get_object_or_404(Fin_BankHolderComment, id=id)
    comment.delete() 
    return redirect(reverse('Fin_addcomment', args=[comment.Holder.id]))



def Fin_Bankhistory(request, holder_id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)

            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id,status='New')
                account_holder = get_object_or_404(Fin_BankHolder, id=holder_id, Company=com)
                history = Fin_BankHolderHistory.objects.filter(Holder=account_holder).order_by('-date')
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=s_id)
                # com = staff_details.company_id
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                account_holder = get_object_or_404(Fin_BankHolder, id=holder_id, Company=com.company_id)
                history = Fin_BankHolderHistory.objects.filter(Holder=account_holder).order_by('-date')


            context = {
                'account_holder': account_holder,
                'history': history,
                'allmodules':allmodules,
                'com':com,
                'data':data,
            }
            return render(request, 'company/Fin_BankHistory.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')  
    return redirect('/')
        
# -------------Shemeem--------Price List & Customers-------------------------------

# PriceList

def Fin_priceList(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            list = Fin_Price_List.objects.filter(Company = com)
            return render(request,'company/Fin_Price_List.html',{'allmodules':allmodules,'com':com,'data':data,'list':list})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            list = Fin_Price_List.objects.filter(Company = com.company_id)
            return render(request,'company/Fin_Price_List.html',{'allmodules':allmodules,'com':com,'data':data,'list':list})
    else:
       return redirect('/')
    
def Fin_addPriceList(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            items = Fin_Items.objects.filter(Company = com, status = 'Active').order_by('name')
            return render(request,'company/Fin_Add_Price_List.html',{'allmodules':allmodules,'com':com,'data':data,'items':items})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            items = Fin_Items.objects.filter(Company = com.company_id, status = 'Active').order_by('name')
            return render(request,'company/Fin_Add_Price_List.html',{'allmodules':allmodules,'com':com,'data':data,'items':items})
    else:
       return redirect('/')

def Fin_createPriceList(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            name = request.POST['name']
            type = request.POST['type']
            itemRate = request.POST['item_rate']
            description = request.POST['description']
            upOrDown = request.POST['up_or_down']
            percent = request.POST['percentage']
            roundOff = request.POST['round_off']
            currency = request.POST['currency']

            if Fin_Price_List.objects.filter(Company = com, name__iexact = name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            priceList = Fin_Price_List(
                Company = com, LoginDetails = data, name = name, type = type, item_rate = itemRate, description = description, currency = currency, up_or_down = upOrDown, percentage = percent, round_off = roundOff, status = 'Active'
            )
            priceList.save()

            #save transaction

            Fin_PriceList_Transaction_History.objects.create(
                Company = com,
                LoginDetails = data,
                list = priceList,
                action = 'Created'
            )

            if itemRate == 'Customized individual rate':
                itemName = request.POST.getlist('itemName[]')
                stdRate = request.POST.getlist('itemRateSale[]') if type == 'Sales' else request.POST.getlist('itemRatePurchase[]')
                customRate = request.POST.getlist('customRate[]')
                
                if len(itemName) == len(stdRate) == len(customRate):
                    values = zip(itemName,stdRate,customRate)
                    lis = list(values)

                    for ele in lis:
                        Fin_PriceList_Items.objects.get_or_create(Company = com, LoginDetails = data, list = priceList, item = Fin_Items.objects.get(id = int(ele[0])), standard_rate = float(ele[1]), custom_rate = float(ele[2]))

                    return redirect(Fin_priceList)

                return redirect(Fin_addPriceList)

            return redirect(Fin_priceList)

        else:
                return redirect(Fin_addPriceList)
    else:
        return redirect('/')

def Fin_viewPriceList(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        list = Fin_Price_List.objects.get(id = id)
        plItems = Fin_PriceList_Items.objects.filter(list = list)
        cmt = Fin_PriceList_Comments.objects.filter(list = list)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            hist = Fin_PriceList_Transaction_History.objects.filter(Company = com, list = list).last()
            return render(request,'company/Fin_View_PriceList.html',{'allmodules':allmodules,'com':com,'data':data,'plItems':plItems, 'list':list, 'comments':cmt, 'history': hist})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            hist = Fin_PriceList_Transaction_History.objects.filter(Company = com.company_id, list = list).last()
            return render(request,'company/Fin_View_PriceList.html',{'allmodules':allmodules,'com':com,'data':data,'plItems':plItems, 'list':list, 'comments':cmt, 'history': hist})
    else:
       return redirect('/')
    
def Fin_changePriceListStatus(request,id,status):
    if 's_id' in request.session:
        list = Fin_Price_List.objects.get(id = id)
        list.status = status
        list.save()
        return redirect(Fin_viewPriceList, id)
    
def Fin_deletePriceList(request, id):
    if 's_id' in request.session:
        list = Fin_Price_List.objects.get( id = id)
        list.delete()
        return redirect(Fin_priceList)
    
def Fin_addPriceListComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        list = Fin_Price_List.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_PriceList_Comments.objects.create(Company = com, list = list, comments = cmt)
            return redirect(Fin_viewPriceList, id)
        return redirect(Fin_viewPriceList, id)
    return redirect('/')

def Fin_deletePriceListComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_PriceList_Comments.objects.get(id = id)
        listId = cmt.list.id
        cmt.delete()
        return redirect(Fin_viewPriceList, listId)

def Fin_priceListHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        list = Fin_Price_List.objects.get(id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            his = Fin_PriceList_Transaction_History.objects.filter(Company = com , list = list)
            return render(request,'company/Fin_PriceList_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'list':list})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            his = Fin_PriceList_Transaction_History.objects.filter(Company = com.company_id , list = list)
            return render(request,'company/Fin_PriceList_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'list':list})
    else:
       return redirect('/')
    
def Fin_editPriceList(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        list = Fin_Price_List.objects.get(id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            plItems = Fin_PriceList_Items.objects.filter(Company = com, list = list)
            items = Fin_Items.objects.filter(Company = com, status = 'Active').order_by('name')
            return render(request,'company/Fin_Edit_Price_List.html',{'allmodules':allmodules,'com':com,'data':data,'list':list, 'plItems':plItems, 'items':items })
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            plItems = Fin_PriceList_Items.objects.filter(Company = com.company_id, list = list)
            items = Fin_Items.objects.filter(Company = com.company_id, status = 'Active').order_by('name')
            return render(request,'company/Fin_Edit_Price_List.html',{'allmodules':allmodules,'com':com,'data':data,'list':list, 'plItems':plItems, 'items':items })
    else:
       return redirect('/')

def Fin_updatePriceList(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        lst = Fin_Price_List.objects.get(id = id)
        if request.method == 'POST':
            name = request.POST['name']
            type = request.POST['type']
            itemRate = request.POST['item_rate']
            description = request.POST['description']
            upOrDown = request.POST['up_or_down']
            percent = request.POST['percentage']
            roundOff = request.POST['round_off']
            currency = request.POST['currency']

            if lst.name != name and Fin_Price_List.objects.filter(Company = com, name__iexact = name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            if lst.item_rate == 'Customized individual rate' and itemRate != 'Customized individual rate':
                Fin_PriceList_Items.objects.filter(list = lst).delete()

            lst.name = name
            lst.type = type
            lst.item_rate = itemRate
            lst.description = description
            lst.currency = currency
            lst.up_or_down = upOrDown
            if itemRate == 'Customized individual rate':
                lst.percentage = None
                lst.round_off = None
            else:
                lst.percentage = percent
                lst.round_off = roundOff
            lst.save()

            #save transaction

            Fin_PriceList_Transaction_History.objects.create(
                Company = com,
                LoginDetails = data,
                list = lst,
                action = 'Edited'
            )

            itemName = request.POST.getlist('itemName[]')
            stdRate = request.POST.getlist('itemRateSale[]') if type == 'Sales' else request.POST.getlist('itemRatePurchase[]')
            customRate = request.POST.getlist('customRate[]')
            
            if itemRate == 'Customized individual rate':
                if Fin_PriceList_Items.objects.filter(list = lst).exists():
                    ids = request.POST.getlist('plItemId[]')
                    
                    if len(ids) == len(itemName) == len(stdRate) == len(customRate):
                        values = zip(ids, itemName,stdRate,customRate)
                        lis = list(values)

                        for ele in lis:
                            Fin_PriceList_Items.objects.filter(id = ele[0]).update(Company = com, LoginDetails = data, list = lst, item = Fin_Items.objects.get(id = int(ele[1])), standard_rate = float(ele[2]), custom_rate = float(ele[3]))

                        return redirect(Fin_viewPriceList,id)

                    else:
                        return redirect(Fin_editPriceList, id)
                else:
                    if len(itemName) == len(stdRate) == len(customRate):
                        values = zip(itemName,stdRate,customRate)
                        lis = list(values)
                        for ele in lis:
                            Fin_PriceList_Items.objects.create(Company = com, LoginDetails = data, list = lst, item = Fin_Items.objects.get(id = int(ele[0])), standard_rate = float(ele[1]), custom_rate = float(ele[2]))
                        
                        return redirect(Fin_viewPriceList,id)
            else:
                return redirect(Fin_viewPriceList,id)

        else:
            return redirect(Fin_editPriceList, id)
    else:
        return redirect('/')

def Fin_priceListViewPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        lst = Fin_Price_List.objects.get(id = id)
        plItems = Fin_PriceList_Items.objects.filter(list = lst)
    
        context = {'list': lst, 'plItems':plItems}
        
        template_path = 'company/Fin_PriceListView_Pdf.html'
        fname = 'Price_List_'+lst.name
        # return render(request, 'company/Fin_PriceListView_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_sharePriceListViewToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        lst = Fin_Price_List.objects.get(id = id)
        plItems = Fin_PriceList_Items.objects.filter(list = lst)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'list': lst, 'plItems':plItems}
                template_path = 'company/Fin_PriceListView_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Price_list_{lst.name}.pdf'
                subject = f"Price_list_{lst.name}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Price List details - Price List-{lst.name}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Price List details has been shared via email successfully..!')
                return redirect(Fin_viewPriceList,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewPriceList, id)


# Customers
        
def Fin_customers(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cust = Fin_Customers.objects.filter(Company = com)
            return render(request,'company/Fin_Customers.html',{'allmodules':allmodules,'com':com,'data':data,'customers':cust})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cust = Fin_Customers.objects.filter(Company = com.company_id)
            return render(request,'company/Fin_Customers.html',{'allmodules':allmodules,'com':com,'data':data,'customers':cust})
    else:
       return redirect('/')

def Fin_addCustomer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            trms = Fin_Company_Payment_Terms.objects.filter(Company = com)
            lst = Fin_Price_List.objects.filter(Company = com, status = 'Active')
            return render(request,'company/Fin_Add_Customer.html',{'allmodules':allmodules,'com':com,'data':data, 'pTerms':trms, 'list':lst})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            trms = Fin_Company_Payment_Terms.objects.filter(Company = com.company_id)
            lst = Fin_Price_List.objects.filter(Company = com.company_id, status = 'Active')
            return render(request,'company/Fin_Add_Customer.html',{'allmodules':allmodules,'com':com,'data':data, 'pTerms':trms, 'list':lst})
    else:
       return redirect('/')

def Fin_checkCustomerName(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        fName = request.POST['fname']
        lName = request.POST['lname']

        if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            msg = f'{fName} {lName} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
    
def Fin_checkCustomerGSTIN(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        gstIn = request.POST['gstin']

        if Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            msg = f'{gstIn} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
    
def Fin_checkCustomerPAN(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        pan = request.POST['pan']

        if Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
            msg = f'{pan} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')

def Fin_checkCustomerPhone(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        phn = request.POST['phone']

        if Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
            msg = f'{phn} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')

def Fin_checkCustomerEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        email = request.POST['email']

        if Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
            msg = f'{email} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
    
def Fin_createCustomer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            fName = request.POST['first_name']
            lName = request.POST['last_name']
            gstIn = request.POST['gstin']
            pan = request.POST['pan_no']
            email = request.POST['email']
            phn = request.POST['mobile']

            if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
                res = f'<script>alert("Customer `{fName} {lName}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
                res = f'<script>alert("GSTIN `{gstIn}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
                res = f'<script>alert("PAN No `{pan}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
                res = f'<script>alert("Phone Number `{phn}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
                res = f'<script>alert("Email `{email}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            cust = Fin_Customers(
                Company = com,
                LoginDetails = data,
                title = request.POST['title'],
                first_name = fName,
                last_name = lName,
                company = request.POST['company_name'],
                location = request.POST['location'],
                place_of_supply = request.POST['place_of_supply'],
                gst_type = request.POST['gst_type'],
                gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
                pan_no = pan,
                email = email,
                mobile = phn,
                website = request.POST['website'],
                price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
                payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
                opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
                open_balance_type = request.POST['balance_type'],
                current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
                credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']),
                billing_street = request.POST['street'],
                billing_city = request.POST['city'],
                billing_state = request.POST['state'],
                billing_pincode = request.POST['pincode'],
                billing_country = request.POST['country'],
                ship_street = request.POST['shipstreet'],
                ship_city = request.POST['shipcity'],
                ship_state = request.POST['shipstate'],
                ship_pincode = request.POST['shippincode'],
                ship_country = request.POST['shipcountry'],
                status = 'Active'
            )
            cust.save()

            #save transaction

            Fin_Customers_History.objects.create(
                Company = com,
                LoginDetails = data,
                customer = cust,
                action = 'Created'
            )

            return redirect(Fin_customers)

        else:
            return redirect(Fin_addCustomer)
    else:
        return redirect('/')

def Fin_newCustomerPaymentTerm(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        term = request.POST['term']
        days = request.POST['days']

        if not Fin_Company_Payment_Terms.objects.filter(Company = com, term_name__iexact = term).exists():
            Fin_Company_Payment_Terms.objects.create(Company = com, term_name = term, days =days)
            
            list= []
            terms = Fin_Company_Payment_Terms.objects.filter(Company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False})

    else:
        return redirect('/')

def Fin_viewCustomer(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        trans = []
        bal = 0
        cust = Fin_Customers.objects.get(id = id)
        cmt = Fin_Customers_Comments.objects.filter(customer = cust)
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        hist = Fin_Customers_History.objects.filter(Company = cmp, customer = cust).last()

        if cust.opening_balance != 0:
            tran = {
                'type':'Opening Balance',
                'number':'-',
                'date':cust.date,
                'total':cust.opening_balance,
                'balance':cust.current_balance
            }
            bal += float(cust.current_balance)
            trans.append(tran)

        est = Fin_Estimate.objects.filter(Customer = cust)
        if est:
            for e in est:
                tran = {
                    'type':'Estimate',
                    'number':e.estimate_no,
                    'date':e.estimate_date,
                    'total':e.grandtotal,
                    'balance':e.balance
                }
                bal += float(e.balance)
                trans.append(tran)

        sOrder = Fin_Sales_Order.objects.filter(Customer = cust)
        if sOrder:
            for s in sOrder:
                tran = {
                    'type':'Sales Order',
                    'number':s.sales_order_no,
                    'date':s.sales_order_date,
                    'total':s.grandtotal,
                    'balance':s.balance
                }
                bal += float(s.balance)
                trans.append(tran)

        inv = Fin_Invoice.objects.filter(Customer = cust)
        if inv:
            for i in inv:
                tran = {
                    'type':'Invoice',
                    'number':i.invoice_no,
                    'date':i.invoice_date,
                    'total':i.grandtotal,
                    'balance':i.balance
                }
                bal += float(i.balance)
                trans.append(tran)

        cNote = Fin_CreditNote.objects.filter(Customer = cust)
        if cNote:
            for c in cNote:
                tran = {
                    'type':'Credit Note',
                    'number':c.creditnote_number,
                    'date':c.creditnote_date,
                    'total':c.grandtotal,
                    'balance':c.balance
                }
                bal -= float(c.balance)
                trans.append(tran)
        
        rtInv = Fin_Retainer_Invoice.objects.filter(Customer = cust)
        if rtInv:
            for rt in rtInv:
                tran = {
                    'type':'Retainer Invoice',
                    'number':rt.Retainer_Invoice_number,
                    'date':rt.Retainer_Invoice_date,
                    'total':rt.Grand_total,
                    'balance':rt.Balance
                }
                bal += float(rt.Balance)
                trans.append(tran)

        dChallan = Fin_Delivery_Challan.objects.filter(Customer = cust)
        if dChallan:
            for ch in dChallan:
                tran = {
                    'type':'Delivery Challan',
                    'number':ch.challan_no,
                    'date':ch.challan_date,
                    'total':ch.grandtotal,
                    'balance':ch.balance
                }
                trans.append(tran)

        rcInv = Fin_Recurring_Invoice.objects.filter(Customer = cust)
        if rcInv:
            for rc in rcInv:
                tran = {
                    'type':'Recurring Invoice',
                    'number':rc.rec_invoice_no,
                    'date':rc.start_date,
                    'total':rc.grandtotal,
                    'balance':rc.balance
                }
                bal += float(rc.balance)
                trans.append(tran)

        return render(request,'company/Fin_View_Customer.html',{'allmodules':allmodules,'com':com,'data':data, 'customer':cust, 'history':hist, 'comments':cmt, 'transactions':trans, 'BALANCE':bal})
    else:
       return redirect('/')

def Fin_changeCustomerStatus(request,id,status):
    if 's_id' in request.session:
        
        cust = Fin_Customers.objects.get(id = id)
        cust.status = status
        cust.save()
        return redirect(Fin_viewCustomer, id)
    
def Fin_deleteCustomer(request, id):
    if 's_id' in request.session:
        cust = Fin_Customers.objects.get( id = id)
        cust.delete()
        return redirect(Fin_customers)
    
def Fin_customerHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        cust = Fin_Customers.objects.get(id = id)
        his = Fin_Customers_History.objects.filter(customer = cust)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            return render(request,'company/Fin_Customer_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'customer':cust})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            return render(request,'company/Fin_Customer_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'customer':cust})
    else:
       return redirect('/')

def Fin_editCustomer(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        cust = Fin_Customers.objects.get(id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            trms = Fin_Company_Payment_Terms.objects.filter(Company = com)
            lst = Fin_Price_List.objects.filter(Company = com, status = 'Active')
            return render(request,'company/Fin_Edit_Customer.html',{'allmodules':allmodules,'com':com,'data':data, 'customer':cust, 'pTerms':trms, 'list':lst})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            trms = Fin_Company_Payment_Terms.objects.filter(Company = com.company_id)
            lst = Fin_Price_List.objects.filter(Company = com.company_id, status = 'Active')
            return render(request,'company/Fin_Edit_Customer.html',{'allmodules':allmodules,'com':com,'data':data, 'customer':cust, 'pTerms':trms, 'list':lst})
    else:
       return redirect('/')

def Fin_updateCustomer(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        cust = Fin_Customers.objects.get(id = id)

        if request.method == 'POST':
            fName = request.POST['first_name']
            lName = request.POST['last_name']
            gstIn = request.POST['gstin']
            pan = request.POST['pan_no']
            email = request.POST['email']
            phn = request.POST['mobile']

            if cust.first_name != fName and cust.last_name != lName and Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
                res = f'<script>alert("Customer `{fName} {lName}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif cust.gstin != gstIn and Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
                res = f'<script>alert("GSTIN `{gstIn}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif cust.pan_no != pan and Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
                res = f'<script>alert("PAN No `{pan}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif cust.mobile != phn and Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
                res = f'<script>alert("Phone Number `{phn}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif cust.email != email and Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
                res = f'<script>alert("Email `{email}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            # Updating customer details

            cust.title = request.POST['title']
            cust.first_name = fName
            cust.last_name = lName
            cust.company = request.POST['company_name']
            cust.location = request.POST['location']
            cust.place_of_supply = request.POST['place_of_supply']
            cust.gst_type = request.POST['gst_type']
            cust.gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn
            cust.pan_no = pan
            cust.email = email
            cust.mobile = phn
            cust.website = request.POST['website']
            cust.price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list'])
            cust.payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms'])
            cust.opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance'])
            cust.open_balance_type = request.POST['balance_type']
            cust.current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance'])
            cust.credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit'])
            cust.billing_street = request.POST['street']
            cust.billing_city = request.POST['city']
            cust.billing_state = request.POST['state']
            cust.billing_pincode = request.POST['pincode']
            cust.billing_country = request.POST['country']
            cust.ship_street = request.POST['shipstreet']
            cust.ship_city = request.POST['shipcity']
            cust.ship_state = request.POST['shipstate']
            cust.ship_pincode = request.POST['shippincode']
            cust.ship_country = request.POST['shipcountry']

            cust.save()

            #save transaction

            Fin_Customers_History.objects.create(
                Company = com,
                LoginDetails = data,
                customer = cust,
                action = 'Edited'
            )

            return redirect(Fin_viewCustomer, id)

        else:
            return redirect(Fin_editCustomer, id)
    else:
        return redirect('/')

def Fin_customerTransactionsPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        cust = Fin_Customers.objects.get(id = id)
    
        context = {'customer':cust}
        
        template_path = 'company/Fin_Customer_Transaction_Pdf.html'
        fname = 'Customer_Transactions_'+cust.first_name+'_'+cust.last_name
        # return render(request, 'company/Fin_Customer_Transaction_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareCustomerTransactionsToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        cust = Fin_Customers.objects.get(id = id)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'customer': cust}
                template_path = 'company/Fin_Customer_Transaction_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Customer_Transactions_{cust.first_name}_{cust.last_name}'
                subject = f"Customer_Transactions_{cust.first_name}_{cust.last_name}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Transaction details for - Customer-{cust.first_name} {cust.last_name}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Transactions details has been shared via email successfully..!')
                return redirect(Fin_viewCustomer,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewCustomer, id)

def Fin_addCustomerComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        cust = Fin_Customers.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Customers_Comments.objects.create(Company = com, customer = cust, comments = cmt)
            return redirect(Fin_viewCustomer, id)
        return redirect(Fin_viewCustomer, id)
    return redirect('/')

def Fin_deleteCustomerComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Customers_Comments.objects.get(id = id)
        custId = cmt.customer.id
        cmt.delete()
        return redirect(Fin_viewCustomer, custId)
        
# End

# harikrishnan start------------------------------
    
def employee_list(request):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        employee = Employee.objects.filter(company_id=com.id)
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        employee = Employee.objects.filter(company_id=com.company_id_id)
    else:
        distributor = Fin_Distributors_Details.objects.get(Login_Id = sid)

    return render(request,'company/Employee_List.html',{'employee':employee,'allmodules':allmodules,'com':com,'data':loginn})

def employee_create_page(request):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        bloodgroup = Employee_Blood_Group.objects.filter(company_id=com.id,login_id=sid).values('blood_group').distinct()
        
    elif loginn.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        bloodgroup = Employee_Blood_Group.objects.filter(company_id=staf.company_id_id,login_id=sid).values('blood_group').distinct()

    return render(request,'company/Employee_Create_Page.html',{'allmodules':allmodules,'bloodgroup':bloodgroup})   

def employee_save(request):

    if request.method == 'POST':

        title = request.POST['Title']
        firstname = request.POST['First_Name'].capitalize()
        lastname = request.POST['Last_Name'].capitalize()
        alias = request.POST['Alias']
        joiningdate = request.POST['Joining_Date']
        salarydate = request.POST['Salary_Date']
        salaryamount = request.POST['Salary_Amount']

        if request.POST['Salary_Amount'] == '':
            salaryamount = None
        else:
            salaryamount = request.POST['Salary_Amount']

        amountperhour = request.POST['perhour']
        if amountperhour == '' or amountperhour == '0':
            amountperhour = 0
        else:
            amountperhour = request.POST['perhour']

        workinghour = request.POST['workhour']
        if workinghour == '' or workinghour == '0':
            workinghour = 0
        else:
            workinghour = request.POST['workhour']

        salary_type = request.POST['Salary_Type']
        
        employeenumber = request.POST['Employee_Number']
        designation = request.POST['Designation']
        location = request.POST['Location']
        gender = request.POST['Gender']
        image = request.FILES.get('Image', None)
        if image:
            image = request.FILES['Image']
        else:
            image = ''

        dob = request.POST['DOB']
        blood = request.POST['Blood']
        parent = request.POST['Parent'].capitalize()
        spouse = request.POST['Spouse'].capitalize()
        street = request.POST['street']
        city = request.POST['city']
        state = request.POST['state']
        pincode = request.POST['pincode']
        country = request.POST['country']
        tempStreet = request.POST['tempStreet']
        tempCity = request.POST['tempCity']
        tempState = request.POST['tempState']
        tempPincode = request.POST['tempPincode']
        tempCountry = request.POST['tempCountry']
        
        
        contact = request.POST['Contact_Number']
        emergencycontact = request.POST['Emergency_Contact']
        email = request.POST['Email']
        file = request.FILES.get('File', None)
        if file:
            file = request.FILES['File']
        else:
            file=''
        bankdetails = request.POST['Bank_Details']
        accoutnumber = request.POST['Account_Number']
        ifsc = request.POST['IFSC']
        bankname = request.POST['BankName']
        branchname = request.POST['BranchName']
        transactiontype = request.POST['Transaction_Type']

        

        if request.POST['tds_applicable'] == 'Yes':
            tdsapplicable = request.POST['tds_applicable']
            tdstype = request.POST['TDS_Type']
            
            if tdstype == 'Amount':
                tdsvalue = request.POST['TDS_Amount']
            elif tdstype == 'Percentage':
                tdsvalue = request.POST['TDS_Percentage']
            else:
                tdsvalue = 0
        elif request.POST['tds_applicable'] == 'No':
            tdsvalue = 0
            tdstype = ''
            tdsapplicable = request.POST['tds_applicable']
        else:
            tdsvalue = 0
            tdstype = ''
            tdsapplicable = ''

        
        
        incometax = request.POST['Income_Tax']
        aadhar = request.POST['Aadhar']
        uan = request.POST['UAN']
        pf = request.POST['PF']
        pan = request.POST['PAN']
        pr = request.POST['PR']

        if dob == '':
            age = 2
        else:
            dob2 = date.fromisoformat(dob)
            today = date.today()
            age = int(today.year - dob2.year - ((today.month, today.day) < (dob2.month, dob2.day)))
        
        sid = request.session['s_id']
        employee = Fin_Login_Details.objects.get(id=sid)
        
        if employee.User_Type == 'Company':
            companykey =  Fin_Company_Details.objects.get(Login_Id_id=sid)
        elif employee.User_Type == 'Staff':
            staffkey = Fin_Staff_Details.objects.get(Login_Id=sid)
            companykey = Fin_Company_Details.objects.get(id=staffkey.company_id_id)
        else:
            distributorkey = Fin_Distributors_Details.objects.get(login_Id=sid)
            companykey = Fin_Company_Details.objects.get(id=distributorkey.company_id_id)

        
        if Employee.objects.filter(employee_mail=email,mobile = contact,employee_number=employeenumber,company_id = companykey.id).exists():
            messages.error(request,'user exist')
            return redirect('employee_create_page')
        
        elif Employee.objects.filter(mobile = contact,company_id = companykey.id).exists():
            messages.error(request,'phone number exist')
            return redirect('employee_create_page')
        
        elif Employee.objects.filter(emergency_contact = emergencycontact,company_id = companykey.id).exists():
            messages.error(request,'emergency phone number exist')
            return redirect('employee_create_page')
        
        elif Employee.objects.filter(employee_mail=email,company_id = companykey.id).exists():
            messages.error(request,'email exist')
            return redirect('employee_create_page')
        
        elif Employee.objects.filter(employee_number=employeenumber,company_id = companykey.id).exists():
            messages.error(request,'employee id exist')
            return redirect('employee_create_page')
        
        elif incometax != '' and Employee.objects.filter(income_tax_number = incometax,company_id = companykey.id).exists():
            messages.error(request,'Income Tax Number exist')
            return redirect('employee_create_page')
        
        elif pf != '' and Employee.objects.filter(pf_account_number = pf,company_id = companykey.id).exists():
            messages.error(request,'PF account number exist')
            return redirect('employee_create_page')
        
        elif aadhar != '' and Employee.objects.filter(aadhar_number = aadhar,company_id = companykey.id).exists():
            messages.error(request,'Aadhar number exist')
            return redirect('employee_create_page')
        
        elif pan != '' and Employee.objects.filter(pan_number = pan,company_id = companykey.id).exists():
            messages.error(request,'PAN number exist')
            return redirect('employee_create_page')
        
        elif uan != '' and Employee.objects.filter(universal_account_number = uan,company_id = companykey.id).exists():
            messages.error(request,'Universal account number exist')
            return redirect('employee_create_page')
        
        elif pr != '' and Employee.objects.filter(pr_account_number = pr,company_id = companykey.id).exists():
            messages.error(request,'PR account number exist')
            return redirect('employee_create_page')
        
        elif bankdetails.lower() == 'yes':
            if accoutnumber != '' and Employee.objects.filter(account_number=accoutnumber,company_id = companykey.id).exists():
                messages.error(request,'Bank account number already exist')
                return redirect('employee_create_page')
            
            else:
                if employee.User_Type == 'Company':
                    

                    new = Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                            employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                            employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                            employee_status = 'Active' ,company_id = companykey.id,login_id=sid,salary_amount = salaryamount ,
                            amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                            age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                            emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                            ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                            tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                            income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                            pr_account_number = pr,upload_file = file,employee_salary_type =salary_type,salary_effective_from=salarydate,
                            city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                            temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                    new.save()

                    history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                    history.save()
            
                elif employee.User_Type == 'Staff':
                    

                    new =  Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                                employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                                employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                                employee_salary_type = salary_type,employee_status = 'Active' ,company_id = companykey.id,login_id=sid ,
                                amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                                age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                                emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                                ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                                tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                                income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                                pr_account_number = pr,upload_file = file,salary_amount = salaryamount,salary_effective_from=salarydate,
                                city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                                temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                    
                    new.save()

                    history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                    history.save()
        
        else:
            if employee.User_Type == 'Company':
                

                new = Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                        employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                        employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                        employee_status = 'Active' ,company_id = companykey.id,login_id=sid,salary_amount = salaryamount ,
                        amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                        age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                        emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                        ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                        tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                        income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                        pr_account_number = pr,upload_file = file,employee_salary_type =salary_type,salary_effective_from=salarydate,
                        city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                        temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                new.save()

                history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                history.save()
        
            elif employee.User_Type == 'Staff':
                

                new =  Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                            employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                            employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                            employee_salary_type = salary_type,employee_status = 'Active' ,company_id = companykey.id,login_id=sid ,
                            amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                            age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                            emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                            ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                            tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                            income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                            pr_account_number = pr,upload_file = file,salary_amount = salaryamount,salary_effective_from=salarydate,
                            city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                            temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                
                new.save()

                history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                history.save()

        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
            employee = Employee.objects.filter(company_id=com.id)
            
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
            employee = Employee.objects.filter(company_id=com.company_id_id)
        return render(request,'company/Employee_List.html',{'allmodules':allmodules,'employee':employee,'com':com,'data':loginn})

def employee_overview(request,pk):
    employ = Employee.objects.get(id = pk)
    comments = Employee_Comment.objects.filter(employee_id = pk,company_id=employ.company_id)
    history = Employee_History.objects.filter(employee_id=pk,company_id=employ.company_id).latest('date')
    if comments.exists():
        for index, comment in enumerate(comments):
            comment.index = index + 1
    else: 
        index = '0'

    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
    return render(request,'company/Employee_Overview.html',{'index':index,'comments':comments ,'employ':employ,'allmodules':allmodules,'history':history,'com':com,'data':loginn})

def employee_delete(request,pk):
    employ = Employee.objects.get(id = pk)
    employ.delete()
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        employee = Employee.objects.filter(company_id=com.id)
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        employee = Employee.objects.filter(company_id=com.company_id_id)
    return render(request,'company/Employee_List.html',{'employee':employee,'allmodules':allmodules,'com':com,'data':loginn})

def employee_comment(request,pk):
    employ = Employee.objects.get(id = pk)
    todayDate = date.today()
    sid = request.session['s_id']
    log_in = Fin_Login_Details.objects.get(id=sid)
    loginID = log_in.id
    

    if request.method == 'POST':
        comments = request.POST['comment']  
        employeeComment = Employee_Comment(employee_id=pk,company_id=employ.company_id,login_id=loginID,comment=comments,date=todayDate)
        employeeComment.save()
        comments = Employee_Comment.objects.filter(employee_id = pk,company_id=employ.company_id)
        history = Employee_History.objects.filter(employee_id=pk,company_id=employ.company_id).latest('date')
        if comments.exists():
            for index, comment in enumerate(comments):
                comment.index = index + 1
        else: 
            index = '0'

    
    
    if log_in.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        
    elif log_in.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
    return render(request,'company/Employee_Overview.html',{'employ':employ,'allmodules':allmodules,'index':index,'comments':comments ,'history':history})


def employee_comment_view(request,pk):
    employ = Employee.objects.get(id = pk)
    comments = Employee_Comment.objects.filter(employee_id = pk,company_id=employ.company_id)
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status='New')
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status='New')
    return render(request,'company/Employee_Comment.html',{'comments':comments,'employ':employ,'allmodules':allmodules,'com':com,'data':loginn})

def employee_history(request,pk):
    employ = Employee.objects.get(id = pk)
    history = Employee_History.objects.filter(employee_id = pk,company_id=employ.company_id)
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
    return render(request,'company/Employee_History.html',{'history':history,'employ':employ,'allmodules':allmodules,'com':com,'data':loginn})

def activate(request,pk):
    employ = Employee.objects.get(id = pk)
    if employ.employee_status == 'Active':
        employ.employee_status = 'Inactive'
    else:
        employ.employee_status = 'Active'
    employ.save()

    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')

    comments = Employee_Comment.objects.filter(employee_id = pk,company_id=employ.company_id)
    history = Employee_History.objects.filter(employee_id=pk,company_id=employ.company_id).latest('date')
    if comments.exists():
        for index, comment in enumerate(comments):
            comment.index = index + 1
    else: 
        index = '0'
    return render(request,'company/Employee_Overview.html',{'employ':employ,'allmodules':allmodules,'index':index,'comments':comments ,'history':history,'com':com,'data':loginn})

def employee_edit_page(request,pk):
    employe = Employee.objects.get(id=pk)
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        bloodgroup = Employee_Blood_Group.objects.filter(company_id=com.id,login_id=sid).values('blood_group').distinct()
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        bloodgroup = Employee_Blood_Group.objects.filter(company_id=com.company_id_id,login_id=sid).values('blood_group').distinct()

    return render(request,'company/Employee_Edit_Page.html',{'employe':employe,'allmodules':allmodules,'bloodgroup':bloodgroup,'com':com,'data':loginn})


def employee_update(request,pk):
    employ = Employee.objects.get(id=pk)
    if request.method == 'POST':

        title = request.POST['Title']
        firstname = request.POST['First_Name']
        lastname = request.POST['Last_Name']
        alias = request.POST['Alias']
        joiningdate = request.POST['Joining_Date']
        salarydate = request.POST['Salary_Date']
        
        salary_type = request.POST['Salary_Type']

        if salary_type == 'Fixed':
            amountperhour = 0
            workinghour = 0
            salaryamount = request.POST['Salary_Amount']

        elif salary_type == 'Temporary' :
            amountperhour = 0
            workinghour = 0
            salaryamount = request.POST['Salary_Amount']

        elif salary_type == 'Time Based' :
            amountperhour = request.POST['perhour']
            workinghour = request.POST['workhour']
            salaryamount = request.POST['Salary_Amount']
            

        
        
        employeenumber = request.POST['Employee_Number']
        designation = request.POST['Designation']
        location = request.POST['Location']
        gender = request.POST['Gender']
        image = request.FILES.get('Image', '')
        if len(image) != 0:
            image = request.FILES['Image']
        else:
            image = employ.upload_image
        
        dob = request.POST['DOB']
        blood = request.POST['Blood']
        parent = request.POST['Parent']
        spouse = request.POST['Spouse']
        street = request.POST['street']
        city = request.POST['city']
        state = request.POST['state']
        pincode = request.POST['pincode']
        country = request.POST['country']
        tempStreet = request.POST['tempStreet']
        tempCity = request.POST['tempCity']
        tempState = request.POST['tempState']
        tempPincode = request.POST['tempPincode']
        tempCountry = request.POST['tempCountry']
        
        
        contact = request.POST['Contact_Number']
        emergencycontact = request.POST['Emergency_Contact']
        email = request.POST['Email']
        file = request.FILES.get('File', '')
        if len(file) != 0:
            file = request.FILES['File']
        else:
            file= employ.upload_file

        bankdetails = request.POST['Bank_Details']
        accoutnumber = request.POST['Account_Number']
        ifsc = request.POST['IFSC']
        bankname = request.POST['BankName']
        branchname = request.POST['BranchName']
        transactiontype = request.POST['Transaction_Type']

        

        if request.POST['tds_applicable'] == 'Yes':
            tdsapplicable = request.POST['tds_applicable']
            tdstype = request.POST['TDS_Type']
            
            if tdstype == 'Amount':
                tdsvalue = request.POST['TDS_Amount']
            elif tdstype == 'Percentage':
                tdsvalue = request.POST['TDS_Percentage']
            else:
                tdsvalue = 0
        elif request.POST['tds_applicable'] == 'No':
            tdsvalue = 0
            tdstype = ''
            tdsapplicable = request.POST['tds_applicable']
        else:
            tdsvalue = 0
            tdstype = ''
            tdsapplicable = ''

        
        
        incometax = request.POST['Income_Tax']
        aadhar = request.POST['Aadhar']
        uan = request.POST['UAN']
        pf = request.POST['PF']
        pan = request.POST['PAN']
        pr = request.POST['PR']

        if dob == '':
            age = 2
        else:
            dob2 = date.fromisoformat(dob)
            today = date.today()
            age = int(today.year - dob2.year - ((today.month, today.day) < (dob2.month, dob2.day)))
        
        sid = request.session['s_id']
        emply = Fin_Login_Details.objects.get(id=sid)
        employeee = Employee.objects.get(id=pk)

        

        if emply.User_Type == 'Company':
            companykey =  Fin_Company_Details.objects.get(Login_Id_id=sid)
        elif emply.User_Type == 'Staff':
            staffkey = Fin_Staff_Details.objects.get(Login_Id=sid)
            companykey = Fin_Company_Details.objects.get(id=staffkey.company_id_id)
        else:
            distributorkey = Fin_Distributors_Details.objects.get(login_Id=sid)
            companykey = Fin_Company_Details.objects.get(id=distributorkey.company_id_id)

        emp = Employee.objects.exclude(company_id = companykey.id,id=pk)
        print(emp,'------------------------------------------')
        
        if emp.filter(employee_mail=email,mobile = contact,employee_number=employeenumber,company_id = companykey.id).exists():
            messages.error(request,'user exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))

        
        elif emp.filter(mobile = contact,company_id = companykey.id).exists():
            messages.error(request,'phone number exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif emp.filter(emergency_contact = emergencycontact,company_id = companykey.id).exists():
            messages.error(request,'phone number exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif emp.filter(employee_mail=email,company_id = companykey.id).exists():
            messages.error(request,'email exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif emp.filter(employee_number=employeenumber,company_id = companykey.id).exists():
            messages.error(request,'employee id exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif incometax != '' and emp.filter(income_tax_number = incometax,company_id = companykey.id).exists():
            messages.error(request,'Income Tax Number exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif pf != '' and emp.filter(pf_account_number = pf,company_id = companykey.id).exists():
            messages.error(request,'PF account number exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif aadhar != '' and emp.filter(aadhar_number = aadhar,company_id = companykey.id).exists():
            messages.error(request,'Aadhar number exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif pan != '' and emp.filter(pan_number = pan,company_id = companykey.id).exists():
            messages.error(request,'PAN number exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif uan != '' and emp.filter(universal_account_number = uan,company_id = companykey.id).exists():
            messages.error(request,'Universal account number exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif pr != '' and emp.filter(pr_account_number = pr,company_id = companykey.id).exists():
            messages.error(request,'PR account number exist')
            return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
        
        elif bankdetails.lower() == 'yes':
            if accoutnumber != '' and emp.filter(account_number=accoutnumber,company_id = companykey.id).exists():
                messages.error(request,'Bank account number already exist')
                return redirect(reverse('employee_edit_page', kwargs={'pk': pk}))
            
            else:
        
                employeee.upload_image=image
                employeee.title = title
                employeee.first_name = firstname
                employeee.last_name = lastname
                employeee.alias = alias
                employeee.employee_mail = email
                employeee.employee_number = employeenumber
                employeee.employee_designation = designation
                employeee.employee_current_location = location
                employeee.mobile = contact
                employeee.date_of_joining = joiningdate
                employeee.salary_amount = salaryamount 
                employeee.amount_per_hour = amountperhour 
                employeee.total_working_hours = workinghour
                employeee.gender = gender 
                employeee.date_of_birth = dob 
                employeee.age = age
                employeee.blood_group = blood
                employeee.fathers_name_mothers_name = parent
                employeee.spouse_name = spouse
                employeee.emergency_contact = emergencycontact
                employeee.provide_bank_details = bankdetails
                employeee.account_number = accoutnumber
                employeee.ifsc = ifsc
                employeee.name_of_bank = bankname
                employeee.branch_name = branchname
                employeee.bank_transaction_type = transactiontype
                employeee.tds_applicable = tdsapplicable
                employeee.tds_type = tdstype
                employeee.percentage_amount = tdsvalue
                employeee.pan_number = pan
                employeee.income_tax_number = incometax
                employeee.aadhar_number = aadhar
                employeee.universal_account_number = uan
                employeee.pf_account_number = pf
                employeee.pr_account_number = pr
                employeee.upload_file = file
                employeee.employee_salary_type=salary_type
                employeee.salary_effective_from=salarydate
                employeee.city=city
                employeee.street=street
                employeee.state=state
                employeee.country=country
                employeee.pincode=pincode
                employeee.temporary_city=tempCity
                employeee.temporary_street=tempStreet
                employeee.temporary_state=tempState
                employeee.temporary_pincode=tempPincode
                employeee.temporary_country=tempCountry
                employeee.save()

                history = Employee_History(company_id = employeee.company_id,employee_id = pk,login_id= emply.id,date = date.today(),action = 'Edited')
                history.save()

        
        else:
        
            employeee.upload_image=image
            employeee.title = title
            employeee.first_name = firstname
            employeee.last_name = lastname
            employeee.alias = alias
            employeee.employee_mail = email
            employeee.employee_number = employeenumber
            employeee.employee_designation = designation
            employeee.employee_current_location = location
            employeee.mobile = contact
            employeee.date_of_joining = joiningdate
            employeee.salary_amount = salaryamount 
            employeee.amount_per_hour = amountperhour 
            employeee.total_working_hours = workinghour
            employeee.gender = gender 
            employeee.date_of_birth = dob 
            employeee.age = age
            employeee.blood_group = blood
            employeee.fathers_name_mothers_name = parent
            employeee.spouse_name = spouse
            employeee.emergency_contact = emergencycontact
            employeee.provide_bank_details = bankdetails
            employeee.account_number = accoutnumber
            employeee.ifsc = ifsc
            employeee.name_of_bank = bankname
            employeee.branch_name = branchname
            employeee.bank_transaction_type = transactiontype
            employeee.tds_applicable = tdsapplicable
            employeee.tds_type = tdstype
            employeee.percentage_amount = tdsvalue
            employeee.pan_number = pan
            employeee.income_tax_number = incometax
            employeee.aadhar_number = aadhar
            employeee.universal_account_number = uan
            employeee.pf_account_number = pf
            employeee.pr_account_number = pr
            employeee.upload_file = file
            employeee.employee_salary_type=salary_type
            employeee.salary_effective_from=salarydate
            employeee.city=city
            employeee.street=street
            employeee.state=state
            employeee.country=country
            employeee.pincode=pincode
            employeee.temporary_city=tempCity
            employeee.temporary_street=tempStreet
            employeee.temporary_state=tempState
            employeee.temporary_pincode=tempPincode
            employeee.temporary_country=tempCountry
            employeee.save()

            history = Employee_History(company_id = employeee.company_id,employee_id = pk,login_id= emply.id,date = date.today(),action = 'Edited')
            history.save()
        
        return redirect('employee_overview',pk=employ.id)
    

def employee_profile_email(request,pk):
    
            try:
                if request.method == 'POST':
                    emails_string = request.POST['email_ids']
                    data = Employee.objects.get(id=pk)
                    cmp = Fin_Company_Details.objects.get(id=data.company_id)

                    # Split the string by commas and remove any leading or trailing whitespace
                    emails_list = [email.strip() for email in emails_string.split(',')]
                    email_message = "Here's the requested profile"
                    

                    context = {'cmp': cmp, 'employ': data, 'email_message': email_message}
                    print('context working')

                    template_path = 'company/Employee_Profile_PDF.html'
                    print('tpath working')

                    template = get_template(template_path)
                    print('template working')

                    html = template.render(context)
                    print('html working')

                    result = BytesIO()
                    print('bytes working')

                    pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result,path='company/Employee_Profile_PDF.html',base_url=request.build_absolute_uri('/'))
                    print('pisa working')

                    if pdf.err:
                        raise Exception(f"PDF generation error: {pdf.err}")

                    pdf = result.getvalue()
                    print('')
                    filename = f"{data.first_name}_{data.last_name}'s_Profile.pdf"
                    subject = f"{data.first_name}_{data.last_name}'s_Profile"
                    email = EmailMessage(subject, f"Hi, \n{email_message} -of -{cmp.Company_name}. ", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                    email.attach(filename, pdf, "application/pdf")
                    email.send(fail_silently=False)

                    messages.success(request, 'Report has been shared via email successfully..!')
                    return redirect('employee_list')
            except Exception as e:
                messages.error(request, f'Error while sending report: {e}')
                return redirect('employee_list')


def Employee_Profile_PDF(request,pk):
    employ = Employee.objects.get(id=pk)
    return render(request,'company/Employee_Profile_PDF.html',{'employ':employ})
        
def employee_blood_group(request):
    if request.method == 'POST':
        bloodGroup = request.POST.get('bloodGroup', '').upper()
        sid = request.session.get('s_id')
        loginn = Fin_Login_Details.objects.get(id=sid)
        invalid_group = ['A+', 'A-', 'B+', 'O+']

        if loginn.User_Type == 'Company' and bloodGroup not in invalid_group:
            com = Fin_Company_Details.objects.get(Login_Id=sid)
            
            allmodules = Fin_Modules_List.objects.get(company_id=com.id, status = 'New')
            group = Employee_Blood_Group(blood_group=bloodGroup, company_id=com.id, login_id=sid)
            group.save()
            bloodgroup = Employee_Blood_Group.objects.filter(company_id=com.id,login_id=sid).values('blood_group').distinct()
            return JsonResponse({'success': True,'bloodgroup': list(bloodgroup)})

        elif loginn.User_Type == 'Staff' and bloodGroup not in invalid_group:
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id=com.company_id_id, status = 'New')
            group = Employee_Blood_Group(blood_group=bloodGroup, company_id=com.company_id_id, login_id=sid)
            group.save()
            bloodgroup = Employee_Blood_Group.objects.filter(company_id=com.company_id_id,login_id=sid).values('blood_group').distinct()
            return JsonResponse({'success': True,'bloodgroup': list(bloodgroup)})

    return JsonResponse({'success': False, 'error': 'Invalid blood group or user type'})
    
def bloodgroup_data(request):
    sid = request.session.get('s_id')
    loginn = Fin_Login_Details.objects.get(id=sid)
    
    if loginn.User_Type == 'Company' :
            com = Fin_Company_Details.objects.get(Login_Id=sid)
            
            bloodgroup = Employee_Blood_Group.objects.filter(company_id=com.id,login_id=sid).values('blood_group').distinct()
            return JsonResponse({'success': True,'bloodgroup': list(bloodgroup)})

    elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            bloodgroup = Employee_Blood_Group.objects.filter(company_id=com.company_id_id,login_id=sid).values('blood_group').distinct()
            return JsonResponse({'success': True,'bloodgroup': list(bloodgroup)})

    else:
        return JsonResponse({'success': False,'bloodgroup': list(bloodgroup)})
# holiday section--------------------------------------------------------------------------------------------------------------------------
    
def holiday_list(request):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        # holiday = Holiday.objects.filter(company_id=com.id).annotate(month=ExtractMonth('start_date'),year=ExtractYear('start_date')).values('month','year').annotate(total_holiday=Sum('holiday_days')).order_by('year','month')
        holiday = Holiday.objects.filter(company_id=com.id).annotate(month=ExtractMonth('start_date'), year=ExtractYear('start_date')).values('month', 'year').annotate(total_holiday=Cast(Sum(F('holiday_days')),IntegerField())).order_by('year', 'month')
        
        
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        holiday = Holiday.objects.filter(company_id=com.company_id_id).annotate(month=ExtractMonth('start_date'), year=ExtractYear('start_date')).values('month', 'year').annotate(total_holiday=Cast(Sum(F('holiday_days')),IntegerField())).order_by('year', 'month')
    
    
    return render(request,'company/Holiday_List.html',{'holiday':holiday,'allmodules':allmodules,'com':com,'data':loginn})
 
def holiday_create_page(request):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
    return render(request,'company/Holiday_Create_Page.html',{'allmodules':allmodules,'com':com,'data':loginn})

def holiday_add(request):
    if request.method == 'POST':
        startdate = request.POST['date1']
        enddate = request.POST['date2']
        title = request.POST['title']

        start_date1 = datetime.strptime(startdate, '%Y-%m-%d').date()
        end_date1 = datetime.strptime(enddate, '%Y-%m-%d').date()
        day_s = end_date1 - start_date1 + timedelta(days=1)
        
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        holiday_check = Holiday.objects.filter(start_date=startdate,end_date=enddate,company_id=com.id)
            
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        holiday_check = Holiday.objects.filter(start_date=startdate,end_date=enddate,company_id=com.company_id_id)
        
    if holiday_check.exists():
        messages.error(request,' Dates are already listed as holiday')
        return render(request,'company/Holiday_Create_Page.html',{'allmodules':allmodules,'com':com,'data':loginn})

    # uncomment if you want to check whether the holidays would overlap
    # elif Holiday.objects.filter(Q(start_date__lte=startdate) & Q(end_date__gte=startdate)).exists() or Holiday.objects.filter(Q(start_date__lte=enddate) & Q(end_date__gte=enddate)).exists():
    #     messages.error(request,'Some dates are already listed as holiday')
    #     sid = request.session['s_id']
    #     loginn = Fin_Login_Details.objects.get(id=sid)
    #     if loginn.User_Type == 'Company':
    #         com = Fin_Company_Details.objects.get(Login_Id = sid)# 
    #         allmodules = Fin_Modules_List.objects.get(company_id = com.id)
            
    #     elif loginn.User_Type == 'Staff' :
    #         com = Fin_Staff_Details.objects.get(Login_Id = sid)# 
    #         allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id)
    #     return render(request,'company/Holiday_Create_Page.html',{'allmodules':allmodules})
    
    else:
        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
            holiday = Holiday(start_date=startdate,end_date=enddate,login_id=sid,holiday_name=title,company_id=com.id,holiday_days=day_s)
            holiday.save()
            history = Holiday_History(company_id = com.id,login_id=sid,holiday_id = holiday.id,date = date.today(),action = 'Created',start_date = startdate,end_date = enddate,holiday_name=title)
            history.save()
            holidayss = Holiday.objects.filter(company_id=com.id).annotate(month=ExtractMonth('start_date'), year=ExtractYear('start_date')).values('month', 'year').annotate(total_holiday=Cast(Sum(F('holiday_days')),IntegerField())).order_by('year', 'month')

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
            holiday = Holiday(start_date=startdate,end_date=enddate,holiday_name=title,login_id=sid,company_id=com.company_id_id,holiday_days=day_s)
            holiday.save()
            history = Holiday_History(company_id = com.id,login_id=sid,holiday_id = holiday.id,date = date.today(),action = 'Created',start_date = startdate,end_date = enddate,holiday_name=title)
            history.save()
            holidayss = Holiday.objects.filter(company_id=com.company_id_id).annotate(month=ExtractMonth('start_date'), year=ExtractYear('start_date')).values('month', 'year').annotate(total_holiday=Cast(Sum(F('holiday_days')),IntegerField())).order_by('year', 'month')
            
        return render(request,'company/Holiday_List.html',{'allmodules':allmodules,'holiday':holidayss,'com':com,'data':loginn})
        
    
def holiday_calendar_view(request,mn,yr):
    month = int(mn)-1
    year = int(yr)
    
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        events = Holiday.objects.filter(start_date__month=mn,start_date__year=year,company_id=com.id)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        comments = Holiday_Comment.objects.filter(month=mn,year=year,company_id=com.id)
        for index, comment in enumerate(comments):
            comment.index = index + 1
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        events = Holiday.objects.filter(start_date__month=mn,start_date__year=year,company_id=com.company_id_id)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        comments = Holiday_Comment.objects.filter(month=mn,year=year,company_id=com.company_id_id)
        for index, comment in enumerate(comments):
            comment.index = index + 1

    return render(request, 'company/Holiday_Calendar.html', {'comments':comments,'events': events,'allmodules':allmodules,'year':year,'month':month,'com':com,'data':loginn})

def holiday_delete(request, pk):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')

        if request.method == 'POST':
            ogMonth = int(request.POST['month'])
            year = int(request.POST['year'])
            month = ogMonth + 1
            holiday = Holiday.objects.get(id=pk)
            holiday.delete()
            events = Holiday.objects.filter(start_date__month=month,start_date__year=year,company_id=com.id)
            if events.exists():
                return render(request, 'company/Holiday_Calendar.html', {'events': events,'allmodules':allmodules,'year':year,'month':ogMonth,'com':com,'data':loginn})
            else:
                return redirect('holiday_list')
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')

        if request.method == 'POST':
            ogMonth = int(request.POST['month'])
            year = int(request.POST['year'])
            month = ogMonth + 1
            holiday = Holiday.objects.get(id=pk)
            holiday.delete()
            events = Holiday.objects.filter(start_date__month=month,start_date__year=year,company_id = com.company_id_id)
            if events.exists():
                return render(request, 'company/Holiday_Calendar.html', {'events': events,'allmodules':allmodules,'year':year,'month':ogMonth,'com':com,'data':loginn})
            else:
                return redirect('holiday_list')


def holiday_edit_page(request,pk,mn,yr):
    holiday = Holiday.objects.get(id=pk)
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
    return render(request,'company/Holiday_Edit_Page.html',{'holiday':holiday,'allmodules':allmodules,'com':com,'data':loginn,'year':yr,'month':mn})


def holiday_update(request,pk,mn,yr):
    mon = mn+1
    holiday = Holiday.objects.get(id=pk)
    if request.method == 'POST':
        startdate = request.POST['date1']
        enddate = request.POST['date2']
        title = request.POST['title']

        start_date1 = datetime.strptime(startdate, '%Y-%m-%d').date()
        end_date1 = datetime.strptime(enddate, '%Y-%m-%d').date()
        day_s = end_date1 - start_date1 + timedelta(days=1)

    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            companyID = com.id
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
            
    elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            companyID = com.company_id_id
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        
    holi = Holiday.objects.filter(start_date=startdate,end_date=enddate,company_id=companyID)
    if holi.exclude(id=pk).exists():
            error = 'yes'
            messages.error(request,'Some dates are already listed as holiday')
            sid = request.session['s_id']
            loginn = Fin_Login_Details.objects.get(id=sid)
            if loginn.User_Type == 'Company':
                com = Fin_Company_Details.objects.get(Login_Id = sid)
                allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
                
            elif loginn.User_Type == 'Staff' :
                com = Fin_Staff_Details.objects.get(Login_Id = sid)
                allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
            return render(request,'company/Holiday_Edit_Page.html',{'holiday':holiday,'allmodules':allmodules,'com':com,'data':loginn})
        
    else:
            sid = request.session['s_id']
            loginn = Fin_Login_Details.objects.get(id=sid)
            if loginn.User_Type == 'Company':
                com = Fin_Company_Details.objects.get(Login_Id = sid)
                allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
                
                holiday.start_date = startdate
                holiday.end_date = enddate
                holiday.holiday_name=title
                holiday.login_id=sid
                holiday.company_id=com.id
                holiday.holiday_days=day_s
                holiday.save()
                history = Holiday_History(company_id = com.id,login_id=sid,holiday_id = holiday.id,date = date.today(),action = 'Edited',start_date = startdate,end_date = enddate,holiday_name=title)
                history.save()  
                
                holida_y = Holiday.objects.filter(company_id=com.id).annotate(month=ExtractMonth('start_date'), year=ExtractYear('start_date')).values('month', 'year').annotate(total_holiday=Cast(Sum(F('holiday_days')),IntegerField())).order_by('year', 'month')

            else:
                com = Fin_Staff_Details.objects.get(Login_Id = sid)
                allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
                
                holiday.start_date = startdate
                holiday.end_date = enddate
                holiday.holiday_name=title
                holiday.login_id=sid
                holiday.company_id=com.company_id_id
                holiday.holiday_days=day_s
                holiday.save()
                history = Holiday_History(company_id = com.company_id_id,login_id=sid,holiday_id = holiday.id,date = date.today(),action = 'Edited',start_date = startdate,end_date = enddate,holiday_name=title)
                history.save()  

                holida_y = Holiday.objects.filter(company_id=com.company_id_id).annotate(month=ExtractMonth('start_date'), year=ExtractYear('start_date')).values('month', 'year').annotate(total_holiday=Cast(Sum(F('holiday_days')),IntegerField())).order_by('year', 'month')

    return redirect('holiday_calendar_view', mn=mon, yr=yr)
    # return render(request,'company/Holiday_List.html',{'holiday':holida_y,'allmodules':allmodules,'com':com,'data':loginn})


def holiday_comment(request,mn,yr):
    Month = mn+1
    
    todayDate = date.today()
    sid = request.session['s_id']
    log_in = Fin_Login_Details.objects.get(id=sid)
    loginID = log_in.id
    
    if log_in.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        
        if request.method == 'POST':
            comments = request.POST['comment']  
            holidayComment = Holiday_Comment(month = Month, year = yr,company_id=com.id,login_id=loginID,comment=comments,date=todayDate)
            holidayComment.save()
            
    elif log_in.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        
        if request.method == 'POST':
            comments = request.POST['comment']  
            holidayComment = Holiday_Comment(month = Month, year = yr,company_id=com.company_id_id,login_id=loginID,comment=comments,date=todayDate)
            holidayComment.save()
    
    redirect_url = reverse('holiday_calendar_view', args=[Month, yr])
    return redirect(redirect_url)
    
def holiday_comment_delete(request, pk,mn,yr):
    holiday = Holiday_Comment.objects.get(id=pk)
    holiday.delete()
    redirect_url = reverse('holiday_calendar_view', args=[mn, yr])
    return redirect(redirect_url)

def holiday_history(request,month,year):
        mn = month + 1
        
        startdate = datetime(year, mn, 1)
        if mn == 12:
            enddate = datetime(year + 1, 1, 1) - timedelta(days=1)
        else:
            enddate = datetime(year, mn + 1, 1) - timedelta(days=1)

        print(startdate,enddate,'----------------------------------------------------')
        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
            history = Holiday_History.objects.filter(company_id=com.id,start_date__gt = startdate,end_date__lt = enddate)
            
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
            history = Holiday_History.objects.filter(company_id=com.company_id_id,start_date__gt = startdate,end_date__lt = enddate)
        
        
        return render(request,'company/Holiday_History.html',{'history':history,'allmodules':allmodules,'com':com,'data':loginn,'month':mn,'year':year})
        
def employee_comment_delete(request,pk,id):
    employee_comment = Employee_Comment.objects.get(id=pk)
    employee_comment.delete()
    redirect_url = reverse('employee_overview', args=[id])
    return redirect(redirect_url)
# harikrishnan end ---------------

# ---------------------------Start Banking------------------------------------ 

def Fin_banking_listout(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        all_bankings = Fin_Banking.objects.filter(company = company)
        print(all_bankings)

        context = {
            'login_det':login_det,
            'com':com,
            'allmodules':allmodules,
            'all_bankings':all_bankings
        }
        return render(request,'company/banking/Fin_banking_listout.html',context)
    else:
       return redirect('/')  

def Fin_banking_sort_by_name(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        all_bankings = Fin_Banking.objects.filter(company = company).order_by('bank_name')
        print(all_bankings)

        context = {
            'login_det':login_det,
            'com':com,
            'allmodules':allmodules,
            'all_bankings':all_bankings
        }
        return render(request,'company/banking/Fin_banking_listout.html',context)
    else:
       return redirect('/')  
    
def Fin_banking_sort_by_balance(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        all_bankings = Fin_Banking.objects.filter(company = company).order_by('bank_name')
        print(all_bankings)

        context = {
            'login_det':login_det,
            'com':com,
            'allmodules':allmodules,
            'all_bankings':all_bankings
        }
        return render(request,'company/banking/Fin_banking_listout.html',context)
    else:
       return redirect('/')

def Fin_banking_filter_active(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        all_bankings = Fin_Banking.objects.filter(company = company,bank_status = 'Active')
        print(all_bankings)

        context = {
            'login_det':login_det,
            'com':com,
            'allmodules':allmodules,
            'all_bankings':all_bankings
        }
        return render(request,'company/banking/Fin_banking_listout.html',context)
    else:
       return redirect('/') 

def Fin_banking_filter_inactive(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        all_bankings = Fin_Banking.objects.filter(company = company,bank_status = 'Inactive')
        print(all_bankings)

        context = {
            'login_det':login_det,
            'com':com,
            'allmodules':allmodules,
            'all_bankings':all_bankings
        }
        return render(request,'company/banking/Fin_banking_listout.html',context)
    else:
       return redirect('/') 

def Fin_create_bank(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')


        context = {
                'login_det':login_det,
                'com':com,
                'allmodules':allmodules
            }
        return render(request,'company/banking/Fin_create_bank.html',context)
    else:
       return redirect('/')  

def Fin_banking_check_account_number(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id


        if request.method == 'GET':
            bank_name = request.GET.get('bank_name', '')
            account_number = request.GET.get('account_number', '')

            print(account_number)
            # Check if the account number exists for the given bank
            exists = Fin_Banking.objects.filter( account_number=account_number,company = company ).exists()

            # Return a JSON response indicating whether the account number exists
            return JsonResponse({'exists': exists})

    # Handle other HTTP methods if necessary
    return JsonResponse({'exists': False})  # Default to 'False' if the request is not a GET

def Fin_create_bank_account(request):
     if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')


        if request.method == 'POST':
            bname = request.POST.get('bname')
            ifsc = request.POST.get('ifsc')
            branch = request.POST.get('branch')
            opening_balance = request.POST.get('Opening')
            date = request.POST.get('date')
            opening_blnc_type = request.POST.get('op_type')
            acc_num = request.POST.get('acc_num')
            
            if opening_blnc_type == 'CREDIT':
                opening_balance = 0 -int(opening_balance)
            
            bank = Fin_Banking(
                login_details = login_det,
                company = company,
                bank_name=bname, 
                ifsc_code=ifsc,
                branch_name=branch, 
                opening_balance=opening_balance, 
                opening_balance_type = opening_blnc_type,
                date=date,
                current_balance=opening_balance,
                account_number=acc_num,
                bank_status = 'Active')
            bank.save()

            banking_history = Fin_BankingHistory(
                login_details = login_det,
                company = company,
                banking = bank,
                action = 'Created'
            )
            banking_history.save()
            
            transaction=Fin_BankTransactions(
                login_details = login_det,
                company = company,
                banking = bank,
                amount = opening_balance,
                adjustment_date = date,
                transaction_type = "Opening Balance",
                from_type = '',
                to_type = '',
                current_balance = opening_balance
                
            )
            transaction.save()

            transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transaction,
                action = 'Created'
            )
            transaction_history.save()

            
            return redirect('Fin_banking_listout')

def Fin_view_bank(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')
        
        bank = Fin_Banking.objects.get(id=id)
        bank_list = Fin_Banking.objects.filter(company=company)
        trans = Fin_BankTransactions.objects.filter(banking_id=id) 
        comments = Fin_BankingComments.objects.filter(banking_id=id) 
        last_history = Fin_BankingHistory.objects.filter(banking_id=id).last()
        
        context = {
                'login_det':login_det,
                'com':com,
                'allmodules':allmodules,
                "bank":bank,
                'bl':bank_list,
                'trans':trans,
                'comments':comments,
                'last_history':last_history,
            }   

        return render(request,'company/banking/Fin_view_bank.html',context)

def Fin_bank_to_cash(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank=Fin_Banking.objects.get(id = id)
        all_banks = Fin_Banking.objects.filter(company = company)

        context = {
                'login_det':login_det,
                'com':com,
                'allmodules':allmodules,
                'bank':bank,
                'all_banks':all_banks,
               
            }  
       
        return render(request,'company/banking/Fin_bank_to_cash.html',context)
    
def Fin_save_bankTocash(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        if request.method == 'POST':
            f_bank = request.POST.get('bank')
            amount = int(request.POST.get('amount'))
            adj_date = request.POST.get('adjdate')
            desc = request.POST.get('desc')

            

            bank = Fin_Banking.objects.get(id=f_bank)
            bank.current_balance -= amount
            bank.save()
            
            transaction = Fin_BankTransactions(
                login_details = login_det,
                company = company,
                banking = bank,
                from_type = '',
                to_type='',
                amount=amount,
                description=desc,
                adjustment_date=adj_date,
                transaction_type='Cash Withdraw',
                current_balance= bank.current_balance               
            )
            transaction.save()
            transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transaction,
                action = 'Created'
            )
            transaction_history.save()
            
        return redirect('Fin_view_bank',bank.id)
    
def Fin_cash_to_bank(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank=Fin_Banking.objects.get(id = id)
        all_banks = Fin_Banking.objects.filter(company = company)

        context = {
                'login_det':login_det,
                'com':com,
                'allmodules':allmodules,
                'bank':bank,
                'all_banks':all_banks,
               
            }  
       
        return render(request,'company/banking/Fin_cash_to_bank.html',context)
    
def Fin_save_cashTobank(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        if request.method == 'POST':
            t_bank = request.POST.get('bank')
            amount = int(request.POST.get('amount'))
            adj_date = request.POST.get('adjdate')
            desc = request.POST.get('desc')

            

            bank = Fin_Banking.objects.get(id=t_bank)
            bank.current_balance += amount
            bank.save()
            
            transaction = Fin_BankTransactions(
                login_details = login_det,
                company = company,
                banking = bank,
                from_type = '',
                to_type='',
                amount=amount,
                description=desc,
                adjustment_date=adj_date,
                transaction_type='Cash Deposit', 
                current_balance= bank.current_balance                 
            )
            transaction.save()
            transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transaction,
                action = 'Created'
            )
            transaction_history.save()
            
        return redirect('Fin_view_bank',bank.id)   
    
def Fin_bank_to_bank(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank=Fin_Banking.objects.get(id = id)
        all_banks = Fin_Banking.objects.filter(company = company)

        context = {
                'login_det':login_det,
                'com':com,
                'allmodules':allmodules,
                'bank':bank,
                'all_banks':all_banks,
               
            }  
       
        return render(request,'company/banking/Fin_bank_to_bank.html',context)
    
def Fin_save_bankTobank(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        current_bank = Fin_Banking.objects.get(id=id)

        if request.method == 'POST':
            print('hi')
            f_bank = request.POST.get('fbank')
            print(f_bank)
            t_bank = request.POST.get('tbank')
            amount = int(request.POST.get('amount'))
            adj_date = request.POST.get('adjdate')
            desc = request.POST.get('desc')


            from_bank = Fin_Banking.objects.get(id=f_bank)
            print(from_bank)
            to_bank = Fin_Banking.objects.get(id=t_bank)
            to_bank.current_balance += amount
            from_bank.current_balance -= amount
            to_bank.save()
            from_bank.save()
            

            transaction_withdraw = Fin_BankTransactions(
                login_details = login_det,
                company = company,
                banking = from_bank,
                from_type = 'From :' + from_bank.bank_name,
                to_type='To :' + to_bank.bank_name,
                amount=amount,
                description=desc,
                adjustment_date=adj_date,
                transaction_type='From Bank Transfer', 
                current_balance= from_bank.current_balance,
                               
            )
            transaction_withdraw.save()
            transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transaction_withdraw,
                action = 'Created'
            )
            transaction_history.save()

            transaction_deposit = Fin_BankTransactions(
                login_details = login_det,
                company = company,
                banking = to_bank,
                from_type = 'From :' + from_bank.bank_name,
                to_type='To :' + to_bank.bank_name,
                amount=amount,
                description=desc,
                adjustment_date=adj_date,
                transaction_type='To Bank Transfer', 
                current_balance= to_bank.current_balance,
            )
            transaction_deposit.save()
            transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transaction_deposit,
                action = 'Created'
            )
            transaction_history.save()

            transaction_withdraw.bank_to_bank = transaction_deposit.id
            transaction_deposit.bank_to_bank = transaction_withdraw.id
            transaction_withdraw.save()
            transaction_deposit.save()
            
        return redirect('Fin_view_bank',current_bank.id)   
    
def Fin_bank_adjust(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank=Fin_Banking.objects.get(id = id)
        all_banks = Fin_Banking.objects.filter(company = company)

        context = {
                'login_det':login_det,
                'com':com,
                'allmodules':allmodules,
                'bank':bank,
                'all_banks':all_banks,
               
            }  
       
        return render(request,'company/banking/Fin_bank_adjust.html',context)

def Fin_save_bank_adjust(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        if request.method == 'POST':
            t_bank = request.POST.get('bank')
            amount = int(request.POST.get('amount'))
            adj_date = request.POST.get('adjdate')
            adj_type = request.POST.get('typ')
            desc = request.POST.get('desc')

            bank = Fin_Banking.objects.get(id=t_bank)

            if adj_type == 'Increase Balance':
                bank.current_balance += amount
                bank.save()
               
            else:
                bank.current_balance -= amount
                bank.save()
                
            
            transaction = Fin_BankTransactions(
                login_details = login_det,
                company = company,
                banking = bank,
                from_type = '',
                to_type='',
                amount=amount,
                description=desc,
                adjustment_date=adj_date,
                transaction_type='Adjust bank Balance', 
                current_balance= bank.current_balance,     
                      
            )
            transaction.save()


            if adj_type == 'Increase Balance':
              
                transaction.adjustment_type = 'Increase Balance'
                transaction.save()
            else:
               
                transaction.adjustment_type = 'Reduce Balance'
                transaction.save()

            
            transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transaction,
                action = 'Created'
            )
            transaction_history.save()
            
        return redirect('Fin_view_bank',bank.id) 

def Fin_edit_bank(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank = Fin_Banking.objects.get(id=id)

        context = {
                'login_det':login_det,
                'com':com,
                'allmodules':allmodules,
                'bank':bank
            }
        return render(request,'company/banking/Fin_edit_bank.html',context)
    else:
       return redirect('/')   

def Fin_edit_bank_account(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank = Fin_Banking.objects.get(id = id)
        old_op_blnc = int(bank.opening_balance)
        transactions = Fin_BankTransactions.objects.filter(banking=bank)
        transactions_count = Fin_BankTransactions.objects.filter(banking=bank).count()

        
        if request.method == 'POST':
            bname = request.POST.get('bname')
            ifsc = request.POST.get('ifsc')
            branch = request.POST.get('branch')
            opening_balance = request.POST.get('Opening')
            date = request.POST.get('date')
            opening_blnc_type = request.POST.get('op_type')
            acc_num = request.POST.get('acc_num')
            
            if opening_blnc_type == 'CREDIT':
                opening_balance = 0 -int(opening_balance)

            if old_op_blnc == int(opening_balance):
                print('same')
                bank.login_details = login_det
                bank.company = company
                bank.bank_name=bname
                bank.ifsc_code=ifsc
                bank.branch_name=branch
                bank.opening_balance=opening_balance 
                bank.opening_balance_type = opening_blnc_type
                bank.date=date
                bank.current_balance=opening_balance
                bank.account_number=acc_num
                bank.save()

                banking_history = Fin_BankingHistory(
                    login_details = login_det,
                    company = company,
                    banking = bank,
                    action = 'Updated'
                )
                banking_history.save()

            elif old_op_blnc < int(opening_balance): 

                print('increase')
                increased_amount =  int(opening_balance) - old_op_blnc 
                print('increased_amount')
                bank.login_details = login_det
                bank.company = company
                bank.bank_name=bname
                bank.ifsc_code=ifsc
                bank.branch_name=branch
                bank.opening_balance=opening_balance 
                bank.opening_balance_type = opening_blnc_type
                bank.date=date
                bank.current_balance += int(increased_amount)
                bank.account_number=acc_num
                bank.save()

                banking_history = Fin_BankingHistory(
                    login_details = login_det,
                    company = company,
                    banking = bank,
                    action = 'Updated'
                )
                banking_history.save() 

                for t in transactions:
                    print('for')
                    print(t)
                    t.login_details_id = login_det.id
                    t.company_id = company.id
                    t.banking_id = bank.id
                    if t.transaction_type == "Opening Balance":
                        t.amount = t.amount + int(increased_amount)
                    t.current_balance = t.current_balance + int(increased_amount)
                    t.save()

                transaction_history = Fin_BankTransactionHistory(
                    login_details = login_det,
                    company = company,
                    bank_transaction = t,
                    action = 'Updated'
                )
                transaction_history.save() 

            elif old_op_blnc > int(opening_balance): 

                print('decrease')  
                decreased_amount =  old_op_blnc - int(opening_balance)
                print('decreased_amount')
                bank.login_details = login_det
                bank.company = company
                bank.bank_name=bname
                bank.ifsc_code=ifsc
                bank.branch_name=branch
                bank.opening_balance=opening_balance 
                bank.opening_balance_type = opening_blnc_type
                bank.date=date
                bank.current_balance = bank.current_balance - int(decreased_amount)
                bank.account_number=acc_num
                bank.save()

                banking_history = Fin_BankingHistory(
                    login_details = login_det,
                    company = company,
                    banking = bank,
                    action = 'Updated'
                )
                banking_history.save() 

                for t in transactions:
                    print(t)
                    t.login_details_id = login_det.id
                    t.company_id = company.id
                    t.banking_id = bank.id
                    if t.transaction_type == "Opening Balance":
                        t.amount = t.amount - int(decreased_amount)
                    t.current_balance = t.current_balance - int(decreased_amount)
                    t.save()

                transaction_history = Fin_BankTransactionHistory(
                    login_details = login_det,
                    company = company,
                    bank_transaction = t,
                    action = 'Updated'
                )
                transaction_history.save()       
                        
    return redirect('Fin_view_bank',bank.id)



def Fin_change_bank_status(request,id):
   
    bank = Fin_Banking.objects.get(id =id)
    
    if bank.bank_status == "Active":
        bank.bank_status = "Inactive"
    else:
        bank.bank_status = "Active"
    bank.save()

    return redirect('Fin_view_bank',id=id)

def Fin_delete_bank(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        all_bankings = Fin_Banking.objects.filter(company = company)
   
        bank = Fin_Banking.objects.get(id =id)
        
        transactions_count = Fin_BankTransactions.objects.filter(banking = bank).count()
        print(transactions_count) 

        if transactions_count == 0:
            try:
                bank_history = Fin_BankingHistory.objects.filter(banking = bank)
                bank_history.delete()
                bank.delete()
            except:
                bank.delete()
            
            messages.success(request, 'Bank has been deleted successfully.')

            return redirect('Fin_banking_listout')

        elif transactions_count == 1:
            transaction = Fin_BankTransactions.objects.get(banking = bank)
            transaction_history = Fin_BankTransactionHistory.objects.filter(bank_transaction = transaction)
            bank_history = Fin_BankingHistory.objects.filter(banking = bank)
            transaction_history.delete()
            transaction.delete()
            bank_history.delete()
            bank.delete()

            messages.success(request, 'Bank has been deleted successfully.')

            return redirect('Fin_banking_listout')

        elif transactions_count > 1:
            bank.bank_status = "Inactive"
            bank.save()

            messages.success(request, 'Bank already have some transactions so the status has been changed to Inactive')

            return redirect('Fin_view_bank',id=id)


def Fin_banking_add_file(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank = Fin_Banking.objects.get(id =id)

        if request.method == 'POST':
            
            if len(request.FILES) != 0:
               file = request.FILES['file']

               attachment = Fin_BankingAttachments(
                   login_details = login_det,
                   company = company,
                   banking = bank,
                   file = file
               )
               attachment.save()

            messages.success(request, 'File has been saved successfully.')
            return redirect('Fin_view_bank',id=id)

def Fin_banking_add_comment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank = Fin_Banking.objects.get(id =id)

        if request.method == 'POST':
            comment_text = request.POST.get('comment_text', '')

            if comment_text and bank:
                comment = Fin_BankingComments.objects.create(
                    login_details = login_det,
                    company = company,
                    banking = bank,
                    comment=comment_text)
                comment.save()

        messages.success(request, 'Comment has been saved successfully.')
        return redirect('Fin_view_bank',id=id)

def Fin_banking_delete_comment(request,id):

    if request.method == 'GET':

        comment = Fin_BankingComments.objects.get(id=id)
        bank = comment.banking

        comment.delete()

    messages.success(request, 'Comment has been deleted..')
    return redirect('Fin_view_bank',id=bank.id)


def Fin_banking_history(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank = Fin_Banking.objects.get(id =id)
        bank_history = Fin_BankingHistory.objects.filter(banking = bank)

        context = {
                'login_det':login_det,
                'com':com,
                'allmodules':allmodules,
                'bank_history':bank_history,
                'bank':bank
            }
        return render(request,'company/banking/Fin_banking_history.html',context)
    


def Fin_shareBankingStatementToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

    
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                print(emails_list)

               
                bank = Fin_Banking.objects.get(id=id)
                transactions = Fin_BankTransactions.objects.filter(banking=bank)
                        
                context = {'bank':bank, 
                           'company':company,
                           'trans':transactions
                           }
                template_path = 'company/banking/Fin_statement_template_to_mail.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'BANKING - {bank.id}.pdf'
                subject = f"BANKING - {bank.id}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached STATEMENT - File-{bank.id}. \n{email_message}\n\n--\nRegards,\n{company.Company_name}\n{company.Address}\n{company.State} - {company.Country}\n{company.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                msg = messages.success(request, 'Statement has been shared via email successfully..!')
                return redirect('Fin_view_bank',id=bank.id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect('Fin_view_bank',id=bank.id)

def Fin_render_pdfstatment_view(request,id):
    
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        bank = Fin_Banking.objects.get(id=id)
        trans = Fin_BankTransactions.objects.filter(banking=bank)
        template_path = 'company/banking/Fin_banking_statement_pdf.html'
        context ={
            'bank':bank,
            'company':company,
            'trans':trans,
            
        }
        fname=bank.bank_name
    
        # Create a Django response object, and specify content_type as pdftemp_creditnote
        response = HttpResponse(content_type='application/pdf')
        #response['Content-Disposition'] = 'attachment; filename="certificate.pdf"'
        response['Content-Disposition'] =f'attachment; filename= {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        


        # if error then show some funy view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
#-------------------------------------------------------------------------- end of banking----------------------------------------------------------------


def employee_overview_print(request,pk):
    employ = Employee.objects.get(id = pk)
    comments = Employee_Comment.objects.filter(employee_id = pk,company_id=employ.company_id)
    return render(request,'company/Employee_Print_Page.html',{'comments':comments ,'employ':employ})
    
    
def Fin_createPriceList(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            name = request.POST['name']
            type = request.POST['type']
            itemRate = request.POST['item_rate']
            description = request.POST['description']
            upOrDown = request.POST['up_or_down']
            percent = request.POST['percentage']
            roundOff = request.POST['round_off']
            currency = request.POST['currency']

            if Fin_Price_List.objects.filter(Company = com, name__iexact = name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            priceList = Fin_Price_List(
                Company = com, LoginDetails = data, name = name, type = type, item_rate = itemRate, description = description, currency = currency, up_or_down = upOrDown, percentage = percent, round_off = roundOff, status = 'Active'
            )
            priceList.save()

            #save transaction

            Fin_PriceList_Transaction_History.objects.create(
                Company = com,
                LoginDetails = data,
                list = priceList,
                action = 'Created'
            )

            if itemRate == 'Customized individual rate':
                itemName = request.POST.getlist('itemName[]')
                stdRate = request.POST.getlist('itemRateSale[]') if type == 'Sales' else request.POST.getlist('itemRatePurchase[]')
                customRate = request.POST.getlist('customRate[]')
                
                if len(itemName) == len(stdRate) == len(customRate):
                    values = zip(itemName,stdRate,customRate)
                    lis = list(values)

                    for ele in lis:
                        Fin_PriceList_Items.objects.get_or_create(Company = com, LoginDetails = data, list = priceList, item = Fin_Items.objects.get(id = int(ele[0])), standard_rate = float(ele[1]), custom_rate = float(ele[1]) if ele[2] == 0 or ele[2] =="0" else float(ele[2]))

                    return redirect(Fin_priceList)

                return redirect(Fin_addPriceList)

            return redirect(Fin_priceList)

        else:
                return redirect(Fin_addPriceList)
    else:
        return redirect('/')


def Fin_updatePriceList(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        lst = Fin_Price_List.objects.get(id = id)
        if request.method == 'POST':
            name = request.POST['name']
            type = request.POST['type']
            itemRate = request.POST['item_rate']
            description = request.POST['description']
            upOrDown = request.POST['up_or_down']
            percent = request.POST['percentage']
            roundOff = request.POST['round_off']
            currency = request.POST['currency']

            if lst.name != name and Fin_Price_List.objects.filter(Company = com, name__iexact = name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            if lst.item_rate == 'Customized individual rate' and itemRate != 'Customized individual rate':
                Fin_PriceList_Items.objects.filter(list = lst).delete()

            lst.name = name
            lst.type = type
            lst.item_rate = itemRate
            lst.description = description
            lst.currency = currency
            lst.up_or_down = upOrDown
            if itemRate == 'Customized individual rate':
                lst.percentage = None
                lst.round_off = None
            else:
                lst.percentage = percent
                lst.round_off = roundOff
            lst.save()

            #save transaction

            Fin_PriceList_Transaction_History.objects.create(
                Company = com,
                LoginDetails = data,
                list = lst,
                action = 'Edited'
            )

            itemName = request.POST.getlist('itemName[]')
            stdRate = request.POST.getlist('itemRateSale[]') if type == 'Sales' else request.POST.getlist('itemRatePurchase[]')
            customRate = request.POST.getlist('customRate[]')
            
            if itemRate == 'Customized individual rate':
                if Fin_PriceList_Items.objects.filter(list = lst).exists():
                    ids = request.POST.getlist('plItemId[]')
                    
                    if len(ids) == len(itemName) == len(stdRate) == len(customRate):
                        values = zip(ids, itemName,stdRate,customRate)
                        lis = list(values)

                        for ele in lis:
                            Fin_PriceList_Items.objects.filter(id = ele[0]).update(Company = com, LoginDetails = data, list = lst, item = Fin_Items.objects.get(id = int(ele[1])), standard_rate = float(ele[2]), custom_rate = float(ele[2]) if ele[3] == 0 or ele[3] =="0" else float(ele[3]))

                        return redirect(Fin_viewPriceList,id)

                    else:
                        return redirect(Fin_editPriceList, id)
                else:
                    if len(itemName) == len(stdRate) == len(customRate):
                        values = zip(itemName,stdRate,customRate)
                        lis = list(values)
                        for ele in lis:
                            Fin_PriceList_Items.objects.create(Company = com, LoginDetails = data, list = lst, item = Fin_Items.objects.get(id = int(ele[0])), standard_rate = float(ele[1]), custom_rate = float(ele[1]) if ele[2] == 0 or ele[2] =="0" else float(ele[2]))
                        
                        return redirect(Fin_viewPriceList,id)
            else:
                return redirect(Fin_viewPriceList,id)

        else:
            return redirect(Fin_editPriceList, id)
    else:
        return redirect('/')


def Fin_newCustomerPaymentTerm(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        term = request.POST['term']
        days = request.POST['days']

        if not Fin_Company_Payment_Terms.objects.filter(Company = com, term_name__iexact = term).exists():
            Fin_Company_Payment_Terms.objects.create(Company = com, term_name = term, days =days)
            
            list= []
            terms = Fin_Company_Payment_Terms.objects.filter(Company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id,
                    'days':term.days
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{term} already exists, try another.!'})

    else:
        return redirect('/')


# -------------Shemeem--------Invoice & Vendors-------------------------------

# Invoice
        
def Fin_invoice(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            inv = Fin_Invoice.objects.filter(Company = com)
            return render(request,'company/Fin_Invoice.html',{'allmodules':allmodules,'com':com,'data':data,'invoices':inv})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            inv = Fin_Invoice.objects.filter(Company = com.company_id)
            return render(request,'company/Fin_Invoice.html',{'allmodules':allmodules,'com':com,'data':data,'invoices':inv})
    else:
       return redirect('/')
    
def Fin_addInvoice(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        # Fetching last invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted invoice
        latest_inv = Fin_Invoice.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Fin_Invoice_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Invoice_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next invoice number w r t last invoic number if exists.
        nxtInv = ""
        lastInv = Fin_Invoice.objects.filter(Company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'ref_no':new_number,'banks':bnk,'invNo':nxtInv,'units':units, 'accounts':acc
        }
        return render(request,'company/Fin_Add_Invoice.html',context)
    else:
       return redirect('/')

def Fin_getBankAccount(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        
        bankId = request.GET['id']
        bnk = Fin_Banking.objects.get(id = bankId)

        if bnk:
            return JsonResponse({'status':True, 'account':bnk.account_number})
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')
    
def Fin_getInvoiceCustomerData(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        
        custId = request.POST['id']
        cust = Fin_Customers.objects.get(id = custId)

        if cust:
            if cust.price_list and cust.price_list.type == 'Sales':
                list = True
                listId = cust.price_list.id
                listName = cust.price_list.name
            else:
                list = False
                listId = None
                listName = None
            context = {
                'status':True, 'id':cust.id, 'email':cust.email, 'gstType':cust.gst_type,'shipState':cust.place_of_supply,'gstin':False if cust.gstin == "" or cust.gstin == None else True, 'gstNo':cust.gstin, 'priceList':list, 'ListId':listId, 'ListName':listName,
                'street':cust.billing_street, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')

def Fin_checkInvoiceNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        invNo = request.GET['invNum']

        nxtInv = ""
        lastInv = Fin_Invoice.objects.filter(Company = com).last()
        if lastInv:
            inv_no = str(lastInv.invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)

        if Fin_Invoice.objects.filter(Company = com, invoice_no__iexact = invNo).exists():
            return JsonResponse({'status':False, 'message':'Invoice No already Exists.!'})
        elif nxtInv != "" and invNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Invoice No is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')
    
def Fin_getInvItemDetails(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        itemName = request.GET['item']
        priceListId = request.GET['listId']
        item = Fin_Items.objects.get(Company = com, name = itemName)

        if priceListId != "":
            priceList = Fin_Price_List.objects.get(id = int(priceListId))

            if priceList.item_rate == 'Customized individual rate':
                try:
                    priceListPrice = float(Fin_PriceList_Items.objects.get(Company = com, list = priceList, item = item).custom_rate)
                except:
                    priceListPrice = item.selling_price
            else:
                mark = priceList.up_or_down
                percentage = float(priceList.percentage)
                roundOff = priceList.round_off

                if mark == 'Markup':
                    price = float(item.selling_price) + float((item.selling_price) * (percentage/100))
                else:
                    price = float(item.selling_price) - float((item.selling_price) * (percentage/100))

                if priceList.round_off != 'Never mind':
                    if roundOff == 'Nearest whole number':
                        finalPrice = round(price)
                    else:
                        finalPrice = int(price) + float(roundOff)
                else:
                    finalPrice = price

                priceListPrice = finalPrice
        else:
            priceListPrice = None

        context = {
            'status':True,
            'id': item.id,
            'item_type':item.item_type,
            'hsn':item.hsn,
            'sac':item.sac,
            'sales_rate':item.selling_price,
            'purchase_rate':item.purchase_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intra_state_tax,
            'igst':item.inter_state_tax,
            'PLPrice':priceListPrice,

        }
        return JsonResponse(context)
    else:
       return redirect('/')

def Fin_createInvoice(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        if request.method == 'POST':
            invNum = request.POST['invoice_no']
            if Fin_Invoice.objects.filter(Company = com, invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = Fin_Invoice(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = Fin_Customers.objects.get(id = request.POST['customer']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_no = request.POST['reference_number'],
                invoice_no = invNum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                invoice_date = request.POST['invoice_date'],
                duedate = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                exp_ship_date = None,
                price_list_applied = True if 'priceList' in request.POST else False,
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.file=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Save" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]
                    Fin_Invoice_Items.objects.create(Invoice = inv, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    itm.current_stock -= int(ele[4])
                    itm.save()
            
            # Save transaction
                    
            Fin_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                Invoice = inv,
                action = 'Created'
            )

            return redirect(Fin_invoice)
        else:
            return redirect(Fin_addInvoice)
    else:
       return redirect('/')

def Fin_viewInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        inv = Fin_Invoice.objects.get(id = id)
        cmt = Fin_Invoice_Comments.objects.filter(Invoice = inv)
        hist = Fin_Invoice_History.objects.filter(Invoice = inv).last()
        invItems = Fin_Invoice_Items.objects.filter(Invoice = inv)
        created = Fin_Invoice_History.objects.get(Invoice = inv, action = 'Created')

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
            allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        
        return render(request,'company/Fin_View_Invoice.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'invoice':inv,'invItems':invItems, 'history':hist, 'comments':cmt, 'created':created})
    else:
       return redirect('/')

def Fin_convertInvoice(request,id):
    if 's_id' in request.session:

        inv = Fin_Invoice.objects.get(id = id)
        inv.status = 'Saved'
        inv.save()
        return redirect(Fin_viewInvoice, id)

def Fin_addInvoiceComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        inv = Fin_Invoice.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Invoice_Comments.objects.create(Company = com, Invoice = inv, comments = cmt)
            return redirect(Fin_viewInvoice, id)
        return redirect(Fin_viewInvoice, id)
    return redirect('/')

def Fin_deleteInvoiceComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Invoice_Comments.objects.get(id = id)
        invId = cmt.Invoice.id
        cmt.delete()
        return redirect(Fin_viewInvoice, invId)
    
def Fin_invoiceHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        inv = Fin_Invoice.objects.get(id = id)
        his = Fin_Invoice_History.objects.filter(Invoice = inv)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_Invoice_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'invoice':inv})
    else:
       return redirect('/')
    
def Fin_deleteInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        inv = Fin_Invoice.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        for i in Fin_Invoice_Items.objects.filter(Invoice = inv):
            item = Fin_Items.objects.get(id = i.Item.id)
            item.current_stock += i.quantity
            item.save()
        
        Fin_Invoice_Items.objects.filter(Invoice = inv).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_Invoice_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Invoice_Reference.objects.get(Company = com)
            if int(inv.reference_no) > int(deleted.reference_no):
                deleted.reference_no = inv.reference_no
                deleted.save()
        else:
            Fin_Invoice_Reference.objects.create(Company = com, reference_no = inv.reference_no)
        
        inv.delete()
        return redirect(Fin_invoice)
    
def Fin_invoicePdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        inv = Fin_Invoice.objects.get(id = id)
        itms = Fin_Invoice_Items.objects.filter(Invoice = inv)
    
        context = {'invoice':inv, 'invItems':itms,'cmp':com}
        
        template_path = 'company/Fin_Invoice_Pdf.html'
        fname = 'Invoice_'+inv.invoice_no
        # return render(request, 'company/Fin_Invoice_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareInvoiceToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        inv = Fin_Invoice.objects.get(id = id)
        itms = Fin_Invoice_Items.objects.filter(Invoice = inv)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'invoice':inv, 'invItems':itms,'cmp':com}
                template_path = 'company/Fin_Invoice_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Invoice_{inv.invoice_no}'
                subject = f"Invoice_{inv.invoice_no}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Invoice for - INVOICE-{inv.invoice_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Invoice details has been shared via email successfully..!')
                return redirect(Fin_viewInvoice,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewInvoice, id)

def Fin_createInvoiceCustomer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        fName = request.POST['first_name']
        lName = request.POST['last_name']
        gstIn = request.POST['gstin']
        pan = request.POST['pan_no']
        email = request.POST['email']
        phn = request.POST['mobile']

        if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            res = f"Customer `{fName} {lName}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif gstIn != "" and Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            res = f"GSTIN `{gstIn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
            res = f"PAN No `{pan}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
            res = f"Phone Number `{phn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
            res = f"Email `{email}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})

        cust = Fin_Customers(
            Company = com,
            LoginDetails = data,
            title = request.POST['title'],
            first_name = fName,
            last_name = lName,
            company = request.POST['company_name'],
            location = request.POST['location'],
            place_of_supply = request.POST['place_of_supply'],
            gst_type = request.POST['gst_type'],
            gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
            pan_no = pan,
            email = email,
            mobile = phn,
            website = request.POST['website'],
            price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
            payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
            opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            open_balance_type = request.POST['balance_type'],
            current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']),
            billing_street = request.POST['street'],
            billing_city = request.POST['city'],
            billing_state = request.POST['state'],
            billing_pincode = request.POST['pincode'],
            billing_country = request.POST['country'],
            ship_street = request.POST['shipstreet'],
            ship_city = request.POST['shipcity'],
            ship_state = request.POST['shipstate'],
            ship_pincode = request.POST['shippincode'],
            ship_country = request.POST['shipcountry'],
            status = 'Active'
        )
        cust.save()

        #save transaction

        Fin_Customers_History.objects.create(
            Company = com,
            LoginDetails = data,
            customer = cust,
            action = 'Created'
        )

        return JsonResponse({'status': True})
    
    else:
        return redirect('/')
    
def Fin_getCustomers(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        options = {}
        option_objects = Fin_Customers.objects.filter(Company = com, status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')
    
def Fin_createInvoiceItem(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        if request.POST['hsn']:
            hsn = request.POST['hsn']
            sac = None
        elif request.POST['sac']:
            sac = request.POST['sac']
            hsn = None
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'non taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'non taxable' else request.POST['inter_st']
        purPrice = request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = request.POST['min_stock']
        createdDate = date.today()
        
        #save item and transaction if item or hsn doesn't exists already
        if Fin_Items.objects.filter(Company=com, name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Items.objects.filter(Q(Company=com) & (Q(hsn__iexact=hsn) & Q(hsn__isnull=False))).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Items.objects.filter(Q(Company=com) & (Q(sac__iexact=sac) & Q(sac__isnull=False))).exists():
            res = f"SAC - {sac} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Fin_Items(
                Company = com,
                LoginDetails = data,
                name = name,
                item_type = type,
                unit = unit,
                hsn = hsn,
                sac=sac,
                tax_reference = tax,
                intra_state_tax = gstTax,
                inter_state_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                item_created = createdDate,
                min_stock = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                stock_in = 0,
                stock_out = 0,
                stock_unit_rate = stockUnitRate,
                status = 'Active'
            )
            item.save()

            #save transaction

            Fin_Items_Transaction_History.objects.create(
                Company = com,
                LoginDetails = data,
                item = item,
                action = 'Created'
            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')

def Fin_getItems(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        items = {}
        option_objects = Fin_Items.objects.filter(Company = com, status='Active')
        for option in option_objects:
            items[option.id] = [option.name]

        return JsonResponse(items)
    else:
        return redirect('/')

def Fin_editInvoice(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        inv = Fin_Invoice.objects.get(id = id)
        invItms = Fin_Invoice_Items.objects.filter(Invoice = inv)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'invoice':inv, 'invItems':invItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc
        }
        return render(request,'company/Fin_Edit_Invoice.html',context)
    else:
       return redirect('/')

def Fin_updateInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        inv = Fin_Invoice.objects.get(id = id)
        if request.method == 'POST':
            invNum = request.POST['invoice_no']
            if inv.invoice_no != invNum and Fin_Invoice.objects.filter(Company = com, invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv.Customer = Fin_Customers.objects.get(id = request.POST['customer'])
            inv.customer_email = request.POST['customerEmail']
            inv.billing_address = request.POST['bill_address']
            inv.gst_type = request.POST['gst_type']
            inv.gstin = request.POST['gstin']
            inv.place_of_supply = request.POST['place_of_supply']
            inv.invoice_no = invNum
            inv.payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term'])
            inv.invoice_date = request.POST['invoice_date']
            inv.duedate = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date()
            inv.salesOrder_no = request.POST['order_number']
            inv.exp_ship_date = None
            inv.price_list_applied = True if 'priceList' in request.POST else False
            inv.payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            inv.cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            inv.upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            inv.bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            inv.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            inv.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            inv.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            inv.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            inv.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            inv.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            inv.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            inv.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            inv.paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            inv.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])
            inv.note = request.POST['note']

            if len(request.FILES) != 0:
                inv.file=request.FILES.get('file')

            inv.save()

            # Save invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            inv_item_ids = request.POST.getlist("id[]")
            invItem_ids = [int(id) for id in inv_item_ids]

            inv_items = Fin_Invoice_Items.objects.filter(Invoice = inv)
            object_ids = [obj.id for obj in inv_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in invItem_ids]
            for itmId in ids_to_delete:
                invItem = Fin_Invoice_Items.objects.get(id = itmId)
                item = Fin_Items.objects.get(id = invItem.Item.id)
                item.current_stock += invItem.quantity
                item.save()

            Fin_Invoice_Items.objects.filter(id__in=ids_to_delete).delete()
            
            count = Fin_Invoice_Items.objects.filter(Invoice = inv).count()

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(invItem_ids) and invItem_ids and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total,invItem_ids)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None'  :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    if int(len(itemId))>int(count):
                        if ele[9] == 0:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Invoice_Items.objects.create(Invoice = inv, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                            itm.current_stock -= int(ele[4])
                            itm.save()
                        else:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            inItm = Fin_Invoice_Items.objects.get(id = int(ele[9]))
                            crQty = int(inItm.quantity)
                            
                            Fin_Invoice_Items.objects.filter( id = int(ele[9])).update(Invoice = inv, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                            
                            if crQty < int(ele[4]):
                                itm.current_stock -=  abs(crQty - int(ele[4]))
                            elif crQty > int(ele[4]):
                                itm.current_stock += abs(crQty - int(ele[4]))
                            itm.save()
                    else:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        inItm = Fin_Invoice_Items.objects.get(id = int(ele[9]))
                        crQty = int(inItm.quantity)

                        Fin_Invoice_Items.objects.filter( id = int(ele[9])).update(Invoice = inv, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))

                        if crQty < int(ele[4]):
                            itm.current_stock -=  abs(crQty - int(ele[4]))
                        elif crQty > int(ele[4]):
                            itm.current_stock += abs(crQty - int(ele[4]))
                        itm.save()
            
            # Save transaction
                    
            Fin_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                Invoice = inv,
                action = 'Edited'
            )

            return redirect(Fin_viewInvoice, id)
        else:
            return redirect(Fin_editInvoice, id)
    else:
       return redirect('/')
# Vendors
        
def Fin_vendors(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            vnd = Fin_Vendors.objects.filter(Company = com)
            return render(request,'company/Fin_Vendors.html',{'allmodules':allmodules,'com':com,'data':data,'vendors':vnd})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            vnd = Fin_Vendors.objects.filter(Company = com.company_id)
            return render(request,'company/Fin_Vendors.html',{'allmodules':allmodules,'com':com,'data':data,'vendors':vnd})
    else:
       return redirect('/')

def Fin_addVendor(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            trms = Fin_Company_Payment_Terms.objects.filter(Company = com)
            lst = Fin_Price_List.objects.filter(Company = com, status = 'Active')
            return render(request,'company/Fin_Add_Vendor.html',{'allmodules':allmodules,'com':com,'data':data, 'pTerms':trms, 'list':lst})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            trms = Fin_Company_Payment_Terms.objects.filter(Company = com.company_id)
            lst = Fin_Price_List.objects.filter(Company = com.company_id, status = 'Active')
            return render(request,'company/Fin_Add_Vendor.html',{'allmodules':allmodules,'com':com,'data':data, 'pTerms':trms, 'list':lst})
    else:
       return redirect('/')

def Fin_checkVendorName(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        fName = request.POST['fname']
        lName = request.POST['lname']

        if Fin_Vendors.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            msg = f'{fName} {lName} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
    
def Fin_checkVendorGSTIN(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        gstIn = request.POST['gstin']

        if Fin_Vendors.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            msg = f'{gstIn} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
    
def Fin_checkVendorPAN(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        pan = request.POST['pan']

        if Fin_Vendors.objects.filter(Company = com, pan_no__iexact = pan).exists():
            msg = f'{pan} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')

def Fin_checkVendorPhone(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        phn = request.POST['phone']

        if Fin_Vendors.objects.filter(Company = com, mobile__iexact = phn).exists():
            msg = f'{phn} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')

def Fin_checkVendorEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        email = request.POST['email']

        if Fin_Vendors.objects.filter(Company = com, email__iexact = email).exists():
            msg = f'{email} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')

def Fin_createVendor(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            fName = request.POST['first_name']
            lName = request.POST['last_name']
            gstIn = request.POST['gstin']
            pan = request.POST['pan_no']
            email = request.POST['email']
            phn = request.POST['mobile']

            if Fin_Vendors.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
                res = f'<script>alert("Vendor `{fName} {lName}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif Fin_Vendors.objects.filter(Company = com, gstin__iexact = gstIn).exists():
                res = f'<script>alert("GSTIN `{gstIn}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif Fin_Vendors.objects.filter(Company = com, pan_no__iexact = pan).exists():
                res = f'<script>alert("PAN No `{pan}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif Fin_Vendors.objects.filter(Company = com, mobile__iexact = phn).exists():
                res = f'<script>alert("Phone Number `{phn}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif Fin_Vendors.objects.filter(Company = com, email__iexact = email).exists():
                res = f'<script>alert("Email `{email}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            vnd = Fin_Vendors(
                Company = com,
                LoginDetails = com.Login_Id,
                title = request.POST['title'],
                first_name = fName,
                last_name = lName,
                company = request.POST['company_name'],
                location = request.POST['location'],
                place_of_supply = request.POST['place_of_supply'],
                gst_type = request.POST['gst_type'],
                gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
                pan_no = pan,
                email = email,
                mobile = phn,
                website = request.POST['website'],
                price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
                payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
                opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
                open_balance_type = request.POST['balance_type'],
                current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
                credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']) * -1,
                currency = request.POST['currency'],
                billing_street = request.POST['street'],
                billing_city = request.POST['city'],
                billing_state = request.POST['state'],
                billing_pincode = request.POST['pincode'],
                billing_country = request.POST['country'],
                ship_street = request.POST['shipstreet'],
                ship_city = request.POST['shipcity'],
                ship_state = request.POST['shipstate'],
                ship_pincode = request.POST['shippincode'],
                ship_country = request.POST['shipcountry'],
                status = 'Active'
            )
            vnd.save()

            #save transaction

            Fin_Vendor_History.objects.create(
                Company = com,
                LoginDetails = data,
                Vendor = vnd,
                action = 'Created'
            )

            return redirect(Fin_vendors)

        else:
            return redirect(Fin_addVendor)
    else:
        return redirect('/')

def Fin_viewVendor(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        vnd = Fin_Vendors.objects.get(id = id)
        cmt = Fin_Vendor_Comments.objects.filter(Vendor = vnd)
        hist = Fin_Vendor_History.objects.filter(Vendor = vnd).last()

        # Collect data from sales,purchase and other req tables and add or substract balnace amount with 'Bal' based on its type.
        # Create dict with data -> Type, Number, Date, Total, Balance and append it with 'combined_data' list.
        # Pass 'combined_data' list and Final 'Bal' as BALANCE with context dict after fetching all req data.

        Bal = 0
        combined_data=[]
        
        # Vendor opening balance.
        dict = {
            'Type' : 'Opening Balance', 'Number' : "", 'Date' : vnd.date, 'Total': vnd.opening_balance, 'Balance': vnd.opening_balance
        }
        combined_data.append(dict)

        if vnd.open_balance_type == 'credit':
            Bal += float(vnd.opening_balance)
        else:
            Bal -= float(vnd.opening_balance)

        # Vendor Purchase order, Purchase bill, expense, recurring bill etc, goes here..

        pOrder = Fin_Purchase_Order.objects.filter(Vendor = vnd)
        if pOrder:
            for p in pOrder:
                dict = {
                    'Type':'Purchase Order',
                    'Number':p.purchase_order_no,
                    'Date':p.purchase_order_date,
                    'Total':p.grandtotal,
                    'Balance':p.balance
                }
                Bal -= float(p.balance)
                combined_data.append(dict)

        bill = Fin_Purchase_Bill.objects.filter(vendor = vnd)
        if bill:
            for b in bill:
                dict = {
                    'Type':'Bill',
                    'Number':b.bill_no,
                    'Date':b.bill_date,
                    'Total':b.grandtotal,
                    'Balance':b.balance
                }
                Bal -= float(b.balance)
                combined_data.append(dict)

        exp = Fin_Expense.objects.filter(Vendor = vnd)
        if exp:
            for e in exp:
                dict = {
                    'Type':'Expense',
                    'Number':e.expense_no,
                    'Date':e.expense_date,
                    'Total':e.amount,
                    'Balance':e.amount
                }
                if e.amount_type == 'Credit':
                    Bal -= float(abs(e.amount))
                else:
                    Bal += float(abs(e.amount))
                combined_data.append(dict)

        dNote = Fin_Debit_Note.objects.filter(Vendor = vnd)
        if dNote:
            for d in dNote:
                dict = {
                    'Type':'Debit Note',
                    'Number':d.debit_note_number,
                    'Date':d.debit_note_date,
                    'Total':d.grandtotal,
                    'Balance':d.balance
                }
                Bal += float(d.balance)
                combined_data.append(dict)

        rcBill = Fin_Recurring_Bills.objects.filter(vendor = vnd)
        if rcBill:
            for rb in rcBill:
                dict = {
                    'Type':'Recurring Bill',
                    'Number':rb.recurring_bill_number,
                    'Date':rb.date,
                    'Total':rb.grand_total,
                    'Balance':rb.balance
                }
                Bal -= float(rb.balance)
                combined_data.append(dict)

        context = {'allmodules':allmodules,'com':com,'cmp':cmp,'data':data, 'vendor':vnd, 'history':hist, 'comments':cmt, 'BALANCE':Bal, 'combined_data':combined_data}

        return render(request,'company/Fin_View_Vendor.html', context)

    else:
       return redirect('/')

def Fin_changeVendorStatus(request,id,status):
    if 's_id' in request.session:
        
        vnd = Fin_Vendors.objects.get(id = id)
        vnd.status = status
        vnd.save()
        return redirect(Fin_viewVendor, id)

def Fin_deleteVendor(request, id):
    if 's_id' in request.session:
        vnd = Fin_Vendors.objects.get( id = id)
        vnd.delete()
        return redirect(Fin_vendors)

def Fin_vendorHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        vnd = Fin_Vendors.objects.get(id = id)
        his = Fin_Vendor_History.objects.filter(Vendor = vnd)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            return render(request,'company/Fin_Vendor_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'vendor':vnd})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            return render(request,'company/Fin_Vendor_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'vendor':vnd})
    else:
       return redirect('/')

def Fin_editVendor(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        vnd = Fin_Vendors.objects.get(id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            trms = Fin_Company_Payment_Terms.objects.filter(Company = com)
            lst = Fin_Price_List.objects.filter(Company = com, status = 'Active')
            return render(request,'company/Fin_Edit_Vendor.html',{'allmodules':allmodules,'com':com,'data':data, 'vendor':vnd, 'pTerms':trms, 'list':lst})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            trms = Fin_Company_Payment_Terms.objects.filter(Company = com.company_id)
            lst = Fin_Price_List.objects.filter(Company = com.company_id, status = 'Active')
            return render(request,'company/Fin_Edit_Vendor.html',{'allmodules':allmodules,'com':com,'data':data, 'vendor':vnd, 'pTerms':trms, 'list':lst})
    else:
       return redirect('/')

def Fin_updateVendor(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        vnd = Fin_Vendors.objects.get(id = id)
        if request.method == 'POST':
            fName = request.POST['first_name']
            lName = request.POST['last_name']
            gstIn = request.POST['gstin']
            pan = request.POST['pan_no']
            email = request.POST['email']
            phn = request.POST['mobile']

            if vnd.first_name != fName and vnd.last_name != lName and Fin_Vendors.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
                res = f'<script>alert("Vendor `{fName} {lName}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif vnd.gstin != gstIn and Fin_Vendors.objects.filter(Company = com, gstin__iexact = gstIn).exists():
                res = f'<script>alert("GSTIN `{gstIn}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif vnd.pan_no != pan and Fin_Vendors.objects.filter(Company = com, pan_no__iexact = pan).exists():
                res = f'<script>alert("PAN No `{pan}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif vnd.mobile != phn and Fin_Vendors.objects.filter(Company = com, mobile__iexact = phn).exists():
                res = f'<script>alert("Phone Number `{phn}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif vnd.email != email and Fin_Vendors.objects.filter(Company = com, email__iexact = email).exists():
                res = f'<script>alert("Email `{email}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            vnd.title = request.POST['title']
            vnd.first_name = fName
            vnd.last_name = lName
            vnd.company = request.POST['company_name']
            vnd.location = request.POST['location']
            vnd.place_of_supply = request.POST['place_of_supply']
            vnd.gst_type = request.POST['gst_type']
            vnd.gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn
            vnd.pan_no = pan
            vnd.email = email
            vnd.mobile = phn
            vnd.website = request.POST['website']
            vnd.price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list'])
            vnd.payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms'])
            vnd.opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance'])
            vnd.open_balance_type = request.POST['balance_type']
            vnd.current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance'])
            vnd.credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']) * -1
            vnd.currency = request.POST['currency']
            vnd.billing_street = request.POST['street']
            vnd.billing_city = request.POST['city']
            vnd.billing_state = request.POST['state']
            vnd.billing_pincode = request.POST['pincode']
            vnd.billing_country = request.POST['country']
            vnd.ship_street = request.POST['shipstreet']
            vnd.ship_city = request.POST['shipcity']
            vnd.ship_state = request.POST['shipstate']
            vnd.ship_pincode = request.POST['shippincode']
            vnd.ship_country = request.POST['shipcountry']

            vnd.save()

            #save transaction

            Fin_Vendor_History.objects.create(
                Company = com,
                LoginDetails = data,
                Vendor = vnd,
                action = 'Edited'
            )

            return redirect(Fin_viewVendor, id)

        else:
            return redirect(Fin_editVendor, id)
    else:
        return redirect('/')

def Fin_addVendorComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        vnd = Fin_Vendors.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Vendor_Comments.objects.create(Company = com, Vendor = vnd, comments = cmt)
            return redirect(Fin_viewVendor, id)
        return redirect(Fin_viewVendor, id)
    return redirect('/')

def Fin_deleteVendorComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Vendor_Comments.objects.get(id = id)
        vendorId = cmt.Vendor.id
        cmt.delete()
        return redirect(Fin_viewVendor, vendorId)

def Fin_vendorTransactionsPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        vnd = Fin_Vendors.objects.get(id = id)

        Bal = 0
        combined_data=[]
        
        # Vendor opening balance.
        dict = {
            'Type' : 'Opening Balance', 'Number' : "", 'Date' : vnd.date, 'Total': vnd.opening_balance, 'Balance': vnd.opening_balance
        }
        combined_data.append(dict)

        if vnd.open_balance_type == 'credit':
            Bal += float(vnd.opening_balance)
        else:
            Bal -= float(vnd.opening_balance)
    
        context = {'vendor':vnd, 'cmp':com, 'BALANCE':Bal, 'combined_data':combined_data}
        
        template_path = 'company/Fin_Vendor_Transaction_Pdf.html'
        fname = 'Vendor_Transactions_'+vnd.first_name+'_'+vnd.last_name
        # return render(request, 'company/Fin_Vendor_Transaction_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')
    
def Fin_shareVendorTransactionsToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                vnd = Fin_Vendors.objects.get(id = id)

                Bal = 0
                combined_data=[]
                
                # Vendor opening balance.
                dict = {
                    'Type' : 'Opening Balance', 'Number' : "", 'Date' : vnd.date, 'Total': vnd.opening_balance, 'Balance': vnd.opening_balance
                }
                combined_data.append(dict)

                if vnd.open_balance_type == 'credit':
                    Bal += float(vnd.opening_balance)
                else:
                    Bal -= float(vnd.opening_balance)
            
                context = {'vendor':vnd, 'cmp':com, 'BALANCE':Bal, 'combined_data':combined_data}
                template_path = 'company/Fin_Vendor_Transaction_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Vendor_Transactions_{vnd.first_name}_{vnd.last_name}'
                subject = f"Vendor_Transactions_{vnd.first_name}_{vnd.last_name}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Transaction details for - Vendor-{vnd.first_name} {vnd.last_name}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Transactions details has been shared via email successfully..!')
                return redirect(Fin_viewVendor,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewVendor, id)

#End

# -------------Shemeem--------Sales Order-------------------------------
        
def Fin_salesOrder(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id
        
        salesOrders = Fin_Sales_Order.objects.filter(Company = cmp)
        return render(request,'company/Fin_Sales_Order.html',{'allmodules':allmodules,'com':com, 'cmp':cmp,'data':data,'sales_orders':salesOrders})
    else:
       return redirect('/')

def Fin_addSalesOrder(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        # Fetching last sales order and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted sales order
        latest_so = Fin_Sales_Order.objects.filter(Company = cmp).order_by('-id').first()

        lists = Fin_Price_List.objects.filter(Company = cmp, type__iexact='sales', status = 'Active')
        new_number = int(latest_so.reference_no) + 1 if latest_so else 1

        if Fin_Sales_Order_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Sales_Order_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next SO number w r t last SO number if exists.
        nxtSO = ""
        lastSO = Fin_Sales_Order.objects.filter(Company = cmp).last()
        if lastSO:
            salesOrder_no = str(lastSO.sales_order_no)
            numbers = []
            stri = []
            for word in salesOrder_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            s_order_num = int(num)+1

            if num[0] == '0':
                if s_order_num <10:
                    nxtSO = st+'0'+ str(s_order_num)
                else:
                    nxtSO = st+ str(s_order_num)
            else:
                nxtSO = st+ str(s_order_num)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst, 'priceListItems':lists,
            'ref_no':new_number,'banks':bnk,'SONo':nxtSO,'units':units, 'accounts':acc
        }
        return render(request,'company/Fin_Add_Sales_Order.html',context)
    else:
       return redirect('/')

def Fin_createSalesOrder(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        if request.method == 'POST':
            SONum = request.POST['sales_order_no']
            if Fin_Sales_Order.objects.filter(Company = com, sales_order_no__iexact = SONum).exists():
                res = f'<script>alert("Sales Order Number `{SONum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            SOrder = Fin_Sales_Order(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_no = request.POST['reference_number'],
                sales_order_no = SONum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                sales_order_date = request.POST['sales_order_date'],
                exp_ship_date = datetime.strptime(request.POST['shipment_date'], '%d-%m-%Y').date(),
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note']
            )

            SOrder.save()

            if len(request.FILES) != 0:
                SOrder.file=request.FILES.get('file')
            SOrder.save()

            if 'Draft' in request.POST:
                SOrder.status = "Draft"
            elif "Save" in request.POST:
                SOrder.status = "Saved" 
            SOrder.save()

            # Save Sales Order items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))

                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    Fin_Sales_Order_Items.objects.create(SalesOrder = SOrder, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    # itm.current_stock -= int(ele[4])
                    # itm.save()
            
            # Save transaction
                    
            Fin_Sales_Order_History.objects.create(
                Company = com,
                LoginDetails = data,
                SalesOrder = SOrder,
                action = 'Created'
            )

            return redirect(Fin_salesOrder)
        else:
            return redirect(Fin_addSalesOrder)
    else:
       return redirect('/')

def Fin_checkSalesOrderNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        SONo = request.GET['SONum']

        nxtSO = ""
        lastSOrder = Fin_Sales_Order.objects.filter(Company = com).last()
        if lastSOrder:
            salesOrder_no = str(lastSOrder.sales_order_no)
            numbers = []
            stri = []
            for word in salesOrder_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            s_order_num = int(num)+1

            if num[0] == '0':
                if s_order_num <10:
                    nxtSO = st+'0'+ str(s_order_num)
                else:
                    nxtSO = st+ str(s_order_num)
            else:
                nxtSO = st+ str(s_order_num)

        if Fin_Sales_Order.objects.filter(Company = com, sales_order_no__iexact = SONo).exists():
            return JsonResponse({'status':False, 'message':'Sales Order No. already Exists.!'})
        elif nxtSO != "" and SONo != nxtSO:
            return JsonResponse({'status':False, 'message':'Sales Order No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def Fin_viewSalesOrder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        salesOrder = Fin_Sales_Order.objects.get(id = id)
        cmt = Fin_Sales_Order_Comments.objects.filter(SalesOrder = salesOrder)
        hist = Fin_Sales_Order_History.objects.filter(SalesOrder = salesOrder).last()
        SOItems = Fin_Sales_Order_Items.objects.filter(SalesOrder = salesOrder)
        try:
            created = Fin_Sales_Order_History.objects.get(SalesOrder = salesOrder, action = 'Created')
        except:
            created = None

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
            allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        
        return render(request,'company/Fin_View_Sales_Order.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'order':salesOrder,'orderItems':SOItems, 'history':hist, 'comments':cmt, 'created':created})
    else:
       return redirect('/')

def Fin_convertSalesOrder(request,id):
    if 's_id' in request.session:

        salesOrder = Fin_Sales_Order.objects.get(id = id)
        salesOrder.status = 'Saved'
        salesOrder.save()
        return redirect(Fin_viewSalesOrder, id)

def Fin_addSalesOrderComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        salesOrder = Fin_Sales_Order.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Sales_Order_Comments.objects.create(Company = com, SalesOrder = salesOrder, comments = cmt)
            return redirect(Fin_viewSalesOrder, id)
        return redirect(Fin_viewSalesOrder, id)
    return redirect('/')

def Fin_deleteSalesOrderComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Sales_Order_Comments.objects.get(id = id)
        orderId = cmt.SalesOrder.id
        cmt.delete()
        return redirect(Fin_viewSalesOrder, orderId)
    
def Fin_salesOrderHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        salesOrder = Fin_Sales_Order.objects.get(id = id)
        his = Fin_Sales_Order_History.objects.filter(SalesOrder = salesOrder)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_Sales_Order_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'order':salesOrder})
    else:
       return redirect('/')
    
def Fin_deleteSalesOrder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        salesOrder = Fin_Sales_Order.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        Fin_Sales_Order_Items.objects.filter(SalesOrder = salesOrder).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_Sales_Order_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Sales_Order_Reference.objects.get(Company = com)
            if int(salesOrder.reference_no) > int(deleted.reference_no):
                deleted.reference_no = salesOrder.reference_no
                deleted.save()
        else:
            Fin_Sales_Order_Reference.objects.create(Company = com, reference_no = salesOrder.reference_no)
        
        salesOrder.delete()
        return redirect(Fin_salesOrder)

def Fin_editSalesOrder(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        salesOrder = Fin_Sales_Order.objects.get(id = id)
        SOItms = Fin_Sales_Order_Items.objects.filter(SalesOrder = salesOrder)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        lists = Fin_Price_List.objects.filter(Company = cmp, type__iexact='sales', status = 'Active')
        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'order':salesOrder, 'orderItems':SOItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc, 'priceListItems':lists,
        }
        return render(request,'company/Fin_Edit_Sales_Order.html',context)
    else:
       return redirect('/')

def Fin_updateSalesOrder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        salesOrder = Fin_Sales_Order.objects.get(id = id)
        if request.method == 'POST':
            SONum = request.POST['sales_order_no']
            if salesOrder.sales_order_no != SONum and Fin_Sales_Order.objects.filter(Company = com, sales_order_no__iexact = SONum).exists():
                res = f'<script>alert("Sales Order Number `{SONum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            salesOrder.Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId'])
            salesOrder.customer_email = request.POST['customerEmail']
            salesOrder.billing_address = request.POST['bill_address']
            salesOrder.gst_type = request.POST['gst_type']
            salesOrder.gstin = request.POST['gstin']
            salesOrder.place_of_supply = request.POST['place_of_supply']

            salesOrder.sales_order_no = SONum
            salesOrder.payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term'])
            salesOrder.sales_order_date = request.POST['sales_order_date']
            salesOrder.exp_ship_date = datetime.strptime(request.POST['shipment_date'], '%d-%m-%Y').date()

            salesOrder.payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            salesOrder.cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            salesOrder.upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            salesOrder.bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']

            salesOrder.price_list_applied = True if 'priceList' in request.POST else False
            salesOrder.price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id'])

            salesOrder.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            salesOrder.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            salesOrder.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            salesOrder.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            salesOrder.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            salesOrder.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            salesOrder.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            salesOrder.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            salesOrder.paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            salesOrder.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])

            salesOrder.note = request.POST['note']

            if len(request.FILES) != 0:
                salesOrder.file=request.FILES.get('file')

            salesOrder.save()

            # Save invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            so_item_ids = request.POST.getlist("id[]")
            SOItem_ids = [int(id) for id in so_item_ids]

            order_items = Fin_Sales_Order_Items.objects.filter(SalesOrder = salesOrder)
            object_ids = [obj.id for obj in order_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in SOItem_ids]

            Fin_Sales_Order_Items.objects.filter(id__in=ids_to_delete).delete()
            
            count = Fin_Sales_Order_Items.objects.filter(SalesOrder = salesOrder).count()

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(SOItem_ids) and SOItem_ids and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total,SOItem_ids)
                mapped = list(mapped)
                for ele in mapped:
                    if ele[2] == '' or ele[2] == 'None'  :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]
                    if int(len(itemId))>int(count):
                        if ele[9] == 0:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Sales_Order_Items.objects.create(SalesOrder = salesOrder, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                        else:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Sales_Order_Items.objects.filter( id = int(ele[9])).update(SalesOrder = salesOrder, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    else:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        Fin_Sales_Order_Items.objects.filter( id = int(ele[9])).update(SalesOrder = salesOrder, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
            
            # Save transaction
                    
            Fin_Sales_Order_History.objects.create(
                Company = com,
                LoginDetails = data,
                SalesOrder = salesOrder,
                action = 'Edited'
            )

            return redirect(Fin_viewSalesOrder, id)
        else:
            return redirect(Fin_editSalesOrder, id)
    else:
       return redirect('/')

def Fin_attachSalesOrderFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        salesOrder = Fin_Sales_Order.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            salesOrder.file = request.FILES.get('file')
            salesOrder.save()

        return redirect(Fin_viewSalesOrder, id)
    else:
        return redirect('/')

def Fin_salesOrderPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        salesOrder = Fin_Sales_Order.objects.get(id = id)
        itms = Fin_Sales_Order_Items.objects.filter(SalesOrder = salesOrder)
    
        context = {'order':salesOrder, 'orderItems':itms,'cmp':com}
        
        template_path = 'company/Fin_Sales_Order_Pdf.html'
        fname = 'Sales_Order_'+salesOrder.sales_order_no
        # return render(request, 'company/Fin_Invoice_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareSalesOrderToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        salesOrder = Fin_Sales_Order.objects.get(id = id)
        itms = Fin_Sales_Order_Items.objects.filter(SalesOrder = salesOrder)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'order':salesOrder, 'orderItems':itms,'cmp':com}
                template_path = 'company/Fin_Sales_Order_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Sales_Order_{salesOrder.sales_order_no}'
                subject = f"Sales_Order_{salesOrder.sales_order_no}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Sales Order for - #-{salesOrder.sales_order_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Sales Order details has been shared via email successfully..!')
                return redirect(Fin_viewSalesOrder,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewSalesOrder, id)

def Fin_convertSalesOrderToInvoice(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        salesOrder = Fin_Sales_Order.objects.get(id = id)
        orderItms = Fin_Sales_Order_Items.objects.filter(SalesOrder = salesOrder)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        # Fetching last invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted invoice
        latest_inv = Fin_Invoice.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Fin_Invoice_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Invoice_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next invoice number w r t last invoic number if exists.
        nxtInv = ""
        lastInv = Fin_Invoice.objects.filter(Company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'order':salesOrder, 'orderItems':orderItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc,'ref_no':new_number,'invNo':nxtInv
        }
        return render(request,'company/Fin_Convert_SalesOrder_toInvoice.html',context)
    else:
       return redirect('/')

def Fin_salesOrderConvertInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        salesOrder = Fin_Sales_Order.objects.get(id = id)
        if request.method == 'POST':
            invNum = request.POST['invoice_no']
            if Fin_Invoice.objects.filter(Company = com, invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = Fin_Invoice(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = Fin_Customers.objects.get(id = request.POST['customer']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_no = request.POST['reference_number'],
                invoice_no = invNum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                invoice_date = request.POST['invoice_date'],
                duedate = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                exp_ship_date = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date(),
                price_list_applied = True if 'priceList' in request.POST else False,
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note'],
                status = "Saved" 
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.file=request.FILES.get('file')
            inv.save()

            # Save invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Invoice_Items.objects.create(Invoice = inv, Item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()
            
            # Save transaction
                    
            Fin_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                Invoice = inv,
                action = 'Created'
            )

            # Save invoice details to SalesOrder

            salesOrder.converted_to_invoice = inv
            salesOrder.save()

            return redirect(Fin_salesOrder)
        else:
            return redirect(Fin_convertSalesOrderToInvoice, id)
    else:
       return redirect('/')

def Fin_convertSalesOrderToRecInvoice(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        salesOrder = Fin_Sales_Order.objects.get(id = id)
        orderItms = Fin_Sales_Order_Items.objects.filter(SalesOrder = salesOrder)

        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        repeat = Fin_CompanyRepeatEvery.objects.filter(company = cmp)
        priceList = Fin_Price_List.objects.filter(Company = cmp, type = 'Sales', status = 'Active')

        # Fetching last invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted invoice
        latest_inv = Fin_Recurring_Invoice.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Fin_Recurring_Invoice_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Recurring_Invoice_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = Fin_Recurring_Invoice.objects.filter(Company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)
        else:
            nxtInv = 'RI01'

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'order':salesOrder, 'orderItems':orderItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc,'ref_no':new_number,'invNo':nxtInv, 'priceListItems':priceList, 'repeat':repeat,
        }
        return render(request,'company/Fin_Convert_SalesOrder_toRecInvoice.html',context)
    else:
       return redirect('/')
       
def Fin_salesOrderConvertRecInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        salesOrder = Fin_Sales_Order.objects.get(id = id)

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']
            if Fin_Recurring_Invoice.objects.filter(Company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Rec. Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = Fin_Recurring_Invoice(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                profile_name = request.POST['profile_name'],
                entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                reference_no = request.POST['reference_number'],
                rec_invoice_no = invNum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                start_date = request.POST['start_date'],
                end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id']),
                repeat_every = Fin_CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.file=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Save" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Recurring_Invoice_Items.objects.create(RecInvoice = inv, Item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()
            
            # Save transaction
                    
            Fin_Recurring_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                RecInvoice = inv,
                action = 'Created'
            )

            # Save Rec Inv details to Sales Order

            salesOrder.converted_to_rec_invoice = inv
            salesOrder.save()

            return redirect(Fin_salesOrder)
        else:
            return redirect(Fin_convertSalesOrderToRecInvoice, id)
    else:
       return redirect('/')
# End


#  ----------------------------- TINTO VIEWS LOAN  sTART-----------------------------

    
def employee_loan_list(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status='New')
        employee = Employee.objects.filter(company_id=com.id)
        loan = Fin_Loan.objects.filter(company_id=com.id)
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com=staf.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status='New')
        
        employee = Employee.objects.filter(company_id=staf.company_id_id)
        loan = Fin_Loan.objects.filter(company_id=staf.company_id.id)
    else:
        distributor = Fin_Distributors_Details.objects.get(Login_Id = sid)

    return render(request,'company/Employee_loan_list.html',{'employee':employee,'allmodules':allmodules,'loan':loan,'com':com})

def employee_loan_sort_by_balance(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        employee = Employee.objects.filter(company_id=com.id)
        loan = Fin_Loan.objects.filter(company_id=com.id).order_by('-balance')

    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com=staf.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        employee = Employee.objects.filter(company_id=staf.company_id_id)
        loan = Fin_Loan.objects.filter(company_id=com.id).order_by('-balance')

    else:
        distributor = Fin_Distributors_Details.objects.get(Login_Id = sid)

    return render(request,'company/Employee_loan_list.html',{'employee':employee,'allmodules':allmodules,'loan':loan,'com':com})


def employee_loan_sort_by_employeename(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        employee = Employee.objects.filter(company_id=com.id)
        loan = Fin_Loan.objects.filter(company_id=com.id).order_by('-employee_name')

    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com=staf.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        employee = Employee.objects.filter(company_id=staf.company_id_id)
        loan = Fin_Loan.objects.filter(company_id=com.id).order_by('-employee_name')

    else:
        distributor = Fin_Distributors_Details.objects.get(Login_Id = sid)

    return render(request,'company/Employee_loan_list.html',{'employee':employee,'allmodules':allmodules,'loan':loan,'com':com})

def employee_loan_filter_by_active(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        employee = Employee.objects.filter(company_id=com.id)
        loan = Fin_Loan.objects.filter(company_id=com.id,status='Active')

    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com=staf.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        employee = Employee.objects.filter(company_id=staf.company_id_id)
        loan = Fin_Loan.objects.filter(company_id=staf.company_id_id,status='Active')

    else:
        distributor = Fin_Distributors_Details.objects.get(Login_Id = sid)

    return render(request,'company/Employee_loan_list.html',{'employee':employee,'allmodules':allmodules,'loan':loan,'com':com})

def employee_loan_filter_by_inactive(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        employee = Employee.objects.filter(company_id=com.id)
        loan = Fin_Loan.objects.filter(company_id=com.id,status='Inactive')

    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com=staf.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        employee = Employee.objects.filter(company_id=staf.company_id_id)
        loan = Fin_Loan.objects.filter(company_id=staf.company_id_id,status='Inactive')

    else:
        distributor = Fin_Distributors_Details.objects.get(Login_Id = sid)

    return render(request,'company/Employee_loan_list.html',{'employee':employee,'allmodules':allmodules,'loan':loan,'com':com})

def employee_loan_create_page(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        employee = Employee.objects.filter(company_id=com.id,employee_status='Active')
        term=Fin_Loan_Term.objects.filter(company=com)
        
        banks=Fin_Banking.objects.filter(company=com)
        bloodgroup = Employee_Blood_Group.objects.filter(company_id=com.id,login_id=sid).values('blood_group').distinct()
      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com=staf.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        employee = Employee.objects.filter(company_id=staf.company_id_id,employee_status='Active')
        term=Fin_Loan_Term.objects.filter(company=staf.company_id)
        banks=Fin_Banking.objects.filter(company=staf.company_id)
        bloodgroup = Employee_Blood_Group.objects.filter(company_id=com.id,login_id=sid).values('blood_group').distinct()
      

    return render(request,'company/Employee_loan_create.html',{'allmodules':allmodules,'employee':employee,'term':term,'banks':banks,'com':com,'bloodgroup':bloodgroup})  

def employeedata(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        cust = Employee.objects.get(id=customer_id,company_id=com.id)
        data7 = {'email': cust.employee_mail,'salary':cust.salary_amount,'jdate':cust.date_of_joining,'empid':cust.employee_number}
        return JsonResponse(data7)

      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        cust = Employee.objects.get(id=customer_id,company_id=staf.company_id_id)
        data7 = {'email': cust.employee_mail,'salary':cust.salary_amount,'jdate':cust.date_of_joining,'empid':cust.employee_number}
        return JsonResponse(data7)


def termdata(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        cust = Fin_Loan_Term.objects.get(id=customer_id,company_id=com.id)
        data7 = {'days': cust.days}
        return JsonResponse(data7)

      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        cust = Fin_Loan_Term.objects.get(id=customer_id,company_id=staf.company_id_id)
        data7 = {'days': cust.days}
        return JsonResponse(data7)


def employee_loan_save(request):


    

    if request.method == 'POST':


        employeename = request.POST['employee']
        empid = request.POST['empid']
        empemail = request.POST['empemail']
        salary = request.POST['salary']
        join_date = request.POST['Joining_Date']

        loan_Date = request.POST.get('loan_date1', None)
        loan_amount = request.POST['loan_amount']
        loanduration = request.POST['loanduration']
        duration=Fin_Loan_Term.objects.get(id=loanduration)
        

        expdate = request.POST['expdate']
        select_payment = request.POST['select_payment']
        if select_payment!="Cash" and "UPI" and "Cheque":
            select="Bank"
        else:
            select=select_payment

        
        cheque_no = request.POST['cheque_no']
        upi_id = request.POST['upi_id']
        acc_no = request.POST['acc_no']
        cutingamount = request.POST['cutingamount']
        cp = request.POST['cuttingPercentage']
        if cp != '':
            cuttingPercentage=cp
        elif cp == '':
            cuttingPercentage=0

        amount1 = request.POST['pamount']
        amount2 = request.POST['amount5']
        if amount1 != '':
            amount=amount1
        elif amount2 != '':
            amount=amount2



        Note = request.POST['Note']
     
        file = request.FILES.get('File', None)
        if file:
            file = request.FILES['File']
        else:
            file=''
        
        sid = request.session['s_id']
        employee = Fin_Login_Details.objects.get(id=sid)
        
        emp=Employee.objects.get(id=employeename)
        
        if employee.User_Type == 'Company':
                    companykey =  Fin_Company_Details.objects.get(Login_Id_id=sid)
                    if Fin_Loan.objects.filter(employeeid=empid, company=companykey).exists():
                        messages.error(request,'Already a loan  exsits for this employee !!!')
                        return redirect('employee_loan_create_page')
                    else:
                

                            new = Fin_Loan(employee=emp,employeeid=empid,employee_email=empemail,salary=salary,join_date=join_date,loan_date=loan_Date,loan_amount=loan_amount,total_loan=loan_amount,
                                    expiry_date=expdate,payment_method=select,cheque_number=cheque_no,upi_id=upi_id,bank_account=acc_no,monthly_cutting_percentage=cuttingPercentage,loan_duration=duration,
                                    monthly_cutting_amount=amount,note=Note,attach_file=file,company=companykey,login_details=employee,balance=loan_amount,employee_name =emp.title +" " + emp.first_name + " " + emp.last_name,monthly_cutting=cutingamount)
                            
                                
                            new.save()

                            com = Fin_Loan.objects.get(id=new.id)
                            history = Fin_Employee_Loan_History(company = companykey,login_details=employee,employee_loan =com,date = date.today(),action = 'Created')
                            history.save()
                            trans = Fin_Employee_Loan_Transactions(company = companykey,login_details=employee,employee_loan =com,date = date.today(),particulars = 'LOAN ISSUED',employee=emp,balance=loan_amount)
                            trans.save()
                            t = Fin_Employee_Loan_Transactions.objects.get(id=trans.id)
                            trans2 = Fin_Employee_Loan_Transactions_History(company = companykey,login_details=employee,employee_loan =com,date = date.today(),action = 'Created',transaction=t)
                            trans2.save()
        
        elif employee.User_Type == 'Staff':
                staf = Fin_Staff_Details.objects.get(Login_Id = sid)
                if Fin_Loan.objects.filter(employeeid=empid, company=staf.company_id).exists():
                        messages.error(request,'Already a loan  exsits for this employee !!!')
                        return redirect('employee_loan_create_page')
                else:
                

                        new =  Fin_Loan(employee=emp,employeeid=empid,employee_email=empemail,salary=salary,join_date=join_date,loan_date=loan_Date,loan_amount=loan_amount,total_loan=loan_amount,
                                expiry_date=expdate,payment_method=select,cheque_number=cheque_no,upi_id=upi_id,bank_account=acc_no,monthly_cutting_percentage=cuttingPercentage,loan_duration=duration,
                                monthly_cutting_amount=amount,note=Note,attach_file=file,company=staf.company_id,login_details=employee,balance=loan_amount,employee_name =emp.title +" " + emp.first_name + " " + emp.last_name,monthly_cutting=cutingamount)
                        
                        new.save()
                        com = Fin_Loan.objects.get(id=new.id)
                        history = Fin_Employee_Loan_History(company = staf.company_id,login_details=employee,employee_loan = com,date = timezone.now(),action = 'Created')
                        history.save()
                        trans = Fin_Employee_Loan_Transactions(company = staf.company_id,login_details=employee,employee_loan =com,date = date.today(),particulars = 'LOAN ISSUED',employee=emp,balance=loan_amount)
                        trans.save()
                        t = Fin_Employee_Loan_Transactions.objects.get(id=trans.id)
                        trans2 = Fin_Employee_Loan_Transactions_History(company = staf.company_id,login_details=employee,employee_loan =com,date = date.today(),action = 'Created',transaction=t)
                        trans2.save()

   
        return redirect(employee_loan_list)
    

def emploanoverview(request,pk):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        loan = Fin_Loan.objects.get(id=pk)
        est_comments = Fin_Employee_loan_comments.objects.filter(employee_loan=loan)
        employee = Employee.objects.get(id=loan.employee.id)
        trans=Fin_Employee_Loan_Transactions.objects.filter(employee_loan=loan)
        last_transaction = trans.last()
        balance=last_transaction.balance
        print(balance)

        latest_item_id=Fin_Employee_Loan_History.objects.filter(employee_loan=loan,company=com)
        latest_date = Fin_Employee_Loan_History.objects.filter(employee_loan=loan,company=com).aggregate(latest_date=Max('date'))['latest_date']  
        filtered_data = Fin_Employee_Loan_History.objects.get(date=latest_date, employee_loan=loan)
      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        employee = Employee.objects.filter(company_id=staf.company_id_id)
        com=staf.company_id
        loan = Fin_Loan.objects.get(id=pk)
        est_comments = Fin_Employee_loan_comments.objects.filter(employee_loan=loan)
        trans=Fin_Employee_Loan_Transactions.objects.filter(employee_loan=loan)
        last_transaction = trans.last()
        balance=last_transaction.balance
        latest_item_id=Fin_Employee_Loan_History.objects.filter(employee_loan=loan,company=staf.company_id)
        latest_date = Fin_Employee_Loan_History.objects.filter(employee_loan=loan,company=staf.company_id).aggregate(latest_date=Max('date'))['latest_date']  
        filtered_data = Fin_Employee_Loan_History.objects.get(date=latest_date, employee_loan=loan)
      

    return render(request,'company/employee_loan_overview.html',{'allmodules':allmodules,'loan':loan,'employee':employee,'trans':trans,'est_comments':est_comments,'latest_item_id':latest_item_id,'filtered_data':filtered_data,'com':com,'balance':balance}) 

        
def emploanedit(request, pk):                                                                #new by tinto mt
  
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)

    
    # Retrieve the chart of accounts entry
    # loan = get_object_or_404(Loan, id=pk)
    

    # Check if 'company_id' is in the session

   
    if login.User_Type == 'Company':
      
     
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com, status = 'New')
        loan = Fin_Loan.objects.get(id=pk)
        employee = Employee.objects.filter(company=com)
        term=Fin_Loan_Term.objects.filter(company=com)
        banks=Fin_Banking.objects.filter(company=com)
        context = {
                    'allmodules':allmodules,
                    'loan':loan,
                    'employee':employee,
                    'term':term,
                    'banks':banks,
                    'com':com
            }
       
    
        
        if request.method=='POST':
        
    
        

            loan = Fin_Loan.objects.get(id=pk)
            d=Fin_Employee_Loan_Transactions.objects.get(employee_loan=pk,particulars='LOAN ISSUED')
            newloan=request.POST.get("loan_amount",None)
            if int(newloan)>int(d.balance):
                bal=int(newloan)-int(d.balance)
                # d.balance=d.balance+bal
                d.save()
                loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=d.employee_loan) & Q(id__gte=d.id))
                print("s")
                loan.balance=loan.balance+bal
                for i in loan_trans:
                        print(i.balance)
                    
                        i.balance=i.balance+bal
                        last_balance=i.balance
                        i.save()
                        print(i.balance)

                        print("s3")
                        print(loan.balance)
    #             if last_balance is not None:
    #                 loans= Fin_Loan.objects.get(id=pk)
    # # Assuming you have an object where you want to save the last balance, let's call it 'loan_object'
    #                 loans.balance = last_balance
                
            if int(newloan)<int(d.balance):
                bal=int(d.balance)-int(newloan)
                # d.balance=d.balance-bal
                loan.balance=loan.balance-bal
                d.save()
                loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=d.employee_loan) & Q(id__gte=d.id))
                print("s")
                for i in loan_trans:
                        print(i.balance)
                    
                        i.balance=i.balance-bal
                        last_balance=i.balance
                        i.save()
                        print(i.balance)
                        print("s3")
    #             if last_balance is not None:
    #                 loans= Fin_Loan.objects.get(id=pk)
    # # Assuming you have an object where you want to save the last balance, let's call it 'loan_object'
    #                 loans.balance = last_balance

            b=Fin_Employee_Loan_History()
            # c=Fin_Employee_Loan_Transactions.objects.get(employee_loan=pk)
            # c.balance=request.POST.get("loan_amount",None)
            t=Fin_Employee_Loan_Transactions_History()

            t.company=com
            t.login_details=login
            t.action="Edited"
            t.date=date.today()
            t.transaction=d
            t.employee_loan=loan

            t.save()
            # c.save()
            b.company=com
            b.login_details=login
            b.action="Edited"
            b.date=date.today()
   
        
            loan.login_details=login
            loan.company=com
            emp=request.POST["employee"]
            emp1=Employee.objects.get(id=emp)
            employee_name1 =emp1.title +" " + emp1.first_name + " " + emp1.last_name
            loan.employee_name = employee_name1
            
            
            loanduration=request.POST.get("loanduration",None)
            term=Fin_Loan_Term.objects.get(id=loanduration)
            loan.loan_duration=term
            loan.employeeid = request.POST.get("empid",None)
            loan.employee_email = request.POST.get("empemail",None)
            loan.salary=request.POST.get("salary",None)
            loan.join_date=request.POST.get("join_date",None)
            loan.loan_date=request.POST.get("loan_date",None)
            loan.loan_amount=request.POST.get("loan_amount",None)
            loan.expiry_date=request.POST.get("expdate",None)
            loan.payment_method=request.POST.get("select_payment",None)
            loan.cheque_number=request.POST.get("cheque_no",None)
            loan.upi_id=request.POST.get("upi_id",None)
            loan.bank_account=request.POST.get("acc_no",None)
            loan.monthly_cutting=request.POST.get("cutingamount",None)
            if request.POST.get("cutingamount",None) == 'Yes':
                loan.monthly_cutting_percentage = 0
            else:
                loan.monthly_cutting_percentage=request.POST.get("cuttingPercentage",None)
            loan.monthly_cutting_amount=request.POST.get("monthly_cutting_amount",None)
            loan.bank_account=request.POST.get("acc_no",None)
            loan.monthly_cutting=request.POST.get("cutingamount",None)
            loan.monthly_cutting_percentage=request.POST.get("cuttingPercentage",None)
            amount1 = request.POST['pamount']
            amount2 = request.POST['amount5']
            if amount1 != '':
                loan.monthly_cutting_amount=amount1
            elif amount2 != '':
                loan.monthly_cutting_amount=amount2
            
            loan.note=request.POST.get('Note')
            loan.attach_file = request.FILES.get('File', None)
            loan.save()
            t=Fin_Loan.objects.get(id=loan.id)
            b.employee_loan=t
            b.save()
            current_utc_time = datetime.now(timezone.utc)
            history=Fin_Employee_Loan_History(company = com,login_details=login,employee_loan = loan,date = current_utc_time,action = 'Edited')
            history.save()
            # Save the changes
        
            # Redirect to another page after successful update
            return redirect('emploanoverview',loan.id)
        return render(request, 'company/Employee_loan_edit.html',context)
    if login.User_Type == 'Staff':
        # com = Fin_Company_Details.objects.get(Login_Id = sid)
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com = staf.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id.id, status = 'New')
        loan = Fin_Loan.objects.get(id=pk)
        employee = Employee.objects.filter(company=staf.company_id)
        term=Fin_Loan_Term.objects.filter(company=staf.company_id)
        banks=Fin_Banking.objects.filter(company=staf.company_id)
        context = {
                    'allmodules':allmodules,
                    'loan':loan,
                    'employee':employee,
                    'term':term,
                    'banks':banks,
                    'com':com
            }
       
    
        
        if request.method=='POST':
        
    
        

            loan = Fin_Loan.objects.get(id=pk)
            d=Fin_Employee_Loan_Transactions.objects.get(employee_loan=pk,particulars='LOAN ISSUED')
            newloan=request.POST.get("loan_amount",None)
            if int(newloan)>int(d.balance):
                bal=int(newloan)-int(d.balance)
                # d.balance=d.balance+bal
                d.save()
                loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=d.employee_loan) & Q(id__gte=d.id))
                print("s")
                loan.balance=loan.balance+bal
                for i in loan_trans:
                        print(i.balance)
                    
                        i.balance=i.balance+bal
                        last_balance=i.balance
                        i.save()
                        print(i.balance)

                        print("s3")
                        print(loan.balance)
    #             if last_balance is not None:
    #                 loans= Fin_Loan.objects.get(id=pk)
    # # Assuming you have an object where you want to save the last balance, let's call it 'loan_object'
    #                 loans.balance = last_balance
                
            if int(newloan)<int(d.balance):
                bal=int(d.balance)-int(newloan)
                # d.balance=d.balance-bal
                loan.balance=loan.balance-bal
                d.save()
                loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=d.employee_loan) & Q(id__gte=d.id))
                print("s")
                for i in loan_trans:
                        print(i.balance)
                    
                        i.balance=i.balance-bal
                        last_balance=i.balance
                        i.save()
                        print(i.balance)
                        print("s3")
    #             if last_balance is not None:
    #                 loans= Fin_Loan.objects.get(id=pk)
    # # Assuming you have an object where you want to save the last balance, let's call it 'loan_object'
    #                 loans.balance = last_balance

            b=Fin_Employee_Loan_History()
            # c=Fin_Employee_Loan_Transactions.objects.get(employee_loan=pk)
            # c.balance=request.POST.get("loan_amount",None)
            t=Fin_Employee_Loan_Transactions_History()

            t.company=com
            t.login_details=login
            t.action="Edited"
            t.date=date.today()
            t.transaction=d
            t.employee_loan=loan

            t.save()
            # c.save()
            b.company=com
            b.login_details=login
            b.action="Edited"
            b.date=date.today()
   
        
            loan.login_details=login
            loan.company=com
            emp=request.POST["employee"]
            emp1=Employee.objects.get(id=emp)
            employee_name1 =emp1.title +" " + emp1.first_name + " " + emp1.last_name
            loan.employee_name = employee_name1
            
            
            loanduration=request.POST.get("loanduration",None)
            term=Fin_Loan_Term.objects.get(id=loanduration)
            loan.loan_duration=term
            loan.employeeid = request.POST.get("empid",None)
            loan.employee_email = request.POST.get("empemail",None)
            loan.salary=request.POST.get("salary",None)
            loan.join_date=request.POST.get("join_date",None)
            loan.loan_date=request.POST.get("loan_date",None)
            loan.loan_amount=request.POST.get("loan_amount",None)
            loan.expiry_date=request.POST.get("expdate",None)
            loan.payment_method=request.POST.get("select_payment",None)
            loan.cheque_number=request.POST.get("cheque_no",None)
            loan.upi_id=request.POST.get("upi_id",None)
            loan.bank_account=request.POST.get("acc_no",None)
            loan.monthly_cutting=request.POST.get("cutingamount",None)
            if request.POST.get("cutingamount",None) == 'Yes':
                loan.monthly_cutting_percentage = 0
            else:
                loan.monthly_cutting_percentage=request.POST.get("cuttingPercentage",None)
            loan.monthly_cutting_amount=request.POST.get("monthly_cutting_amount",None)
            loan.bank_account=request.POST.get("acc_no",None)
            loan.monthly_cutting=request.POST.get("cutingamount",None)
            loan.monthly_cutting_percentage=request.POST.get("cuttingPercentage",None)
            amount1 = request.POST['pamount']
            amount2 = request.POST['amount5']
            if amount1 != '':
                loan.monthly_cutting_amount=amount1
            elif amount2 != '':
                loan.monthly_cutting_amount=amount2
            
            loan.note=request.POST.get('Note')
            loan.attach_file = request.FILES.get('File', None)
            loan.save()
            t=Fin_Loan.objects.get(id=loan.id)
            b.employee_loan=t
            b.save()
            current_utc_time = datetime.now(timezone.utc)
            history=Fin_Employee_Loan_History(company = staf.company_id,login_details=login,employee_loan = loan,date = current_utc_time,action = 'Edited')
            history.save()
            # Save the changes
        
            # Redirect to another page after successful update
            return redirect('emploanoverview',loan.id)
        return render(request, 'company/Employee_loan_edit.html',context)   


def emploanrepaymentsave(request,pk):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':

            if request.method == 'POST':


                principle_amount = request.POST['principal']
                interest= request.POST['interest']
                if interest == "":
                    interest_amount=0
                else:
                    interest_amount=interest
                principle_amount = request.POST['principal']
                payment_date= request.POST['date2']
                payment_method = request.POST['select_payment']
                total_amount= request.POST['total']
                cheque_number = request.POST['cheque_no']
                upi_id = request.POST['upi_id']
                bank_account= request.POST['acc_no']
                
                
                
            
                
                sid = request.session['s_id']
                employee = Fin_Login_Details.objects.get(id=sid)
                companykey =  Fin_Company_Details.objects.get(Login_Id=sid)
                loan=Fin_Loan.objects.get(id=pk)
                emp=Employee.objects.get(id=loan.employee.id)

                # last_transaction = Fin_Employee_Loan_Transactions.objects.get(employee_loan=pk).first()
                # Assuming principle_amount is a string, convert it to an integer
                principle_amount_int = int(principle_amount)

                # Perform the subtraction
                balance = loan.balance - principle_amount_int


                #transaction count 

                loan.transaction_count=loan.transaction_count+1
                
                

                
                loan.balance=balance
                loan.save()

        # Update the loan balance and save
        

        
                

                new = Fin_Employee_Loan_Repayment(employee=emp,company=companykey,login_details=employee,principle_amount=principle_amount,interest_amount=interest_amount,
                                              payment_date=payment_date,payment_method=payment_method,total_amount=total_amount,cheque_number=cheque_number,upi_id=upi_id,
                                              bank_account=bank_account,employee_loan=loan,balance=balance
                                              )
                new.save()
              

                com = Fin_Employee_Loan_Repayment.objects.get(id=new.id)
                # history = Employee_Loan_History(company = companykey,login_details=employee,employee_loan =com,date = date.today(),action = 'Created')
                # history.save()
                trans = Fin_Employee_Loan_Transactions(company = companykey,login_details=employee,employee_loan =loan,date = payment_date,particulars = 'EMI PAID',employee=emp,repayment=com,balance=balance)
                trans.save()
                t = Fin_Employee_Loan_Transactions.objects.get(id=trans.id)
                trans2 = Fin_Employee_Loan_Transactions_History(company = companykey,login_details=employee,repayment =com,date = payment_date,transaction=t,action='Created')
                trans2.save()
        
    elif login.User_Type == 'Staff':
            staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
            employee = Employee.objects.filter(company_id=staf.company_id_id)
            com=staf.company_id
                

            if request.method == 'POST':


                principle_amount = request.POST['principal']
                interest= request.POST['interest']
                if interest == "":
                    interest_amount=0
                else:
                    interest_amount=interest
                principle_amount = request.POST['principal']
                payment_date= request.POST['date2']
                payment_method = request.POST['select_payment']
                total_amount= request.POST['total']
                cheque_number = request.POST['cheque_no']
                upi_id = request.POST['upi_id']
                bank_account= request.POST['acc_no']
                
                
                
            
                
                sid = request.session['s_id']
                employee = Fin_Login_Details.objects.get(id=sid)
              
                loan=Fin_Loan.objects.get(id=pk)
                emp=Employee.objects.get(id=loan.employee.id)
                # Assuming principle_amount is a string, convert it to an integer
                principle_amount_int = int(principle_amount)

                # Perform the subtraction
                balance = loan.balance - principle_amount_int
                
                
                #transaction count 

                loan.transaction_count=loan.transaction_count+1
                
                loan.balance=balance
                loan.save()

        # Update the loan balance and save
        

        
                

                new = Fin_Employee_Loan_Repayment(employee=emp,company=staf.company_id,login_details=employee,principle_amount=principle_amount,interest_amount=interest_amount,
                                              payment_date=payment_date,payment_method=payment_method,total_amount=total_amount,cheque_number=cheque_number,upi_id=upi_id,
                                              bank_account=bank_account,employee_loan=loan,balance=balance
                                              )
                new.save()
              

                com = Fin_Employee_Loan_Repayment.objects.get(id=new.id)
                # history = Employee_Loan_History(company = companykey,login_details=employee,employee_loan =com,date = date.today(),action = 'Created')
                # history.save()
                trans = Fin_Employee_Loan_Transactions(company = staf.company_id,login_details=employee,employee_loan =loan,date = payment_date,particulars = 'EMI PAID',employee=emp,repayment=com,balance=balance)
                trans.save()
                t = Fin_Employee_Loan_Transactions.objects.get(id=trans.id)
                trans2 = Fin_Employee_Loan_Transactions_History(company = staf.company_id,login_details=employee,repayment =com,date = payment_date,transaction=t,action='Created')
                trans2.save()

   
    return redirect(emploanoverview,pk)
    

def emploanrepaymentedit(request, pk):                                                                #new by tinto mt
  
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)

    
    # Retrieve the chart of accounts entry
    # loan = get_object_or_404(Loan, id=pk)
    

    # Check if 'company_id' is in the session

   
    if login.User_Type == 'Company':
      
     
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        
        loan_re = Fin_Employee_Loan_Repayment.objects.get(id=pk)
        loan = Fin_Loan.objects.get(id=loan_re.employee_loan.id)
        employee = Employee.objects.get(id=loan_re.employee.id)
        banks=Fin_Banking.objects.filter(company=com)
        context = {
                    'allmodules':allmodules,
                    'loan':loan,
                    'employee':employee,
                    'loan_re':loan_re,
                    'com':com,
                    'banks':banks
            }
       
    
        
        if request.method=='POST':
        
    
     
            loan1 = Fin_Employee_Loan_Repayment.objects.get(id=pk)
            c=Fin_Employee_Loan_Transactions.objects.get(repayment=loan1)
            loan2 = Fin_Loan.objects.get(id=loan_re.employee_loan.id)
            # t=Fin_Employee_Loan_Transactions_History()

            # t.company=com
            # t.login_details=login
            # t.action="Edited"
            # t.date=date.today()
            # t.transaction=c
            # t.repayment=loan1
            # t.employee_loan=loan2

            # t.save()
            
   
       
            loan1.login_details=login
            loan1.company=com
         
    
           
            

            previous_principle_amount=loan1.principle_amount
            previous_principle_amount=int(previous_principle_amount) #5000

            principle_amount=request.POST.get("principal",None)
            principle_amount_new=int(principle_amount)
            previousbalance=c.balance
            previousbalance=int(previousbalance)
            loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=c.employee_loan) & Q(id__gte=c.id))
            print("s")
            for i in loan_trans:
                print(i.balance)
                print("s1")

            if previous_principle_amount<principle_amount_new:
                newprincipleamount=principle_amount_new-previous_principle_amount
                print("newprin")
                print(newprincipleamount)
                c.balance=c.balance-newprincipleamount
                loan2.balance=loan2.balance-newprincipleamount
                for i in loan_trans:
                    print(i.balance)
                  
                    i.balance=i.balance-newprincipleamount
                    i.save()
                    print(i.balance)
                    print("s3")
            if previous_principle_amount>principle_amount_new:
                newprincipleamount=previous_principle_amount-principle_amount_new
                print("newprin")
                print(newprincipleamount)
                c.balance=c.balance+newprincipleamount
                loan2.balance=loan2.balance+newprincipleamount
                for i in loan_trans:
                    print(i.balance)
                  
                    i.balance=i.balance+newprincipleamount
                    i.save()
                    print(i.balance)
                    print("s3")
        




            loan1.principle_amount=request.POST.get("principal",None)
            loan1.interest_amount=request.POST.get("interest",None)
            loan1.payment_date=request.POST.get("date",None)
            loan1.total_amount=request.POST.get("total",None)
            loan1.principle_amount=request.POST.get("principal",None)

            loan1.payment_method=request.POST.get("select_payment",None)
            loan1.cheque_number=request.POST.get("cheque_no",None)
            loan1.upi_id=request.POST.get("upi_id",None)
            loan1.bank_account=request.POST.get("acc_no",None)
            loan2.save()
            loan1.save()
            c.save()
            trans2 = Fin_Employee_Loan_Transactions_History(company =com ,login_details=login,repayment=loan1,date = date.today(),transaction=c,action='Edited')
            trans2.save()

            return redirect('emploanoverview',loan2.id)
        return render(request, 'company/Employee_loan_repayment_edit.html',context)
    if login.User_Type == 'Staff':
            staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            com=staf.company_id
            allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
            # employee = Employee.objects.filter(company_id=staf.company_id_id)
            allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
            # loan = Loan.objects.get(id=pk)
            loan_re = Fin_Employee_Loan_Repayment.objects.get(id=pk)
            employee = Employee.objects.get(id=loan_re.employee.id)
            banks=Fin_Banking.objects.filter(company=com)
            context = {
                        'allmodules':allmodules,
                        # 'loan':loan,
                        'employee':employee,
                        'loan_re':loan_re,
                        'com':com,
                        'banks':banks
                }
        
        
            

        
            if request.method=='POST':
            
        
        
                loan1 = Fin_Employee_Loan_Repayment.objects.get(id=pk)
                c=Fin_Employee_Loan_Transactions.objects.get(repayment=loan1)
                loan2 = Fin_Loan.objects.get(id=loan_re.employee_loan.id)
                # t=Fin_Employee_Loan_Transactions_History()

                # t.company=com
                # t.login_details=login
                # t.action="Edited"
                # t.date=date.today()
                # t.transaction=c
                # t.repayment=loan1
                # t.employee_loan=loan2

                # t.save()
                
    
        
                loan1.login_details=login
                loan1.company=com
            
        
            
                

                previous_principle_amount=loan1.principle_amount
                previous_principle_amount=int(previous_principle_amount) #5000

                principle_amount=request.POST.get("principal",None)
                principle_amount_new=int(principle_amount)
                previousbalance=c.balance
                previousbalance=int(previousbalance)
                loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=c.employee_loan) & Q(id__gte=c.id))
                print("s")
                for i in loan_trans:
                    print(i.balance)
                    print("s1")

                if previous_principle_amount<principle_amount_new:
                    newprincipleamount=principle_amount_new-previous_principle_amount
                    print("newprin")
                    print(newprincipleamount)
                    c.balance=c.balance-newprincipleamount
                    loan2.balance=loan2.balance-newprincipleamount
                    for i in loan_trans:
                        print(i.balance)
                    
                        i.balance=i.balance-newprincipleamount
                        i.save()
                        print(i.balance)
                        print("s3")
                if previous_principle_amount>principle_amount_new:
                    newprincipleamount=previous_principle_amount-principle_amount_new
                    print("newprin")
                    print(newprincipleamount)
                    loan2.balance=loan2.balance+newprincipleamount
                    c.balance=c.balance+newprincipleamount
                    for i in loan_trans:
                        print(i.balance)
                    
                        i.balance=i.balance+newprincipleamount
                        i.save()
                        print(i.balance)
                        print("s3")
            




                loan1.principle_amount=request.POST.get("principal",None)
                loan1.interest_amount=request.POST.get("interest",None)
                loan1.payment_date=request.POST.get("date",None)
                loan1.total_amount=request.POST.get("total",None)
                loan1.principle_amount=request.POST.get("principal",None)

                loan1.payment_method=request.POST.get("select_payment",None)
                loan1.cheque_number=request.POST.get("cheque_no",None)
                loan1.upi_id=request.POST.get("upi_id",None)
                loan1.bank_account=request.POST.get("acc_no",None)
                loan2.save()
                loan1.save()
                c.save()
                trans2 = Fin_Employee_Loan_Transactions_History(company =com ,login_details=login,repayment=loan1,date = date.today(),transaction=c,action='Edited')
                trans2.save()

                return redirect('emploanoverview',loan2.id)
            return render(request, 'company/Employee_loan_repayment_edit.html',context)


def emploanaddtional(request,pk):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        loan = Fin_Loan.objects.get(id=pk)
        employee = Employee.objects.get(id=loan.employee.id)
        trans=Fin_Employee_Loan_Transactions.objects.filter(employee_loan=loan)
        banks=Fin_Banking.objects.filter(company=com)
      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com=staf.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        loan = Fin_Loan.objects.get(id=pk)
        employee = Employee.objects.filter(company_id=staf.company_id_id)
        trans=Fin_Employee_Loan_Transactions.objects.filter(employee_loan=loan)
        banks=Fin_Banking.objects.filter(company=com)
      

    return render(request,'company/Employee_loan_addtional.html',{'allmodules':allmodules,'loan':loan,'employee':employee,'trans':trans,'com':com,'banks':banks})    



def emploanadditionalsave(request,pk):
    sid = request.session['s_id']
    employee = Fin_Login_Details.objects.get(id=sid)

    if request.method == 'POST':


        balance_loan = request.POST['remain_loan']
        new_loan= request.POST['new']
        total_loan = request.POST['amount']
        payment_date= request.POST['adjdate']
        payment_method = request.POST['select_payment']
        
        cheque_number = request.POST['cheque_no']
        upi_id = request.POST['upi_id']
        bank_account= request.POST['acc_no']
        
        
        
    
        
        sid = request.session['s_id']
        employee = Fin_Login_Details.objects.get(id=sid)
        
        # Assuming principle_amount is a string, convert it to an integer
      

        # Update the loan balance and save
        

        if employee.User_Type == 'Company':
                companykey =  Fin_Company_Details.objects.get(Login_Id_id=sid)
                loan=Fin_Loan.objects.get(id=pk)
                loan.balance=total_loan

                # tt=loan.total_loan
               
                # loan.total_loan= int(new_loan)
                emp=Employee.objects.get(id=loan.employee.id)

                #transaction count 

                loan.transaction_count=loan.transaction_count+1

                # loan.balance=total_loan
                # print(loan.balance)
                # loan_amount=int(loan.total_loan)
                # print(loan_amount)
                # new=int(new_loan)
                # print(new)
                # loan.total_loan=loan_amount+new
                # print(loan.total_loan)
                loan.save()
                        

                new = Fin_Employee_Additional_Loan(company=companykey,login_details=employee,
                                            payment_method=payment_method,total_loan=total_loan,cheque_number=cheque_number,upi_id=upi_id,
                                              bank_account=bank_account,employee_loan=loan,new_loan=new_loan,balance_loan=balance_loan,new_date=payment_date
                                              )
                new.save()
                

                com = Fin_Employee_Additional_Loan.objects.get(id=new.id)
                trans = Fin_Employee_Loan_Transactions(company = companykey,login_details=employee,employee_loan =loan,date = payment_date,particulars = 'ADDITIONAL LOAN',employee=emp,additional=com,balance=total_loan)
                trans.save()
                t = Fin_Employee_Loan_Transactions.objects.get(id=trans.id)
                trans2 = Fin_Employee_Loan_Transactions_History(company =companykey ,login_details=employee,additional =com,date = payment_date,transaction=t,action='Created')
                trans2.save()
        
        elif employee.User_Type == 'Staff':
                staf = Fin_Staff_Details.objects.get(Login_Id = sid)
                loan=Fin_Loan.objects.get(id=pk)
                emp=Employee.objects.get(id=loan.employee.id)

                loan.balance=total_loan
                print(loan.balance)
                loan_amount=int(loan.total_loan)
                print(loan_amount)
                new=int(new_loan)
                print(new)
                loan.total_loan=loan_amount+new
                print(loan.total_loan)

                #transaction count 

                loan.transaction_count=loan.transaction_count+1
                loan.save()
                

                new = Fin_Employee_Additional_Loan(company=staf.company_id,login_details=employee,
                                              payment_method=payment_method,total_loan=total_loan,cheque_number=cheque_number,upi_id=upi_id,
                                              bank_account=bank_account,employee_loan=loan,new_loan=new_loan,balance_loan=balance_loan,new_date=payment_date
                                              )
                new.save()

                com = Fin_Employee_Additional_Loan.objects.get(id=new.id)
                trans = Fin_Employee_Loan_Transactions(company = staf.company_id,login_details=employee,employee_loan =loan,date = payment_date,particulars = 'ADDITIONAL LOAN',employee=emp,additional=com,balance=total_loan)
                trans.save()
                t = Fin_Employee_Loan_Transactions.objects.get(id=trans.id)
                trans2 = Fin_Employee_Loan_Transactions_History(company =staf.company_id ,login_details=employee,additional =com,date = payment_date,transaction=t,action='Created')
                trans2.save()

   
        return redirect(emploanoverview,pk)


def emploanadditionedit(request, pk):                                                                #new by tinto mt
  
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)

    
    # Retrieve the chart of accounts entry
    # loan = get_object_or_404(Loan, id=pk)
    

    # Check if 'company_id' is in the session

   
    if login.User_Type == 'Company':
      
     
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        
        loan_ad = Fin_Employee_Additional_Loan.objects.get(id=pk)
        loan = Fin_Loan.objects.get(id=loan_ad.employee_loan.id)
        banks=Fin_Banking.objects.filter(company=com)
        # employee = Employee.objects.get(id=loan_ad.employee.id)
        context = {
                    'allmodules':allmodules,
                    'loan':loan,
                    # 'employee':employee,
                    'loan_ad':loan_ad,
                    'com':com,
                    'banks':banks
            }
       
    
        
        if request.method=='POST':
        
    
     
            loan1 = Fin_Employee_Additional_Loan.objects.get(id=pk)
            c=Fin_Employee_Loan_Transactions.objects.get(additional=loan1)
            # t=Fin_Employee_Loan_Transactions_History()

            # t.company=com
            # t.login_details=login
            # t.action="Edited"
            # t.date=date.today()
            # t.transaction=c
            # t.additional=loan1
      

            # t.save()
   
       
            loan1.login_details=login
            loan1.company=com
            loan1.employee_loan=loan
            new_loan_amount=request.POST.get("new",None)
            new_loan_amount=int(new_loan_amount)
        # Assuming principle_amount is a string, convert it to an integer
            prevbalance=loan1.balance_loan
            print(prevbalance)
            # Assuming prevbalance, loan1.total_amount, and loan1.interest_amount are strings
            prevbalance = int(prevbalance)
        
            print(prevbalance)
        
            prevnewloan=loan1.new_loan
            prevnewloan=int(prevnewloan)
            previousbalance=c.balance
            previousbalance=int(previousbalance)
            loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=c.employee_loan) & Q(id__gte=c.id))
            print("s")
            for i in loan_trans:
                print(i.balance)
                print("s1")

            if prevnewloan<new_loan_amount:
                extraloan=new_loan_amount-prevnewloan
                loan3 = Fin_Loan.objects.get(id=loan_ad.employee_loan.id)
                a=loan3.balance
                print(a)
                d=a+extraloan
                print(d)
                loan3.balance=d
      
                loan3.save()
                e=loan3.balance
                print(e)
                print("extraloan")
                print(extraloan)
                c.balance=c.balance+extraloan
                for i in loan_trans:
                    print(i.balance)
                  
                    i.balance=i.balance+extraloan
                    i.save()
                    print(i.balance)
                    print("s3")
            if prevnewloan>new_loan_amount:
                lessloan=prevnewloan-new_loan_amount
                loan3 = Fin_Loan.objects.get(id=loan_ad.employee_loan.id)
                a=loan3.balance
                print(a)
                d=a-lessloan
                print(d)
                loan3.balance=d
      
                loan3.save()
                e=loan3.balance
                print(e)
             
             
                c.balance=c.balance-lessloan
                for i in loan_trans:
                    print(i.balance)
                  
                    i.balance=i.balance-lessloan
                    i.save()
                    print(i.balance)
                    print("s3")




            loan1.balance_loan=request.POST.get("remain_loan",None)
            loan1.new_loan=request.POST.get("new",None)
            loan1.total_loan=request.POST.get("amount",None)
            loan1.payment_method=request.POST.get("select_payment",None)
           

            loan1.new_date=request.POST.get("adjdate",None)
            loan1.cheque_number=request.POST.get("cheque_no",None)
            loan1.upi_id=request.POST.get("upi_id",None)
            loan1.bank_account=request.POST.get("acc_no",None)
            loan3 = Fin_Loan.objects.get(id=loan_ad.employee_loan.id)
            loan3.save()
            

            loan1.save()
            c.save()
            trans2 = Fin_Employee_Loan_Transactions_History(company =com ,login_details=login,additional=loan1,date = date.today(),transaction=c,action='Edited')
            trans2.save()
            
            # loan2.save()
        
            return redirect('emploanoverview',loan3.id)
        return render(request, 'company/Employee_loan_additional_edit.html',context)
    if login.User_Type == 'Staff':

        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com=staf.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id, status = 'New')
        
        loan_ad = Fin_Employee_Additional_Loan.objects.get(id=pk)
        loan = Fin_Loan.objects.get(id=loan_ad.employee_loan.id)
        banks=Fin_Banking.objects.filter(company=com)
        # employee = Employee.objects.get(id=loan_ad.employee.id)
        context = {
                    'allmodules':allmodules,
                    'loan':loan,
                    # 'employee':employee,
                    'loan_ad':loan_ad,
                    'com':com,
                    'banks':banks
            }
       
    
        
        if request.method=='POST':
        
    
     
            loan1 = Fin_Employee_Additional_Loan.objects.get(id=pk)
            c=Fin_Employee_Loan_Transactions.objects.get(additional=loan1)
            # t=Fin_Employee_Loan_Transactions_History()

            # t.company=com
            # t.login_details=login
            # t.action="Edited"
            # t.date=date.today()
            # t.transaction=c
            # t.additional=loan1
      

            # t.save()
   
       
            loan1.login_details=login
            loan1.company=com
            loan1.employee_loan=loan
            new_loan_amount=request.POST.get("new",None)
            new_loan_amount=int(new_loan_amount)
        # Assuming principle_amount is a string, convert it to an integer
            prevbalance=loan1.balance_loan
            print(prevbalance)
            # Assuming prevbalance, loan1.total_amount, and loan1.interest_amount are strings
            prevbalance = int(prevbalance)
        
            print(prevbalance)
        
            prevnewloan=loan1.new_loan
            prevnewloan=int(prevnewloan)
            previousbalance=c.balance
            previousbalance=int(previousbalance)
            loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=c.employee_loan) & Q(id__gte=c.id))
            print("s")
            for i in loan_trans:
                print(i.balance)
                print("s1")

            if prevnewloan<new_loan_amount:
                extraloan=new_loan_amount-prevnewloan
                loan3 = Fin_Loan.objects.get(id=loan_ad.employee_loan.id)
                a=loan3.balance
                print(a)
                d=a+extraloan
                print(d)
                loan3.balance=d
      
                loan3.save()
                e=loan3.balance
                print(e)
                print("extraloan")
                print(extraloan)
                c.balance=c.balance+extraloan
                for i in loan_trans:
                    print(i.balance)
                  
                    i.balance=i.balance+extraloan
                    i.save()
                    print(i.balance)
                    print("s3")
            if prevnewloan>new_loan_amount:
                lessloan=prevnewloan-new_loan_amount
                loan3 = Fin_Loan.objects.get(id=loan_ad.employee_loan.id)
                a=loan3.balance
                print(a)
                d=a-lessloan
                print(d)
                loan3.balance=d
      
                loan3.save()
                e=loan3.balance
                print(e)
                print("extraloan")
                print(extraloan)
                c.balance=c.balance-lessloan
                for i in loan_trans:
                    print(i.balance)
                  
                    i.balance=i.balance-lessloan
                    i.save()
                    print(i.balance)
                    print("s3")




            loan1.balance_loan=request.POST.get("remain_loan",None)
            loan1.new_loan=request.POST.get("new",None)
            loan1.total_loan=request.POST.get("amount",None)
            loan1.payment_method=request.POST.get("select_payment",None)
           

            loan1.new_date=request.POST.get("adjdate",None)
            loan1.cheque_number=request.POST.get("cheque_no",None)
            loan1.upi_id=request.POST.get("upi_id",None)
            loan1.bank_account=request.POST.get("acc_no",None)
            loan3 = Fin_Loan.objects.get(id=loan_ad.employee_loan.id)
            loan3.save()
            

            loan1.save()
            c.save()
            trans2 = Fin_Employee_Loan_Transactions_History(company =staf.company_id ,login_details=login,additional=loan1,date = date.today(),transaction=c,action='Edited')
            trans2.save()
        
            return redirect('emploanoverview',loan3.id)
        return render(request, 'company/Employee_loan_additional_edit.html',context)


def addemp(request):                                                                #new by tinto mt (item)
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)

    
    # Retrieve the chart of accounts entry
    # loan = get_object_or_404(Loan, id=pk)
    

    # Check if 'company_id' is in the session

   
    if login.User_Type == 'Company':
        if request.method == 'POST':
                com = Fin_Company_Details.objects.get(Login_Id = sid)
                allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
                title = request.POST['Title']
                firstname = request.POST['First_Name'].capitalize()
                lastname = request.POST['Last_Name'].capitalize()
                # alias = request.POST['Alias']
                joiningdate = request.POST['Joining_Date']
                salarydate = request.POST['Salary_Date']
                salaryamount = request.POST['Salary_Amount']

                if request.POST['Salary_Amount'] == '':
                    salaryamount = None
                else:
                    salaryamount = request.POST['Salary_Amount']

                amountperhour = request.POST['perhour']
                if amountperhour == '' or amountperhour == '0':
                    amountperhour = 0
                else:
                    amountperhour = request.POST['perhour']

                workinghour = request.POST['workhour']
                if workinghour == '' or workinghour == '0':
                    workinghour = 0
                else:
                    workinghour = request.POST['workhour']

                salary_type = request.POST['Salary_Type']
                
                
                employeenumber = request.POST['Employee_Number']
                designation = request.POST['Designation']
                location = request.POST['Location']
                gender = request.POST['Gender']
                image = request.FILES.get('Image', None)
                if image:
                    image = request.FILES['Image']
                else:
                    if gender == 'Male':
                        image = 'media/male_default.png'
                    elif gender == 'Female':
                        image = 'media/female_default.png'
                    else:
                        image = 'media/male_default.png'

                dob = request.POST['DOB']
                blood = request.POST['Blood']
                parent = request.POST['Parent'].capitalize()
                spouse = request.POST['Spouse'].capitalize()
                street = request.POST['street']
                city = request.POST['city']
                state = request.POST['state']
                pincode = request.POST['pincode']
                country = request.POST['country']
                # tempStreet = request.POST['tempStreet']
                # tempCity = request.POST['tempCity']
                # tempState = request.POST['tempState']
                # tempPincode = request.POST['tempPincode']
                # tempCountry = request.POST['tempCountry']
                
                contact = request.POST['Contact_Number']
                emergencycontact = request.POST['Emergency_Contact']
                email = request.POST['Email']
                # file = request.FILES.get('File', None)
                # if file:
                #     file = request.FILES['File']
                # else:
                #     file=''
                bankdetails = request.POST['Bank_Details']
                accoutnumber = request.POST['Account_Number']
                ifsc = request.POST['IFSC']
                bankname = request.POST['BankName']
                branchname = request.POST['BranchName']
                transactiontype = request.POST['Transaction_Type']

                

                if request.POST['tds_applicable'] == 'Yes':
                    tdsapplicable = request.POST['tds_applicable']
                    tdstype = request.POST['TDS_Type']
                    
                    if tdstype == 'Amount':
                        tdsvalue = request.POST['TDS_Amount']
                    elif tdstype == 'Percentage':
                        tdsvalue = request.POST['TDS_Percentage']
                    else:
                        tdsvalue = 0
                elif request.POST['tds_applicable'] == 'No':
                    tdsvalue = 0
                    tdstype = ''
                    tdsapplicable = request.POST['tds_applicable']
                else:
                    tdsvalue = 0
                    tdstype = ''
                    tdsapplicable = ''

                
                
                incometax = request.POST['Income_Tax']
                # aadhar = request.POST['Aadhar']
                uan = request.POST['UAN']
                pf = request.POST['PF']
                pan = request.POST['PAN']
                pr = request.POST['PR']

                if dob == '':
                    age = 2
                else:
                    dob2 = date.fromisoformat(dob)
                    today = date.today()
                    age = int(today.year - dob2.year - ((today.month, today.day) < (dob2.month, dob2.day)))
                


                # if Employee.objects.filter(employee_mail=email,mobile = contact,employee_number=employeenumber,company_id = com.id).exists():
                #     messages.error(request,'user exist')
                #     print('user')
                #     return JsonResponse({"message": "user exist"})
                #     return redirect('employee_loan_create_page')
                
                if Employee.objects.filter(mobile = contact,company_id = com.id).exists():
                    messages.error(request,'phone number exist')
                    print('phone')
                    return JsonResponse({"message": "phone number exist"})

                    return redirect('employee_loan_create_page')
                
                elif Employee.objects.filter(employee_mail=email,company_id = com.id).exists():
                    messages.error(request,'email exist')
                    print('email')
                    return redirect('employee_loan_create_page')
                
                elif Employee.objects.filter(employee_number=employeenumber,company_id = com.id).exists():
                    messages.error(request,'employee id exist')
                    print('id')
                    return JsonResponse({"message": "employee id exist"})

                    return redirect('employee_loan_create_page')
                
                # if Employee.objects.filter(first_name=firstname, company=com).exists():
                #     return JsonResponse({"message": "error"})
                # else:
                    
                # if Employee.objects.filter(employeenumber=employeenumber,company=com,employee_mail=email).exists():
                #         messages.error(request,'Already a Employee  exsits with this details !!!')
                #         return redirect('employee_loan_create_page')
                else:
                    new = Employee(first_name = firstname,last_name = lastname,upload_image=image,title = title,date_of_joining = joiningdate,gender = gender ,
                                        amount_per_hour = amountperhour ,total_working_hours = workinghour,salary_amount = salaryamount ,employee_salary_type =salary_type,salary_effective_from=salarydate,
                                        employee_mail = email,
                                        employee_number = employeenumber,employee_designation = designation,
                                        employee_current_location = location,
                                        mobile = contact,
                                        # temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry,
                                        city=city,street=street,state=state,country=country,pincode=pincode,
                                        # temporary_city=tempCity,
                                        employee_status = 'Active' ,company_id = com.id,login_id=sid,date_of_birth = dob ,
                                        age = age,
                                        blood_group = blood,
                                        fathers_name_mothers_name = parent,spouse_name = spouse,
                                        emergency_contact = emergencycontact,
                                        provide_bank_details = bankdetails,account_number = accoutnumber,
                                        ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                                        tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,
                                        pan_number = pan,
                                        income_tax_number = incometax,
                                        # aadhar_number = aadhar,
                                        universal_account_number = uan,pf_account_number = pf,
                                        pr_account_number = pr,
                                        # upload_file = file
                                        
                                    )
                                    #   
                                #
                        
                    new.save()

                    history = Employee_History(company_id = com.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                    history.save()
                    return JsonResponse({"message": "success"})

    elif login.User_Type == 'Staff':
       
          
        if request.method == 'POST':
                staf = Fin_Staff_Details.objects.get(Login_Id = sid)
                allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id.id, status = 'New')
                title = request.POST['Title']
                firstname = request.POST['First_Name'].capitalize()
                lastname = request.POST['Last_Name'].capitalize()
                # alias = request.POST['Alias']
                joiningdate = request.POST['Joining_Date']
                salarydate = request.POST['Salary_Date']
                salaryamount = request.POST['Salary_Amount']

                if request.POST['Salary_Amount'] == '':
                    salaryamount = None
                else:
                    salaryamount = request.POST['Salary_Amount']

                amountperhour = request.POST['perhour']
                if amountperhour == '' or amountperhour == '0':
                    amountperhour = 0
                else:
                    amountperhour = request.POST['perhour']

                workinghour = request.POST['workhour']
                if workinghour == '' or workinghour == '0':
                    workinghour = 0
                else:
                    workinghour = request.POST['workhour']

                salary_type = request.POST['Salary_Type']

                
                employeenumber = request.POST['Employee_Number']
                designation = request.POST['Designation']
                location = request.POST['Location']
                gender = request.POST['Gender']
                image = request.FILES.get('Image', None)
                if image:
                    image = request.FILES['Image']
                else:
                    if gender == 'Male':
                        image = 'media/male_default.png'
                    elif gender == 'Female':
                        image = 'media/female_default.png'
                    else:
                        image = 'media/male_default.png'

                dob = request.POST['DOB']
                blood = request.POST['Blood']
                parent = request.POST['Parent'].capitalize()
                spouse = request.POST['Spouse'].capitalize()
                street = request.POST['street']
                city = request.POST['city']
                state = request.POST['state']
                pincode = request.POST['pincode']
                country = request.POST['country']
                # tempStreet = request.POST['tempStreet']
                # tempCity = request.POST['tempCity']
                # tempState = request.POST['tempState']
                # tempPincode = request.POST['tempPincode']
                # tempCountry = request.POST['tempCountry']
                
                contact = request.POST['Contact_Number']
                emergencycontact = request.POST['Emergency_Contact']
                email = request.POST['Email']
                # file = request.FILES.get('File', None)
                # if file:
                #     file = request.FILES['File']
                # else:
                #     file=''
                bankdetails = request.POST['Bank_Details']
                accoutnumber = request.POST['Account_Number']
                ifsc = request.POST['IFSC']
                bankname = request.POST['BankName']
                branchname = request.POST['BranchName']
                transactiontype = request.POST['Transaction_Type']

                

                if request.POST['tds_applicable'] == 'Yes':
                    tdsapplicable = request.POST['tds_applicable']
                    tdstype = request.POST['TDS_Type']
                    
                    if tdstype == 'Amount':
                        tdsvalue = request.POST['TDS_Amount']
                    elif tdstype == 'Percentage':
                        tdsvalue = request.POST['TDS_Percentage']
                    else:
                        tdsvalue = 0
                elif request.POST['tds_applicable'] == 'No':
                    tdsvalue = 0
                    tdstype = ''
                    tdsapplicable = request.POST['tds_applicable']
                else:
                    tdsvalue = 0
                    tdstype = ''
                    tdsapplicable = ''

                
                
                incometax = request.POST['Income_Tax']
                # aadhar = request.POST['Aadhar']
                uan = request.POST['UAN']
                pf = request.POST['PF']
                pan = request.POST['PAN']
                pr = request.POST['PR']

                if dob == '':
                    age = 2
                else:
                    dob2 = date.fromisoformat(dob)
                    today = date.today()
                    age = int(today.year - dob2.year - ((today.month, today.day) < (dob2.month, dob2.day)))
                


                # if Employee.objects.filter(employee_mail=email,mobile = contact,employee_number=employeenumber,company_id = staf.company_id.id).exists():
                #     messages.error(request,'user exist')
                #     print('user')
                #     return JsonResponse({"message": "user exist"})
                #     return redirect('employee_loan_create_page')
                
                if Employee.objects.filter(mobile = contact,company_id = staf.company_id.id).exists():
                    messages.error(request,'phone number exist')
                    print('phone')
                    return JsonResponse({"message": "phone number exist"})

                    return redirect('employee_loan_create_page')
                
                elif Employee.objects.filter(employee_mail=email,company_id = staf.company_id.id).exists():
                    messages.error(request,'email exist')
                    print('email')
                    return redirect('employee_loan_create_page')
                
                elif Employee.objects.filter(employee_number=employeenumber,company_id = staf.company_id.id).exists():
                    messages.error(request,'employee id exist')
                    print('id')
                    return JsonResponse({"message": "employee id exist"})

                    return redirect('employee_loan_create_page')
                
                # if Employee.objects.filter(first_name=firstname, company=com).exists():
                #     return JsonResponse({"message": "error"})
                # else:
                    
                # if Employee.objects.filter(employeenumber=employeenumber,company=com,employee_mail=email).exists():
                #         messages.error(request,'Already a Employee  exsits with this details !!!')
                #         return redirect('employee_loan_create_page')
                else:
                    new = Employee(first_name = firstname,last_name = lastname,upload_image=image,title = title,date_of_joining = joiningdate,gender = gender ,
                                        amount_per_hour = amountperhour ,total_working_hours = workinghour,salary_amount = salaryamount ,employee_salary_type =salary_type,salary_effective_from=salarydate,
                                        employee_mail = email,
                                        employee_number = employeenumber,employee_designation = designation,
                                        employee_current_location = location,
                                        mobile = contact,
                                        # temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry,
                                        city=city,street=street,state=state,country=country,pincode=pincode,
                                        # temporary_city=tempCity,
                                        employee_status = 'Active' ,company_id = staf.company_id.id,login_id=sid,date_of_birth = dob ,
                                        age = age,
                                        blood_group = blood,
                                        fathers_name_mothers_name = parent,spouse_name = spouse,
                                        emergency_contact = emergencycontact,
                                        provide_bank_details = bankdetails,account_number = accoutnumber,
                                        ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                                        tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,
                                        pan_number = pan,
                                        income_tax_number = incometax,
                                        # aadhar_number = aadhar,
                                        universal_account_number = uan,pf_account_number = pf,
                                        pr_account_number = pr,
                                        # upload_file = file
                                        
                                    )
                                    #   
                                #
                        
                    new.save()

                    history = Employee_History(company_id = staf.company_id.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                    history.save()
                    return JsonResponse({"message": "success"})

 
def add_term(request):                                                                #new by tinto mt (item)
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)

    if login.User_Type == 'Company':
        if request.method == 'POST':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
            duration = request.POST['duration']
            term = request.POST['term']
            if term=="YEAR":
                days= int(duration) * 365
            else:
                days=int(duration)*30
           
            
            if Fin_Loan_Term.objects.filter(duration=duration, company=com,term=term).exists():
                return JsonResponse({"message": "error"})
            else:
                term = Fin_Loan_Term(duration=duration, company=com,term=term,days=days)  
                term.save()  
                return JsonResponse({"message": "success"})
    elif login.User_Type == 'Staff':
        if request.method == 'POST':
            staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id, status = 'New')
            duration = request.POST['duration']
            term = request.POST['term']
            if term=="YEAR":
                days= int(duration) * 365
            else:
                days=int(duration)*30
           
            
            if Fin_Loan_Term.objects.filter(duration=duration, company=staf.company_id,term=term).exists():
                return JsonResponse({"message": "error"})
            else:
                term = Fin_Loan_Term(duration=duration, company=staf.company_id,term=term,days=days)  
                term.save()  
                return JsonResponse({"message": "success"})
                
def term_dropdown(request):                                                                 #new by tinto mt (item)
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_Loan_Term.objects.filter(company=com)
            for option in option_objects:
                duration=option.duration
                term=option.term
                options[option.id] = [duration,term,f"{duration}"]
            return JsonResponse(options)
    elif login.User_Type == 'Staff':
            staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects =Fin_Loan_Term.objects.filter(company=staf.company_id)
            for option in option_objects:
                duration=option.duration
                term=option.term
                options[option.id] = [duration,term,f"{duration}"]
            return JsonResponse(options)
    
def emp_dropdown(request):                                                                 #new by tinto mt (item)
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Employee.objects.filter(company=com,employee_status='Active')
            print(1111)
            for option in option_objects:
                title=option.title
                first_name=option.first_name
                last_name=option.last_name
                options[option.id] = [title,first_name,last_name,f"{title}"]
            return JsonResponse(options)
    elif login.User_Type == 'Staff':
            staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Employee.objects.filter(company=staf.company_id,employee_status='Active')
            for option in option_objects:
                title=option.title
                first_name=option.first_name
                last_name=option.last_name
                options[option.id] = [title,first_name,last_name,f"{title}"]
            return JsonResponse(options)
    

def laon_status_edit(request, pk):                                                                #new by tinto mt
    
    loan = Fin_Loan.objects.get(id=pk)

    if loan.status == 'Active':
        loan.status = 'Inactive'
        loan.save()
    elif loan.status != 'Active':
        loan.status = 'Active'
        loan.save()

    loan.save()

    return redirect('emploanoverview',pk)


def add_loan_comment(request,pk):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com1 = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com1.id, status = 'New')
        loan = Fin_Loan.objects.get(id=pk)
        if request.method=="POST":
                    
                    com=Fin_Employee_loan_comments()
                    
            
                    comment_comments=request.POST['comment']
                    com.company=com1
                    com.logindetails=login
                    com.comments=comment_comments
                    acc=Fin_Loan.objects.get(id=pk)
                    com.employee_loan=acc
                    
                    com.save()
                    return redirect('emploanoverview',pk)
      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        if request.method=="POST":
                    
                    com=Fin_Employee_loan_comments()
                    
            
                    comment_comments=request.POST['comment']
                    com.company=staf.company_id
                    com.logindetails=login
                    com.comments=comment_comments
                    acc=Fin_Loan.objects.get(id=pk)
                    com.employee_loan=acc
                    
                    com.save()
                    return redirect('emploanoverview',pk)
        

def delete_loan_comment(request,ph,pr):                                                                #new by tinto mt
    acc=Fin_Employee_loan_comments.objects.get(id=ph)
    acc.delete()
    ac=Fin_Loan.objects.get(id=pr)
    
    return redirect(emploanoverview,ac.id)

def attach_loan_file(request,pk):                       
    estobj= Fin_Loan.objects.get(id=pk)
    if request.method == 'POST':
        if len(request.FILES) != 0:
            estobj.attach_file=request.FILES.get('file')
            estobj.save()
            return redirect('emploanoverview',estobj.id)
    
    return redirect(emploanoverview,pk)
    
def delete_loan(request,pk):                                                                #new by tinto mt
    acc=Fin_Loan.objects.get(id=pk)
    acc.delete()
  
    
    return redirect(employee_loan_list)


def shareloanToEmail(request,pk):   
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com1 = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com1.id, status = 'New')
        loan = Fin_Loan.objects.get(id=pk)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                fdate = request.POST['fdate_modal']
                ldate = request.POST['ldate_modal']
                print(fdate)
                print(ldate)
                print(emails_list)
                print('1')
           
           
                loan = Fin_Loan.objects.get(id=pk)
                est_comments = Fin_Employee_loan_comments.objects.filter(employee_loan=loan)
                employee = Employee.objects.get(id=loan.employee.id)
                fdate_obj = datetime.strptime(fdate, '%Y-%m-%d')
                ldate_obj = datetime.strptime(ldate, '%Y-%m-%d')

                # Assuming 'transaction_date' is the field in your model representing the transaction date
                trans = Fin_Employee_Loan_Transactions.objects.filter(
                    employee_loan=loan,
                    date__range=(fdate_obj, ldate_obj)
                )
                latest_item_id=Fin_Employee_Loan_History.objects.filter(employee_loan=loan,company=com1)
                context = {
                
                    'loan':loan,
                    'est_comments':est_comments,
                    'employee':employee,
                    'trans':trans,
                    'latest_item_id':latest_item_id


                }
                print('2')
                template_path = 'company/Employee_loan_emailpdf.html'
                print('3')
                template = get_template(template_path)
                print('4')
                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                print('5')
                filename = f'Loan Transactions.pdf'
                subject = f"Transactipns"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Loan transactions. \n{email_message}\n\n--\nRegards,\n", from_email=settings.EMAIL_HOST_USER,to=emails_list)
                email.attach(filename,pdf,"application/pdf")
                email.send(fail_silently=False)
                msg = messages.success(request, 'Details has been shared via email successfully..!')
                return redirect(emploanoverview,pk)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(emploanoverview,pk)   
      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        loan = Fin_Loan.objects.get(id=pk)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                print(emails_list)
                fdate = request.POST['fdate_modal']
                ldate = request.POST['ldate_modal']
                print('1')
           
           
                loan = Fin_Loan.objects.get(id=pk)
                est_comments = Fin_Employee_loan_comments.objects.filter(employee_loan=loan)
                employee = Employee.objects.get(id=loan.employee.id)
                fdate_obj = datetime.strptime(fdate, '%Y-%m-%d')
                ldate_obj = datetime.strptime(ldate, '%Y-%m-%d')

                # Assuming 'transaction_date' is the field in your model representing the transaction date
                trans = Fin_Employee_Loan_Transactions.objects.filter(
                    employee_loan=loan,
                    date__range=(fdate_obj, ldate_obj)
                )
                latest_item_id=Fin_Employee_Loan_History.objects.filter(employee_loan=loan,company=staf.company_id)
                context = {
                
                    'loan':loan,
                    'est_comments':est_comments,
                    'employee':employee,
                    'trans':trans,
                    'latest_item_id':latest_item_id


                }
                print('2')
                template_path = 'company/Employee_loan_emailpdf.html'
                print('3')
                template = get_template(template_path)
                print('4')
                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                print('5')
                filename = f'Loan Transactions.pdf'
                subject = f"Transactipns"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Loan transactions. \n{email_message}\n\n--\nRegards,\n", from_email=settings.EMAIL_HOST_USER,to=emails_list)
                email.attach(filename,pdf,"application/pdf")
                email.send(fail_silently=False)
                msg = messages.success(request, 'Details has been shared via email successfully..!')
                return redirect(emploanoverview,pk)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(emploanoverview,pk)      
      

def bankdata(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        cust = Fin_Banking.objects.get(id=customer_id,company_id=com.id)
        data7 = {'acc': cust.account_number,'name':cust.bank_name}
        return JsonResponse(data7)

      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        cust = Fin_Banking.objects.get(id=customer_id,company_id=staf.company_id_id)
        data7 = {'acc': cust.account_number,'name':cust.bank_name}
        return JsonResponse(data7)


def get_repayment_data(request):                                                                 #new by tinto mt (item)
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
            id = request.GET.get('repaymentId2')
            print('repay')
            print(id)
            # com = Fin_Company_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_Employee_Loan_Transactions_History.objects.filter(transaction=id)
            print(1111)
            # for i in option_objects:
            #     print(i.action)
            #     print("s1")
            for option in option_objects:
                date=option.date
                action=option.action
                print(option.action)
                first_name=option.login_details.First_name
                last_name=option.login_details.Last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)
    elif login.User_Type == 'Staff':
            id = request.GET.get('repaymentId2')
            # staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_Employee_Loan_Transactions_History.objects.filter(transaction=id)
            print(1111)
            for option in option_objects:
                date=option.date
                action=option.action
                first_name=option.login_details.First_name
                last_name=option.login_details.Last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)
            return JsonResponse(options)
    
def get_addition_data(request):                                                                 #new by tinto mt (item)
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
            id = request.GET.get('additionalId2')
            # com = Fin_Company_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_Employee_Loan_Transactions_History.objects.filter(transaction=id)
            print(1111)
            for option in option_objects:
                date=option.date
                action=option.action
                first_name=option.login_details.First_name
                last_name=option.login_details.Last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)
    elif login.User_Type == 'Staff':
            id = request.GET.get('additionalId2')
            # staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_Employee_Loan_Transactions_History.objects.filter(transaction=id)
            print(1111)
            for option in option_objects:
                date=option.date
                action=option.action
                first_name=option.login_details.First_name
                last_name=option.login_details.Last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)


def delete_loan_repayment(request,pk):                                                                #new by tinto mt
    # acc=Fin_Employee_Loan_Repayment.objects.get(id=pk)
    # princ=acc.principle_amount
    c=Fin_Employee_Loan_Transactions.objects.get(id=pk)
    acc=Fin_Employee_Loan_Repayment.objects.get(id=c.repayment.id)

    princ=acc.principle_amount
    loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=c.employee_loan) & Q(id__gte=c.id))
    cd=Fin_Loan.objects.get(id=acc.employee_loan.id)

    #transaction count --

    cd.transaction_count=cd.transaction_count-1
    # bal=c.balance
    # print('test')
    # print(bal)
    # cd.balance=bal+princ

    
    print("s")
    for i in loan_trans:
        print(i.balance)
        print("s1")
        c=i.balance+princ
        i.balance=c
        last_balance = i.balance
        i.save()
    if last_balance is not None:
    # Assuming you have an object where you want to save the last balance, let's call it 'loan_object'
        cd.balance = last_balance
        cd.save()

    acc.delete()
  
    
    return redirect(emploanoverview,cd.id)

def delete_loan_additional(request,pk):                                                                #new by tinto mt
    # acc=Fin_Employee_Loan_Repayment.objects.get(id=pk)
    # princ=acc.principle_amount
    c=Fin_Employee_Loan_Transactions.objects.get(id=pk)
    acc=Fin_Employee_Additional_Loan.objects.get(id=c.additional.id)

    loanadded=acc.new_loan
    loan_trans = Fin_Employee_Loan_Transactions.objects.filter(Q(employee_loan=c.employee_loan) & Q(id__gte=c.id))
    cd=Fin_Loan.objects.get(id=c.employee_loan.id)
    #transaction count --

    cd.transaction_count=cd.transaction_count-1
    # bal=c.balance
    # cd.balance=bal-loanadded
    # cd.save()
    print("s")
    for i in loan_trans:
        print(i.balance)
        print("s1")
        c=i.balance-loanadded
        i.balance=c
        last_balance = i.balance
        i.save()
    if last_balance is not None:
    # Assuming you have an object where you want to save the last balance, let's call it 'loan_object'
        cd.balance = last_balance
        cd.save()

    acc.delete()
  
    
    return redirect(emploanoverview,cd.id)
    
#End

# CREATED BY AISWARYA
def Fin_Eway_bills(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id,status='New')
                eway_bill = Fin_Ewaybills.objects.filter(Company=com)
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=s_id)
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                eway_bill = Fin_Ewaybills.objects.filter(Company_id=com.company_id)
                
            sort_by = request.GET.get('sort_by', None)
            if sort_by == 'customer_name':
                eway_bill = eway_bill.order_by('Customer_Name')
            elif sort_by == 'eway_billnumber':
                eway_bill = eway_bill.order_by('EwayBill_No')

            context = {
                'com': com,
                'sort_by': sort_by,
                'eway_bill':eway_bill,
                'allmodules':allmodules,
                'data':data,              
            }
            return render(request, 'company/Fin_Ewaybills.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')
    else:
        return redirect('/')  


def Fin_load_CreateEwaybill(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=data)
                cmp = com
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
                
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=data)
                cmp = com.company_id
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
               
            eway_bill = Fin_Ewaybills.objects.filter(Company=cmp)
            cust = Fin_Customers.objects.filter(Company=cmp, status='Active')
            itms = Fin_Items.objects.filter(Company=cmp, status='Active')
            units = Fin_Units.objects.filter(Company=cmp)
            acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
            lst = Fin_Price_List.objects.filter(Company=cmp, status='Active')
            transportation = Fin_Eway_Transportation.objects.filter(Company=cmp)
            trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
            eway_item = Fin_Eway_Items.objects.filter(Company = cmp)
            latest_eway = Fin_Ewaybills.objects.filter(Company=cmp).order_by('-Ewaybill_No').first()

            new_number = int(latest_eway.ReferenceNumber) + 1 if latest_eway else 1

            if Fin_Eway_Reference.objects.filter(Company=cmp).exists():
                deleted = Fin_Eway_Reference.objects.get(Company=cmp)
                
                if deleted:
                    while int(deleted.reference_no) >= new_number:
                        new_number += 1

            nxtEway = ""
            lastEway = Fin_Ewaybills.objects.filter(Company=cmp).last()
            if lastEway:
                eway_no = str(lastEway.Ewaybill_No)
                numbers = []
                stri = []
                for word in eway_no:
                    if word.isdigit():
                        numbers.append(word)
                    else:
                        stri.append(word)

                num = ''.join(numbers)
                st = ''.join(stri)

                eway_num = int(num) + 1

                if num[0] == '0':
                    nxtEway = st + '0' + str(eway_num)
                else:
                    nxtEway = st + str(eway_num)

            context = {
                'com': com,
                'cmp' : cmp,
                'LoginDetails': data,
                'allmodules': allmodules,
                'data': data,
                'eway_bill': eway_bill,
                'customers': cust,
                'items': itms,
                'lst': lst,
                'Transportation': transportation,
                'ref_no':new_number,
                'ewayNo':nxtEway,
                'pTerms':trms,
                'accounts':acc,
                'units':units,
                'eway_item':eway_item,
            }
            return render(request, 'company/Fin_CreateEwaybill.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')
    return redirect('Fin_Eway_bills')


def Fin_checkEwayNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id

        ewayNo = request.GET['eway_num']

        nxtEway = ""
        lastEway = Fin_Ewaybills.objects.filter(Company=com).last()

        if lastEway:
            # Extract numeric and non-numeric parts of the last Eway-Bill number
            numbers = ''.join([c for c in str(lastEway.Ewaybill_No) if c.isdigit()])
            non_numbers = ''.join([c for c in str(lastEway.Ewaybill_No) if not c.isdigit()])

            # Calculate the next Eway-Bill number
            eway_num = int(numbers) + 1
            nxtEway = f'{non_numbers}{eway_num:02d}'

        if Fin_Ewaybills.objects.filter(Company=com, Ewaybill_No__iexact=ewayNo).exists():
            return JsonResponse({'status': False, 'message': 'Eway-Bill No already exists!'})
        elif nxtEway and ewayNo != nxtEway:
            return JsonResponse({'status': False, 'message': 'Eway-Bill No is not continuous!'})
        else:
            return JsonResponse({'status': True, 'message': 'Number is okay!'})
    else:
        return redirect('/')
    

def Fin_getEwayItemDetails(request):
    try:
        if 's_id' in request.session:
            s_id = request.session['s_id']
            data = Fin_Login_Details.objects.get(id=s_id)

            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id
            
            itemName = request.GET.get('item')
            priceListId = request.GET.get('listId')
            item = Fin_Items.objects.get(Company=com, name=itemName)

            if priceListId:
                priceList = Fin_Price_List.objects.get(id=int(priceListId))

                if priceList.item_rate == 'Customized individual rate':
                    try:
                        priceListPrice = float(Fin_PriceList_Items.objects.get(Company=com, list=priceList, item=item).custom_rate)
                    except:
                        priceListPrice = item.selling_price
                else:
                    mark = priceList.up_or_down
                    percentage = float(priceList.percentage)
                    roundOff = priceList.round_off

                    if mark == 'Markup':
                        price = float(item.selling_price) + float((item.selling_price) * (percentage / 100))
                    else:
                        price = float(item.selling_price) - float((item.selling_price) * (percentage / 100))

                    if priceList.round_off != 'Never mind':
                        if roundOff == 'Nearest whole number':
                            finalPrice = round(price)
                        else:
                            finalPrice = int(price) + float(roundOff)
                    else:
                        finalPrice = price

                    priceListPrice = finalPrice
            else:
                priceListPrice = None

            context = {
                'status': True,
                'id': item.id,
                'hsn': item.hsn,
                'sac': item.sac,
                'item_type':item.item_type,
                'sales_rate': item.selling_price,
                'avl': item.current_stock,
                'tax': True if item.tax_reference == 'taxable' else False,
                'gst': item.intra_state_tax,
                'igst': item.inter_state_tax,
                'PLPrice': priceListPrice,
            }
            return JsonResponse(context)
    except Fin_Items.DoesNotExist:
        logging.error('Item not found: %s', itemName)
    except Exception as e:
        logging.error('An error occurred in Fin_getEwayItemDetails: %s', str(e))

    return JsonResponse({'status': False})


def Fin_getEwayCustomerData(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        
        custId = request.POST['id']
        cust = Fin_Customers.objects.get(id = custId)

        if cust:
            if cust.price_list and cust.price_list.type == 'Sales':
                list = True
                listId = cust.price_list.id
                listName = cust.price_list.name
            else:
                list = False
                listId = None
                listName = None
            context = {
                'status':True, 'id':cust.id, 'email':cust.email, 'gstType':cust.gst_type,'shipState':cust.ship_state,'gstin':False if cust.gstin == "" or cust.gstin == None else True, 'gstNo':cust.gstin, 'priceList':list, 'ListId':listId, 'ListName':listName,
                'street':cust.billing_street, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def Fin_createEwayCustomer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            lst = Fin_Price_List.objects.filter(Company=com, status='Active')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            lst = Fin_Price_List.objects.filter(Company=com.company_id, status='Active')

        fName = request.POST['first_name']
        lName = request.POST['last_name']
        gstIn = request.POST['gstin']
        pan = request.POST['pan_no']
        email = request.POST['email']
        phn = request.POST['mobile']

        if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            res = f"Customer `{fName} {lName}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif gstIn != "" and Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            res = f"GSTIN `{gstIn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
            res = f"PAN No `{pan}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
            res = f"Phone Number `{phn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
            res = f"Email `{email}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})

        cust = Fin_Customers(
            Company = com,
            LoginDetails = data,
            title = request.POST['title'],
            first_name = fName,
            last_name = lName,
            company = request.POST['company_name'],
            location = request.POST['location'],
            place_of_supply = request.POST['place_of_supply'],
            gst_type = request.POST['gst_type'],
            gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
            pan_no = pan,
            email = email,
            mobile = phn,
            website = request.POST['website'],
            price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
            payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
            opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            open_balance_type = request.POST['balance_type'],
            current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']),
            billing_street = request.POST['street'],
            billing_city = request.POST['city'],
            billing_state = request.POST['state'],
            billing_pincode = request.POST['pincode'],
            billing_country = request.POST['country'],
            ship_street = request.POST['shipstreet'],
            ship_city = request.POST['shipcity'],
            ship_state = request.POST['shipstate'],
            ship_pincode = request.POST['shippincode'],
            ship_country = request.POST['shipcountry'],
            status = 'Active'
        )
        cust.save()

        

        Fin_Customers_History.objects.create(
            Company = com,
            LoginDetails = data,
            customer = cust,
            action = 'Created'
        )

        return JsonResponse({'status': True})
    
    else:
        return redirect('/')
    
def Fin_getEwayCustomers(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        options = {}
        option_objects = Fin_Customers.objects.filter(Company = com, status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')


def Fin_createEwayItem(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            ewaybill = Fin_Ewaybills.objects.filter(Company=com)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            ewaybill = Fin_Ewaybills.objects.filter(Company=com.company_id)

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        if request.POST['hsn']:
            hsn = request.POST['hsn']
            sac = None
        elif request.POST['sac']:
            sac = request.POST['sac']
            hsn = None
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'non taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'non taxable' else request.POST['inter_st']
        purPrice = request.POST['pcost']
        salePrice = request.POST['salesprice']
        createdDate = date.today()
        
    
        if Fin_Items.objects.filter(Company=com, name__iexact=name).exists():
            res = f"{name} already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Items.objects.filter(Q(Company=com) & (Q(hsn__iexact=hsn) & Q(hsn__isnull=False))).exists():
            res = f"HSN - {hsn} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Items.objects.filter(Q(Company=com) & (Q(sac__iexact=sac) & Q(sac__isnull=False))).exists():
            res = f"SAC - {sac} already exists, try another.!"
            return JsonResponse({'status': False, 'message':res})
        else:
            item = Fin_Items(
                Company = com,
                LoginDetails = data,
                name = name,
                item_type = type,
                unit = unit,
                hsn = hsn,
                sac=sac,
                tax_reference = tax,
                intra_state_tax = gstTax,
                inter_state_tax = igstTax,
                selling_price = salePrice,
                purchase_price = purPrice,
                item_created = createdDate,
                status = 'Active'
            )
            item.save()

            
            Fin_Items_Transaction_History.objects.create(
                Company = com,
                LoginDetails = data,
                item = item,
                action = 'Created'
            )
            
            return JsonResponse({'status': True})
    else:
       return redirect('/')

def Fin_getEwayItems(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        items = {}
        option_objects = Fin_Items.objects.filter(Company = com, status='Active')
        for option in option_objects:
            items[option.id] = [option.name]

        return JsonResponse(items)
    else:
        return redirect('/')


def Fin_new_transport_mode(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id

       

        if request.method == 'POST':
            transport = request.POST['new_transport']
            transport_type = request.POST['transport_type']
            trnsp = Fin_Eway_Transportation(Name=transport, Type=transport_type, Company=com)
            trnsp.save()
            return JsonResponse({"message": "success"})


def Fin_get_transport_data(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id

    if request.method == 'POST':
        trnsp = Fin_Eway_Transportation.objects.get(id=request.POST['id'].split(" ")[0])
        if trnsp.Type == 'Road':
            return JsonResponse({'status': 'true'})
        else:
            return JsonResponse({'status': 'false'})

def Fin_transportation_modes(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id
        
        
        options = {}
        option_objects = Fin_Eway_Transportation.objects.filter(Company=com)
        for option in option_objects:
            options[option.id] = option.Name 

        

        return JsonResponse(options)


from decimal import Decimal
def Fin_CreateEwaybill(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            eway_bills = Fin_Ewaybills.objects.filter(Company=com)
            eway_item = Fin_Eway_Items.objects.filter(Company=com)
            allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
            
        else:
            staff_details = Fin_Staff_Details.objects.get(Login_Id=s_id)
            com = staff_details.company_id 
            eway_bills = Fin_Ewaybills.objects.filter(Company=com)
            eway_item = Fin_Eway_Items.objects.filter(Company=com)
            allmodules = Fin_Modules_List.objects.get(company_id=com, status='New')
           

        current_date = datetime.now().date()

        if request.method == 'POST':
            ewaybill_num = request.POST['Ewaybill_No']
            deliver_to_different_address = request.POST.get('deliver_to_different_address', '0')

            delivery_name = request.POST.get('delivery_name', '')
            delivery_address = request.POST.get('delivery_address', '')
            delivery_phone = request.POST.get('delivery_phone', '')
            delivery_email = request.POST.get('delivery_email', '')
            delivery_place = request.POST.get('delivery_place_of_supply', '')

            if Fin_Ewaybills.objects.filter(Company=com, Ewaybill_No__iexact=ewaybill_num).exists():
                error_script = f'<script>alert("E-waybill Number {ewaybill_num} already exists, try another!");window.history.back();</script>'
                return HttpResponse(error_script)

            File = request.FILES.get('file', None)
            tax_amount_str = request.POST.get('taxamount', '0.0')
            print(f"Debug: tax_amount = {tax_amount_str}, type = {type(tax_amount_str)}")
            tax_amount = Decimal(tax_amount_str)


            if 'transport_mode' not in request.POST:
                alert_script = '<script>alert("Please choose a transportation mode.");</script>'
                return HttpResponse(alert_script + '<script>window.history.back();</script>')

            
            transportation_id = request.POST['transport_mode'].split(" ")[0]

            ewaybill = Fin_Ewaybills(
                Company=com,
                LoginDetails=com.Login_Id,
                Ewaybill_No=ewaybill_num,
                BillDate=request.POST['date'],
                DocumentType=request.POST['document_type'],
                TransactionSubtype=request.POST['transaction_subtype'],
                TransactionType=request.POST['transaction_subtype'],
                Customer=Fin_Customers.objects.get(id=request.POST['customer']),
                CustomerName=request.POST['customer'],
                CustomerEmail=request.POST['customer'],
                Customer_GstType=request.POST['gst_type'],
                Customer_GstNumber=request.POST['gstin'],
                Customer_PlaceOfSupply=request.POST['place_of_supply'],
                BillingAddress=request.POST['bill_address'],
                ReferenceNumber=request.POST['reference_number'],
                Date=request.POST['date'],
                Transportation = Fin_Eway_Transportation.objects.get(id=transportation_id),
                VehicleNumber=request.POST['vehicle_number'],
                Kilometer=request.POST['kilometer'],
                SubTotal=Decimal(request.POST['subtotal']) if request.POST['subtotal'] != "" else Decimal('0.0'), 
                Igst=Decimal(request.POST['igst']) if request.POST['igst'] != "" else Decimal('0.0'),  
                Cgst=Decimal(request.POST['cgst']) if request.POST['cgst'] != "" else Decimal('0.0'),  
                Sgst=Decimal(request.POST['sgst']) if request.POST['sgst'] != "" else Decimal('0.0'),  
                TaxAmount=tax_amount,
                ShippingCharge=Decimal(request.POST['ship']) if request.POST['ship'] != "" else Decimal('0.0'),  
                Adjustment=Decimal(request.POST['adj']) if request.POST['adj'] != "" else Decimal('0.0'), 
                GrandTotal=Decimal(request.POST['grandtotal']) if request.POST['grandtotal'] != "" else Decimal('0.0'),  
                Note=request.POST['note'],
                File=File,
                Status=request.POST.get('Saved', 'Draft')
            )
            ewaybill.save()
            
            if deliver_to_different_address == '1':
                ewaybill.DeliverToDifferentAddress = True
                ewaybill.DeliveryName = delivery_name
                ewaybill.DeliveryAddress = delivery_address
                ewaybill.DeliveryPhone = delivery_phone
                ewaybill.DeliveryEmail = delivery_email
                ewaybill.DeliveryPlace = delivery_place
                ewaybill.save()

            if 'Draft' in request.POST:
                ewaybill.Status = "Draft"
            elif 'Save' in request.POST:
                ewaybill.Status = "Saved"
      
            ewaybill.save()

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn = request.POST.getlist("hsn[]")
            sac = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Eway_Items.objects.create(Ewaybills = ewaybill, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    itm.current_stock -= int(ele[4])
                    itm.save()


            Fin_Eway_History.objects.create( 
                Company=com,
                LoginDetails=data,
                Ewaybills=ewaybill,
                action='Created'
            )

            return redirect('Fin_Eway_bills')
        else:
            customers = Fin_Customers.objects.filter(Company=com, status='Active')
            transportations = Fin_Eway_Transportation.objects.filter(Company=com)
            items = Fin_Items.objects.filter(Company=com, status='Active')

            context = {
                'com': com,
                'data': data,
                'customers': customers,
                'Transportation': transportations,
                'items': items,
                'eway_bills': eway_bills,
                'current_date': current_date,
                'allmodules': allmodules,
                'eway_item': eway_item,
            }

            return render(request, 'company/Fin_CreateEwaybill.html', context)
    else:
        return redirect('/')

    
def Fin_EwayOverview(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)

        try:
            ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)
            history = Fin_Eway_History.objects.filter(Ewaybills_id=ewaybill.Ewaybill_ID).last()
            itms = Fin_Eway_Items.objects.filter(Ewaybills=ewaybill)

            try:
                created = Fin_Eway_History.objects.get(Ewaybills=ewaybill, action='Created')
            except Fin_Eway_History.DoesNotExist:
                created = None

            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
                cmp = com
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
                cmt = Fin_Eway_Comments.objects.filter(Ewaybill = ewaybill,Company=com)
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=s_id)
                cmp = com.company_id
                allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
                cmt = Fin_Eway_Comments.objects.filter(Ewaybill = ewaybill,Company=com.company_id)
                

            return render(request, 'company/Fin_EwayOverview.html', {
                'allmodules': allmodules,
                'com': com,
                'cmp': cmp,
                'data': data,
                'ewaybill': ewaybill,
                'ewayItems': itms,
                'history': history,
                'created': created,
                'comments': cmt,
            })
        except Fin_Ewaybills.DoesNotExist:
            
            return HttpResponse("Ewaybill not found.")
    else:
        return redirect('/')


def Fin_EwayConvert(request,id):
    if 's_id' in request.session:
        ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)
        ewaybill.Status = 'Saved'
        ewaybill.save()
        return redirect(Fin_EwayOverview, id)


def Fin_EwayHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)
        history = Fin_Eway_History.objects.filter(Ewaybills_id=ewaybill.Ewaybill_ID)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_EwayHistory.html',{'allmodules':allmodules,'com':com,'data':data,'history':history,'ewaybill': ewaybill,})
    else:
       return redirect('/')


def Fin_EwayDelete(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        for i in Fin_Eway_Items.objects.filter(Ewaybills = ewaybill):
            item = Fin_Items.objects.get(id = i.Item.id)
            item.current_stock += i.quantity
            item.save()
        
        Fin_Eway_Items.objects.filter(Ewaybills=ewaybill).delete()
        
        if Fin_Eway_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Eway_Reference.objects.get(Company = com)
            if int(ewaybill.ReferenceNumber) > int(deleted.reference_no):
                deleted.reference_no = ewaybill.ReferenceNumber
                deleted.save()
        else:
            Fin_Eway_Reference.objects.create(Company = com, reference_no = ewaybill.ReferenceNumber)
        
        ewaybill.delete()
        return redirect(Fin_Eway_bills)
    
def Fin_EwayPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)
        itms = Fin_Eway_Items.objects.filter(Ewaybills = ewaybill)
    
        context = {'ewaybill':ewaybill, 'ewayItems':itms,'cmp':com}
        
        template_path = 'company/Fin_EwayPdf.html'
        fname = 'EwayBill_'+ ewaybill.Ewaybill_No
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        template = get_template(template_path)
        html = template.render(context)


        pisa_status = pisa.CreatePDF(
        html, dest=response)
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')


def Fin_shareEwayToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)
        itms = Fin_Eway_Items.objects.filter(Ewaybills = ewaybill)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                
                context = {'ewaybill':ewaybill, 'ewayItems':itms,'cmp':com}
                template_path = 'company/Fin_EwayPdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'EwayBill_{ewaybill.Ewaybill_No}'
                subject = f"EwayBill_{ewaybill.Ewaybill_No}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Invoice for - EWAYBILL-{ewaybill.Ewaybill_No}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'E-WayBill details has been shared via email successfully..!')
                return redirect(Fin_EwayOverview,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_EwayOverview, id)


def Fin_EditEway(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)
        eway_items = Fin_Eway_Items.objects.filter(Ewaybills = ewaybill)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        items = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        transportation = Fin_Eway_Transportation.objects.filter(Company=cmp)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'ewaybill':ewaybill, 'eway_items':eway_items, 'customers':cust, 'items':items, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc,'transportations':transportation,
        }
        return render(request,'company/Fin_EditEwaybills.html',context)
    else:
       return redirect('/')


logger = logging.getLogger(__name__)
def Fin_EditEwaybills(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id

        ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)

        if request.method == 'POST':
            ewaybill_num = request.POST['Ewaybill_No']

            deliver_to_different_address = request.POST.get('deliver_to_different_address', '0')

            delivery_name = request.POST.get('delivery_name', '')
            delivery_address = request.POST.get('delivery_address', '')
            delivery_phone = request.POST.get('delivery_phone', '')
            delivery_email = request.POST.get('delivery_email', '')
            delivery_place = request.POST.get('delivery_place_of_supply', '')

            if Fin_Ewaybills.objects.filter(Company=com, Ewaybill_No__iexact=ewaybill_num).exclude(Ewaybill_ID=id).exists():
                error_script = f'<script>alert("E-waybill Number `{ewaybill_num}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(error_script)


            # Update Ewaybill fields
            ewaybill.Customer = Fin_Customers.objects.get(id=request.POST['customer'])
            ewaybill.CustomerEmail = request.POST['customer']
            ewaybill.BillingAddress = request.POST['bill_address']
            ewaybill.Customer_PlaceOfSupply = request.POST['place_of_supply']
            ewaybill.Customer_GstNumber = request.POST['gstin']
            ewaybill.Ewaybill_No = ewaybill_num
            ewaybill.Customer_GstType = request.POST['gst_type']
            ewaybill.Date = request.POST['date']
            ewaybill.ReferenceNumber = request.POST['reference_number']
            ewaybill.DocumentType = request.POST['document_type']
            ewaybill.TransactionSubtype = request.POST['transaction_subtype']
            ewaybill.TransactionType = request.POST['transaction_subtype']

            ewaybill.Transportation = Fin_Eway_Transportation.objects.get(id=request.POST['transport_mode'].split(" ")[0])
            ewaybill.VehicleNumber = request.POST['vehicle_number']
            ewaybill.Kilometer = request.POST['kilometer']
            ewaybill.Status = request.POST.get('status', 'Draft')
            ewaybill.SubTotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            ewaybill.Igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            ewaybill.Cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            ewaybill.Sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            ewaybill.TaxAmount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            ewaybill.Adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            ewaybill.ShippingCharge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            ewaybill.GrandTotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            ewaybill.Note = request.POST['note']
            ewaybill.Status="Draft" if 'Draft' in request.POST else "Saved"
            if len(request.FILES) != 0:
                ewaybill.File = request.FILES.get('file')

            if deliver_to_different_address == '1':
                ewaybill.DeliverToDifferentAddress = True
                ewaybill.DeliveryName = delivery_name
                ewaybill.DeliveryAddress = delivery_address
                ewaybill.DeliveryPhone = delivery_phone
                ewaybill.DeliveryEmail = delivery_email
                ewaybill.DeliveryPlace = delivery_place

            if 'Draft' in request.POST:
                ewaybill.Status = "Draft"
            elif 'Save' in request.POST:
                ewaybill.Status = "Saved"

            ewaybill.save()
            logger.debug(f'ewaybill.Transportation: {ewaybill.Transportation}')

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn = request.POST.getlist("hsn[]")
            sac = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            eway_item_ids = request.POST.getlist("id[]")
            ewayItem_ids = [int(id) for id in eway_item_ids]

            eway_items = Fin_Eway_Items.objects.filter(Ewaybills=ewaybill)
            object_ids = [obj.id for obj in eway_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in ewayItem_ids]
            for itmId in ids_to_delete:
                ewayItem = Fin_Eway_Items.objects.get(id=itmId)
                item = Fin_Items.objects.get(id=ewayItem.Item.id)
                item.current_stock += ewayItem.quantity
                item.save()

            Fin_Eway_Items.objects.filter(id__in=ids_to_delete).delete()

            count = Fin_Eway_Items.objects.filter(Ewaybills=ewaybill).count()

            if len(itemId) == len(itemName) == len(hsn)== len(sac) == len(qty) == len(price) == len(tax) == len(discount) == len(total) == len(
                    ewayItem_ids) and ewayItem_ids and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId, itemName, hsn,sac, qty, price, tax, discount, total, ewayItem_ids)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None'  :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    if int(len(itemId)) > int(count):
                        if ele[9] == 0:
                            itm = Fin_Items.objects.get(id=int(ele[0]))
                            Fin_Eway_Items.objects.create(Ewaybills=ewaybill, Item=itm, hsn=hsn,sac=sac,
                                                        quantity=int(ele[4]), price=float(ele[5]), tax=ele[6],
                                                        discount=float(ele[7]), total=float(ele[8]))
                            itm.current_stock -= int(ele[4])
                            itm.save()
                        else:
                            itm = Fin_Items.objects.get(id=int(ele[0]))
                            inItm = Fin_Eway_Items.objects.get(id=int(ele[9]))
                            crQty = int(inItm.quantity)

                            Fin_Eway_Items.objects.filter(id=int(ele[9])).update(Ewaybills=ewaybill, Item=itm,
                                                                                hsn=hsn,sac=sac, quantity=int(ele[4]),
                                                                                price=float(ele[5]), tax=ele[6],
                                                                                discount=float(ele[7]), total=float(ele[8]))

                            if crQty < int(ele[4]):
                                itm.current_stock -= abs(crQty - int(ele[4]))
                            elif crQty > int(ele[4]):
                                itm.current_stock += abs(crQty - int(ele[4]))
                            itm.save()
                    else:
                        itm = Fin_Items.objects.get(id=int(ele[0]))
                        inItm = Fin_Eway_Items.objects.get(id=int(ele[9]))
                        crQty = int(inItm.quantity)

                        Fin_Eway_Items.objects.filter(id=int(ele[9])).update(Ewaybills=ewaybill, Item=itm,
                                                                            hsn=hsn,sac=sac, quantity=int(ele[4]),
                                                                            price=float(ele[5]), tax=ele[6],
                                                                            discount=float(ele[7]), total=float(ele[8]))

                        if crQty < int(ele[4]):
                            itm.current_stock -= abs(crQty - int(ele[4]))
                        elif crQty > int(ele[4]):
                            itm.current_stock += abs(crQty - int(ele[4]))
                        itm.save()

            logger.debug(f'eway_items: {eway_items}')
            logger.debug(f'items: {itm}')

            
            Fin_Eway_History.objects.create(
                Company=com,
                LoginDetails=data,
                Ewaybills=ewaybill,
                action='Edited'
            )

            return redirect('Fin_EwayOverview', id)
        else:
            return redirect('Fin_EditEway', id)
    else:
        return redirect('/')
        
def Fin_attachEwaybillFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)

        if request.method == 'POST' and len(request.FILES) != 0:
            ewaybill.File = request.FILES.get('file')
            ewaybill.save()

        return redirect(Fin_EwayOverview, id)
    else:
        return redirect('/')

def Fin_addEwayComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        ewaybill = Fin_Ewaybills.objects.get(Ewaybill_ID=id)

        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Eway_Comments.objects.create(Company = com, Ewaybill = ewaybill, comments = cmt)

            return redirect(Fin_EwayOverview, id)
        return redirect(Fin_EwayOverview, id)
    return redirect('/') 
    
def Fin_deleteEwayComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Eway_Comments.objects.get(id = id)
        ewaybillId = cmt.Ewaybill.Ewaybill_ID
        cmt.delete()
        return redirect(Fin_EwayOverview, ewaybillId)
#END


#---------------------------- Purchase Bill --------------------------------# 

def Fin_List_Purchase_Bill(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        allmodules = Fin_Modules_List.objects.get(Login_Id = s_id, status = 'New')
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        allmodules = Fin_Modules_List.objects.get(Login_Id = com.id, status = 'New')
    pbill = Fin_Purchase_Bill.objects.filter(company=com)
    context = {'allmodules':allmodules, 'data':data, 'com':com, 'pbill':pbill}
    return render(request,'company/Fin_Pbill_List.html', context)
    
def Fin_List_Purchase_Add(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        allmodules = Fin_Modules_List.objects.get(Login_Id = s_id, status = 'New')
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        allmodules = Fin_Modules_List.objects.get(Login_Id = com.id, status = 'New')
    ven = Fin_Vendors.objects.filter(Company = com, status = 'Active')
    cust = Fin_Customers.objects.filter(Company = com, status = 'Active')
    bnk = Fin_Banking.objects.filter(company = com, bank_status = 'Active')
    itm = Fin_Items.objects.filter(Company = com, status = 'Active')
    plist = Fin_Price_List.objects.filter(Company = com, status = 'Active')
    terms = Fin_Company_Payment_Terms.objects.filter(Company = com)
    units = Fin_Units.objects.filter(Company = com)
    account = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')
    tod = datetime.now().strftime('%Y-%m-%d')
    if Fin_Purchase_Bill.objects.filter(company = com):
        try:
            ref_no = int(Fin_Purchase_Bill_Ref_No.objects.filter(company = com).last().ref_no) + 1
        except:
            ref_no =  1
        bill_no = Fin_Purchase_Bill.objects.filter(company = com).last().bill_no
        match = re.search(r'^(\d+)|(\d+)$', bill_no)
        if match:
            numeric_part = match.group(0)
            incremented_numeric = str(int(numeric_part) + 1).zfill(len(numeric_part))
            bill_no = re.sub(r'\d+', incremented_numeric, bill_no, count=1)
    else:
        try:
            ref_no = int(Fin_Purchase_Bill_Ref_No.objects.filter(company = com).last().ref_no) + 1
        except:
            ref_no =  1
        bill_no = 1000
    context = {'allmodules':allmodules, 'data':data, 'com':com, 'ven':ven, 'cust':cust, 'bnk':bnk, 'units':units,
               'account':account, 'itm':itm, 'tod':tod, 'plist':plist, 'ref_no': ref_no, 'bill_no':bill_no, 'terms':terms}
    return render(request,'company/Fin_Pbill_Add.html', context)

def Fin_Price_List_Data(request):
    plist_id = request.GET.get('plist_id')
    itm_id = request.GET.get('itm_id')
    plist = Fin_Price_List.objects.get(id=plist_id)
    itm = Fin_Items.objects.get(id=itm_id)
    if plist.item_rate == 'Markup/Markdown by a percentage':
        if plist.up_or_down == 'Markup':
            price = float(itm.purchase_price) + (float(itm.purchase_price)*float(plist.percentage)/100)
        else:
            price = float(itm.purchase_price) - (float(itm.purchase_price)*float(plist.percentage)/100)
    else:
        try:
            price = Fin_PriceList_Items.objects.get(list = plist, item = itm).custom_rate
        except:
            price = itm.purchase_price
    return JsonResponse({'price':price})
    
def Fin_Create_Purchase_Bill(request):
  if request.method == 'POST': 
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
    
    ven = Fin_Vendors.objects.get(id = request.POST.get('ven_name'))
    if request.POST.get('cust_name') == "" or request.POST.get('cust_name') == 'none':
        cust = None
    else:
        cust = Fin_Customers.objects.get(id = request.POST.get('cust_name'))
    plist = None if request.POST.get('price_list') == "" else Fin_Price_List.objects.get(id = request.POST.get('price_list'))
    term = None if request.POST.get('pay_terms') == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST.get('pay_terms'))
    ven_psupply = request.POST.get('ven_psupply')
    cust_psupply = request.POST.get('cust_psupply')
    if ven_psupply == cust_psupply:
        igst = 0
        cgst = request.POST.get('cgst')
        sgst = request.POST.get('sgst')
    else:
        if ven_psupply =='Kerala' and cust_psupply == '':
            igst = 0
            cgst = request.POST.get('cgst')
            sgst = request.POST.get('sgst')
        else:
            igst = request.POST.get('igst')
            cgst = 0
            sgst = 0

    pbill = Fin_Purchase_Bill(vendor = ven,
                              customer = cust,
                              pricelist = plist,
                              ven_psupply = ven_psupply,
                              cust_psupply = cust_psupply,
                              bill_no = request.POST.get('bill_no'),
                              ref_no = request.POST.get('ref_no'),
                            #   porder_no = request.POST.get('pord_no'),
                              bill_date = request.POST.get('bill_date'),
                              due_date = request.POST.get('due_date'),
                              pay_term = term,
                              pay_type = request.POST.get('pay_type'),
                              cheque_no = request.POST.get('cheque_id'),
                              upi_no = request.POST.get('upi_id'),
                              bank_no = request.POST.get('bnk_no'),
                              subtotal = request.POST.get('sub_total'),
                              igst = igst,
                              cgst = cgst,
                              sgst = sgst,
                              taxamount = request.POST.get('tax_amount'),
                              ship_charge = request.POST.get('shipcharge'),
                              adjust = request.POST.get('adjustment'),
                              grandtotal = request.POST.get('grand_total'),
                              paid = request.POST.get('paid'),
                              balance = request.POST.get('bal_due'),
                              company = com,
                              logindetails = data)
    if 'Draft' in request.POST:
        pbill.status = "Draft"
    if "Save" in request.POST:
        pbill.status = "Save"  
    if len(request.FILES) != 0:
        pbill.file=request.FILES.get('file')  

    pbill.save()
        
    item = tuple(request.POST.getlist("product[]"))
    qty =  tuple(request.POST.getlist("qty[]"))
    price =  tuple(request.POST.getlist("price[]"))
    if ven_psupply == cust_psupply:
        tax = tuple(request.POST.getlist("intra_tax[]"))
    else:
        if ven_psupply == 'Kerala' and cust_psupply == '':
            tax = tuple(request.POST.getlist("intra_tax[]"))
        else:
            tax = tuple(request.POST.getlist("inter_tax[]"))
    discount =  tuple(request.POST.getlist("discount[]"))
    total =  tuple(request.POST.getlist("total[]"))

    if len(item)==len(qty)==len(price)==len(tax)==len(discount)==len(total):
        mapped=zip(item,qty,price,tax,discount,total)
        mapped=list(mapped)
        for ele in mapped:
            itm = Fin_Items.objects.get(id=ele[0])
            Fin_Purchase_Bill_Item.objects.create(item = itm,qty = ele[1],price = ele[2],tax = ele[3],discount = ele[4],total = ele[5],pbill = pbill,company = com)
            itm.current_stock = int(itm.current_stock) + int(ele[1])
            itm.save()

    Fin_Purchase_Bill_Ref_No.objects.create(company = com, logindetails = data, ref_no = request.POST.get('ref_no'))
    Fin_Purchase_Bill_History.objects.create(company =com, logindetails = data, pbill = pbill, action='Created')
    return redirect('Fin_List_Purchase_Bill')
  else:
    return redirect('Fin_List_Purchase_Add')
  
def Fin_Check_Pbill_No(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

    bill_no = request.GET.get('no')
    id = request.GET.get('id')
    if id:
        bill_list = Fin_Purchase_Bill.objects.filter(company = com).exclude(id = id)
    else:
        bill_list = Fin_Purchase_Bill.objects.filter(company = com)
    for b in bill_list:
        if str(b.bill_no).upper() == str(bill_no).upper():
            return JsonResponse({'message':'Used'})

    bill = re.search(r'[a-zA-Z]+', bill_no)
    if bill:
        bill = bill.group()

    sale_no = Fin_Sales_Order.objects.filter(Company = com)
    for no in sale_no:
        sale = re.search(r'[a-zA-Z]+', no.sales_order_no)
        if sale:
            sale = sale.group()
        if sale.upper() == bill.upper():
            return JsonResponse({'message':'Invalid'})
    return JsonResponse({'message':'Valid'})

def Fin_New_Vendor(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

    if request.method == 'GET':
        vnd = Fin_Vendors(
            Company = com,
            LoginDetails = com.Login_Id,
            title = request.GET.get('title'),
            first_name = request.GET.get('fname'),
            last_name = request.GET.get('lname'),
            company = request.GET.get('cname'),
            location = request.GET.get('loc'),
            email = request.GET.get('email'),
            website = request.GET.get('site'),
            mobile = request.GET.get('phone'),
            gst_type = request.GET.get('gst_type'),
            gstin = None if request.GET.get('gst_type') == "Unregistered Business" or request.GET.get('gst_type') == 'Overseas' or request.GET.get('gst_type') == 'Consumer' else request.GET.get('gst_in'),
            pan_no = request.GET.get('pan'),
            place_of_supply = request.GET.get('psupply'),
            currency = request.GET.get('currency'),
            open_balance_type = request.GET.get('bal_type'),
            opening_balance = 0 if request.GET.get('bal') == "" else float(request.GET.get('bal')),
            current_balance = 0 if request.GET.get('bal') == "" else float(request.GET.get('bal')),
            credit_limit = 0 if request.GET.get('limit') == "" else float(request.GET.get('limit')),
            payment_terms = None if request.GET.get('terms') == "" else Fin_Company_Payment_Terms.objects.get(id = request.GET.get('terms')),
            price_list = None if request.GET.get('plist') ==  "" else Fin_Price_List.objects.get(id = request.GET.get('plist')),
            billing_street = request.GET.get('street'),
            billing_city = request.GET.get('city'),
            billing_state = request.GET.get('state'),
            billing_pincode = request.GET.get('pinco'),
            billing_country = request.GET.get('country'),
            ship_street = request.GET.get('shipstreet'),
            ship_city = request.GET.get('shipcity'),
            ship_state = request.GET.get('shipstate'),
            ship_pincode = request.GET.get('shippinco'),
            ship_country = request.GET.get('shipcountry'),
            status = 'Active'
        )
        vnd.save()

        Fin_Vendor_History.objects.create(
            Company = com,
            LoginDetails = data,
            Vendor = vnd,
            action = 'Created'
        )
        return JsonResponse({'id':vnd.id})

    else:
        return JsonResponse({'message':'Error'})

def Fin_New_Customer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'GET':
            cust = Fin_Customers(
                Company = com,
                LoginDetails = data,
                title = request.GET.get('title'),
                first_name = request.GET.get('fname'),
                last_name = request.GET.get('lname'),
                company = request.GET.get('cname'),
                location = request.GET.get('loc'),
                place_of_supply = request.GET.get('psupply'),
                gst_type = request.GET.get('gst_type'),
                gstin = None if request.GET.get('gst_type') == "Unregistered Business" or request.GET.get('gst_type') == 'Overseas' or request.GET.get('gst_type') == 'Consumer' else request.GET.get('gst_in'),
                pan_no = request.GET.get('pan'),
                email = request.GET.get('email'),
                mobile = request.GET.get('phone'),
                website = request.GET.get('site'),
                price_list = None if request.GET.get('plist') ==  "" else Fin_Price_List.objects.get(id = request.GET.get('plist')),
                payment_terms = None if request.GET.get('terms') == "" else Fin_Company_Payment_Terms.objects.get(id = request.GET.get('terms')),
                opening_balance = 0 if request.GET.get('bal') == "" else float(request.GET.get('bal')),
                open_balance_type = request.GET.get('bal_type'),
                current_balance = 0 if request.GET.get('bal') == "" else float(request.GET.get('bal')),
                credit_limit = 0 if request.GET.get('limit') == "" else float(request.GET.get('limit')),
                billing_street = request.GET.get('street'),
                billing_city = request.GET.get('city'),
                billing_state = request.GET.get('state'),
                billing_pincode = request.GET.get('pinco'),
                billing_country = request.GET.get('country'),
                ship_street = request.GET.get('shipstreet'),
                ship_city = request.GET.get('shipcity'),
                ship_state = request.GET.get('shipstate'),
                ship_pincode = request.GET.get('shippinco'),
                ship_country = request.GET.get('shipcountry'),
                status = 'Active'
            )
            cust.save()

            Fin_Customers_History.objects.create(
                Company = com,
                LoginDetails = data,
                customer = cust,
                action = 'Created'
            )

        return JsonResponse({'id':cust.id})
    else:
        return JsonResponse({'message':'Error'})

def Fin_New_Payment_Term(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
    days = request.GET.get('days')
    term_name = request.GET.get('term_name')
    terms = Fin_Company_Payment_Terms.objects.create(Company = com, term_name = term_name, days = days)
    return JsonResponse({'id':terms.id})

def Fin_Check_New_Item_Name(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        name = request.POST['itm_name']

        if Fin_Items.objects.filter(Company = com, name__iexact = name).exists():
            msg = f'{name} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')

def Fin_Check_New_Item_HSN(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        hsn = int(request.POST['itm_hsn'])

        if Fin_Items.objects.filter(Company = com, hsn__iexact = hsn,hsn__isnull = False).exists():
            msg = f'{hsn} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')

def Fin_New_Item(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'GET':
            name = request.GET.get('name')
            type = request.GET.get('type')
            unit = request.GET.get('unit')
            if request.GET['hsn']:
                hsn = request.GET['hsn']
                sac = None
            elif request.GET['sac']:
                sac = request.GET['sac']
                hsn = None
            tax = request.GET.get('taxref')
            gstTax = 0 if tax == 'non taxable' else request.GET.get('intra_st')
            igstTax = 0 if tax == 'non taxable' else request.GET.get('inter_st')
            purPrice = request.GET.get('pcost')
            purAccount = None if not 'pur_account' in request.GET or request.GET.get('pur_account') == "" else request.GET.get('pur_account')
            purDesc = request.GET.get('pur_desc')
            salePrice = request.GET.get('salesprice')
            saleAccount = None if not 'sale_account' in request.GET or request.GET.get('sale_account') == "" else request.GET.get('sale_account')
            saleDesc = request.GET.get('sale_desc')
            inventory = request.GET.get('invacc')
            stock = 0 if request.GET.get('stock') == "" else request.GET.get('stock')
            stockUnitRate = 0 if request.GET.get('stock_rate') == "" else request.GET.get('stock_rate')
            minStock = request.GET.get('min_stock')
            createdDate = date.today()
            
            item = Fin_Items(
                Company = com,
                LoginDetails = data,
                name = name,
                item_type = type,
                unit = unit,
                hsn = hsn,
                sac=sac,
                tax_reference = tax,
                intra_state_tax = gstTax,
                inter_state_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                item_created = createdDate,
                min_stock = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                stock_in = 0,
                stock_out = 0,
                stock_unit_rate = stockUnitRate,
                status = 'Active'
            )
            item.save()

            Fin_Items_Transaction_History.objects.create(
                Company = com,
                LoginDetails = data,
                item = item,
                action = 'Created'
            )
                
            return JsonResponse({'id': item.id})
        return JsonResponse({'message':'Error'})

def Fin_View_Purchase_Bill(request,id):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        allmodules = Fin_Modules_List.objects.get(Login_Id = s_id, status = 'New')
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        allmodules = Fin_Modules_List.objects.get(Login_Id = com.id, status = 'New')
    pbill = Fin_Purchase_Bill.objects.get(id=id)
    itm = Fin_Purchase_Bill_Item.objects.filter(pbill=pbill)
    dis = 0
    for i in itm:
        dis += float(i.discount)
    hist = Fin_Purchase_Bill_History.objects.get(company = com, pbill = pbill, action = 'Created')
    comments = Fin_Purchase_Bill_Comment.objects.filter(pbill = pbill)
    context = {'allmodules':allmodules, 'data':data, 'com':com,'pbill':pbill, 'itm':itm, 'hist':hist, 'comments':comments, 'dis':dis}
    return render(request, 'company/Fin_Pbill_View.html', context)

def Fin_Purchase_Bill_Edit(request,id):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        allmodules = Fin_Modules_List.objects.get(Login_Id = s_id, status = 'New')
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        allmodules = Fin_Modules_List.objects.get(Login_Id = com.id, status = 'New')
    ven = Fin_Vendors.objects.filter(Company = com, status = 'Active')
    cust = Fin_Customers.objects.filter(Company = com, status = 'Active')
    bnk = Fin_Banking.objects.filter(company = com, bank_status = 'Active')
    itm = Fin_Items.objects.filter(Company = com, status = 'Active')
    plist = Fin_Price_List.objects.filter(Company = com, status = 'Active')
    terms = Fin_Company_Payment_Terms.objects.filter(Company = com)
    units = Fin_Units.objects.filter(Company = com)
    account = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')
    pbill = Fin_Purchase_Bill.objects.get(id = id)
    pitm = Fin_Purchase_Bill_Item.objects.filter(pbill = pbill)
    for obj in pitm:
        for i in itm:
            if obj.item.id == i.id:
                i.temp_stock = i.current_stock - obj.qty
            else:
                i.temp_stock = i.current_stock
    bill_no = pbill.bill_no
    context = {'allmodules':allmodules, 'data':data, 'com':com, 'ven':ven, 'cust':cust, 'bnk':bnk, 'units':units,'pbill':pbill, 'bill_no':bill_no,
               'account':account, 'itm':itm, 'plist':plist, 'terms':terms, 'pitm':pitm}
    return render(request, 'company/Fin_Pbill_Edit.html', context)

def Fin_Update_Purchase_Bill(request, id):
    if request.method == 'POST': 
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        ven = Fin_Vendors.objects.get(id = request.POST.get('ven_name'))
        if request.POST.get('cust_name') == "" or request.POST.get('cust_name') == 'none':
            cust = None
        else:
            cust = Fin_Customers.objects.get(id = request.POST.get('cust_name'))
        plist = None if request.POST.get('price_list') == "" else Fin_Price_List.objects.get(id = request.POST.get('price_list'))
        term = None if request.POST.get('pay_terms') == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST.get('pay_terms'))
        pbill = Fin_Purchase_Bill.objects.get(id = id)

        ven_psupply =  request.POST.get('ven_psupply')
        cust_psupply =  request.POST.get('cust_psupply')

        pbill.vendor = ven
        pbill.customer = cust
        pbill.pricelist = plist
        pbill.ven_psupply = request.POST.get('ven_psupply')
        pbill.cust_psupply = request.POST.get('cust_psupply')
        pbill.bill_no = request.POST.get('bill_no')
        pbill.ref_no = request.POST.get('ref_no')
    #   pbill.porder_no = request.POST.get('pord_no')
        pbill.bill_date = request.POST.get('bill_date')
        pbill.due_date = request.POST.get('due_date')
        pbill.pay_term = term
        pbill.pay_type = request.POST.get('pay_type')
        pbill.cheque_no = request.POST.get('cheque_id')
        pbill.upi_no = request.POST.get('upi_id')
        pbill.bank_no = request.POST.get('bnk_no')
        pbill.subtotal = request.POST.get('sub_total')
        if ven_psupply == cust_psupply:
            pbill.igst = 0
            pbill.cgst = request.POST.get('cgst')
            pbill.sgst = request.POST.get('sgst')
        else:
            if ven_psupply == 'Kerala' and cust_psupply == '':
                pbill.igst = 0
                pbill.cgst = request.POST.get('cgst')
                pbill.sgst = request.POST.get('sgst')
            else:
                pbill.igst = request.POST.get('igst')
                pbill.cgst = 0
                pbill.sgst = 0
        pbill.taxamount = request.POST.get('tax_amount')
        pbill.ship_charge = request.POST.get('shipcharge')
        pbill.adjust = request.POST.get('adjustment')
        pbill.grandtotal = request.POST.get('grand_total')
        pbill.paid = request.POST.get('paid')
        pbill.balance = request.POST.get('bal_due')
        pbill.company = com
        pbill.logindetails = data

        if len(request.FILES) != 0:
            pbill.file=request.FILES.get('file')  

        pbill.save()
            
        bill_item_list = Fin_Purchase_Bill_Item.objects.filter(company = com, pbill = pbill)
        for bill_item in bill_item_list:
            bill_item.item.current_stock = bill_item.item.current_stock - bill_item.qty
            bill_item.item.save()
        bill_item_list.delete()

        item = tuple(request.POST.getlist("product[]"))
        qty =  tuple(request.POST.getlist("qty[]"))
        price =  tuple(request.POST.getlist("price[]"))
        if ven_psupply == cust_psupply:
            tax = tuple(request.POST.getlist("intra_tax[]"))
        else:
            if ven_psupply == 'Kerala' and cust_psupply == '':
                tax = tuple(request.POST.getlist("intra_tax[]"))
            else:
                tax = tuple(request.POST.getlist("inter_tax[]"))
        discount =  tuple(request.POST.getlist("discount[]"))
        total =  tuple(request.POST.getlist("total[]"))

        if len(item)==len(qty)==len(price)==len(tax)==len(discount)==len(total):
            mapped=zip(item,qty,price,tax,discount,total)
            mapped=list(mapped)
            for ele in mapped:
                itm = Fin_Items.objects.get(id=ele[0])
                Fin_Purchase_Bill_Item.objects.create(item = itm,qty = ele[1],price = ele[2],tax = ele[3],discount = ele[4],total = ele[5],pbill = pbill,company = com)
                itm.current_stock = int(itm.current_stock) + int(ele[1])
                itm.save()

        Fin_Purchase_Bill_History.objects.create(company =com, logindetails = data, pbill = pbill, action='Updated')
        return redirect('Fin_View_Purchase_Bill', id)
    else:
        return redirect('Fin_View_Purchase_Bill', id)

def Fin_Purchase_Bill_Add_Edit_Comment(request, id):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
    pbill = Fin_Purchase_Bill.objects.get(id = id)
    if 'comment_save' in request.POST:
        pbill_com = Fin_Purchase_Bill_Comment(company = com,
                                            logindetails = data,
                                            comment = request.POST.get('comment'),
                                            pbill = pbill)
        pbill_com.save()
    else:
        com_id = request.POST.get('comment_id')
        comm = Fin_Purchase_Bill_Comment.objects.get(id = com_id)
        comm.logindetails = data
        comm.comment = request.POST.get('comment')
        comm.save()
    return redirect('Fin_View_Purchase_Bill', id)

def Fin_Purchase_Bill_Delete_Comment(request, id):
    comm = Fin_Purchase_Bill_Comment.objects.get(id = id)
    bill = comm.pbill.id
    comm.delete()
    return redirect('Fin_View_Purchase_Bill', bill)

def Fin_Delete_Purchase_Bill(request,id):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

    pbill = Fin_Purchase_Bill.objects.get(id=id)
    pitm = Fin_Purchase_Bill_Item.objects.filter(pbill = pbill)
    itm = Fin_Items.objects.filter(Company = com, status = 'Active')
    for obj in pitm:
        for i in itm:
            if obj.item.id == i.id:
                i.current_stock = i.current_stock - obj.qty
                i.save()

    pitm.delete()
    Fin_Purchase_Bill_History.objects.filter(pbill = pbill).delete()
    Fin_Purchase_Bill_Comment.objects.filter(pbill = pbill).delete()
    pbill.delete()
    return redirect('Fin_List_Purchase_Bill')

def Fin_Add_Additional_Files(request,id):
    pbill = Fin_Purchase_Bill.objects.get(id=id)
    if request.method == 'POST':
        if len(request.FILES) != 0:
            pbill.file = request.FILES['file']
            pbill.save()
        return redirect('Fin_View_Purchase_Bill',id)
    
def Fin_Purchase_List_History(request,id):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        allmodules = Fin_Modules_List.objects.get(Login_Id = s_id, status = 'New')
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        allmodules = Fin_Modules_List.objects.get(Login_Id = com.id, status = 'New')
    pbill = Fin_Purchase_Bill.objects.get(id=id)
    hist = Fin_Purchase_Bill_History.objects.filter(company = com, pbill = pbill)
    context = {'allmodules':allmodules, 'data':data, 'com':com, 'hist':hist, 'pbill':pbill}
    return render(request, 'company/Fin_Pbill_History.html', context)

def Fin_Convert_To_Active(request,id):
    pbill = Fin_Purchase_Bill.objects.get(id = id)
    pbill.status = 'Save'
    pbill.save()
    return redirect('Fin_View_Purchase_Bill', id)
    
#End


# -------------------------- admin new updates ------------------------------------ 

def Fin_remove_payment_terms(request,pk):
    payment_term=Fin_Payment_Terms.objects.get(id=pk)
    payment_term.delete()
    messages.success(request, 'Payment term is removed')
    return redirect('Fin_PaymentTerm')

def Fin_Clients_under_distributors(request):
   distributors=Fin_Distributors_Details.objects.filter(Admin_approval_status="Accept")
   noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
   n = len(noti)

   context={
        'noti':noti,
        'n':n,
        'distributors':distributors
    }
   return render(request,"Admin/Fin_clients_under_distributors.html", context)

def get_clients_under_distributor(request):
  if request.method == 'GET':
    distributor_id = request.GET.get('distributor_id')
    
    # Query your database to fetch employee details based on the employee_id.

    company = Fin_Company_Details.objects.filter(Distributor_id=distributor_id,Distributor_approval_status='Accept').order_by('-id')
    company_details=[]

    for i in company:
      cmp_id=i.id
      fname=i.Login_Id.First_name 
      lname=i.Login_Id.Last_name
      email=i.Email
      contact=i.Contact
      pterm_no=i.Payment_Term.payment_terms_number if i.Payment_Term else 'Trial'
      pterm_value=i.Payment_Term.payment_terms_value if i.Payment_Term else 'Period'
      sdate=i.Start_Date
      edate=i.End_date

      company_details.append({
        'cmp_id':cmp_id,
        'fname':fname,
        'lname':lname,
        'email':email,
        'contact':contact,
        'pterm_no':pterm_no,
        'pterm_value':pterm_value,
        'sdate':sdate,
        'edate':edate
      })
    
    # You might want to serialize the 'company_details' to a JSON format.
    return JsonResponse({'details': company_details})

  else:
    return JsonResponse({'error': 'Invalid request method.'}, status=400)


def distributor_client_profile_details(request,pk):
    data = Fin_Company_Details.objects.get(id=pk)
    allmodules = Fin_Modules_List.objects.get(company_id = pk,status = "New")
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
 

    context={
        'data':data,'allmodules':allmodules,'noti':noti,'n':n
    }

    return render(request,'Admin/distributor_client_profile_details.html',context)

# ----Trial period section------

def Fin_Admin_trial_period_section(request):
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    context = {
        'noti':noti,
        'n':n
    }
    return render(request,'Admin/Fin_Admin_trial_period_section.html', context)


def Fin_Admin_trial_period_clients(request):
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    clients=TrialPeriod.objects.filter(company__Registration_Type='self',company__Admin_approval_status='Accept').order_by('-id')
    context={
        'clients':clients,
        'noti':noti,
        'n':n
    }
    return render(request,'Admin/Fin_Admin_trial_period_clients.html', context)


def Fin_Admin_trial_period_distributor_clients(request):
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    n = len(noti)
    distributors=Fin_Distributors_Details.objects.filter(Admin_approval_status='Accept')
    clients=TrialPeriod.objects.filter(company__Registration_Type='distributor',company__Distributor_approval_status='Accept').order_by('-id')
    context={
        'clients':clients,
        'distributors':distributors,
        'noti':noti,
        'n':n
    }
    return render(request,'Admin/Fin_Admin_trial_period_distributor_clients.html', context)

# ---------------------------end admin updates------------------------------------ 


# --------------------------- distributor new updates------------------------------------
  
# ----Trial period section------

def Fin_trial_periodclients(request):

    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Distributors_Details.objects.get(Login_Id = s_id)
        com = Fin_Distributors_Details.objects.get(Login_Id = s_id)
        noti = Fin_DNotification.objects.filter(status = 'New',Distributor_id =com)
        n = len(noti)

        clients=TrialPeriod.objects.filter(company__Distributor_id=com,company__Distributor_approval_status='Accept').order_by('-id')
        context={
            'data':data,
            'com': com,
            'clients':clients,
            'n':n,
            'noti':noti

        }
        return render(request,'Distributor/Fin_trial_period_client.html', context)
    else:
        return redirect('/')

      
# ---------------------------end distributor updates------------------------------------  


#------------- company new updates-------------------

def Fin_company_trial_feedback(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        trial_instance = TrialPeriod.objects.get(company=com)
        if request.method == 'POST':
            interested = request.POST.get('interested')
            feedback=request.POST.get('feedback') 
            
            trial_instance.interested_in_buying=1 if interested == 'yes' else 2
            trial_instance.feedback=feedback
            trial_instance.save()

            if interested =='yes':
                return redirect('Fin_Company_Profile')
            else:
                return redirect('Fin_Company_Profile')
        else:
            return redirect('Fin_Com_Home')
    else:
        return redirect('/')
        
# ---------------------------end company updates------------------------------------  


# < ------------- Shemeem -------- > Estimates < ------------------------------- >
        
def Fin_estimates(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        est = Fin_Estimate.objects.filter(Company = cmp)
        return render(request,'company/Fin_Estimate.html',{'allmodules':allmodules,'com':com, 'cmp':cmp,'data':data,'estimates':est})
    else:
       return redirect('/')

def Fin_addEstimate(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        # Fetching last Estimate and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted Estimate
        latest_est = Fin_Estimate.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_est.reference_no) + 1 if latest_est else 1

        if Fin_Estimate_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Estimate_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next EST number w r t last EST number if exists.
        nxtEST = ""
        # lastEST = Fin_Estimate.objects.filter(Company = cmp).last()
        if latest_est:
            est_no = str(latest_est.estimate_no)
            numbers = []
            stri = []
            for word in est_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            estimate_num = int(num)+1

            if num[0] == '0':
                if estimate_num <10:
                    nxtEST = st+'0'+ str(estimate_num)
                else:
                    nxtEST = st+ str(estimate_num)
            else:
                nxtEST = st+ str(estimate_num)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'ref_no':new_number,'ESTNo':nxtEST,'units':units, 'accounts':acc
        }
        return render(request,'company/Fin_Add_Estimate.html',context)
    else:
       return redirect('/')

def Fin_createEstimate(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            ESTNo = request.POST['estimate_no']

            PatternStr = []
            for word in ESTNo:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkEstimateNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Estimate No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if Fin_Estimate.objects.filter(Company = com, estimate_no__iexact = ESTNo).exists():
                res = f'<script>alert("Estimate Number `{ESTNo}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            Estimate = Fin_Estimate(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_no = request.POST['reference_number'],
                estimate_no = ESTNo,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                estimate_date = request.POST['estimate_date'],
                exp_date = datetime.strptime(request.POST['exp_date'], '%d-%m-%Y').date(),
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                note = request.POST['note']
            )

            Estimate.save()

            if len(request.FILES) != 0:
                Estimate.file=request.FILES.get('file')
            Estimate.save()

            if 'Draft' in request.POST:
                Estimate.status = "Draft"
            elif "Save" in request.POST:
                Estimate.status = "Saved" 
            Estimate.save()

            # Save Estimate items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]
                    Fin_Estimate_Items.objects.create(Estimate = Estimate, Item = itm, hsn = hsn,sac = sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    # itm.current_stock -= int(ele[3])
                    # itm.save()
            
            # Save transaction
                    
            Fin_Estimate_History.objects.create(
                Company = com,
                LoginDetails = data,
                Estimate = Estimate,
                action = 'Created'
            )

            return redirect(Fin_estimates)
        else:
            return redirect(Fin_addEstimate)
    else:
       return redirect('/')

def Fin_viewEstimate(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        Estimate = Fin_Estimate.objects.get(id = id)
        cmt = Fin_Estimate_Comments.objects.filter(Estimate = Estimate)
        hist = Fin_Estimate_History.objects.filter(Estimate = Estimate).last()
        EstItems = Fin_Estimate_Items.objects.filter(Estimate = Estimate)
        try:
            created = Fin_Estimate_History.objects.get(Estimate = Estimate, action = 'Created')
        except:
            created = None

        return render(request,'company/Fin_View_Estimate.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'estimate':Estimate,'estItems':EstItems, 'history':hist, 'comments':cmt, 'created':created})
    else:
       return redirect('/')

def Fin_editEstimate(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        est = Fin_Estimate.objects.get(id = id)
        estItms = Fin_Estimate_Items.objects.filter(Estimate = est)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'estimate':est, 'estItems':estItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc
        }
        return render(request,'company/Fin_Edit_Estimate.html',context)
    else:
       return redirect('/')

def Fin_updateEstimate(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        est = Fin_Estimate.objects.get(id = id)
        if request.method == 'POST':
            ESTNo = request.POST['estimate_no']

            PatternStr = []
            for word in ESTNo:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkEstimateNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Estimate No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if est.estimate_no != ESTNo and Fin_Estimate.objects.filter(Company = com, estimate_no__iexact = ESTNo).exists():
                res = f'<script>alert("Estimate Number `{ESTNo}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            est.Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId'])
            est.customer_email = request.POST['customerEmail']
            est.billing_address = request.POST['bill_address']
            est.gst_type = request.POST['gst_type']
            est.gstin = request.POST['gstin']
            est.place_of_supply = request.POST['place_of_supply']

            est.estimate_no = ESTNo
            est.payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term'])
            est.estimate_date = request.POST['estimate_date']
            est.exp_date = datetime.strptime(request.POST['exp_date'], '%d-%m-%Y').date()

            est.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            est.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            est.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            est.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            est.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            est.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            est.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            est.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])

            est.note = request.POST['note']

            if len(request.FILES) != 0:
                est.file=request.FILES.get('file')

            est.save()

            # Save estimate items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            est_item_ids = request.POST.getlist("id[]")
            EstItem_ids = [int(id) for id in est_item_ids]

            estimate_items = Fin_Estimate_Items.objects.filter(Estimate = est)
            object_ids = [obj.id for obj in estimate_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in EstItem_ids]

            Fin_Estimate_Items.objects.filter(id__in=ids_to_delete).delete()
            
            count = Fin_Estimate_Items.objects.filter(Estimate = est).count()

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(EstItem_ids) and EstItem_ids and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total,EstItem_ids)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None'  :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    if int(len(itemId))>int(count):
                        if ele[9] == 0:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Estimate_Items.objects.create(Estimate = est, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                        else:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Estimate_Items.objects.filter( id = int(ele[9])).update(Estimate = est, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    else:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        Fin_Estimate_Items.objects.filter( id = int(ele[9])).update(Estimate = est, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
            
            # Save transaction
                    
            Fin_Estimate_History.objects.create(
                Company = com,
                LoginDetails = data,
                Estimate = est,
                action = 'Edited'
            )

            return redirect(Fin_viewEstimate, id)
        else:
            return redirect(Fin_editEstimate, id)
    else:
       return redirect('/')
    
def Fin_convertEstimate(request,id):
    if 's_id' in request.session:

        est = Fin_Estimate.objects.get(id = id)
        est.status = 'Saved'
        est.save()
        return redirect(Fin_viewEstimate, id)

def Fin_addEstimateComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        est = Fin_Estimate.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Estimate_Comments.objects.create(Company = com, Estimate = est, comments = cmt)
            return redirect(Fin_viewEstimate, id)
        return redirect(Fin_viewEstimate, id)
    return redirect('/')

def Fin_deleteEstimateComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Estimate_Comments.objects.get(id = id)
        estId = cmt.Estimate.id
        cmt.delete()
        return redirect(Fin_viewEstimate, estId)
    
def Fin_estimateHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        est = Fin_Estimate.objects.get(id = id)
        his = Fin_Estimate_History.objects.filter(Estimate = est)

        return render(request,'company/Fin_Estimate_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'estimate':est})
    else:
       return redirect('/')
    
def Fin_deleteEstimate(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        est = Fin_Estimate.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        Fin_Estimate_Items.objects.filter(Estimate = est).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_Estimate_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Estimate_Reference.objects.get(Company = com)
            if int(est.reference_no) > int(deleted.reference_no):
                deleted.reference_no = est.reference_no
                deleted.save()
        else:
            Fin_Estimate_Reference.objects.create(Company = com, reference_no = est.reference_no)
        
        est.delete()
        return redirect(Fin_estimates)

def Fin_estimatePdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        est = Fin_Estimate.objects.get(id = id)
        itms = Fin_Estimate_Items.objects.filter(Estimate = est)
    
        context = {'estimate':est, 'estItems':itms,'cmp':com}
        
        template_path = 'company/Fin_Estimate_Pdf.html'
        fname = 'Estimate_' + est.estimate_no

        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareEstimateToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        est = Fin_Estimate.objects.get(id = id)
        itms = Fin_Estimate_Items.objects.filter(Estimate = est)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'estimate':est, 'estItems':itms,'cmp':com}
                template_path = 'company/Fin_Estimate_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Estimate_{est.estimate_no}'
                subject = f"Estimate_{est.estimate_no}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Estimate for - #-{est.estimate_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Estimate details has been shared via email successfully..!')
                return redirect(Fin_viewEstimate,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewEstimate, id)

def Fin_attachEstimateFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        est = Fin_Estimate.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            est.file = request.FILES.get('file')
            est.save()

        return redirect(Fin_viewEstimate, id)
    else:
        return redirect('/')

def Fin_convertEstimateToInvoice(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        est = Fin_Estimate.objects.get(id = id)
        estItms = Fin_Estimate_Items.objects.filter(Estimate = est)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        # Fetching last invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted invoice
        latest_inv = Fin_Invoice.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Fin_Invoice_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Invoice_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next invoice number w r t last invoic number if exists.
        nxtInv = ""
        lastInv = Fin_Invoice.objects.filter(Company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'estimate':est, 'estItems':estItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc,'ref_no':new_number,'invNo':nxtInv
        }
        return render(request,'company/Fin_Convert_Estimate_toInvoice.html',context)
    else:
       return redirect('/')

def Fin_estimateConvertInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        est = Fin_Estimate.objects.get(id = id)
        if request.method == 'POST':
            invNum = request.POST['invoice_no']
            if Fin_Invoice.objects.filter(Company = com, invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = Fin_Invoice(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = Fin_Customers.objects.get(id = request.POST['customer']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_no = request.POST['reference_number'],
                invoice_no = invNum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                invoice_date = request.POST['invoice_date'],
                duedate = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                exp_ship_date = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date(),
                price_list_applied = True if 'priceList' in request.POST else False,
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note'],
                status = "Saved" 
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.file=request.FILES.get('file')
            inv.save()

            # Save invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Invoice_Items.objects.create(Invoice = inv, Item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()
            
            # Save transaction
                    
            Fin_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                Invoice = inv,
                action = 'Created'
            )

            # Save invoice and balance details to Estimate

            est.converted_to_invoice = inv
            est.balance = float(inv.balance)
            est.save()

            return redirect(Fin_estimates)
        else:
            return redirect(Fin_convertEstimateToInvoice, id)
    else:
       return redirect('/')

def Fin_convertEstimateToSalesOrder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        est = Fin_Estimate.objects.get(id = id)
        estitms = Fin_Estimate_Items.objects.filter(Estimate = est)
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        # Fetching last sales order and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted sales order
        latest_so = Fin_Sales_Order.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_so.reference_no) + 1 if latest_so else 1

        if Fin_Sales_Order_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Sales_Order_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next SO number w r t last SO number if exists.
        nxtSO = ""
        lastSO = Fin_Sales_Order.objects.filter(Company = cmp).last()
        if lastSO:
            salesOrder_no = str(lastSO.sales_order_no)
            numbers = []
            stri = []
            for word in salesOrder_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            s_order_num = int(num)+1

            if num[0] == '0':
                if s_order_num <10:
                    nxtSO = st+'0'+ str(s_order_num)
                else:
                    nxtSO = st+ str(s_order_num)
            else:
                nxtSO = st+ str(s_order_num)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'ref_no':new_number,'banks':bnk,'SONo':nxtSO,'units':units, 'accounts':acc, 'estimate':est, 'estItems':estitms,
        }
        return render(request,'company/Fin_Convert_Estimate_toSalesOrder.html',context)
    else:
       return redirect('/')

def Fin_estimateConvertSalesOrder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        est = Fin_Estimate.objects.get(id = id)
        if request.method == 'POST':
            SONum = request.POST['sales_order_no']
            if Fin_Sales_Order.objects.filter(Company = com, sales_order_no__iexact = SONum).exists():
                res = f'<script>alert("Sales Order Number `{SONum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            SOrder = Fin_Sales_Order(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_no = request.POST['reference_number'],
                sales_order_no = SONum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                sales_order_date = request.POST['sales_order_date'],
                exp_ship_date = datetime.strptime(request.POST['shipment_date'], '%d-%m-%Y').date(),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note']
            )

            SOrder.save()

            if len(request.FILES) != 0:
                SOrder.file=request.FILES.get('file')
            SOrder.save()

            if 'Draft' in request.POST:
                SOrder.status = "Draft"
            elif "Save" in request.POST:
                SOrder.status = "Saved" 
            SOrder.save()

            # Save Sales Order items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Sales_Order_Items.objects.create(SalesOrder = SOrder, Item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    # itm.current_stock -= int(ele[3])
                    # itm.save()
            
            # Save transaction
                    
            Fin_Sales_Order_History.objects.create(
                Company = com,
                LoginDetails = data,
                SalesOrder = SOrder,
                action = 'Created'
            )

            # Save sales order details to Estimate and update Estimate Balance

            est.converted_to_sales_order = SOrder
            est.balance = float(SOrder.balance)
            est.save()

            return redirect(Fin_estimates)
        else:
            return redirect(Fin_convertEstimateToSalesOrder, id)
    else:
       return redirect('/')

def Fin_checkEstimateNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        EstNo = request.GET['EstNum']

        nxtEstNo = ""
        lastEstmate = Fin_Estimate.objects.filter(Company = com).last()
        if lastEstmate:
            Est_no = str(lastEstmate.estimate_no)
            numbers = []
            stri = []
            for word in Est_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            est_num = int(num)+1

            if num[0] == '0':
                if est_num <10:
                    nxtEstNo = st+'0'+ str(est_num)
                else:
                    nxtEstNo = st+ str(est_num)
            else:
                nxtEstNo = st+ str(est_num)

        PatternStr = []
        for word in EstNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkEstimateNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Estimate No. Pattern already Exists.!'})
        elif Fin_Estimate.objects.filter(Company = com, estimate_no__iexact = EstNo).exists():
            return JsonResponse({'status':False, 'message':'Estimate No. already Exists.!'})
        elif nxtEstNo != "" and EstNo != nxtEstNo:
            return JsonResponse({'status':False, 'message':'Estimate No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkEstimateNumberPattern(pattern):
    models = [Fin_Invoice, Fin_Sales_Order, Fin_Recurring_Invoice, Fin_Purchase_Bill, Fin_Manual_Journal]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False
    
def Fin_convertEstimateToRecurringInvoice(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        est = Fin_Estimate.objects.get(id = id)
        estItms = Fin_Estimate_Items.objects.filter(Estimate = est)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        repeat = Fin_CompanyRepeatEvery.objects.filter(company = cmp)
        priceList = Fin_Price_List.objects.filter(Company = cmp, type = 'Sales', status = 'Active')

        # Fetching last invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted invoice
        latest_inv = Fin_Recurring_Invoice.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Fin_Recurring_Invoice_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Recurring_Invoice_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = Fin_Recurring_Invoice.objects.filter(Company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)
        else:
            nxtInv = 'RI01'

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'estimate':est, 'estItems':estItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc,'ref_no':new_number,'invNo':nxtInv, 'priceListItems':priceList, 'repeat':repeat,
        }
        return render(request,'company/Fin_Convert_Estimate_toRecInvoice.html',context)
    else:
       return redirect('/')   
       
def Fin_estimateConvertRecInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        est = Fin_Estimate.objects.get(id = id)

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']
            if Fin_Recurring_Invoice.objects.filter(Company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Rec. Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = Fin_Recurring_Invoice(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                profile_name = request.POST['profile_name'],
                entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                reference_no = request.POST['reference_number'],
                rec_invoice_no = invNum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                start_date = request.POST['start_date'],
                end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id']),
                repeat_every = Fin_CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.file=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Save" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Recurring_Invoice_Items.objects.create(RecInvoice = inv, Item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()
            
            # Save transaction
                    
            Fin_Recurring_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                RecInvoice = inv,
                action = 'Created'
            )

            # Save sales order details to Estimate and update Estimate Balance

            est.converted_to_rec_invoice = inv
            est.balance = float(inv.balance)
            est.save()

            return redirect(Fin_estimates)
        else:
            return redirect(Fin_convertEstimateToRecurringInvoice, id)
    else:
       return redirect('/')
#End

def Fin_Check_New_Unit(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
    name = str(request.GET.get('unit_name')).upper()
    if Fin_Units.objects.filter(Company = com, name = name).exists():
        return JsonResponse({'is_exist':True, 'message':'Already Present !!!'})
    return JsonResponse({'is_exist':False})

def Fin_New_Unit(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
    name = str(request.GET.get('unit_name')).upper()
    if Fin_Units.objects.filter(Company = com, name = name).exists():
        return JsonResponse({'message': 'Error'})
    Fin_Units.objects.create(Company = com, name = name)
    return JsonResponse({'message': 'Success'})



def Fin_Check_New_Term(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        name = request.GET.get('name')
        days = request.GET.get('days')

        if Fin_Company_Payment_Terms.objects.filter(Company = com, term_name__iexact = name).exists():
            msg = f'{name} already exists, Try another.!'
            return JsonResponse({'name_is_exist':True, 'message':msg})
        else:
            if Fin_Company_Payment_Terms.objects.filter(Company = com, days__iexact = days).exists():
                msg = f'{days} already exists, Try another.!'
                return JsonResponse({'name_is_exist':False, 'days_is_exist':True, 'message':msg})
            return JsonResponse({'name_is_exist':False, 'days_is_exist':False})

def Fin_Share_Purchase_Bill(request,id):
    if request.user:
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                s_id = request.session['s_id']
                data = Fin_Login_Details.objects.get(id = s_id)
                if data.User_Type == "Company":
                    com = Fin_Company_Details.objects.get(Login_Id = s_id)
                else:
                    com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

                pbill = Fin_Purchase_Bill.objects.get(id = id)
                itms = Fin_Purchase_Bill_Item.objects.filter(pbill = pbill)
            
                context = {'pbill': pbill, 'itms':itms, }
                template_path = 'company/Fin_Pbill_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                filename = f'Sales Bill - {pbill.bill_no}.pdf'
                subject = f"SALES BILL - {pbill.bill_no}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached SALES BILL - Bill-{pbill.bill_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Bill has been shared via email successfully..!')
                return redirect(Fin_View_Purchase_Bill)
        except Exception as e:
            messages.error(request, f'{e}')
            return redirect(Fin_View_Purchase_Bill)
            
            
def Fin_New_Account(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'GET':
            name = request.GET.get('account_name')
            type = request.GET.get('account_type')
            subAcc = True if 'subAccountCheckBox' in request.POST else False
            parentAcc = request.GET.get('parent_account') if 'subAccountCheckBox' in request.POST else None
            accCode = request.GET.get('account_code')
            bankAccNum = None if request.GET.get('account_number') == "" else request.GET.get('account_number')
            desc = request.GET.get('description')
            
            createdDate = date.today()
            
            #save account and transaction if account doesn't exists already
            if Fin_Chart_Of_Account.objects.filter(Company=com, account_name__iexact=name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                return JsonResponse({'status':False,'message':res})
            else:
                account = Fin_Chart_Of_Account(
                    Company = com,
                    LoginDetails = data,
                    account_type = type,
                    account_name = name,
                    account_code = accCode,
                    description = desc,
                    balance = 0.0,
                    balance_type = None,
                    credit_card_no = None,
                    sub_account = subAcc,
                    parent_account = parentAcc,
                    bank_account_no = bankAccNum,
                    date = createdDate,
                    create_status = 'added',
                    status = 'active'
                )
                account.save()

                #save transaction

                Fin_ChartOfAccount_History.objects.create(
                    Company = com,
                    LoginDetails = data,
                    account = account,
                    action = 'Created'
                )
                
                return JsonResponse({'status':True})
                
                
#------------- company-------------------
def company_gsttype_change(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        com = Fin_Company_Details.objects.get(Login_Id = s_id)

    
        if request.method == 'POST':
            # Get data from the form
            
            # gstno = request.POST.get('gstno')
            gsttype = request.POST.get('gsttype')

            com.GST_Type = gsttype

            com.save()

            # Check if gsttype is one of the specified values
            if gsttype in ['unregistered Business', 'Overseas', 'Consumer']:
                messages.success(request,'GST Type changed')
                com.GST_NO=''
                com.save()
            else:
                messages.success(request,'GST Type changed, add gst number.')

            
            
            return redirect('Fin_Edit_Company_profile')
        else:
            return redirect('Fin_Edit_Company_profile')
    else:
        return redirect('/')
        
#End

# < ------------- Shemeem -------- > Manual Journals < ------------------------------- >
        
def Fin_manualJournals(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        jrn = Fin_Manual_Journal.objects.filter(Company = cmp)
        return render(request,'company/Fin_Manual_Journal.html',{'allmodules':allmodules,'com':com, 'cmp':cmp,'data':data,'journals':jrn})
    else:
       return redirect('/')

def Fin_addJournal(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        acc = Fin_Chart_Of_Account.objects.filter(Company=cmp).order_by('account_name')
        vnd = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        emp = Employee.objects.filter(company = cmp, employee_status = 'Active')


        # Fetching last Journal and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted Journal
        latest_jrn = Fin_Manual_Journal.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_jrn.reference_no) + 1 if latest_jrn else 1

        if Fin_Manual_Journal_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Manual_Journal_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next Jrn number w r t last Jrn number if exists.
        nxtJRN = ""
        if latest_jrn:
            jrn_no = str(latest_jrn.journal_no)
            numbers = []
            stri = []
            for word in jrn_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            journal_num = int(num)+1

            if num[0] == '0':
                if journal_num <10:
                    nxtJRN = st+'0'+ str(journal_num)
                else:
                    nxtJRN = st+ str(journal_num)
            else:
                nxtJRN = st+ str(journal_num)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'vendors':vnd, 'employees':emp,
            'ref_no':new_number,'JRNNo':nxtJRN, 'accounts':acc
        }
        return render(request,'company/Fin_Add_Journal.html',context)
    else:
       return redirect('/')

def Fin_checkJournalNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        JrnNo = request.GET['JrnNum']

        nxtJrnNo = ""
        lastJournal = Fin_Manual_Journal.objects.filter(Company = com).last()
        if lastJournal:
            Jrn_no = str(lastJournal.journal_no)
            numbers = []
            stri = []
            for word in Jrn_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            journal_num = int(num)+1

            if num[0] == '0':
                if journal_num <10:
                    nxtJrnNo = st+'0'+ str(journal_num)
                else:
                    nxtJrnNo = st+ str(journal_num)
            else:
                nxtJrnNo = st+ str(journal_num)

        PatternStr = []
        for word in JrnNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkJournalNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Journal No. Pattern already Exists.!'})
        elif Fin_Manual_Journal.objects.filter(Company = com, journal_no__iexact = JrnNo).exists():
            return JsonResponse({'status':False, 'message':'Journal No. already Exists.!'})
        elif nxtJrnNo != "" and JrnNo != nxtJrnNo:
            return JsonResponse({'status':False, 'message':'Journal No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkJournalNumberPattern(pattern):
    models = [Fin_Invoice, Fin_Sales_Order, Fin_Recurring_Invoice, Fin_Purchase_Bill, Fin_Estimate]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False

def Fin_createJournal(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            JRNNo = request.POST['journal_no']

            PatternStr = []
            for word in JRNNo:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkJournalNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Journal No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if Fin_Manual_Journal.objects.filter(Company = com, journal_no__iexact = JRNNo).exists():
                res = f'<script>alert("Journal Number `{JRNNo}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            
            debSubTot = request.POST['subtotal_debit']
            credSubTot = request.POST['subtotal_credit']

            debTot = request.POST['total_debit']
            credTot = request.POST['total_credit']

            Journal = Fin_Manual_Journal(
                Company = com,
                LoginDetails = com.Login_Id,
                reference_no = request.POST['reference_number'],
                journal_no = JRNNo,
                journal_date = request.POST['journal_date'],
                notes = request.POST['notes'],
                currency = request.POST['currency'],
                subtotal_debit = 0.0 if debSubTot == "" else float(debSubTot),
                subtotal_credit = 0.0 if credSubTot == "" else float(credSubTot),
                total_debit = 0.0 if debTot == "" else float(debTot),
                total_credit = 0.0 if credTot == "" else float(credTot),
                balance_debit = 0.0 if request.POST['balance_debit'] == "" else float(request.POST['balance_debit']),
                balance_credit = 0.0 if request.POST['balance_credit'] == "" else float(request.POST['balance_credit'])
            )

            if len(request.FILES) != 0:
                Journal.file=request.FILES.get('file')

            if 'Draft' in request.POST:
                Journal.status = "Draft"
            elif "Save" in request.POST:
                Journal.status = "Saved"

            if Journal.total_debit == Journal.total_credit:
                Journal.save()

                # Save Journal Accounts.

                accId = request.POST.getlist("acc_id[]")
                accName = request.POST.getlist("account_name[]")
                desc  = request.POST.getlist("desc[]")
                contact = request.POST.getlist("contact[]")
                deb = request.POST.getlist("debits[]")
                cred = request.POST.getlist("credits[]")

                debit = [0.0 if x == '' else float(x) for x in deb]
                credit = [0.0 if x == '' else float(x) for x in cred]

                if len(accId)==len(accName)==len(desc)==len(contact)==len(debit)==len(credit) and accId and accName and desc and contact and debit and credit:
                    mapped = zip(accId,accName,desc,contact,debit,credit)
                    mapped = list(mapped)
                    for ele in mapped:
                        acc = None if not ele[0].isdigit() else Fin_Chart_Of_Account.objects.get(id = int(ele[0]))
                        Fin_Manual_Journal_Accounts.objects.create(Journal = Journal, Account = acc, description = ele[2], contact = ele[3], debit = float(ele[4]), credit = float(ele[5]), Company = com, LoginDetails = com.Login_Id)
                
                # Save transaction
                        
                Fin_Manual_Journal_History.objects.create(
                    Company = com,
                    LoginDetails = data,
                    Journal = Journal,
                    action = 'Created'
                )

                return redirect(Fin_manualJournals)
            
            else:
                res = f'<script>alert("Please ensure that the debit and credit are equal.!");window.history.back();</script>'
                return HttpResponse(res)
        else:
            return redirect(Fin_addJournal)
    else:
       return redirect('/')

def Fin_createNewAccountAjax(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            name = request.POST['account_name']
            type = request.POST['account_type']
            subAcc = True if request.POST['subAccountCheckBox'] == 'true' else False
            parentAcc = request.POST['parent_account'] if subAcc == True else None
            accCode = request.POST['account_code']
            bankAccNum = None
            desc = request.POST['description']
            
            createdDate = date.today()
            
            #save account and transaction if account doesn't exists already
            if Fin_Chart_Of_Account.objects.filter(Company=com, account_name__iexact=name).exists():
                return JsonResponse({'status':False, 'message':'Account Name already exists..!'})
            else:
                account = Fin_Chart_Of_Account(
                    Company = com,
                    LoginDetails = data,
                    account_type = type,
                    account_name = name,
                    account_code = accCode,
                    description = desc,
                    balance = 0.0,
                    balance_type = None,
                    credit_card_no = None,
                    sub_account = subAcc,
                    parent_account = parentAcc,
                    bank_account_no = bankAccNum,
                    date = createdDate,
                    create_status = 'added',
                    status = 'active'
                )
                account.save()

                #save transaction

                Fin_ChartOfAccount_History.objects.create(
                    Company = com,
                    LoginDetails = data,
                    account = account,
                    action = 'Created'
                )
                
                list= []
                account_objects = Fin_Chart_Of_Account.objects.filter(Company=com).order_by('account_name')

                for account in account_objects:
                    accounts = {
                        'id':account.id,
                        'name': account.account_name,
                    }
                    list.append(accounts)

                return JsonResponse({'status':True,'accounts':list},safe=False)

        return JsonResponse({'status':False, 'message':'Something went wrong.!'})
    else:
       return redirect('/')

def Fin_viewJournal(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        Jrn = Fin_Manual_Journal.objects.get(id = id)
        cmt = Fin_Manual_Journal_Comments.objects.filter(Journal = Jrn)
        hist = Fin_Manual_Journal_History.objects.filter(Journal = Jrn).last()
        JrnAcc = Fin_Manual_Journal_Accounts.objects.filter(Journal = Jrn)
        try:
            created = Fin_Manual_Journal_History.objects.get(Journal = Jrn, action = 'Created')
        except:
            created = None

        return render(request,'company/Fin_View_Journal.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'journal':Jrn,'jrnAccounts':JrnAcc, 'history':hist, 'comments':cmt, 'created':created})
    else:
       return redirect('/')

def Fin_editJournal(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        jrn = Fin_Manual_Journal.objects.get(id = id)
        jrnAcc = Fin_Manual_Journal_Accounts.objects.filter(Journal = jrn)
        acc = Fin_Chart_Of_Account.objects.filter(Company=cmp).order_by('account_name')
        vnd = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        emp = Employee.objects.filter(company = cmp, employee_status = 'Active')

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'journal':jrn, 'jrnAccounts':jrnAcc, 'customers':cust, 'vendors':vnd, 'employees':emp, 'accounts':acc
        }
        return render(request,'company/Fin_Edit_Journal.html',context)
    else:
       return redirect('/')

def Fin_updateJournal(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        jrn = Fin_Manual_Journal.objects.get(id = id)
        if request.method == 'POST':
            JRNNo = request.POST['journal_no']

            PatternStr = []
            for word in JRNNo:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkJournalNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Journal No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if jrn.journal_no != JRNNo and Fin_Manual_Journal.objects.filter(Company = com, journal_no__iexact = JRNNo).exists():
                res = f'<script>alert("Journal Number `{JRNNo}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            debSubTot = request.POST['subtotal_debit']
            credSubTot = request.POST['subtotal_credit']

            debTot = request.POST['total_debit']
            credTot = request.POST['total_credit']

            jrn.journal_no = JRNNo
            jrn.journal_date = request.POST['journal_date']
            jrn.notes = request.POST['notes']
            jrn.currency = request.POST['currency']
            jrn.subtotal_debit = 0.0 if debSubTot == "" else float(debSubTot)
            jrn.subtotal_credit = 0.0 if credSubTot == "" else float(credSubTot)
            jrn.total_debit = 0.0 if debTot == "" else float(debTot)
            jrn.total_credit = 0.0 if credTot == "" else float(credTot)
            jrn.balance_debit = 0.0 if request.POST['balance_debit'] == "" else float(request.POST['balance_debit'])
            jrn.balance_credit = 0.0 if request.POST['balance_credit'] == "" else float(request.POST['balance_credit'])

            if len(request.FILES) != 0:
                jrn.file=request.FILES.get('file')

            if debTot == credTot:
                jrn.save()

                # Save journal accounts.

                accId = request.POST.getlist("acc_id[]")
                accName = request.POST.getlist("account_name[]")
                desc  = request.POST.getlist("desc[]")
                contact = request.POST.getlist("contact[]")
                deb = request.POST.getlist("debits[]")
                cred = request.POST.getlist("credits[]")

                debit = [0.0 if x == '' else float(x) for x in deb]
                credit = [0.0 if x == '' else float(x) for x in cred]

                jrn_acc_ids = request.POST.getlist("id[]")
                JrnAcc_ids = [int(id) for id in jrn_acc_ids]

                journal_accs = Fin_Manual_Journal_Accounts.objects.filter(Journal = jrn)
                object_ids = [obj.id for obj in journal_accs]

                ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in JrnAcc_ids]

                Fin_Manual_Journal_Accounts.objects.filter(id__in=ids_to_delete).delete()
                
                count = Fin_Manual_Journal_Accounts.objects.filter(Journal = jrn).count()

                if len(accId)==len(accName)==len(desc)==len(contact)==len(debit)==len(credit)==len(JrnAcc_ids) and JrnAcc_ids and accId and accName and desc and contact and debit and credit:
                    mapped = zip(accId,accName,desc,contact,debit,credit,JrnAcc_ids)
                    mapped = list(mapped)
                    for ele in mapped:
                        if int(len(accId))>int(count):
                            if ele[6] == 0:
                                acc = None if not ele[0].isdigit() else Fin_Chart_Of_Account.objects.get(id = int(ele[0]))
                                Fin_Manual_Journal_Accounts.objects.create(Journal = jrn, Account = acc, description = ele[2], contact = ele[3], debit = float(ele[4]), credit = float(ele[5]), Company = com, LoginDetails = com.Login_Id)
                            else:
                                acc = None if not ele[0].isdigit() else Fin_Chart_Of_Account.objects.get(id = int(ele[0]))
                                Fin_Manual_Journal_Accounts.objects.filter( id = int(ele[6])).update(Journal = jrn, Account = acc, description = ele[2], contact = ele[3], debit = float(ele[4]), credit = float(ele[5]))
                        else:
                            acc = None if not ele[0].isdigit() else Fin_Chart_Of_Account.objects.get(id = int(ele[0]))
                            Fin_Manual_Journal_Accounts.objects.filter( id = int(ele[6])).update(Journal = jrn, Account = acc, description = ele[2], contact = ele[3], debit = float(ele[4]), credit = float(ele[5]))
                
                # Save transaction
                        
                Fin_Manual_Journal_History.objects.create(
                    Company = com,
                    LoginDetails = data,
                    Journal = jrn,
                    action = 'Edited'
                )

                return redirect(Fin_viewJournal, id)
            else:
                res = f'<script>alert("Please ensure that the debit and credit are equal.!");window.history.back();</script>'
                return HttpResponse(res)
        else:
            return redirect(Fin_editJournal, id)
    else:
       return redirect('/')

def Fin_convertJournal(request,id):
    if 's_id' in request.session:

        jrn = Fin_Manual_Journal.objects.get(id = id)
        jrn.status = 'Saved'
        jrn.save()
        return redirect(Fin_viewJournal, id)

def Fin_journalHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        jrn = Fin_Manual_Journal.objects.get(id = id)
        his = Fin_Manual_Journal_History.objects.filter(Journal = jrn)

        return render(request,'company/Fin_Journal_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'journal':jrn})
    else:
       return redirect('/')

def Fin_deleteJournal(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        jrn = Fin_Manual_Journal.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        Fin_Manual_Journal_Accounts.objects.filter(Journal = jrn).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_Manual_Journal_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Manual_Journal_Reference.objects.get(Company = com)
            if int(jrn.reference_no) > int(deleted.reference_no):
                deleted.reference_no = jrn.reference_no
                deleted.save()
        else:
            Fin_Manual_Journal_Reference.objects.create(Company = com, reference_no = jrn.reference_no)
        
        jrn.delete()
        return redirect(Fin_manualJournals)

def Fin_addJournalComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        jrn = Fin_Manual_Journal.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Manual_Journal_Comments.objects.create(Company = com, Journal = jrn, comments = cmt)
            return redirect(Fin_viewJournal, id)
        return redirect(Fin_viewJournal, id)
    return redirect('/')

def Fin_deleteJournalComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Manual_Journal_Comments.objects.get(id = id)
        jrnId = cmt.Journal.id
        cmt.delete()
        return redirect(Fin_viewJournal, jrnId)

def Fin_attachJournalFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        jrn = Fin_Manual_Journal.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            jrn.file = request.FILES.get('file')
            jrn.save()

        return redirect(Fin_viewJournal, id)
    else:
        return redirect('/')

def Fin_journalPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        jrn = Fin_Manual_Journal.objects.get(id = id)
        accs = Fin_Manual_Journal_Accounts.objects.filter(Journal = jrn)
    
        context = {'journal':jrn, 'jrnAccounts':accs,'cmp':com}
        
        template_path = 'company/Fin_Journal_Pdf.html'
        fname = 'Manual_Journal_' + jrn.journal_no

        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareJournalToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        jrn = Fin_Manual_Journal.objects.get(id = id)
        accs = Fin_Manual_Journal_Accounts.objects.filter(Journal = jrn)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'journal':jrn, 'jrnAccounts':accs,'cmp':com}
                template_path = 'company/Fin_Journal_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Manual_Journal_{jrn.journal_no}'
                subject = f"Manual_Journal_{jrn.journal_no}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Manual Journal for - #-{jrn.journal_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Journal details has been shared via email successfully..!')
                return redirect(Fin_viewJournal,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewJournal, id)
            
#End

# < ------------- Shemeem -------- > Recurring Invoice < ------------------------------- >

def Fin_recurringInvoice(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        rec_inv = Fin_Recurring_Invoice.objects.filter(Company = cmp)
        return render(request,'company/Fin_Recurring_Invoice.html',{'allmodules':allmodules,'com':com,'data':data,'rec_invoices':rec_inv})
    else:
       return redirect('/')
    
def Fin_addRecurringInvoice(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        priceList = Fin_Price_List.objects.filter(Company = cmp, type = 'Sales', status = 'Active')
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        repeat = Fin_CompanyRepeatEvery.objects.filter(company = cmp)

        # Fetching last rec_invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted rec_invoice
        latest_inv = Fin_Recurring_Invoice.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Fin_Recurring_Invoice_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Recurring_Invoice_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = Fin_Recurring_Invoice.objects.filter(Company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)
        else:
            nxtInv = 'RI01'

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'ref_no':new_number,'banks':bnk,'invNo':nxtInv,'units':units, 'accounts':acc, 'priceListItems':priceList, 'repeat':repeat,
        }
        return render(request,'company/Fin_Add_Recurring_Invoice.html',context)
    else:
       return redirect('/')

def Fin_checkRecurringInvoiceNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        RecInvNo = request.GET['RecInvNum']

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = Fin_Recurring_Invoice.objects.filter(Company = com).last()
        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)
        # else:
        #     nxtInv = 'RI01'

        PatternStr = []
        for word in RecInvNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkRecInvNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. Pattern already Exists.!'})
        elif Fin_Recurring_Invoice.objects.filter(Company = com, rec_invoice_no__iexact = RecInvNo).exists():
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. already Exists.!'})
        elif nxtInv != "" and RecInvNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Rec. Invoice No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkRecInvNumberPattern(pattern):
    models = [Fin_Invoice, Fin_Sales_Order, Fin_Estimate, Fin_Purchase_Bill, Fin_Manual_Journal]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False

def Fin_createRecurringInvoice(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']
            if Fin_Recurring_Invoice.objects.filter(Company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Rec. Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = Fin_Recurring_Invoice(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                profile_name = request.POST['profile_name'],
                entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                reference_no = request.POST['reference_number'],
                rec_invoice_no = invNum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                start_date = request.POST['start_date'],
                end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id']),
                repeat_every = Fin_CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.file=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Save" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Recurring_Invoice_Items.objects.create(RecInvoice = inv, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    itm.current_stock -= int(ele[4])
                    itm.save()
            
            # Save transaction
                    
            Fin_Recurring_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                RecInvoice = inv,
                action = 'Created'
            )

            return redirect(Fin_recurringInvoice)
        else:
            return redirect(Fin_addRecurringInvoice)
    else:
       return redirect('/')

def Fin_viewRecurringInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        recInv = Fin_Recurring_Invoice.objects.get(id = id)
        cmt = Fin_Recurring_Invoice_Comments.objects.filter(RecInvoice = recInv)
        hist = Fin_Recurring_Invoice_History.objects.filter(RecInvoice = recInv).last()
        invItems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice = recInv)
        created = Fin_Recurring_Invoice_History.objects.get(RecInvoice = recInv, action = 'Created')

        context = {
            'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'recInvoice':recInv,'recInvItems':invItems, 'history':hist, 'comments':cmt, 'created':created
        }

        return render(request,'company/Fin_View_RecInvoice.html', context)
    else:
       return redirect('/')

def Fin_convertRecurringInvoice(request,id):
    if 's_id' in request.session:

        rec_inv = Fin_Recurring_Invoice.objects.get(id = id)
        rec_inv.status = 'Saved'
        rec_inv.save()
        return redirect(Fin_viewRecurringInvoice, id)

def Fin_addRecurringInvoiceComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        rec_inv = Fin_Recurring_Invoice.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Recurring_Invoice_Comments.objects.create(Company = com, RecInvoice = rec_inv, comments = cmt)
            return redirect(Fin_viewRecurringInvoice, id)
        return redirect(Fin_viewRecurringInvoice, id)
    return redirect('/')

def Fin_deleteRecurringInvoiceComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Recurring_Invoice_Comments.objects.get(id = id)
        recInvId = cmt.RecInvoice.id
        cmt.delete()
        return redirect(Fin_viewRecurringInvoice, recInvId)
    
def Fin_recurringInvoiceHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        rec_inv = Fin_Recurring_Invoice.objects.get(id = id)
        his = Fin_Recurring_Invoice_History.objects.filter(RecInvoice = rec_inv)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_RecInvoice_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'recInvoice':rec_inv})
    else:
       return redirect('/')
    
def Fin_deleteRecurringInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        recInv = Fin_Recurring_Invoice.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        for i in Fin_Recurring_Invoice_Items.objects.filter(RecInvoice = recInv):
            item = Fin_Items.objects.get(id = i.Item.id)
            item.current_stock += i.quantity
            item.save()
        
        Fin_Recurring_Invoice_Items.objects.filter(RecInvoice = recInv).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_Recurring_Invoice_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Recurring_Invoice_Reference.objects.get(Company = com)
            if int(recInv.reference_no) > int(deleted.reference_no):
                deleted.reference_no = recInv.reference_no
                deleted.save()
        else:
            Fin_Recurring_Invoice_Reference.objects.create(Company = com, LoginDetails = com.Login_Id, reference_no = recInv.reference_no)
        
        recInv.delete()
        return redirect(Fin_recurringInvoice)

def Fin_newRepeatEveryType(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        dur = int(request.POST['duration'])
        type = request.POST['type']

        d = 30 if type == 'Month' else 360
        dys = dur * d
        print(dur,d,dys)
        rep_every = str(dur)+" "+type

        if not Fin_CompanyRepeatEvery.objects.filter(company = com, repeat_every__iexact = rep_every).exists():
            Fin_CompanyRepeatEvery.objects.create(company = com, repeat_every = rep_every, repeat_type = type, duration = dur, days = dys)
            
            list= []
            rep = Fin_CompanyRepeatEvery.objects.filter(company = com)

            for r in rep:
                repDict = {
                    'repeat_every': r.repeat_every,
                    'id': r.id
                }
                list.append(repDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{rep_every} already exists, try another.!'})

    else:
        return redirect('/')

def Fin_recurringInvoicePdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        inv = Fin_Recurring_Invoice.objects.get(id = id)
        itms = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice = inv)
    
        context = {'recInvoice':inv, 'recInvItems':itms,'cmp':com}
        
        template_path = 'company/Fin_RecInvoice_Pdf.html'
        fname = 'Recurring_Invoice_'+inv.rec_invoice_no
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareRecurringInvoiceToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        inv = Fin_Recurring_Invoice.objects.get(id = id)
        itms = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice = inv)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'recInvoice':inv, 'recInvItems':itms,'cmp':com}
                template_path = 'company/Fin_RecInvoice_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Recurring Invoice_{inv.rec_invoice_no}'
                subject = f"Recurring_Invoice_{inv.rec_invoice_no}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Recurring Invoice for - REC. INVOICE-{inv.rec_invoice_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Rec. Invoice details has been shared via email successfully..!')
                return redirect(Fin_viewRecurringInvoice,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewRecurringInvoice, id)

def Fin_editRecurringInvoice(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        rec_inv = Fin_Recurring_Invoice.objects.get(id = id)
        recInvItms = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice = rec_inv)

        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        priceList = Fin_Price_List.objects.filter(Company = cmp, type = 'Sales', status = 'Active')
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        repeat = Fin_CompanyRepeatEvery.objects.filter(company = cmp)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'recInvoice':rec_inv, 'recInvItems':recInvItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc, 'priceListItems':priceList, 'repeat':repeat,
        }
        return render(request,'company/Fin_Edit_RecInvoice.html',context)
    else:
       return redirect('/')

def Fin_updateRecurringInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        rec_inv = Fin_Recurring_Invoice.objects.get(id = id)
        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']
            if rec_inv.rec_invoice_no != invNum and Fin_Recurring_Invoice.objects.filter(Company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Recurring Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            rec_inv.Customer = Fin_Customers.objects.get(id = request.POST['customerId'])
            rec_inv.customer_email = request.POST['customerEmail']
            rec_inv.billing_address = request.POST['bill_address']
            rec_inv.gst_type = request.POST['gst_type']
            rec_inv.gstin = request.POST['gstin']
            rec_inv.place_of_supply = request.POST['place_of_supply']
            rec_inv.profile_name = request.POST['profile_name']
            rec_inv.entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type']
            rec_inv.rec_invoice_no = invNum
            rec_inv.payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term'])
            rec_inv.start_date = request.POST['start_date']
            rec_inv.end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date()
            rec_inv.salesOrder_no = request.POST['order_number']
            rec_inv.price_list_applied = True if 'priceList' in request.POST else False
            rec_inv.price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id'])
            rec_inv.repeat_every = Fin_CompanyRepeatEvery.objects.get(id = request.POST['repeat_every'])
            rec_inv.payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            rec_inv.cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            rec_inv.upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            rec_inv.bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            rec_inv.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            rec_inv.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            rec_inv.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            rec_inv.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            rec_inv.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            rec_inv.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            rec_inv.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            rec_inv.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            rec_inv.paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            rec_inv.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])
            rec_inv.note = request.POST['note']

            if len(request.FILES) != 0:
                rec_inv.file=request.FILES.get('file')

            rec_inv.save()

            # Save invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            inv_item_ids = request.POST.getlist("id[]")
            invItem_ids = [int(id) for id in inv_item_ids]

            inv_items = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice = rec_inv)
            object_ids = [obj.id for obj in inv_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in invItem_ids]
            for itmId in ids_to_delete:
                invItem = Fin_Recurring_Invoice_Items.objects.get(id = itmId)
                item = Fin_Items.objects.get(id = invItem.Item.id)
                item.current_stock += invItem.quantity
                item.save()

            Fin_Recurring_Invoice_Items.objects.filter(id__in=ids_to_delete).delete()
            
            count = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice = rec_inv).count()

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(invItem_ids) and invItem_ids and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total,invItem_ids)
                mapped = list(mapped)
                for ele in mapped:
                    if ele[2] == '' or ele[2] == 'None'  :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]
                    if int(len(itemId))>int(count):
                        if ele[9] == 0:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Recurring_Invoice_Items.objects.create(RecInvoice = rec_inv, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                            itm.current_stock -= int(ele[3])
                            itm.save()
                        else:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            inItm = Fin_Recurring_Invoice_Items.objects.get(id = int(ele[9]))
                            crQty = int(inItm.quantity)
                            
                            Fin_Recurring_Invoice_Items.objects.filter( id = int(ele[9])).update(RecInvoice = rec_inv, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))

                            if crQty < int(ele[4]):
                                itm.current_stock -=  abs(crQty - int(ele[4]))
                            elif crQty > int(ele[4]):
                                itm.current_stock += abs(crQty - int(ele[4]))
                            itm.save()
                    else:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        inItm = Fin_Recurring_Invoice_Items.objects.get(id = int(ele[9]))
                        crQty = int(inItm.quantity)

                        Fin_Recurring_Invoice_Items.objects.filter( id = int(ele[9])).update(RecInvoice = rec_inv, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))

                        if crQty < int(ele[4]):
                            itm.current_stock -=  abs(crQty - int(ele[4]))
                        elif crQty > int(ele[4]):
                            itm.current_stock += abs(crQty - int(ele[4]))
                        itm.save()
            
            # Save transaction
                    
            Fin_Recurring_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                RecInvoice = rec_inv,
                action = 'Edited'
            )

            return redirect(Fin_viewRecurringInvoice, id)
        else:
            return redirect(Fin_editRecurringInvoice, id)
    else:
       return redirect('/')

# End

def Fin_Attendance(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        log = Fin_Login_Details.objects.get(id = s_id)
        
        if log.User_Type == 'Staff':
            s_id = request.session['s_id']
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            event_counts = {}
            formatted_event_counts = {}
            staff =Fin_Staff_Details.objects.get(Login_Id =log)
            all_events = Fin_Attendances.objects.filter(company=staff.company_id)
            for event in all_events:
                month_year = event.start_date.strftime('%Y-%m')  # Format: 'YYYY-MM'
                year, month = map(int, month_year.split('-'))

                event_duration = (event.end_date - event.start_date).days + 1 if event.end_date else 1

                if month_year not in event_counts:
                    event_counts[month_year] = event_duration
                else:
                    event_counts[month_year] += event_duration
            for key, value in event_counts.items():
                year, month = map(int, key.split('-'))
                total_days = monthrange(year, month)[1]
                month_name = calendar.month_name[int(month)]
                formatted_month_year = f"{month_name}-{year}"
                formatted_event_counts[formatted_month_year] = {'count': value, 'total_days': total_days, 'month': month_name,
                                                         'year': year}
                
            attendance_data = Fin_Attendances.objects.filter(company=staff.company_id)
            employee_attendance = {}

            for entry in attendance_data:
                year = entry.start_date.year
                month = entry.start_date.month

                key = (entry.employee.id, year, month)
               
                if key not in employee_attendance:
                    formatted_month_year = f"{calendar.month_name[int(month)]}-{year}"
                    employee_attendance[key] = {
                    'formatted_month_year': formatted_month_year,
                    'e_id':entry.employee.id,
                    'employee': entry.employee.first_name + ' ' + entry.employee.last_name,
                    'year': year,
                    'month': calendar.month_name[int(month)],
                    'working_days': 0,
                    'holidays': 0,
                    'absent_days': 0,
                }

                if entry.status == 'Leave':
                    absent_days = (entry.end_date - entry.start_date).days + 1 if entry.end_date else 1
                    employee_attendance[key]['absent_days'] += absent_days

                    _, last_day = monthrange(year, month)

                holidays_data = Holiday.objects.filter(
                    company=staff.company_id,
                    start_date__year=year,
                    start_date__month=month
                )
                total_holidays = 0
                for holiday in holidays_data:
                    total_holidays += (holiday.end_date - holiday.start_date).days + 1

                employee_attendance[key]['holidays'] = total_holidays
                employee_attendance[key]['working_days'] = last_day - total_holidays - employee_attendance[key]['absent_days']
            

        # if log.User_Type == 'Company':
        else:
            s_id = request.session['s_id']
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            event_counts = {}
            formatted_event_counts = {}
            com = Fin_Company_Details.objects.get(Login_Id = log)
            all_events = Fin_Attendances.objects.filter(company=com.id)
            for event in all_events:
                month_year = event.start_date.strftime('%Y-%m')  # Format: 'YYYY-MM'
                year, month = map(int, month_year.split('-'))

                event_duration = (event.end_date - event.start_date).days + 1 if event.end_date else 1

                if month_year not in event_counts:
                    event_counts[month_year] = event_duration
                else:
                    event_counts[month_year] += event_duration
            for key, value in event_counts.items():
                year, month = map(int, key.split('-'))
                total_days = monthrange(year, month)[1]
                month_name = calendar.month_name[int(month)]
                formatted_month_year = f"{month_name}-{year}"
                formatted_event_counts[formatted_month_year] = {'count': value, 'total_days': total_days, 'month': month_name,
                                                         'year': year}
                
            attendance_data = Fin_Attendances.objects.filter(company=com.id)
            employee_attendance = {}

            for entry in attendance_data:
                year = entry.start_date.year
                month = entry.start_date.month

                key = (entry.employee.id, year, month)
               
                if key not in employee_attendance:
                    formatted_month_year = f"{calendar.month_name[int(month)]}-{year}"
                    employee_attendance[key] = {
                    'formatted_month_year': formatted_month_year,
                    'e_id':entry.employee.id,
                    'employee': entry.employee.first_name + ' ' + entry.employee.last_name,
                    'year': year,
                    'month': calendar.month_name[int(month)],
                    'working_days': 0,
                    'holidays': 0,
                    'absent_days': 0,
                }
            

                if entry.status == 'Leave':
                    absent_days = (entry.end_date - entry.start_date).days + 1 if entry.end_date else 1
                    employee_attendance[key]['absent_days'] += absent_days

                    _, last_day = monthrange(year, month)

                holidays_data = Holiday.objects.filter(
                    company=com.id,
                    start_date__year=year,
                    start_date__month=month
                )
                total_holidays = 0
                for holiday in holidays_data:
                    total_holidays += (holiday.end_date - holiday.start_date).days + 1

                employee_attendance[key]['holidays'] = total_holidays
                employee_attendance[key]['working_days'] = last_day - total_holidays - employee_attendance[key]['absent_days']
            

        context = {
            "events": all_events,
            "event_counts_json": formatted_event_counts,
            'employee_attendance': list(employee_attendance.values()),
            'allmodules':allmodules,
            'com':com,
            'data':log,
        }   
        return render(request,'company/Fin_Attendance.html',context)

def Fin_Add_Attendance(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        log = Fin_Login_Details.objects.get(id = s_id)
        data = log
        if log.User_Type == 'Staff':
            staff =Fin_Staff_Details.objects.get(Login_Id =log)
            com = staff
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            emp = Employee.objects.filter(company = staff.company_id,employee_status = 'active')
            bgroup = Employee_Blood_Group.objects.filter(company = staff.company_id)
        if log.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = log)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            emp = Employee.objects.filter(company = com.id,employee_status = 'active')
            bgroup = Employee_Blood_Group.objects.filter(company = com.id)

        context ={
            'emp':emp,'bloodgroup':bgroup,'allmodules':allmodules,'com':com,'data':data
        }
        return render(request,'company/Fin_add_attendance.html',context)
    return redirect('Fin_Attendance')


def Fin_Holiday_check_for_attendance(request):
    date = request.POST.get('sdate')
    empid = request.POST.get('empid')
    if 's_id' in request.session:
        s_id = request.session['s_id']
        log = Fin_Login_Details.objects.get(id = s_id)
        if log.User_Type == 'Staff':
            staff =Fin_Staff_Details.objects.get(Login_Id =log)
            exists = Holiday.objects.filter(company = staff.company_id,start_date__lte=date, end_date__gte=date).exists()
            atndance = Fin_Attendances.objects.filter(employee = empid, company = staff.company_id,start_date__lte=date,end_date__gte=date).exists()
        if log.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = log)
            exists = Holiday.objects.filter(company = com.id,start_date__lte=date, end_date__gte=date).exists()
            atndance = Fin_Attendances.objects.filter(employee = empid, company = com.id,start_date__lte=date,end_date__gte=date).exists()

        return JsonResponse({'exists': exists,'atndance':atndance})




def Fin_attendance_save(request):
    if 's_id' in request.session:
        if request.method == 'POST':
            flag = 0
            flags = 0
            s_id = request.session['s_id']
            emp = request.POST['emp']
            empid = Employee.objects.get(id = emp)
            log = Fin_Login_Details.objects.get(id = s_id)
            if log.User_Type == 'Staff':
                staff =Fin_Staff_Details.objects.get(Login_Id =log)
                att = Fin_Attendances.objects.filter(company = staff.company_id,employee =empid)
                holi = Holiday.objects.filter(company = staff.company_id)
                for i in holi:
                    if i.start_date <= datetime.strptime(request.POST['sdate'], "%Y-%m-%d").date() <= i.end_date or i.start_date <= datetime.strptime(request.POST['edate'], "%Y-%m-%d").date() <= i.end_date:
                        flags = 1
                        break
                for i in att:
                    if i.start_date <= datetime.strptime(request.POST['sdate'], "%Y-%m-%d").date() <= i.end_date or i.start_date <= datetime.strptime(request.POST['edate'], "%Y-%m-%d").date() <= i.end_date:
                        flag = 1
                        break    
                if flag == 0:
                    if flags == 0:
                        attendance = Fin_Attendances(employee = empid,start_date= request.POST['sdate'],end_date = request.POST['edate'],status = request.POST['status'],reason = request.POST['reason'],company = staff.company_id,login_id = log)
                        attendance.save()
                        att_history = Fin_Attendance_history(company = staff.company_id,login_id = log,attendance = attendance,action = "Created")
                        att_history.save()
                        return redirect('Fin_Attendance')
                    else:
                        messages.error(request,"It's a Holiday")
                        return redirect('Fin_Add_Attendance')
                else:
                    messages.error(request,"leave already marked")
                    return redirect('Fin_Add_Attendance')
            if log.User_Type == 'Company':
                com = Fin_Company_Details.objects.get(Login_Id = log)
                att = Fin_Attendances.objects.filter(company = com.id,employee =empid)
                holi = Holiday.objects.filter(company = com.id)
                for i in holi:
                    if i.start_date <= datetime.strptime(request.POST['sdate'], "%Y-%m-%d").date() <= i.end_date or i.start_date <= datetime.strptime(request.POST['edate'], "%Y-%m-%d").date() <= i.end_date:
                        flags = 1
                        break
                for i in att:
                    if i.start_date <= datetime.strptime(request.POST['sdate'], "%Y-%m-%d").date() <= i.end_date or i.start_date <= datetime.strptime(request.POST['edate'], "%Y-%m-%d").date() <= i.end_date:
                        flag = 1
                        break
                if flag == 0:
                    if flags == 0:
                        attendance = Fin_Attendances(start_date= request.POST['sdate'],end_date = request.POST['edate'],status = request.POST['status'],reason = request.POST['reason'],company = com,login_id = log,employee = empid)
                        attendance.save()
                        att_history = Fin_Attendance_history(company = com,login_id = log,attendance = attendance,action = "Created")
                        att_history.save()
                        return redirect('Fin_Attendance')
                    else:
                        messages.error(request,"It's a Holiday")
                        return redirect('Fin_Add_Attendance')
                else:
                    messages.error(request,"leave already marked")
                    return redirect('Fin_Add_Attendance')
        return redirect('Fin_Add_Attendance')
    return redirect('Fin_Add_Attendance')




def fin_employee_save_atndnce(request):

    if request.method == 'POST':

        title = request.POST['Title']
        firstname = request.POST['First_Name'].capitalize()
        lastname = request.POST['Last_Name'].capitalize()
        image = request.FILES.get('Image', None)
        if image:
            image = request.FILES['Image']
        else:
            image = ''
        alias = request.POST['Alias']
        joiningdate = request.POST['Joining_Date']
        salarydate = request.POST['Salary_Date']
        salary_type = request.POST['Salary_Type']

        amountperhour = request.POST['perhour']
        if amountperhour == '' or amountperhour == '0':
            amountperhour = 0
        else:
            amountperhour = request.POST['perhour']

        workinghour = request.POST['workhour']
        if workinghour == '' or workinghour == '0':
            workinghour = 0
        else:
            workinghour = request.POST['workhour']

        salaryamount = request.POST['Salary_Amount']
        if request.POST['Salary_Amount'] == '':
            salaryamount = None
        else:
            salaryamount = request.POST['Salary_Amount']

        employeenumber = request.POST['Employee_Number']
        designation = request.POST['Designation']
        location = request.POST['Location']
        gender = request.POST['Gender']
        dob = request.POST['DOB']
        blood = request.POST['Blood']
        contact = request.POST['Contact_Number']
        emergencycontact = request.POST['Emergency_Contact']
        email = request.POST['Email']
        parent = request.POST['Parent'].capitalize()
        spouse = request.POST['Spouse'].capitalize()
        file = request.FILES.get('File', None)
        if file:
            file = request.FILES['File']
        else:
            file=''
        street = request.POST['street']
        city = request.POST['city']
        state = request.POST['state']
        pincode = request.POST['pincode']
        country = request.POST['country']
        tempStreet = request.POST['tempStreet']
        tempCity = request.POST['tempCity']
        tempState = request.POST['tempState']
        tempPincode = request.POST['tempPincode']
        tempCountry = request.POST['tempCountry']
        
        bankdetails = request.POST['Bank_Details']
        if bankdetails == "Yes":
            accoutnumber = request.POST['Account_Number']
            ifsc = request.POST['IFSC']
            bankname = request.POST['BankName']
            branchname = request.POST['BranchName']
            transactiontype = request.POST['Transaction_Type']
        else:
            accoutnumber = ''
            ifsc = ''
            bankname = ''
            branchname = ''
            transactiontype = ''

        if request.POST['tds_applicable'] == 'Yes':
            tdsapplicable = request.POST['tds_applicable']
            tdstype = request.POST['TDS_Type']
            
            if tdstype == 'Amount':
                tdsvalue = request.POST['TDS_Amount']
            elif tdstype == 'Percentage':
                tdsvalue = request.POST['TDS_Percentage']
            else:
                tdsvalue = 0
        elif request.POST['tds_applicable'] == 'No':
            tdsvalue = 0
            tdstype = ''
            tdsapplicable = request.POST['tds_applicable']
        else:
            tdsvalue = 0
            tdstype = ''
            tdsapplicable = ''

        incometax = request.POST['Income_Tax']
        aadhar = request.POST['Aadhar']
        uan = request.POST['UAN']
        pf = request.POST['PF']
        pan = request.POST['PAN']
        pr = request.POST['PR']

        if dob == '':
            age = 2
        else:
            dob2 = date.fromisoformat(dob)
            today = date.today()
            age = int(today.year - dob2.year - ((today.month, today.day) < (dob2.month, dob2.day)))
        
        sid = request.session['s_id']
        employee = Fin_Login_Details.objects.get(id=sid)
        
        if employee.User_Type == 'Company':
            companykey =  Fin_Company_Details.objects.get(Login_Id_id=sid)
        elif employee.User_Type == 'Staff':
            staffkey = Fin_Staff_Details.objects.get(Login_Id=sid)
            companykey = Fin_Company_Details.objects.get(id=staffkey.company_id_id)
        else:
            distributorkey = Fin_Distributors_Details.objects.get(login_Id=sid)
            companykey = Fin_Company_Details.objects.get(id=distributorkey.company_id_id)

        
        if Employee.objects.filter(employee_mail=email,mobile = contact,employee_number=employeenumber,company_id = companykey.id).exists():
            messages.error(request,'user exist')
            return redirect('Fin_Add_Attendance')
        
        elif Employee.objects.filter(mobile = contact,company_id = companykey.id).exists():
            messages.error(request,'phone number exist')
            return redirect('Fin_Add_Attendance')
        
        elif Employee.objects.filter(emergency_contact = emergencycontact,company_id = companykey.id).exists():
            messages.error(request,'emergency phone number exist')
            return redirect('Fin_Add_Attendance')
        
        elif Employee.objects.filter(employee_mail=email,company_id = companykey.id).exists():
            messages.error(request,'email exist')
            return redirect('Fin_Add_Attendance')
        
        elif Employee.objects.filter(employee_number=employeenumber,company_id = companykey.id).exists():
            messages.error(request,'employee id exist')
            return redirect('Fin_Add_Attendance')
        
        elif incometax != '' and Employee.objects.filter(income_tax_number = incometax,company_id = companykey.id).exists():
            messages.error(request,'Income Tax Number exist')
            return redirect('Fin_Add_Attendance')
        
        elif pf != '' and Employee.objects.filter(pf_account_number = pf,company_id = companykey.id).exists():
            messages.error(request,'PF account number exist')
            return redirect('Fin_Add_Attendance')
        
        elif aadhar != '' and Employee.objects.filter(aadhar_number = aadhar,company_id = companykey.id).exists():
            messages.error(request,'Aadhar number exist')
            return redirect('Fin_Add_Attendance')
        
        elif pan != '' and Employee.objects.filter(pan_number = pan,company_id = companykey.id).exists():
            messages.error(request,'PAN number exist')
            return redirect('Fin_Add_Attendance')
        
        elif uan != '' and Employee.objects.filter(universal_account_number = uan,company_id = companykey.id).exists():
            messages.error(request,'Universal account number exist')
            return redirect('Fin_Add_Attendance')
        
        elif pr != '' and Employee.objects.filter(pr_account_number = pr,company_id = companykey.id).exists():
            messages.error(request,'PR account number exist')
            return redirect('Fin_Add_Attendance')
        
        elif bankdetails.lower() == 'yes':
            if accoutnumber != '' and Employee.objects.filter(account_number=accoutnumber,company_id = companykey.id).exists():
                messages.error(request,'Bank account number already exist')
                return redirect('Fin_Add_Attendance')
            
            else:
                if employee.User_Type == 'Company':
                    

                    new = Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                            employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                            employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                            employee_status = 'Active' ,company_id = companykey.id,login_id=sid,salary_amount = salaryamount ,
                            amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                            age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                            emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                            ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                            tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                            income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                            pr_account_number = pr,upload_file = file,employee_salary_type =salary_type,salary_effective_from=salarydate,
                            city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                            temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                    new.save()

                    history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                    history.save()
            
                elif employee.User_Type == 'Staff':
                    

                    new =  Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                                employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                                employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                                employee_salary_type = salary_type,employee_status = 'Active' ,company_id = companykey.id,login_id=sid ,
                                amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                                age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                                emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                                ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                                tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                                income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                                pr_account_number = pr,upload_file = file,salary_amount = salaryamount,salary_effective_from=salarydate,
                                city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                                temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                    
                    new.save()

                    history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                    history.save()
        
        else:
            if employee.User_Type == 'Company':
                

                new = Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                        employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                        employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                        employee_status = 'Active' ,company_id = companykey.id,login_id=sid,salary_amount = salaryamount ,
                        amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                        age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                        emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                        ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                        tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                        income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                        pr_account_number = pr,upload_file = file,employee_salary_type =salary_type,salary_effective_from=salarydate,
                        city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                        temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                new.save()

                history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                history.save()
        
            elif employee.User_Type == 'Staff':
                

                new =  Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                            employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                            employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                            employee_salary_type = salary_type,employee_status = 'Active' ,company_id = companykey.id,login_id=sid ,
                            amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                            age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                            emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                            ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                            tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                            income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                            pr_account_number = pr,upload_file = file,salary_amount = salaryamount,salary_effective_from=salarydate,
                            city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                            temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                
                new.save()

                history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                history.save()

        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status='New')
            employee = Employee.objects.filter(company_id=com.id)
            
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status='New')
            employee = Employee.objects.filter(company_id=com.company_id_id)
        return redirect('Fin_Add_Attendance')

def Fin_Attendanceview(request,mn,yr,id):
    if 's_id' in request.session:
        month_name = mn
        months = list(calendar.month_name).index(month_name) 
        num_days = calendar.monthrange(int(yr), months)[1]
        month = months - 1
        events_count = 0
        attendance_count = 0
        year = yr
    
        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            events = Holiday.objects.filter(start_date__month=months,start_date__year=year,company_id=com.id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status='New')
            attendance = Fin_Attendances.objects.filter(employee = id,company = com.id,start_date__month=months,start_date__year =year)
            for i in attendance:
                attendance_counts =((i.end_date - i.start_date).days)+1
                attendance_count += attendance_counts
            for i in events:
                events_count += ((i.end_date - i.start_date).days)+1
            working_days = num_days - (events_count + attendance_count)
            emp =Employee.objects.get(id=id)
        
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id, status='New')
            events = Holiday.objects.filter(start_date__month=months,start_date__year=year,company_id=com.company_id)
            attendance = Fin_Attendances.objects.filter(employee = id,company = com.company_id,start_date__month=months,start_date__year =year)
            for i in attendance:
                attendance_counts =((i.end_date - i.start_date).days)+1
                attendance_count += attendance_counts
            for i in events:
                events_count += ((i.end_date - i.start_date).days)+1
            working_days = num_days - (events_count + attendance_count)
            emp =Employee.objects.get(id=id)

        return render(request,'company/Fin_AttendanceView.html',{'events':events,'month':month,'year':year,'attendance':attendance,'emp':emp,'month_name':month_name,'allmodules':allmodules,'events_count':events_count,'attendance_count':attendance_count,'working_days':working_days})

def Fin_editAttendance(request,id,mn,yr,pk):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        log = Fin_Login_Details.objects.get(id = s_id)
        leave = Fin_Attendances.objects.get(id=id)
    
        if log.User_Type == 'Staff':
            staff =Fin_Staff_Details.objects.get(Login_Id =log)
            allmodules = Fin_Modules_List.objects.get(company_id = staff.company_id, status='New')
            emp = Employee.objects.filter(company = staff.company_id,employee_status = 'active')
            bgroup = Employee_Blood_Group.objects.filter(company = staff.company_id)
            
        if log.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = log)
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status='New')
            emp = Employee.objects.filter(company = com.id,employee_status = 'active')
            bgroup = Employee_Blood_Group.objects.filter(company = com.id)
            
        context ={
            'emp':emp,'bloodgroup':bgroup,'leave':leave,'allmodules':allmodules,'mn':mn,'yr':yr,'pk':pk
        }
        return render(request,'company/Fin_attendanceEdit.html',context)

def Fin_deleteAttendance(request,id,mn,yr,pk):
    month_name = mn
    year = yr
    leave = Fin_Attendances.objects.get(id = id)
    leave.delete()
    return redirect('Fin_Attendanceview',month_name,year,pk)

def Fin_editAttendanceVIEW(request,id,mn,yr,pk):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        log = Fin_Login_Details.objects.get(id = s_id)
        leave = Fin_Attendances.objects.get(id=id)
    
        if log.User_Type == 'Staff':
            staff =Fin_Staff_Details.objects.get(Login_Id =log)
            if request.method == 'POST':
                emps = request.POST['empS']
                empid = Employee.objects.get(id = emps)
                leave.employee = empid
                leave.start_date = request.POST['sdate']
                leave.end_date = request.POST['edate']
                leave.reason = request.POST['reason']
                leave.status = request.POST['status']
                leave.save()
                att_history = Fin_Attendance_history(company = staff.company_id,login_id = log,attendance = leave,action = "Edited")
                att_history.save()
                return redirect('Fin_Attendanceview',mn,yr,pk)
        if log.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = log)
            if request.method == 'POST':
                emps = request.POST['empS']
                empid = Employee.objects.get(id = emps)
                leave.employee = empid
                leave.start_date = request.POST['sdate']
                leave.end_date = request.POST['edate']
                leave.reason = request.POST['reason']
                leave.status = request.POST['status']
                leave.save()
                att_history = Fin_Attendance_history(company = com,login_id = log,attendance = leave,action = "Edited")
                att_history.save()
                return redirect('Fin_Attendanceview',mn,yr,pk)


def Fin_attendance_history(request,mn,yr,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        log = Fin_Login_Details.objects.get(id = s_id)
        if log.User_Type == 'Staff':
            staff =Fin_Staff_Details.objects.get(Login_Id =log)
            history = Fin_Attendance_history.objects.filter(company = staff.company_id,attendance = id)
            allmodules = Fin_Modules_List.objects.get(company_id = staff.company_id, status = 'New')
            att = Fin_Attendances.objects.get(id=id)
            emp = Employee.objects.get(id = att.employee.id)

        if log.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = log)
            history = Fin_Attendance_history.objects.filter(company = com.id,attendance = id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
            att = Fin_Attendances.objects.get(id=id)
            emp = Employee.objects.get(id = att.employee.id)

        return render(request,'company/Fin_Leave_History.html',{'history': history,'allmodules':allmodules,'att':att,'yr':yr,'mn':mn,'emp':emp})


def Fin_addcommentstoleave(request,id,mn,yr,pk):
    month_name = mn
    year = yr
    data = Fin_Attendances.objects.get(id=id)
    if 's_id' in request.session:
        if request.method == 'POST':
            s_id = request.session['s_id']
            log = Fin_Login_Details.objects.get(id = s_id)
            if log.User_Type == 'Staff':
                staff =Fin_Staff_Details.objects.get(Login_Id =log)
                comment = Fin_attendance_comment(company = staff.company_id, login_id = log, attendance = data, comment = request.POST['comment'])
                comment.save()
            if log.User_Type == 'Company':
                com = Fin_Company_Details.objects.get(Login_Id = log)
                comment = Fin_attendance_comment(company = com, login_id = log, attendance = data, comment = request.POST['comment'])
                comment.save()
            return redirect('Fin_Attendanceview',month_name,year,pk)
        return redirect('Fin_Attendanceview',month_name,year,pk)


def Fin_attendancecomments(request):
    hid = request.GET.get('hid')
    
    if 's_id' in request.session:
        s_id = request.session['s_id']
        log = Fin_Login_Details.objects.get(id = s_id)
        if log.User_Type == 'Staff':
            staff =Fin_Staff_Details.objects.get(Login_Id =log)
            exists = Fin_attendance_comment.objects.filter(company = staff.company_id,attendance = hid)
            data = [{'action': item.comment} for item in exists]
        if log.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = log)
            exists = Fin_attendance_comment.objects.filter(company = com.id,attendance = hid)
            data = [{'action': item.comment} for item in exists]
        return JsonResponse({'data': data})




def Fin_shareLeaveStatementToEmail(request,id,mn,yr):
    if 's_id' in request.session:
      
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']
            # print(emails_list)
            month_name = mn
            months = list(calendar.month_name).index(month_name) 

            year = yr
            s_id = request.session['s_id']
            log = Fin_Login_Details.objects.get(id = s_id)
            emp = Employee.objects.get(id =id)

            if log.User_Type == 'Staff':
                staff =Fin_Staff_Details.objects.get(Login_Id =log)
                att = Fin_Attendances.objects.filter(employee = id,company = staff.company_id,start_date__month=months,start_date__year =year)
                context = {'att': att, 'emp': emp ,'month_name':month_name, 'year':year}
            if log.User_Type == 'Company':
                com = Fin_Company_Details.objects.get(Login_Id = log)
                att = Fin_Attendances.objects.filter(employee = id,company = com.id,start_date__month=months,start_date__year =year)
                context = {'att': att, 'emp': emp,'month_name':month_name, 'year':year}
            template_path = 'company/FIn_LeaveTransaction.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
            pdf = result.getvalue()
            filename = f'Leave Statement - {emp.first_name} {emp.last_name}-{month_name},{year}.pdf'
            subject = f"Leave Statement - {emp.first_name} {emp.last_name}-{month_name},{year}"
            email = EmailMessage(subject, f"Hi,\nPlease find the attached Leave Statement - of-{emp.first_name} {emp.last_name}. \n{email_message}", from_email=settings.EMAIL_HOST_USER,to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            msg = messages.success(request, 'Bill has been shared via email successfully..!')
            return redirect('Fin_Attendanceview',month_name,year,id)
            
#Antony_______________________

def Fin_edit_bank_trans(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')
        # banknew=Fin_BankTransactions.objects.get(id=id)
        bank=Fin_BankTransactions.objects.get(id=id)
        try:
            banks = Fin_BankTransactions.objects.get(id=bank.bank_to_bank)
        except:
            banks = None
        all_banks = Fin_Banking.objects.filter(company = company)
        print(all_banks)
    context = {
            'login_det':login_det,
            'cmp1':com,
            'allmodules':allmodules,
            'bank':bank,
            'banks':banks,
            'all_banks':all_banks,
            
        }  
    return render(request,'company/banking/Fin_edit_bank_trans.html',context)

def Fin_edit_bank_to_cash(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        if request.method == 'POST':
            f_bank = request.POST.get('bank')
            amount = request.POST.get('amount')
            adj_date = request.POST.get('adjdate')
            desc = request.POST.get('desc')

            
            transaction = Fin_BankTransactions.objects.get(id=id)
            bank = Fin_Banking.objects.get(id=f_bank)
            bank.current_balance = bank.current_balance -(int(amount) - transaction.amount)
            bank.save()
            
            transaction.banking.bank_name = f_bank
            transaction.amount=amount
            transaction.description=desc
            transaction.adjustment_date=adj_date
            transaction.current_balance= bank.current_balance               
           
            transaction.save()
            transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transaction,
                action = 'Updated'
            )
            transaction_history.save()
            
        return redirect('Fin_view_bank',bank.id)


def Fin_edit_cash_to_bank(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        if request.method == 'POST':
            f_bank = request.POST.get('bank')
            amount = request.POST.get('amount')
            adj_date = request.POST.get('adjdate')
            desc = request.POST.get('desc')

            
            transaction = Fin_BankTransactions.objects.get(id=id)
            bank = Fin_Banking.objects.get(id=f_bank)
            bank.current_balance = bank.current_balance + (int(amount) - transaction.amount)
            bank.save()
            
            transaction.banking.bank_name = f_bank
            transaction.amount=amount
            transaction.description=desc
            transaction.adjustment_date=adj_date
            transaction.current_balance= bank.current_balance               
           
            transaction.save()
            transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transaction,
                action = 'Updated'
            )
            transaction_history.save()
            
        return redirect('Fin_view_bank',bank.id)
    

def Fin_edit_bank_adjust(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id
        transaction = Fin_BankTransactions.objects.get(id=id)
        if request.method == 'POST':
            f_bank = request.POST.get('bank')
            type = request.POST.get('typ')
            amount = request.POST.get('amount')
            adj_date = request.POST.get('adjdate')
            desc = request.POST.get('desc')

            
            bank = Fin_Banking.objects.get(id=f_bank)
            if type == 'Increase Balance':
                bank.current_balance = bank.current_balance + (int(amount) - transaction.amount)
                bank.save()
            else:
                bank.current_balance = bank.current_balance - (int(amount) - transaction.amount)
                bank.save()
                    
            transaction.banking.bank_name = f_bank
            transaction.amount=amount
            transaction.adjustment_type=type
            transaction.description=desc
            transaction.adjustment_date=adj_date
            transaction.current_balance= bank.current_balance               
           
            transaction.save()
            transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transaction,
                action = 'Updated'
            )
            transaction_history.save()
            
        return redirect('Fin_view_bank',bank.id)

def Fin_edit_bank_to_bank(request, transfer_id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id
    if request.method == 'POST':
        fbank_id = request.POST.get('fbank')
        tbank_id = request.POST.get('tbank')

        transfer = Fin_BankTransactions.objects.get(id=transfer_id)
        transfer_to = Fin_BankTransactions.objects.get(id=transfer.bank_to_bank)
        old_amt = transfer_to.amount
        old_bank = Fin_Banking.objects.get(id = transfer.banking.id) if transfer.transaction_type == 'To Bank Transfer' else Fin_Banking.objects.get(id = transfer_to.banking.id)
        fbank = Fin_Banking.objects.get(id=fbank_id)
        tbank = Fin_Banking.objects.get(id=tbank_id)

        if tbank_id != old_bank:
            old_bank.current_balance -= old_amt
            old_bank.save()

        amount = request.POST.get('amount')

        adj_date = request.POST.get('adjdate')
        desc = request.POST.get('desc')

        # Update the balances of the banking accounts
        current_balance = transfer.current_balance
        current_balance_trans_to = transfer_to.current_balance
        current_balance_fm = fbank.current_balance
        current_balance_to = tbank.current_balance


        if transfer.transaction_type == 'To Bank Transfer':
            if int(amount) > int(transfer.amount):
                fbank.current_balance -= (int(amount) - int(transfer.amount))
                tbank.current_balance += (int(amount) - int(transfer.amount))
                transfer.current_balance += (int(amount) - int(transfer.amount))
                transfer_to.current_balance -= (int(amount) - int(transfer.amount))

            elif int(amount) < int(transfer.amount):
                fbank.current_balance += (int(transfer.amount) - int(amount))
                tbank.current_balance -= (int(transfer.amount)  - int(amount))
                transfer.current_balance -= (int(transfer.amount)  - int(amount))
                transfer_to.current_balance += (int(transfer.amount)  - int(amount))

            else:
                fbank.current_balance = current_balance_fm
                tbank.current_balance = current_balance_to
                transfer.current_balance = current_balance
                transfer_to.current_balance = current_balance_trans_to

        elif transfer.transaction_type == 'From Bank Transfer':
            if int(amount) > int(transfer.amount):
                fbank.current_balance -= (int(amount) - int(transfer.amount))
                tbank.current_balance += (int(amount) - int(transfer.amount))
                transfer.current_balance -= (int(amount) - int(transfer.amount))
                transfer_to.current_balance += (int(amount) - int(transfer.amount))

            elif int(amount) < int(transfer.amount):
                fbank.current_balance += (int(transfer.amount) - int(amount))
                tbank.current_balance -= (int(transfer.amount) - int(amount))
                transfer.current_balance += (int(transfer.amount) - int(amount))
                transfer_to.current_balance -= (int(transfer.amount) - int(amount))

            else:
                fbank.current_balance = current_balance_fm
                tbank.current_balance = current_balance_to
                transfer.current_balance = current_balance
                transfer_to.current_balance = current_balance_trans_to


        if transfer.transaction_type == 'To Bank Transfer':
            transfer.from_type = 'From : ' + fbank.bank_name
            transfer.to_type = ' To : ' + tbank.bank_name
            transfer.banking=tbank
            transfer_to.from_type = 'From : ' + fbank.bank_name
            transfer_to.to_type = ' To : ' + tbank.bank_name
            transfer_to.banking=fbank
            if tbank_id != transfer_to.banking:  # Check if the destination bank has changed
            # Adjust balances for the old and new banks
                transfer.banking.current_balance += int(amount)
                transfer.save()
                tbank.save()
                tbank.current_balance == transfer_to.current_balance
        elif transfer.transaction_type == 'From Bank Transfer':
            transfer.from_type = 'From : ' + fbank.bank_name
            transfer.to_type = ' To : ' + tbank.bank_name
            transfer.banking=fbank
            transfer_to.from_type = 'From : ' + fbank.bank_name
            transfer_to.to_type = ' To : ' + tbank.bank_name
            transfer_to.banking=tbank
            # Before saving the changes to transfer and transfer_to
            if tbank_id != transfer_to.banking:  # Check if the destination bank has changed
            # Adjust balances for the old and new banks
                transfer_to.banking.current_balance += int(amount)
                transfer_to.save()
                tbank.save()
                tbank.current_balance == transfer_to.current_balance

            
        
        transfer.amount = amount
        transfer.adjustment_date = adj_date
        transfer.description = desc
        transfer_to.amount = amount
        transfer_to.adjustment_date = adj_date
        transfer_to.description = desc
        
        fbank.save()
        tbank.save()
        transfer.save()
        transfer_to.save()

        

        transaction_history = Fin_BankTransactionHistory(
                login_details = login_det,
                company = company,
                bank_transaction = transfer,
                action = 'Updated'
            )
        transaction_history.save()

        return redirect('Fin_banking_listout')
    

    
def Fin_bank_transcation_history(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank=Fin_BankTransactionHistory.objects.filter(bank_transaction = id)
        all_banks = Fin_Banking.objects.filter(company = company)

        context = {
                'login_det':login_det,
                'com':com,
                'allmodules':allmodules,
                'bank':bank,
                'all_banks':all_banks,
               
            }  
       
        return render(request,'company/banking/Fin_bank_transcation_history.html',context)
    

def Fin_bank_transaction_delete(request,id):
  transaction = Fin_BankTransactions.objects.get(id=id)
  bank = Fin_Banking.objects.get(id=transaction.banking_id)
#   transfer_to = Fin_BankTransactions.objects.get(id=transaction.bank_to_bank)
  try:
        transfer_to = Fin_BankTransactions.objects.get(id=transaction.bank_to_bank)
  except:
        transfer_to = None

  try:
        bank_to = Fin_Banking.objects.get(id=transfer_to.banking.id)
  except:
        transfer_to = None


  if transaction.transaction_type=='Cash Withdraw':
    bank.current_balance = bank.current_balance + transaction.amount
  elif transaction.transaction_type=='Cash Deposit':
    bank.current_balance = bank.current_balance - transaction.amount
  elif transaction.adjustment_type=='Reduce Balance':
    bank.current_balance = bank.current_balance + transaction.amount
  elif transaction.adjustment_type=='Increase Balance':
    bank.current_balance = bank.current_balance - transaction.amount
  elif transaction.transaction_type=='From Bank Transfer':
    bank.current_balance = bank.current_balance + transaction.amount
    bank_to.current_balance = bank_to.current_balance - transfer_to.amount
  elif transaction.transaction_type=='To Bank Transfer':
    bank.current_balance = bank.current_balance - transaction.amount
    bank_to.current_balance = bank_to.current_balance + transfer_to.amount
  else:
    bank.current_balance = bank.current_balance - transaction.amount
  bank.save()
  try:
    bank_to.save()
  except:
    bank_to = None
  transaction.delete()
  try:
    transfer_to.delete()
  except:
    transfer_to = None
#   transfer_to.delete()
  return redirect('Fin_banking_listout')            
  
  
# < ------------- Shemeem -------- > Purchase Order < ------------------------------- >
        
def Fin_purchaseOrder(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')
        purchaseOrders = Fin_Purchase_Order.objects.filter(Company = cmp)
        return render(request,'company/Fin_Purchase_Order.html',{'allmodules':allmodules,'com':com, 'cmp':cmp,'data':data,'purchase_orders':purchaseOrders})
    else:
       return redirect('/')

def Fin_addPurchaseOrder(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        vend = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        lists = Fin_Price_List.objects.filter(Company = cmp, type__iexact='sales', status = 'Active')
        # Fetching last pur. order and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted pur. order
        latest_po = Fin_Purchase_Order.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_po.reference_no) + 1 if latest_po else 1

        if Fin_Purchase_Order_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Purchase_Order_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next PO number w r t last PO number if exists.
        nxtPO = ""
        lastPO = Fin_Purchase_Order.objects.filter(Company = cmp).last()
        if lastPO:
            purchaseOrder_no = str(lastPO.purchase_order_no)
            numbers = []
            stri = []
            for word in purchaseOrder_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            p_order_num = int(num)+1

            if num[0] == '0':
                if p_order_num <10:
                    nxtPO = st+'0'+ str(p_order_num)
                else:
                    nxtPO = st+ str(p_order_num)
            else:
                nxtPO = st+ str(p_order_num)
        else:
            nxtPO = 'PO01'

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'vendors':vend, 'items':itms, 'pTerms':trms,'list':lst,'priceListItems':lists,
            'ref_no':new_number,'banks':bnk,'PONo':nxtPO,'units':units, 'accounts':acc
        }
        return render(request,'company/Fin_Add_Purchase_Order.html',context)
    else:
       return redirect('/')

def Fin_getVendorData(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        
        vndId = request.POST['id']
        vend = Fin_Vendors.objects.get(id = vndId)

        if vend:
            context = {
                'status':True, 'id':vend.id, 'email':vend.email, 'gstType':vend.gst_type,'shipState':vend.place_of_supply,'gstin':False if vend.gstin == "" or vend.gstin == None else True, 'gstNo':vend.gstin,
                'street':vend.billing_street, 'city':vend.billing_city, 'state':vend.billing_state, 'country':vend.billing_country, 'pincode':vend.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')

def Fin_checkPurchaseOrderNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        PurOrdNo = request.GET['PONum']

        # Finding next pur_order number w r t last pur_order number if exists.
        nxtPO = ""
        lastPO = Fin_Purchase_Order.objects.filter(Company = com).last()
        if lastPO:
            po_no = str(lastPO.purchase_order_no)
            numbers = []
            stri = []
            for word in po_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            p_order_num = int(num)+1

            if num[0] == '0':
                if p_order_num <10:
                    nxtPO = st+'0'+ str(p_order_num)
                else:
                    nxtPO = st+ str(p_order_num)
            else:
                nxtPO = st+ str(p_order_num)

        PatternStr = []
        for word in PurOrdNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkPurchaseOrderNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Pur. Order No. Pattern already Exists.!'})
        elif Fin_Purchase_Order.objects.filter(Company = com, purchase_order_no__iexact = PurOrdNo).exists():
            return JsonResponse({'status':False, 'message':'Pur. Order No. already Exists.!'})
        elif nxtPO != "" and PurOrdNo != nxtPO:
            return JsonResponse({'status':False, 'message':'Pur. Order No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkPurchaseOrderNumberPattern(pattern):
    models = [Fin_Invoice, Fin_Sales_Order, Fin_Estimate, Fin_Purchase_Bill, Fin_Manual_Journal, Fin_Recurring_Invoice]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False

def Fin_createPurchaseOrder(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            PONum = request.POST['purchase_order_no']
            if Fin_Purchase_Order.objects.filter(Company = com, purchase_order_no__iexact = PONum).exists():
                res = f'<script>alert("Purchase Order Number `{PONum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            POrder = Fin_Purchase_Order(
                Company = com,
                LoginDetails = com.Login_Id,
                Vendor = None if request.POST['vendorId'] == "" else Fin_Vendors.objects.get(id = request.POST['vendorId']),
                vendor_email = request.POST['vendorEmail'],
                vendor_address = request.POST['vendor_bill_address'],
                vendor_gst_type = request.POST['vendor_gst_type'],
                vendor_gstin = request.POST['vendor_gstin'],
                vendor_source_of_supply = request.POST['source_of_supply'],

                Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_name = request.POST['customer'],
                customer_email = request.POST['customerEmail'],
                customer_address = request.POST['bill_address'],
                customer_gst_type = request.POST['gst_type'],
                customer_gstin = request.POST['gstin'],
                customer_place_of_supply = request.POST['place_of_supply'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id']),

                reference_no = request.POST['reference_number'],
                purchase_order_no = PONum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                purchase_order_date = request.POST['purchase_order_date'],
                due_date = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date(),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note']
            )

            POrder.save()

            if len(request.FILES) != 0:
                POrder.file=request.FILES.get('file')
            POrder.save()

            if 'Draft' in request.POST:
                POrder.status = "Draft"
            elif "Save" in request.POST:
                POrder.status = "Saved" 
            POrder.save()

            # Save Sales Order items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['source_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Purchase_Order_Items.objects.create(PurchaseOrder = POrder, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    # itm.current_stock -= int(ele[4])
                    # itm.save()
            
            # Save transaction
                    
            Fin_Purchase_Order_History.objects.create(
                Company = com,
                LoginDetails = data,
                PurchaseOrder = POrder,
                action = 'Created'
            )

            return redirect(Fin_purchaseOrder)
        else:
            return redirect(Fin_addPurchaseOrder)
    else:
       return redirect('/')

def Fin_viewPurchaseOrder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        purchaseOrder = Fin_Purchase_Order.objects.get(id = id)
        cmt = Fin_Purchase_Order_Comments.objects.filter(PurchaseOrder = purchaseOrder)
        hist = Fin_Purchase_Order_History.objects.filter(PurchaseOrder = purchaseOrder).last()
        POItems = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = purchaseOrder)
        try:
            created = Fin_Purchase_Order_History.objects.get(PurchaseOrder = purchaseOrder, action = 'Created')
        except:
            created = None
        
        return render(request,'company/Fin_View_Purchase_Order.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'order':purchaseOrder,'orderItems':POItems, 'history':hist, 'comments':cmt, 'created':created})
    else:
       return redirect('/')

def Fin_convertPurchaseOrder(request,id):
    if 's_id' in request.session:

        pOrder = Fin_Purchase_Order.objects.get(id = id)
        pOrder.status = 'Saved'
        pOrder.save()
        return redirect(Fin_viewPurchaseOrder, id)

def Fin_addPurchaseOrderComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        pOrder = Fin_Purchase_Order.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Purchase_Order_Comments.objects.create(Company = com, PurchaseOrder = pOrder, comments = cmt)
            return redirect(Fin_viewPurchaseOrder, id)
        return redirect(Fin_viewPurchaseOrder, id)
    return redirect('/')

def Fin_deletePurchaseOrderComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Purchase_Order_Comments.objects.get(id = id)
        orderId = cmt.PurchaseOrder.id
        cmt.delete()
        return redirect(Fin_viewPurchaseOrder, orderId)
    
def Fin_purchaseOrderHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        pOrder = Fin_Purchase_Order.objects.get(id = id)
        his = Fin_Purchase_Order_History.objects.filter(PurchaseOrder = pOrder)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_Purchase_Order_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'order':pOrder})
    else:
       return redirect('/')
    
def Fin_deletePurchaseOrder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        pOrder = Fin_Purchase_Order.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = pOrder).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_Purchase_Order_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Purchase_Order_Reference.objects.get(Company = com)
            if int(pOrder.reference_no) > int(deleted.reference_no):
                deleted.reference_no = pOrder.reference_no
                deleted.save()
        else:
            Fin_Purchase_Order_Reference.objects.create(Company = com, reference_no = pOrder.reference_no, LoginDetails = com.Login_Id)
        
        pOrder.delete()
        return redirect(Fin_purchaseOrder)

def Fin_attachPurchaseOrderFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        pOrder = Fin_Purchase_Order.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            pOrder.file = request.FILES.get('file')
            pOrder.save()

        return redirect(Fin_viewPurchaseOrder, id)
    else:
        return redirect('/')

def Fin_purchaseOrderPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        pOrder = Fin_Purchase_Order.objects.get(id = id)
        itms = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = pOrder)
    
        context = {'order':pOrder, 'orderItems':itms,'cmp':com}
        
        template_path = 'company/Fin_Purchase_Order_Pdf.html'
        fname = 'Purchase_Order_'+pOrder.purchase_order_no
        # return render(request, 'company/Fin_Invoice_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_sharePurchaseOrderToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        pOrder = Fin_Purchase_Order.objects.get(id = id)
        itms = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = pOrder)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'order':pOrder, 'orderItems':itms,'cmp':com}
                template_path = 'company/Fin_Purchase_Order_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Purchase_Order_{pOrder.purchase_order_no}'
                subject = f"Purchase_Order_{pOrder.purchase_order_no}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Purchase Order for - #-{pOrder.purchase_order_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Purchase Order details has been shared via email successfully..!')
                return redirect(Fin_viewPurchaseOrder,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewPurchaseOrder, id)

def Fin_createVendorAjax(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        fName = request.POST['first_name']
        lName = request.POST['last_name']
        gstIn = request.POST['gstin']
        pan = request.POST['pan_no']
        email = request.POST['email']
        phn = request.POST['mobile']

        if Fin_Vendors.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            res = f"Vendor `{fName} {lName}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif gstIn != "" and Fin_Vendors.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            res = f"GSTIN `{gstIn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Vendors.objects.filter(Company = com, pan_no__iexact = pan).exists():
            res = f"PAN No `{pan}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Vendors.objects.filter(Company = com, mobile__iexact = phn).exists():
            res = f"Phone Number `{phn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Vendors.objects.filter(Company = com, email__iexact = email).exists():
            res = f"Email `{email}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})

        vnd = Fin_Vendors(
            Company = com,
            LoginDetails = com.Login_Id,
            title = request.POST['title'],
            first_name = fName,
            last_name = lName,
            company = request.POST['company_name'],
            location = request.POST['location'],
            place_of_supply = request.POST['place_of_supply'],
            gst_type = request.POST['gst_type'],
            gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
            pan_no = pan,
            email = email,
            mobile = phn,
            website = request.POST['website'],
            price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
            payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
            opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            open_balance_type = request.POST['balance_type'],
            current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            credit_limit = 0 if request.POST['credit_limit'] == "" else abs(float(request.POST['credit_limit'])) * -1,
            currency = request.POST['currency'],
            billing_street = request.POST['street'],
            billing_city = request.POST['city'],
            billing_state = request.POST['state'],
            billing_pincode = request.POST['pincode'],
            billing_country = request.POST['country'],
            ship_street = request.POST['shipstreet'],
            ship_city = request.POST['shipcity'],
            ship_state = request.POST['shipstate'],
            ship_pincode = request.POST['shippincode'],
            ship_country = request.POST['shipcountry'],
            status = 'Active'
        )
        vnd.save()

        #save transaction

        Fin_Vendor_History.objects.create(
            Company = com,
            LoginDetails = data,
            Vendor = vnd,
            action = 'Created'
        )

        return JsonResponse({'status': True})
    
    else:
        return redirect('/')
    
def Fin_getVendors(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        options = {}
        option_objects = Fin_Vendors.objects.filter(Company = com, status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')

def Fin_editPurchaseOrder(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')
        pOrder = Fin_Purchase_Order.objects.get(id = id)
        POItms = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = pOrder)

        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        vend = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        lists = Fin_Price_List.objects.filter(Company = cmp, type__iexact='sales', status = 'Active')

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'order':pOrder, 'orderItems':POItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst, 'priceListItems':lists,
            'banks':bnk,'units':units, 'accounts':acc, 'vendors':vend
        }
        return render(request,'company/Fin_Edit_Purchase_Order.html',context)
    else:
       return redirect('/')

def Fin_updatePurchaseOrder(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        pOrder = Fin_Purchase_Order.objects.get(id = id)
        if request.method == 'POST':
            PONum = request.POST['purchase_order_no']
            if pOrder.purchase_order_no != PONum and Fin_Purchase_Order.objects.filter(Company = com, purchase_order_no__iexact = PONum).exists():
                res = f'<script>alert("Purchase Order Number `{PONum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            pOrder.Vendor = None if request.POST['vendorId'] == "" else Fin_Vendors.objects.get(id = request.POST['vendorId'])
            pOrder.vendor_email = request.POST['vendorEmail']
            pOrder.vendor_address = request.POST['vendor_bill_address']
            pOrder.vendor_gst_type = request.POST['vendor_gst_type']
            pOrder.vendor_gstin = request.POST['vendor_gstin']
            pOrder.vendor_source_of_supply = request.POST['source_of_supply']

            pOrder.Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId'])
            pOrder.customer_name = request.POST['customer']
            pOrder.customer_email = request.POST['customerEmail']
            pOrder.customer_address = request.POST['bill_address']
            pOrder.customer_gst_type = request.POST['gst_type']
            pOrder.customer_gstin = request.POST['gstin']
            pOrder.customer_place_of_supply = request.POST['place_of_supply']

            pOrder.price_list_applied = True if 'priceList' in request.POST else False
            pOrder.price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id'])

            pOrder.reference_no = request.POST['reference_number']
            pOrder.purchase_order_no = PONum
            pOrder.payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term'])
            pOrder.purchase_order_date = request.POST['purchase_order_date']
            pOrder.due_date = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date()

            pOrder.payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            pOrder.cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            pOrder.upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            pOrder.bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']

            pOrder.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            pOrder.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            pOrder.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            pOrder.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            pOrder.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            pOrder.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            pOrder.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            pOrder.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            pOrder.paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            pOrder.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])
            
            pOrder.note = request.POST['note']

            if len(request.FILES) != 0:
                pOrder.file=request.FILES.get('file')

            pOrder.save()

            # Save Purchase order items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['source_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            po_item_ids = request.POST.getlist("id[]")
            POItem_ids = [int(id) for id in po_item_ids]

            order_items = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = pOrder)
            object_ids = [obj.id for obj in order_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in POItem_ids]

            Fin_Purchase_Order_Items.objects.filter(id__in=ids_to_delete).delete()
            
            count = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = pOrder).count()

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(POItem_ids) and POItem_ids and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total,POItem_ids)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None'  :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    if int(len(itemId))>int(count):
                        if ele[9] == 0:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Purchase_Order_Items.objects.create(PurchaseOrder = pOrder, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                        else:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Purchase_Order_Items.objects.filter( id = int(ele[9])).update(PurchaseOrder = pOrder, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    else:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        Fin_Purchase_Order_Items.objects.filter( id = int(ele[9])).update(PurchaseOrder = pOrder, Item = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax = ele[6], discount = float(ele[7]), total = float(ele[8]))
            
            # Save transaction
                    
            Fin_Purchase_Order_History.objects.create(
                Company = com,
                LoginDetails = data,
                PurchaseOrder = pOrder,
                action = 'Edited'
            )

            return redirect(Fin_viewPurchaseOrder, id)
        else:
            return redirect(Fin_editPurchaseOrder, id)
    else:
       return redirect('/')

def Fin_convertPurchaseOrderToBill(request,id):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        cmp = com.company_id

    allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

    ven = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
    cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
    bnk = Fin_Banking.objects.filter(company = cmp, bank_status = 'Active')
    itm = Fin_Items.objects.filter(Company = cmp, status = 'Active')
    plist = Fin_Price_List.objects.filter(Company = cmp, type = 'Purchase', status = 'Active')
    terms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
    units = Fin_Units.objects.filter(Company = cmp)
    account = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
    tod = datetime.now().strftime('%Y-%m-%d')
    if Fin_Purchase_Bill.objects.filter(company = cmp):
        try:
            ref_no = int(Fin_Purchase_Bill_Ref_No.objects.filter(company = cmp).last().ref_no) + 1
        except:
            ref_no =  1
        bill_no = Fin_Purchase_Bill.objects.filter(company = cmp).last().bill_no
        match = re.search(r'^(\d+)|(\d+)$', bill_no)
        if match:
            numeric_part = match.group(0)
            incremented_numeric = str(int(numeric_part) + 1).zfill(len(numeric_part))
            bill_no = re.sub(r'\d+', incremented_numeric, bill_no, count=1)
    else:
        try:
            ref_no = int(Fin_Purchase_Bill_Ref_No.objects.filter(company = cmp).last().ref_no) + 1
        except:
            ref_no =  1
        bill_no = 1000

    pbill = Fin_Purchase_Order.objects.get(id = id)
    pitm = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = pbill)
    context = {
        'allmodules':allmodules, 'data':data, 'com':com, 'ven':ven, 'cust':cust, 'bnk':bnk, 'units':units,
        'account':account, 'itm':itm, 'tod':tod, 'plist':plist, 'ref_no': ref_no, 'bill_no':bill_no, 'terms':terms,
        'pbill':pbill, 'pitm':pitm
    }

    return render(request, 'company/Fin_Convert_PurchaseOrder_toBill.html', context)

def Fin_purchaseOrderConvertBill(request, id):
  if request.method == 'POST': 
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
    
    purchaseOrder = Fin_Purchase_Order.objects.get(id = id)

    ven = Fin_Vendors.objects.get(id = request.POST.get('ven_name'))
    if request.POST.get('cust_name') == "" or request.POST.get('cust_name') == 'none':
        cust = None
    else:
        cust = Fin_Customers.objects.get(id = request.POST.get('cust_name'))
    plist = None if request.POST.get('price_list') == "" else Fin_Price_List.objects.get(id = request.POST.get('price_list'))
    term = None if request.POST.get('pay_terms') == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST.get('pay_terms'))
    pbill = Fin_Purchase_Bill(vendor = ven,
        customer = cust,
        pricelist = plist,
        ven_psupply = request.POST.get('ven_psupply'),
        cust_psupply = request.POST.get('cust_psupply'),
        bill_no = request.POST.get('bill_no'),
        ref_no = request.POST.get('ref_no'),
        porder_no = request.POST.get('pord_no'),
        bill_date = request.POST.get('bill_date'),
        due_date = request.POST.get('due_date'),
        pay_term = term,
        pay_type = request.POST.get('pay_type'),
        cheque_no = request.POST.get('cheque_id'),
        upi_no = request.POST.get('upi_id'),
        bank_no = request.POST.get('bnk_no'),
        subtotal = request.POST.get('sub_total'),
        igst = request.POST.get('igst'),
        cgst = request.POST.get('cgst'),
        sgst = request.POST.get('sgst'),
        taxamount = request.POST.get('tax_amount'),
        ship_charge = request.POST.get('shipcharge'),
        adjust = request.POST.get('adjustment'),
        grandtotal = request.POST.get('grand_total'),
        paid = request.POST.get('paid'),
        balance = request.POST.get('bal_due'),
        status = "Save",
        company = com,
        logindetails = com.Login_Id
    )

    pbill.save()
        
    item = tuple(request.POST.getlist("product[]"))
    qty =  tuple(request.POST.getlist("qty[]"))
    price =  tuple(request.POST.getlist("price[]"))
    if request.POST.getlist("intra_tax[]")[0] != '':
        tax = tuple(request.POST.getlist("intra_tax[]"))
    else:
        tax = tuple(request.POST.getlist("inter_tax[]"))
    discount =  tuple(request.POST.getlist("discount[]"))
    total =  tuple(request.POST.getlist("total[]"))

    if len(item)==len(qty)==len(price)==len(tax)==len(discount)==len(total):
        mapped=zip(item,qty,price,tax,discount,total)
        mapped=list(mapped)
        for ele in mapped:
            itm = Fin_Items.objects.get(id=ele[0])
            Fin_Purchase_Bill_Item.objects.create(item = itm,qty = ele[1],price = float(ele[2]),tax = ele[3],discount = float(ele[4]),total = float(ele[5]),pbill = pbill,company = com)
            itm.current_stock = int(itm.current_stock) + int(ele[1])
            itm.save()

    Fin_Purchase_Bill_Ref_No.objects.create(company = com, logindetails = data, ref_no = request.POST.get('ref_no'))
    Fin_Purchase_Bill_History.objects.create(company =com, logindetails = data, pbill = pbill, action='Created')

    # Save Bill details to Purchase Order

    purchaseOrder.converted_to_bill = pbill
    purchaseOrder.save()

    return redirect(Fin_purchaseOrder)
  else:
    return redirect(Fin_purchaseOrder)

# End

def StockAdjustment(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            
        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

        terms = Fin_Payment_Terms.objects.all()
        noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com)
        n = len(noti)
        stock_adj= Stock_Adjustment.objects.filter(company=com)
        return render(request,'company/Fin_StockAdjustment.html',{'allmodules':allmodules,'com':com,'data':data,'terms':terms,'noti':noti,'n':n,'stock_adj':stock_adj})  

def AddStockAdjustment(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
   
        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

        noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com)
        n = len(noti)
        items=Fin_Items.objects.filter(Company = com)
        accounts=Fin_Chart_Of_Account.objects.filter(Company=com)
        date=datetime.now()
        reason=Stock_Reason.objects.filter(company=com)

        latest_inv = Stock_Adjustment.objects.filter(company = com).order_by('-id').first()
        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1
        if Stock_Adjustment_RefNo.objects.filter(company = com).exists():
            deleted = Stock_Adjustment_RefNo.objects.get(company = com)
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        return render(request,'company/Fin_AddStockAdjustment.html',{'allmodules':allmodules,'com':com,'n':n,'data':data,'items':items,'accounts':accounts,'date':date,'reason':reason,'ref_no':new_number})  
        


def Fin_StockAdjustmentView(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New') 

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

        terms = Fin_Payment_Terms.objects.all()
        noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com)
        n = len(noti)
        return render(request,'company/Fin_StockAdjustmentView.html',{'allmodules':allmodules,'com':com,'data':data,'terms':terms,'noti':noti,'n':n})
        

def getitemdata1(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        item_name=request.GET.get('id')
        items=Fin_Items.objects.filter(Company = com,name=item_name)
        stock=0
        for i in items:
            stock=i.current_stock
        return JsonResponse({'stock':stock})
        
def getitemdata2(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        item_name=request.GET.get('id')
        items=Fin_Items.objects.filter(Company = com,name=item_name)
        stock=0
        purchase_price=0
        value=0
        
        for i in items:
            stock=i.current_stock
            purchase_price=i.purchase_price
            value=stock*purchase_price
        print(value,'value')
        return JsonResponse({'value':value})
    
        



def create_stockadjustment(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if request.method == 'POST':
            
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id = s_id)
            elif data.User_Type == 'Staff':
                com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

            mode_of_adj= request.POST['mode']
            ref_no=request.POST['refno']
            date=request.POST['date']
            account=request.POST['account']
            reason=request.POST['reason']
            description = request.POST['desc']
            if 'file' in request.FILES:
                attach_file = request.FILES['file']
            else:
                attach_file = None
                
            stock_adjustment=Stock_Adjustment.objects.create(
                company=com,
                login_details=data,
                mode_of_adjustment=mode_of_adj,
                reference_no=ref_no,
                adjusting_date=date,
                account=account,
                reason=reason,
                description=description,
                attach_file = attach_file,

            )
            stock_adjustment.save()

            if 'draft' in request.POST:
                stock_adjustment.status = "Draft"

            elif 'save' in request.POST:
                stock_adjustment.status = "Save"

            stock_adjustment.save()

            if mode_of_adj == 'Quantity':
                item_names = request.POST.getlist('item1')
                print('item_names asdsadas',item_names)
                qty_available = request.POST.getlist('qtyav[]')
                new_qty_on_hand = request.POST.getlist('newqty[]')
                print(new_qty_on_hand,"new_qty_on_hand is")
                qty_adjusted = request.POST.getlist('qtyadj[]')

                if len(item_names) == len(qty_available) == len(new_qty_on_hand) == len(qty_adjusted):
                    for i in range(len(item_names)):

                        item_instance = Fin_Items.objects.get(name=item_names[i],Company=com)

                        if ( float(new_qty_on_hand[i]) > float(qty_available[i])):
                            diff = float(qty_available[i]) + float(qty_adjusted[i])
                            print('diff',diff)
                            item_instance.current_stock = diff
                            print("greater")
                        
                        else:
                            diff = float(qty_available[i]) + float(qty_adjusted[i])
                            item_instance.current_stock = diff
                            # item_instance.current_stock -= int(new_qty_on_hand[i])
                            print("lesser")

                        
                        item_instance.save()

                        items1 = Stock_Adjustment_Items.objects.create(
                            item=item_instance,
                            quantity_avail=qty_available[i],
                            quantity_inhand=new_qty_on_hand[i],
                            quantity_adj=qty_adjusted[i],
                            stock_adjustment=stock_adjustment,
                            company=com,
                            type='Quantity',
                            login_details=data,
                            
                        )
                        items1.save()
                        
                        stock_adj_history = Stock_Adjustment_History.objects.create(
                        company=com,
                        login_details=data,
                        item=item_instance,
                        date=date,
                        action='Created',
                        stock_adjustment=stock_adjustment
                    )
                        stock_adj_history.save()


            elif mode_of_adj == 'Value':
                items= request.POST.getlist('item2[]')
                current_value = request.POST.getlist('cuval[]')
                changed_value = request.POST.getlist('chval[]')
                value_adjusted = request.POST.getlist('adjval[]')

                if len(items) == len(current_value) == len(changed_value) == len(value_adjusted):
                    for j in range(len(items)):

                        item_inst = Fin_Items.objects.get(name=items[j],Company=com)

                        item_list= Stock_Adjustment_Items.objects.create(
                            item=item_inst,
                            current_val = current_value[j],
                            changed_val = changed_value[j],
                            adjusted_val = value_adjusted[j],
                            company=com,
                            login_details=data,
                            stock_adjustment=stock_adjustment,
                            type='Value'
                        )
                        item_list.save()

                        stock_adj_history = Stock_Adjustment_History.objects.create(
                            company=com,
                            login_details=data,
                            item=item_inst,
                            date=date,
                            action = 'Created',
                            stock_adjustment=stock_adjustment
                    )
                    stock_adj_history.save()

            return redirect('StockAdjustment')

            

            
def StockAdjustmentOverview(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

        terms = Fin_Payment_Terms.objects.all()
        noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com)
        n = len(noti)
        stocks=Stock_Adjustment.objects.get(id=id,company=com)
        st_items=Stock_Adjustment_Items.objects.filter(stock_adjustment =stocks,company = com)
        comment=Stock_Adjustment_Comment.objects.filter(stock_adjustment=id,company=com)
        history=Stock_Adjustment_History.objects.filter(stock_adjustment=id,company=com).last()
        print(history,'history')
        return render(request,'company/Fin_StockAdjustmentOverview.html',{'allmodules':allmodules,'com':com,'data':data,'terms':terms,'noti':noti,'n':n,'stocks':stocks,'comment':comment,'st_items':st_items,'history':history})


def del_stockadj(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        stocks=Stock_Adjustment.objects.get(id=id,company=com)
        stock=Stock_Adjustment_Items.objects.filter(stock_adjustment=id,company=com)
        comment=Stock_Adjustment_Comment.objects.filter(stock_adjustment=id,company=com)
        stocks.delete()
        stock.delete()
        comment.delete()
        return redirect('StockAdjustment')  

        
def stockadj_comment(request,id):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            stock = Stock_Adjustment.objects.get(id=id,company=com)
            comment = request.POST['comment']
            add_comment=Stock_Adjustment_Comment.objects.create(
                company=com,
                login_details=data,
                stock_adjustment=stock,
                comment=comment
            )
            add_comment.save()
            
            return redirect('StockAdjustmentOverview',id)
        return render('StockAdjustmentOverview',id)
        

def del_stockcmnt(request,id):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

        elif data.User_Type == 'Staff':
             com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        comment=Stock_Adjustment_Comment.objects.get(id=id,company=com)
        comment.delete()
        return redirect('StockAdjustmentOverview',id)
     return render('StockAdjustmentOverview',id)


def add_reason(request):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id 

        reason = request.POST['reason']
        
        if not Stock_Reason.objects.filter(company = com, reason__iexact = reason).exists():
            Stock_Reason.objects.create(company = com, reason = reason)

            reasonlist = []
            reasons = Stock_Reason.objects.filter(company = com)

            for i in reasons:
             keyPairReason={
                 'name':i.reason,
                 'id':i.id
             }
             reasonlist.append(keyPairReason)
            
            return JsonResponse({'status':True,'reasons':reasonlist},safe=False)
        else:
            return JsonResponse({'status':False, 'message':f'{reason} already exists, try another.!'})


def convert_stockadj(request,id):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':   
            stockadj = Stock_Adjustment.objects.get(id=id,company=com)
            stockadj.status="Save"
            stockadj.save()
        return redirect('StockAdjustmentOverview',id)
     return redirect('StockAdjustmentOverview',id)


def Stk_adjHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        elif data.User_Type == 'Staff':
             com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
             allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

        stockadj = Stock_Adjustment.objects.get(id=id,company=com)
        stockadj_history=Stock_Adjustment_History.objects.filter(stock_adjustment=stockadj,company=com)
        return render(request,'company/Fin_StockAdjustmentHistory.html',{'history':stockadj_history,'allmodules':allmodules,'stockadj':stockadj})
    return redirect('StockAdjustmentOverview',id)


def edit_stockadj(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            
            
        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

        terms = Fin_Payment_Terms.objects.all()
        noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com)
        n = len(noti)
        stocks=Stock_Adjustment.objects.get(id=id,company=com)
        st_items=Stock_Adjustment_Items.objects.filter(stock_adjustment =stocks,company = com)
        cnt_item=Stock_Adjustment_Items.objects.filter(stock_adjustment =stocks,company = com).count()
        items=Fin_Items.objects.filter(Company = com)
        reason=Stock_Reason.objects.filter(company=com)
        return render(request,'company/Fin_EditStockAdjustment.html',{'reason':reason,'cnt_item':cnt_item,'allmodules':allmodules,'com':com,'data':data,'terms':terms,'noti':noti,'n':n,'stocks':stocks,'st_items':st_items,'items':items})
        

def updatedStockAdj(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method=='POST':
            stck_adj=Stock_Adjustment.objects.get(id=id)
            stck_adj.mode_of_adjustment= request.POST['mode']
            stck_adj.reference_no=request.POST['refno']
            stck_adj.adjusting_date=request.POST['date']
            stck_adj.account=request.POST['account']
            stck_adj.reason=request.POST['reason']
            stck_adj.description = request.POST['desc']
            if 'file' in request.FILES:
                stck_adj.attach_file = request.FILES['file']
            else:
                stck_adj.attach_file = None
            stck_adj.company=com
            stck_adj.login_details=data
            stck_adj.save()

            if 'draft' in request.POST:
                stck_adj.status = "Draft"

            elif 'save' in request.POST:
                stck_adj.status = "Save"

            stck_adj.save()

            stckItem_adj=Stock_Adjustment_Items.objects.filter(stock_adjustment=stck_adj.id)
            stckItem_adj.delete()

            if stck_adj.mode_of_adjustment == 'Quantity':
                item_names = request.POST.getlist('item1')
                qty_available = request.POST.getlist('qtyav[]')
                new_qty_on_hand = request.POST.getlist('newqty[]')
                qty_adjusted = request.POST.getlist('qtyadj[]')

                if len(item_names) == len(qty_available) == len(new_qty_on_hand) == len(qty_adjusted):
                    for i in range(len(item_names)):

                        item_instance = Fin_Items.objects.get(name=item_names[i],Company=com)
                        if ( float(new_qty_on_hand[i]) > float(qty_available[i])):
                            diff = float(qty_available[i]) + float(qty_adjusted[i])
                            print('diff',diff)
                            item_instance.current_stock = diff
                            print("greater")
                        
                        else:
                            diff = float(qty_available[i]) + float(qty_adjusted[i])
                            item_instance.current_stock = diff
                            # item_instance.current_stock -= int(new_qty_on_hand[i])
                            print("lesser")
                        item_instance.save()

                        items1 = Stock_Adjustment_Items.objects.create(
                            item=item_instance,
                            quantity_avail=qty_available[i],
                            quantity_inhand=new_qty_on_hand[i],
                            quantity_adj=qty_adjusted[i],
                            stock_adjustment=stck_adj,
                            company=com,
                            type='Quantity',
                            login_details=data,
                            
                        )
                        items1.save()
                        
                        stock_adj_history = Stock_Adjustment_History.objects.create(
                        company=com,
                        login_details=data,
                        item=item_instance,
                        date=stck_adj.adjusting_date,
                        action='Edited',
                        stock_adjustment=stck_adj
                    )
                        stock_adj_history.save()


            elif stck_adj.mode_of_adjustment == 'Value':
                items= request.POST.getlist('item2[]')
                current_value = request.POST.getlist('cuval[]')
                changed_value = request.POST.getlist('chval[]')
                value_adjusted = request.POST.getlist('adjval[]')

                if len(items) == len(current_value) == len(changed_value) == len(value_adjusted):
                    for j in range(len(items)):

                        item_inst = Fin_Items.objects.get(name=items[j],Company=com)

                        item_list= Stock_Adjustment_Items.objects.create(
                            item=item_inst,
                            current_val = current_value[j],
                            changed_val = changed_value[j],
                            adjusted_val = value_adjusted[j],
                            company=com,
                            login_details=data,
                            stock_adjustment=stck_adj,
                            type='Value'
                        )
                        item_list.save()

                        stock_adj_history = Stock_Adjustment_History.objects.create(
                            company=com,
                            login_details=data,
                            item=item_inst,
                            date=stck_adj.adjusting_date,
                            action='Edited',
                            stock_adjustment=stck_adj
                    )
                    stock_adj_history.save()
            return redirect('StockAdjustmentOverview',id)
        return redirect('StockAdjustmentOverview',id)
        
            
def deleteitem(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        stckItem_adj=Stock_Adjustment_Items.objects.get(id=id,company=com)
        stckItem_adj.delete()
        return JsonResponse({'message': 'Item deleted successfully'}) 
        

def filterbySave(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        
        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

        terms = Fin_Payment_Terms.objects.all()
        noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com)
        n = len(noti)
        stock_adj= Stock_Adjustment.objects.filter(company=com,status="Save")
        return render(request,'company/Fin_StockAdjustment.html',{'allmodules':allmodules,'com':com,'data':data,'terms':terms,'noti':noti,'n':n,'stock_adj':stock_adj})
        

def filterbyDraft(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

        noti = Fin_CNotification.objects.filter(status = 'New',Company_id = com)
        n = len(noti)
        stock_adj= Stock_Adjustment.objects.filter(company=com,status="Draft")
        return render(request,'company/Fin_StockAdjustment.html',{'allmodules':allmodules,'com':com,'data':data,'noti':noti,'n':n,'stock_adj':stock_adj})
        

def stock_attachFile(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        stock_adj= Stock_Adjustment.objects.get(company=com,id=id)
        if request.method == 'POST':
            if len(request.FILES) != 0:
            
                if stock_adj.attach_file != "":
                    os.remove(stock_adj.attach_file.path)
                stock_adj.attach_file=request.FILES['file']
            stock_adj.save()
        return redirect('StockAdjustmentOverview',id)
        
           
def stockadjToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        stock_adj= Stock_Adjustment.objects.get(company=com,id=id)
        stock_adjItems= Stock_Adjustment_Items.objects.filter(stock_adjustment=stock_adj,company=com)

        try:
            if request.method == 'POST':
                    emails_string = request.POST['email_ids']
                    emails_list = [email.strip() for email in emails_string.split(',')]
                    email_message = request.POST['email_message']
                    context = {'com': com, 'stocks': stock_adj, 'email_message': email_message,'st_items':stock_adjItems}
                    print('context working')
                    template_path = 'company/Fin_StockAdjustment_Pdf.html'
                    print('tpath working')
                    template = get_template(template_path)
                    print('template working')
                    html = template.render(context)
                    print('html working')
                    result = BytesIO()
                    print('bytes working')
                    pdf = pisa.pisaDocument(BytesIO(html.encode("utf-8")), result)  # Change encoding to 'utf-8'
                    print('pisa working')
                    if pdf.err:
                        raise Exception(f"PDF generation error: {pdf.err}")
                    result.seek(0)  # Move the buffer's position to the start for reading
                    filename = f'Stock_AdjusmentDetails_{stock_adj.reference_no}.pdf'
                    subject = f"Stock_AdjusmentDetails_{stock_adj.reference_no}"
                    email = EmailMessage(subject, f"Hi,\nPlease find the attached Stock Adjustment Details for Reference No: {stock_adj.reference_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                    email.attach(filename, result.read(), "application/pdf")  # Use result.read() directly
                    email.send(fail_silently=False)
                    messages.success(request, 'Stock Adjusment details has been shared via email successfully..!')
                    return redirect('StockAdjustmentOverview', id=id)
            return redirect('StockAdjustmentOverview', id=id)
        except Exception as e:
                print(e)
                messages.error(request, f'{e}')
                return redirect(StockAdjustmentOverview, id)
                
                
# Delivery Challan Views TINTO MT 
def deliverylist(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        deli = Fin_Delivery_Challan.objects.filter(Company = cmp)
        return render(request,'company/Fin_Delivery_Challan.html',{'allmodules':allmodules,'com':com, 'cmp':cmp,'data':data,'del':deli})
    else:
       return redirect('/')
     
     
def newdeliverychallan(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=data)
                cmp = com
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
                
                cust = Fin_Customers.objects.filter(Company=com, status='Active')
                itms = Fin_Items.objects.filter(Company=com, status='Active')
                units = Fin_Units.objects.filter(Company=com)
                acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')
                lst = Fin_Price_List.objects.filter(Company=com, status='Active')
                
                trms = Fin_Company_Payment_Terms.objects.filter(Company = com)
            else:
                com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
                cmp = com
                allmodules = Fin_Modules_List.objects.get(company_id=com.id, status='New')
                
                cust = Fin_Customers.objects.filter(Company=com.id, status='Active')
                itms = Fin_Items.objects.filter(Company=com.id, status='Active')
                units = Fin_Units.objects.filter(Company=com.id)
                acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com.id).order_by('account_name')
                lst = Fin_Price_List.objects.filter(Company=com.id, status='Active')
                
                trms = Fin_Company_Payment_Terms.objects.filter(Company = com.id)

            lists = Fin_Price_List.objects.filter(Company = cmp, type__iexact='sales', status = 'Active')
            latest_eway = Fin_Delivery_Challan.objects.filter(Company=com).order_by('-reference_no').first()

            new_number = int(latest_eway.reference_no) + 1 if latest_eway else 1

            if Fin_Delivery_Challan_Reference.objects.filter(Company=com).exists():
                deleted = Fin_Delivery_Challan_Reference.objects.filter(Company=com).last()
                
                if deleted:
                    while int(deleted.reference_number) >= new_number:
                        new_number += 1

            nxtEway = ""
            lastEway = Fin_Delivery_Challan.objects.filter(Company=com).last()
            if lastEway:
                eway_no = str(lastEway.challan_no)
                print("Original eway_no:", eway_no)

                for i in range(len(eway_no) - 1, -1, -1):
                    if eway_no[i].isdigit():
                        # Increment the last digit by 1
                        new_digit = str((int(eway_no[i]) + 1) % 10)

                        # Replace the last digit in the input string
                        result = eway_no[:i] + new_digit + eway_no[i+1:]
                        print("Modified eway_no:", result)

                        # Break out of the loop after updating the last digit
                        break

                numbers = []
                stri = []




                # for word in eway_no:
                #     if word.isdigit():
                #         numbers.append(word)
                #     else:
                #         stri.append(word)

                # num = ''.join(numbers)
                # print(num)
                # st = ''.join(stri)
                # print(st)

                # eway_num = int(num) + 1
                
                # print(eway_num)
                # if num[0] == '0':
                #     nxtEway = st + '0' + str(eway_num)
                # else:
                nxtEway = result

            context = {
                'com': cmp,
                'LoginDetails': data,
                'allmodules': allmodules,
                'data': data,
                'com':com,
                
                'customers': cust,
                'items': itms,
                'lst': lst,
                'ESTNo':nxtEway,
              
                'pTerms':trms,
                'accounts':acc,
                'units':units,
                'ref_no':new_number,
                'priceListItems':lists,
            }
            return render(request, 'company/Fin_add_delivery_challan.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')
    return redirect('newdeliverychallan')
    

def Fin_getCustomerschallan(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        options = {}
        option_objects = Fin_Customers.objects.filter(Company = com, status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')
    

def Fin_createchallanCustomer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        fName = request.POST['first_name']
        lName = request.POST['last_name']
        gstIn = request.POST['gstin']
        pan = request.POST['pan_no']
        email = request.POST['email']
        phn = request.POST['mobile']

        if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            res = f"Customer `{fName} {lName}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif gstIn != "" and Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            res = f"GSTIN `{gstIn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
            res = f"PAN No `{pan}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
            res = f"Phone Number `{phn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
            res = f"Email `{email}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})

        cust = Fin_Customers(
            Company = com,
            LoginDetails = data,
            title = request.POST['title'],
            first_name = fName,
            last_name = lName,
            company = request.POST['company_name'],
            location = request.POST['location'],
            place_of_supply = request.POST['place_of_supply'],
            gst_type = request.POST['gst_type'],
            gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
            pan_no = pan,
            email = email,
            mobile = phn,
            website = request.POST['website'],
            price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
            payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
            opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            open_balance_type = request.POST['balance_type'],
            current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']),
            billing_street = request.POST['street'],
            billing_city = request.POST['city'],
            billing_state = request.POST['state'],
            billing_pincode = request.POST['pincode'],
            billing_country = request.POST['country'],
            ship_street = request.POST['shipstreet'],
            ship_city = request.POST['shipcity'],
            ship_state = request.POST['shipstate'],
            ship_pincode = request.POST['shippincode'],
            ship_country = request.POST['shipcountry'],
            status = 'Active'
        )
        cust.save()

        #save transaction

        Fin_Customers_History.objects.create(
            Company = com,
            LoginDetails = data,
            customer = cust,
            action = 'Created'
        )

        return JsonResponse({'status': True})
    
    else:
        return redirect('/')
 

def customerdata(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        print(customer_id)
        cust = Fin_Customers.objects.get(id=customer_id,Company_id=com.id)
        print('h')
        data7 = {'email': cust.email,'billing_street':cust.billing_street,'billing_city':cust.billing_city,'billing_state':cust.billing_state,'gst_type':cust.gst_type,'gstin':cust.gstin,'place_of_supply':cust.place_of_supply}
        return JsonResponse(data7)

      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        cust = Fin_Customers.objects.get(id=customer_id,Company_id=staf.company_id_id)
        data7 = {'email': cust.email,'billing_street':cust.billing_street,'billing_city':cust.billing_city,'billing_state':cust.billing_state,'gst_type':cust.gst_type,'gstin':cust.gstin,'place_of_supply':cust.place_of_supply,}
        return JsonResponse(data7)


def createdeliverychallan(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            CHNo = request.POST['challan_no']

            PatternStr = []
            for word in CHNo:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkEstimateNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Challan No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if Fin_Delivery_Challan.objects.filter(Company = com, challan_no__iexact = CHNo).exists():
                res = f'<script>alert("Challan Number `{CHNo}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            
            challan = Fin_Delivery_Challan(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = None if request.POST['customer'] == "" else Fin_Customers.objects.get(id = request.POST['customer']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_no = request.POST['reference_number'],
                challan_no = CHNo,
                challan_type= request.POST['challan_type'],
                
                challan_date = request.POST['challan_date'],
                # document= request.POST['file'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id']),

                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                note = request.POST['note']
            )

            challan.save()
            challanref = Fin_Delivery_Challan_Reference(
                Company = com,
                LoginDetails = com.Login_Id,
                
                reference_number = request.POST['reference_number'],
                
            )

            challanref.save()



            if len(request.FILES) != 0:
                challan.document=request.FILES.get('file')
            challan.save()

            if 'Draft' in request.POST:
                challan.status = "Draft"
            elif "Save" in request.POST:
                challan.status = "Saved" 
            challan.save()

            # Save Estimate items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    created_instance = Fin_Delivery_Challan_Items.objects.create(delivery_challan = challan, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price=ele[5], tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    itm.current_stock -= int(ele[4])
                    created_instance.save()
                    itm.save()
            
            # Save transaction
                    
            Fin_Delivery_Challan_History.objects.create(
                Company = com,
                LoginDetails = data,
                delivery_challan = challan,
                date=timezone.now().date(),
                
               
                action = 'Created'
            )

            return redirect(deliverylist)
        else:
            return redirect(deliverylist)
    else:
       return redirect('/')


def challan_overview(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        Estimate = Fin_Delivery_Challan.objects.get(id = id)
        cmt = Fin_Delivery_Challan_Comments.objects.filter(delivery_challan = Estimate)
        hist = Fin_Delivery_Challan_History.objects.filter(delivery_challan = Estimate).last()
        EstItems = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = Estimate)
        histpry = Fin_Delivery_Challan_History.objects.filter(delivery_challan = Estimate)
        try:
            created = Fin_Delivery_Challan_History.objects.get(delivery_challan = Estimate, action = 'Created')
        except:
            created = None
#  'comments':cmt, 
        return render(request,'company/Fin_Delivery_Challan_View.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'estimate':Estimate,'estItems':EstItems, 'history':hist,'created':created,'comments':cmt,'histpry2':histpry})
    else:
       return redirect('/')


def editchallan(request,id):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        est = Fin_Delivery_Challan.objects.get(id = id)
        if request.method == 'POST':
            ESTNo = request.POST['challan_no']

            PatternStr = []
            for word in ESTNo:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkEstimateNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Challan No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if est.challan_no != ESTNo and Fin_Delivery_Challan.objects.filter(Company = com, challan_no__iexact = ESTNo).exists():
                res = f'<script>alert("Challan Number `{ESTNo}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            est.Customer = None if request.POST['customer'] == "" else Fin_Customers.objects.get(id = request.POST['customer'])
            est.customer_email = request.POST['customerEmail']
            est.billing_address = request.POST['bill_address']
            est.gst_type = request.POST['gst_type']
            est.gstin = request.POST['gstin']
            est.place_of_supply = request.POST['place_of_supply']

            est.challan_no = ESTNo
           
            est.challan_date = request.POST['challan_date']
            est.challan_type = request.POST['challan_type']

            est.price_list_applied = True if 'priceList' in request.POST else False
            est.price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id'])
           

            est.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            # est.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            # est.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            # est.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            est.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            est.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            est.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            est.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])

            est.note = request.POST['note']

            if len(request.FILES) != 0:
                est.file=request.FILES.get('file')

            est.save()

            # Save estimate items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            print(itemName)
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            plc=request.POST['place_of_supply']

            cgst=request.POST.getlist("taxGST[]")
            igst=request.POST.getlist("taxIGST[]")

            if plc!=com.State:
                    tax = igst
                    est.igst = float(request.POST['igst'])
                    est.cgst = 0
                    est.sgst = 0
                    est.save()

            if plc==com.State:
                    tax = cgst
                    est.igst = 0
                    est.cgst = float(request.POST['cgst'])
                    est.sgst = float(request.POST['sgst'])
                    d = float(request.POST['cgst'])
                   
                    est.save()

             

            # tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            est_item_ids = request.POST.getlist("id[]")
            EstItem_ids = [int(id) for id in est_item_ids]

            estimate_items = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = est)
            object_ids = [obj.id for obj in estimate_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in EstItem_ids]

            Fin_Delivery_Challan_Items.objects.filter(id__in=ids_to_delete).delete()
            
            count = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = est).count()

            print(itemId,itemName,hsn,sac,qty,price,tax,discount,total,EstItem_ids)
            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(EstItem_ids) and EstItem_ids and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total,EstItem_ids)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None':
                        hsn = None
                    else:
                        hsn = ele[2]

                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    if ele[9] == 0:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        Fin_Delivery_Challan_Items.objects.create(delivery_challan = est, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = ele[5],  tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                        itm.current_stock -= int(ele[4])
                        # created_instance.save()
                        itm.save()
                    else:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        Fin_Delivery_Challan_Items.objects.filter( id = int(ele[9])).update(delivery_challan = est, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = ele[5],  tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                        itm.current_stock -= int(ele[4])
                        # created_instance.save()
                        itm.save()

                    # if int(len(itemId))>int(count):
                    #     if ele[9] == 0:
                    #         itm = Fin_Items.objects.get(id = int(ele[0]))
                    #         Fin_Delivery_Challan_Items.objects.create(delivery_challan = est, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = ele[5],  tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    #         itm.current_stock -= int(ele[4])
                    #         # created_instance.save()
                    #         itm.save()
                    #     else:
                    #         itm = Fin_Items.objects.get(id = int(ele[0]))
                    #         Fin_Delivery_Challan_Items.objects.filter( id = int(ele[9])).update(delivery_challan = est, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = ele[5],  tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    #         itm.current_stock -= int(ele[4])
                    #         # created_instance.save()
                    #         itm.save()
                    # else:
                    #     itm = Fin_Items.objects.get(id = int(ele[0]))
                    #     Fin_Delivery_Challan_Items.objects.filter( id = int(ele[9])).update(delivery_challan = est, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = ele[5],  tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    #     itm.current_stock -= int(ele[4])
                    #         # created_instance.save()
                    #     itm.save()
            # Save transaction
                    
            Fin_Delivery_Challan_History.objects.create(
                Company = com,
                LoginDetails = data,
                delivery_challan = est,
                date=timezone.now().date(),
                action = 'Edited'
            )

            return redirect(challan_overview, id)
        else:
            return redirect(challan_overview, id)
   
def Fin_editchallanto(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        est = Fin_Delivery_Challan.objects.get(id = id)
        estItms = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = est)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        lists = Fin_Price_List.objects.filter(Company = cmp, type__iexact='sales', status = 'Active')
       
        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'estimate':est, 'estItems':estItms, 'customers':cust, 'items':itms,'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc, 'priceListItems':lists,
           
        }
        return render(request,'company/Fin_Delivery_Challan_Edit.html',context)
    else:
       return redirect('/')


def Fin_deleteChallan(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        est = Fin_Delivery_Challan.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        Fin_Delivery_Challan_Items.objects.filter(delivery_challan = est).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_Delivery_Challan_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Delivery_Challan_Reference.objects.get(Company = com)
            if int(est.reference_no) > int(deleted.reference_number):
                deleted.reference_no = est.reference_no
                deleted.save()
        else:
            Fin_Delivery_Challan_Reference.objects.create(Company = com, reference_no = est.reference_no)
        
        est.delete()
        return redirect(deliverylist)

def Fin_addchallanComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        est = Fin_Delivery_Challan.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Delivery_Challan_Comments.objects.create(Company = com, delivery_challan = est, comments = cmt)
            return redirect(challan_overview, id)
        return redirect(challan_overview, id)
    return redirect('/')


def Fin_deletechallanComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Delivery_Challan_Comments.objects.get(id = id)
        estId = cmt.delivery_challan.id
        cmt.delete()
        return redirect(challan_overview, estId)


def Fin_attachchallanFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        est = Fin_Delivery_Challan.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            est.document = request.FILES.get('file')
            est.save()

        return redirect(challan_overview, id)
    else:
        return redirect('/')
    
def Fin_convertchallan(request,id):
    if 's_id' in request.session:

        est = Fin_Delivery_Challan.objects.get(id = id)
        est.status = 'Saved'
        est.save()
        return redirect(challan_overview, id)

def Fin_convertchallanToInvoice(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        est = Fin_Delivery_Challan.objects.get(id = id)
        estItms = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = est)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        # Fetching last invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted invoice
        latest_inv = Fin_Invoice.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Fin_Invoice_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Invoice_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next invoice number w r t last invoic number if exists.
        nxtInv = ""
        lastInv = Fin_Invoice.objects.filter(Company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'estimate':est, 'estItems':estItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc,'ref_no':new_number,'invNo':nxtInv
        }
        return render(request,'company/Fin_Convert_Delivery_Challan_toInvoice.html',context)
    else:
       return redirect('/')


def Fin_estimatechallanInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        est = Fin_Delivery_Challan.objects.get(id = id)
        if request.method == 'POST':
            invNum = request.POST['invoice_no']
            if Fin_Invoice.objects.filter(Company = com, invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = Fin_Invoice(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = Fin_Customers.objects.get(id = request.POST['customer']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_no = request.POST['reference_number'],
                invoice_no = invNum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                invoice_date = request.POST['invoice_date'],
                duedate = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                exp_ship_date = datetime.strptime(request.POST['due_date'], '%d-%m-%Y').date(),
                price_list_applied = True if 'priceList' in request.POST else False,
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note'],
                status = "Saved" 
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.file=request.FILES.get('file')
            inv.save()

            # Save invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Invoice_Items.objects.create(Invoice = inv, Item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()
            
            # Save transaction
                    
            Fin_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                Invoice = inv,
                action = 'Created'
            )

            # Save invoice and balance details to Estimate

            est.converted_to_invoice = inv
            est.balance = float(inv.balance)
            est.save()

            return redirect(deliverylist)
        else:
            return redirect(deliverylist, id)
    else:
       return redirect('/')


def Fin_convertchallanToRecurringInvoice(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id

        est = Fin_Delivery_Challan.objects.get(id = id)
        estItms = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = est)
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        repeat = Fin_CompanyRepeatEvery.objects.filter(company = cmp)
        priceList = Fin_Price_List.objects.filter(Company = cmp, type = 'Sales', status = 'Active')

        # Fetching last invoice and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted invoice
        latest_inv = Fin_Recurring_Invoice.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_inv.reference_no) + 1 if latest_inv else 1

        if Fin_Recurring_Invoice_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Recurring_Invoice_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtInv = ""
        lastInv = Fin_Recurring_Invoice.objects.filter(Company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.rec_invoice_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)
        else:
            nxtInv = 'RI01'

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'estimate':est, 'estItems':estItms, 'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc,'ref_no':new_number,'invNo':nxtInv, 'priceListItems':priceList, 'repeat':repeat,
        }
        return render(request,'company/Fin_Convert_Delivery_Challan_toRecInvoice.html',context)
    else:
       return redirect('/')   
    

def Fin_challanConvertRecInvoice(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        est = Fin_Delivery_Challan.objects.get(id = id)

        if request.method == 'POST':
            invNum = request.POST['rec_invoice_no']
            if Fin_Recurring_Invoice.objects.filter(Company = com, rec_invoice_no__iexact = invNum).exists():
                res = f'<script>alert("Rec. Invoice Number `{invNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            inv = Fin_Recurring_Invoice(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                profile_name = request.POST['profile_name'],
                entry_type = None if request.POST['entry_type'] == "" else request.POST['entry_type'],
                reference_no = request.POST['reference_number'],
                rec_invoice_no = invNum,
                payment_terms = Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_term']),
                start_date = request.POST['start_date'],
                end_date = datetime.strptime(request.POST['end_date'], '%d-%m-%Y').date(),
                salesOrder_no = request.POST['order_number'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id']),
                repeat_every = Fin_CompanyRepeatEvery.objects.get(id = request.POST['repeat_every']),
                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid_off = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note']
            )

            inv.save()

            if len(request.FILES) != 0:
                inv.file=request.FILES.get('file')
            inv.save()

            if 'Draft' in request.POST:
                inv.status = "Draft"
            elif "Save" in request.POST:
                inv.status = "Saved" 
            inv.save()

            # Save rec_invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and hsn and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Recurring_Invoice_Items.objects.create(RecInvoice = inv, Item = itm, hsn = ele[2], quantity = int(ele[3]), price = float(ele[4]), tax = ele[5], discount = float(ele[6]), total = float(ele[7]))
                    itm.current_stock -= int(ele[3])
                    itm.save()
            
            # Save transaction
                    
            Fin_Recurring_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                RecInvoice = inv,
                action = 'Created'
            )

            # Save sales order details to Estimate and update Estimate Balance

            est.converted_to_recurring_invoice = inv
            est.balance = float(inv.balance)
            est.save()

            return redirect(deliverylist)
        else:
            return redirect(Fin_convertchallanToRecurringInvoice, id)
    else:
       return redirect('/')


def Fin_sharechallanToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        est = Fin_Delivery_Challan.objects.get(id = id)
        itms = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = est)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                print(emails_list)
            
                context = {'estimate':est, 'estItems':itms,'cmp':com}
                template_path = 'company/Fin_Delivery_Challan_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Challan{est.challan_no}'
                subject = f"Delivery_Challan{est.challan_no}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached delivery challan for - #-{est.challan_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Challan details has been shared via email successfully..!')
                return redirect(challan_overview,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(challan_overview, id)


def Fin_checkchallanNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        EstNo = request.GET['EstNum']

        nxtEstNo = ""
        lastEstmate = Fin_Delivery_Challan.objects.filter(Company = com).last()
        # lastEstmate = Fin_Delivery_Challan.objects.filter(Company=com).last()
        if lastEstmate:
                eway_no = str(lastEstmate.challan_no)
                print("Original eway_no:", eway_no)

                for i in range(len(eway_no) - 1, -1, -1):
                    if eway_no[i].isdigit():
                        # Increment the last digit by 1
                        new_digit = str((int(eway_no[i]) + 1) % 10)

                        # Replace the last digit in the input string
                        result = eway_no[:i] + new_digit + eway_no[i+1:]
                        print("Modified eway_no:", result)

                        # Break out of the loop after updating the last digit
                        break
        # if lastEstmate:
        #     Est_no = str(lastEstmate.challan_no)
        #     numbers = []
        #     stri = []
        #     for word in Est_no:
        #         if word.isdigit():
        #             numbers.append(word)
        #         else:
        #             stri.append(word)
            
        #     num=''
        #     for i in numbers:
        #         num +=i
            
        #     st = ''
        #     for j in stri:
        #         st = st+j

            # est_num = int(num)+1

            # if num[0] == '0':
            #     if est_num <10:
            #         nxtEstNo = st+'0'+ str(est_num)
            #     else:
            #         nxtEstNo = st+ str(est_num)
            # else:
        nxtEstNo = result

        PatternStr = result
        # for word in EstNo:
        #     if word.isdigit():
        #         pass
        #     else:
        #         PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkEstimateNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Challan No. Pattern already Exists.!'})
        elif Fin_Estimate.objects.filter(Company = com, estimate_no__iexact = EstNo).exists():
            return JsonResponse({'status':False, 'message':'Challan No. already Exists.!'})
        elif nxtEstNo != "" and EstNo != nxtEstNo:
            return JsonResponse({'status':False, 'message':'Challan No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')


def customer_dropdown(request):                                                                 #new by tinto mt (item)
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_Customers.objects.filter(company=com)
            print(1111)
            for option in option_objects:
                title=option.title
                first_name=option.first_name
                last_name=option.last_name
                options[option.id] = [title,first_name,last_name,f"{title}"]
            return JsonResponse(options)
    elif login.User_Type == 'Staff':
            staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_Customers.objects.filter(company=staf.company_id)
            for option in option_objects:
                title=option.title
                first_name=option.first_name
                last_name=option.last_name
                options[option.id] = [title,first_name,last_name,f"{title}"]
            return JsonResponse(options)
#End


# < ------------- Shemeem -------- > Expense < ------------------------------- >
        
def Fin_expense(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')
        exp = Fin_Expense.objects.filter(Company = cmp)
        return render(request,'company/Fin_Expense.html',{'allmodules':allmodules,'com':com, 'cmp':cmp,'data':data,'expenses':exp})
    else:
       return redirect('/')

def Fin_addExpense(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')
        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        vend = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
        bnk = Fin_Banking.objects.filter(company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        custLst = Fin_Price_List.objects.filter(Company = cmp, type = 'Sales', status = 'Active')
        vendLst = Fin_Price_List.objects.filter(Company = cmp, type = 'Purchase', status = 'Active')

        # Fetching last Expnse and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted Expnse
        latest_exp = Fin_Expense.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_exp.reference_no) + 1 if latest_exp else 1

        if Fin_Expense_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Expense_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        # Finding next EXP number w r t last EXP number if exists.
        nxtEXP = ""
        lastEXP = Fin_Expense.objects.filter(Company = cmp).last()
        if lastEXP:
            expense_no = str(lastEXP.expense_no)
            numbers = []
            stri = []
            for word in expense_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            exp_num = int(num)+1

            if num[0] == '0':
                if exp_num <10:
                    nxtEXP = st+'0'+ str(exp_num)
                else:
                    nxtEXP = st+ str(exp_num)
            else:
                nxtEXP = st+ str(exp_num)
        else:
            nxtEXP = 'EXP01'

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'vendors':vend,
            'ref_no':new_number,'banks':bnk,'EXPNo':nxtEXP, 'accounts':acc, 'pTerms': trms, 'custList':custLst, 'vendList': vendLst,
        }
        return render(request,'company/Fin_Add_Expense.html',context)
    else:
       return redirect('/')

def Fin_createNewExpenseAccount(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            name = request.POST['account_name']
            type = request.POST['account_type']
            subAcc = True if request.POST['subAccountCheckBox'] == 'true' else False
            parentAcc = request.POST['parent_account'] if subAcc == True else None
            accCode = request.POST['account_code']
            bankAccNum = None
            desc = request.POST['description']
            
            createdDate = date.today()
            
            #save account and transaction if account doesn't exists already
            if Fin_Chart_Of_Account.objects.filter(Company=com, account_name__iexact=name).exists():
                res = f'<script>alert("{name} already exists, try another!");window.history.back();</script>'
                msg = f"{name} already exists, try another!"
                return JsonResponse({'status':False, 'message':msg})
            else:
                account = Fin_Chart_Of_Account(
                    Company = com,
                    LoginDetails = data,
                    account_type = type,
                    account_name = name,
                    account_code = accCode,
                    description = desc,
                    balance = 0.0,
                    balance_type = None,
                    credit_card_no = None,
                    sub_account = subAcc,
                    parent_account = parentAcc,
                    bank_account_no = bankAccNum,
                    date = createdDate,
                    create_status = 'added',
                    status = 'active'
                )
                account.save()

                #save transaction

                Fin_ChartOfAccount_History.objects.create(
                    Company = com,
                    LoginDetails = data,
                    account = account,
                    action = 'Created'
                )
                
                list= []
                account_objects = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')

                for account in account_objects:
                    
                    accounts = {
                        'id':account.id,
                        'name': account.account_name
                    }
                    list.append(accounts)

                return JsonResponse({'status':True,'accounts':list},safe=False)

        return JsonResponse({'status':False, 'message':'Something went wrong.!'})
    else:
       return redirect('/')

def Fin_checkExpenseNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        ExpNo = request.GET['ExpNum']

        # Finding next exp number w r t last exp number if exists.
        nxtEXP = ""
        lastEXP = Fin_Expense.objects.filter(Company = com).last()
        if lastEXP:
            exp_no = str(lastEXP.expense_no)
            numbers = []
            stri = []
            for word in exp_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            exp_num = int(num)+1

            if num[0] == '0':
                if exp_num <10:
                    nxtEXP = st+'0'+ str(exp_num)
                else:
                    nxtEXP = st+ str(exp_num)
            else:
                nxtEXP = st+ str(exp_num)

        PatternStr = []
        for word in ExpNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkExpenseNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Expense No. Pattern already Exists.!'})
        elif Fin_Expense.objects.filter(Company = com, expense_no__iexact = ExpNo).exists():
            return JsonResponse({'status':False, 'message':'Expense No. already Exists.!'})
        elif nxtEXP != "" and ExpNo != nxtEXP:
            return JsonResponse({'status':False, 'message':'Expense No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkExpenseNumberPattern(pattern):
    models = [Fin_Invoice, Fin_Sales_Order, Fin_Estimate, Fin_Purchase_Bill, Fin_Manual_Journal, Fin_Recurring_Invoice, Fin_Purchase_Order]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False

def Fin_createExpense(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            expType = request.POST['expense_type']
            HSN = request.POST['hsn']
            SAC = request.POST['sac']
            EXPNum = request.POST['expense_no']
            if Fin_Expense.objects.filter(Company = com, expense_no__iexact = EXPNum).exists():
                res = f'<script>alert("Expense Number `{EXPNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif expType == 'Goods' and Fin_Expense.objects.filter(Company = com, hsn_number__iexact = HSN).exists():
                res = f'<script>alert("HSN Number `{HSN}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif expType == 'Service' and Fin_Expense.objects.filter(Company = com, sac_number__iexact = SAC).exists():
                res = f'<script>alert("SAC Number `{SAC}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            vendorSupply = request.POST['source_of_supply']
            customerSupply = request.POST['place_of_supply']

            exp = Fin_Expense(
                Company = com,
                LoginDetails = com.Login_Id,
                Vendor = None if request.POST['vendorId'] == "" else Fin_Vendors.objects.get(id = request.POST['vendorId']),
                vendor_name = request.POST['vendor'],
                vendor_email = request.POST['vendorEmail'],
                vendor_address = request.POST['vendor_bill_address'],
                vendor_gst_type = request.POST['vendor_gst_type'],
                vendor_gstin = request.POST['vendor_gstin'],
                vendor_source_of_supply = vendorSupply,

                Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_name = request.POST['customer'],
                customer_email = request.POST['customerEmail'],
                customer_address = request.POST['bill_address'],
                customer_gst_type = request.POST['gst_type'],
                customer_gstin = request.POST['gstin'],
                customer_place_of_supply = customerSupply,

                reference_no = request.POST['reference_number'],
                expense_no = EXPNum,
                expense_date = request.POST['expense_date'],
                Account = None if request.POST['accountId'] == "" else Fin_Chart_Of_Account.objects.get(id = request.POST['accountId']),
                expense_account = request.POST['expense_account'],
                expense_type = expType,
                hsn_number = HSN,
                sac_number = SAC,
                tax_rate = request.POST['taxGST'] if vendorSupply == customerSupply else request.POST['taxIGST'],

                payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                amount_type = request.POST['amount_type'],
                amount = 0.0 if request.POST['amount'] == "" else float(request.POST['amount']),
                note = request.POST['note']
            )

            exp.save()

            if len(request.FILES) != 0:
                exp.file=request.FILES.get('file')
            exp.save()

            if 'Draft' in request.POST:
                exp.status = "Draft"
            elif "Save" in request.POST:
                exp.status = "Saved" 
            exp.save()

            # Save account transaction
            db = exp.amount if exp.amount_type == 'Debit' else 0.0
            cr = exp.amount if exp.amount_type == 'Credit' else 0.0

            Fin_ChartOfAccount_Transactions.objects.create(
                Company = com,
                LoginDetails = com.Login_Id,
                account = exp.Account,
                expense = exp,
                type = exp.expense_type,
                debit = db,
                credit = cr,
                date = exp.expense_date
            )

            # Update account balance
            acnt = exp.Account
            acnt.balance += float(db)
            acnt.balance += float(cr)
            acnt.save()
            
            # Save transaction
                    
            Fin_Expense_History.objects.create(
                Company = com,
                LoginDetails = data,
                Expense = exp,
                action = 'Created'
            )

            return redirect(Fin_expense)
        else:
            return redirect(Fin_addExpense)
    else:
       return redirect('/')

def Fin_viewExpense(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        exp = Fin_Expense.objects.get(id = id)
        cmt = Fin_Expense_Comments.objects.filter(Expense = exp)
        hist = Fin_Expense_History.objects.filter(Expense = exp).last()
        
        return render(request,'company/Fin_View_Expense.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'expense':exp, 'history':hist, 'comments':cmt})
    else:
       return redirect('/')

def Fin_convertExpense(request,id):
    if 's_id' in request.session:

        exp = Fin_Expense.objects.get(id = id)
        exp.status = 'Saved'
        exp.save()
        return redirect(Fin_viewExpense, id)

def Fin_addExpenseComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        exp = Fin_Expense.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Expense_Comments.objects.create(Company = com, Expense = exp, comments = cmt)
            return redirect(Fin_viewExpense, id)
        return redirect(Fin_viewExpense, id)
    return redirect('/')

def Fin_deleteExpenseComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Expense_Comments.objects.get(id = id)
        expId = cmt.Expense.id
        cmt.delete()
        return redirect(Fin_viewExpense, expId)
    
def Fin_expenseHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        exp = Fin_Expense.objects.get(id = id)
        his = Fin_Expense_History.objects.filter(Expense = exp)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_Expense_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'expense':exp})
    else:
       return redirect('/')
    
def Fin_deleteExpense(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        exp = Fin_Expense.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_Expense_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Expense_Reference.objects.get(Company = com)
            if int(exp.reference_no) > int(deleted.reference_no):
                deleted.reference_no = exp.reference_no
                deleted.save()
        else:
            Fin_Expense_Reference.objects.create(Company = com, reference_no = exp.reference_no, LoginDetails = com.Login_Id)
        
        exp.delete()
        return redirect(Fin_expense)

def Fin_attachExpenseFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        exp = Fin_Expense.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            exp.file = request.FILES.get('file')
            exp.save()

        return redirect(Fin_viewExpense, id)
    else:
        return redirect('/')

def Fin_expensePdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        exp = Fin_Expense.objects.get(id = id)
    
        context = {'expense':exp, 'cmp':com}
        
        template_path = 'company/Fin_Expense_Pdf.html'
        fname = 'Expense_'+exp.expense_no
        # return render(request, 'company/Fin_Expense_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareExpenseToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        exp = Fin_Expense.objects.get(id = id)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'expense':exp, 'cmp':com}
                template_path = 'company/Fin_Expense_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Expense_{exp.expense_no}'
                subject = f"Expense_{exp.expense_no}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Expense for - #-{exp.expense_no}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Expense details has been shared via email successfully..!')
                return redirect(Fin_viewExpense,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewExpense, id)

def Fin_editExpense(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')
        exp = Fin_Expense.objects.get(id = id)

        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        vend = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
        bnk = Fin_Banking.objects.filter(company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        custLst = Fin_Price_List.objects.filter(Company = cmp, type = 'Sales', status = 'Active')
        vendLst = Fin_Price_List.objects.filter(Company = cmp, type = 'Purchase', status = 'Active')

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'expense':exp, 'customers':cust, 'pTerms':trms,'custList':custLst, 'vendList': vendLst,
            'banks':bnk, 'accounts':acc, 'vendors':vend
        }
        return render(request,'company/Fin_Edit_Expense.html',context)
    else:
       return redirect('/')

def Fin_updateExpense(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            expType = request.POST['expense_type']
            HSN = request.POST['hsn']
            SAC = request.POST['sac']
            exp = Fin_Expense.objects.get(id = id)
            EXPNum = request.POST['expense_no']
            if exp.expense_no != EXPNum and Fin_Expense.objects.filter(Company = com, expense_no__iexact = EXPNum).exists():
                res = f'<script>alert("Expense Number `{EXPNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif exp.hsn_number != HSN and expType == 'Goods' and Fin_Expense.objects.filter(Company = com, hsn_number__iexact = HSN).exists():
                res = f'<script>alert("HSN Number `{HSN}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)
            elif exp.sac_number != SAC and expType == 'Service' and Fin_Expense.objects.filter(Company = com, sac_number__iexact = SAC).exists():
                res = f'<script>alert("SAC Number `{SAC}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            vendorSupply = request.POST['source_of_supply']
            customerSupply = request.POST['place_of_supply']

            exp.Vendor = None if request.POST['vendorId'] == "" else Fin_Vendors.objects.get(id = request.POST['vendorId'])
            exp.vendor_name = request.POST['vendor']
            exp.vendor_email = request.POST['vendorEmail']
            exp.vendor_address = request.POST['vendor_bill_address']
            exp.vendor_gst_type = request.POST['vendor_gst_type']
            exp.vendor_gstin = request.POST['vendor_gstin']
            exp.vendor_source_of_supply = vendorSupply

            exp.Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId'])
            exp.customer_name = request.POST['customer']
            exp.customer_email = request.POST['customerEmail']
            exp.customer_address = request.POST['bill_address']
            exp.customer_gst_type = request.POST['gst_type']
            exp.customer_gstin = request.POST['gstin']
            exp.customer_place_of_supply = customerSupply

            exp.reference_no = request.POST['reference_number']
            exp.expense_no = EXPNum
            exp.expense_date = request.POST['expense_date']
            exp.Account = None if request.POST['accountId'] == "" else Fin_Chart_Of_Account.objects.get(id = request.POST['accountId'])
            exp.expense_account = request.POST['expense_account']
            exp.expense_type = expType
            exp.hsn_number = HSN
            exp.sac_number = SAC
            exp.tax_rate = request.POST['taxGST'] if vendorSupply == customerSupply else request.POST['taxIGST']

            exp.payment_method = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            exp.cheque_no = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            exp.upi_no = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            exp.bank_acc_no = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            exp.amount_type = request.POST['amount_type']
            exp.amount = 0.0 if request.POST['amount'] == "" else float(request.POST['amount'])
            exp.note = request.POST['note']

            if len(request.FILES) != 0:
                exp.file=request.FILES.get('file')

            exp.save()

            # Update account transaction
            db = exp.amount if exp.amount_type == 'Debit' else 0.0
            cr = exp.amount if exp.amount_type == 'Credit' else 0.0

            try:
                Fin_ChartOfAccount_Transactions.objects.filter(expense = exp).update(
                    account = exp.Account,
                    type = exp.expense_type,
                    debit = db,
                    credit = cr,
                    date = exp.expense_date
                )
            except:
                pass

            # Update account balance
            bal = 0
            for i in Fin_ChartOfAccount_Transactions.objects.filter(account = exp.Account):
                bal += float(i.debit)
                bal -= float(abs(i.credit))
            
            acnt = exp.Account
            acnt.balance = bal
            acnt.save()

            # Save transaction
                    
            Fin_Expense_History.objects.create(
                Company = com,
                LoginDetails = data,
                Expense = exp,
                action = 'Edited'
            )

            return redirect(Fin_viewExpense, id)
        else:
            return redirect(Fin_editExpense, id)
    else:
       return redirect('/')

def Fin_checkExpenseHSN(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        hsnNo = request.GET['hsn']
        print(hsnNo)

        if hsnNo != "" and Fin_Expense.objects.filter(Company = com, hsn_number__iexact = hsnNo).exists():
            return JsonResponse({'status':True, 'is_exists':True, 'message':'HSN Number already exists.!'})
        else:
            return JsonResponse({'status':True, 'is_exists':False, 'message':''})
    else:
       return redirect('/')

def Fin_checkExpenseSAC(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        sacNo = request.GET['sac']

        if sacNo != "" and Fin_Expense.objects.filter(Company = com, sac_number__iexact = sacNo).exists():
            return JsonResponse({'status':True, 'is_exists':True, 'message':'SAC Number already exists.!'})
        else:
            return JsonResponse({'status':True, 'is_exists':False, 'message':''})
    else:
       return redirect('/')
# End

def Fin_getItems2(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        items = {}
        option_objects = Fin_Items.objects.filter(Company = com, status='Active')
        for option in option_objects:
            items[option.name] = [option.name]

        return JsonResponse(items)
    else:
        return redirect('/')
        
        
def Fin_getInvItemDetails2(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        itemName = request.GET['item']
        print(itemName)
        # priceListId = request.GET['listId']
        item = Fin_Items.objects.get(Company = com, name = itemName)

        # if priceListId != "":
        #     priceList = Fin_Price_List.objects.get(id = int(priceListId))

        #     if priceList.item_rate == 'Customized individual rate':
        #         try:
        #             priceListPrice = float(Fin_PriceList_Items.objects.get(Company = com, list = priceList, item = item).custom_rate)
        #         except:
        #             priceListPrice = item.selling_price
        #     else:
        #         mark = priceList.up_or_down
        #         percentage = float(priceList.percentage)
        #         roundOff = priceList.round_off

        #         if mark == 'Markup':
        #             price = float(item.selling_price) + float((item.selling_price) * (percentage/100))
        #         else:
        #             price = float(item.selling_price) - float((item.selling_price) * (percentage/100))

        #         if priceList.round_off != 'Never mind':
        #             if roundOff == 'Nearest whole number':
        #                 finalPrice = round(price)
        #             else:
        #                 finalPrice = int(price) + float(roundOff)
        #         else:
        #             finalPrice = price

        #         priceListPrice = finalPrice
        # else:
        #     priceListPrice = None

        context = {
            'status':True,
            'id': item.id,
            'hsn':item.hsn,
            'sac':item.sac,
            'item_type':item.item_type,
            'sales_rate':item.selling_price,
            'purchase_rate':item.purchase_price,
            'avl':item.current_stock,
            'tax': True if item.tax_reference == 'taxable' else False,
            'gst':item.intra_state_tax,
            'igst':item.inter_state_tax,
            # 'PLPrice':priceListPrice,

        }
        return JsonResponse(context)
    else:
       return redirect('/')
       
       
def fin_employee_save_atndnce_EDIT(request,mn,yr,pk):

    if request.method == 'POST':

        title = request.POST['Title']
        firstname = request.POST['First_Name'].capitalize()
        lastname = request.POST['Last_Name'].capitalize()
        image = request.FILES.get('Image', None)
        if image:
            image = request.FILES['Image']
        else:
            image = ''
        alias = request.POST['Alias']
        joiningdate = request.POST['Joining_Date']
        salarydate = request.POST['Salary_Date']
        salary_type = request.POST['Salary_Type']

        amountperhour = request.POST['perhour']
        if amountperhour == '' or amountperhour == '0':
            amountperhour = 0
        else:
            amountperhour = request.POST['perhour']

        workinghour = request.POST['workhour']
        if workinghour == '' or workinghour == '0':
            workinghour = 0
        else:
            workinghour = request.POST['workhour']

        salaryamount = request.POST['Salary_Amount']
        if request.POST['Salary_Amount'] == '':
            salaryamount = None
        else:
            salaryamount = request.POST['Salary_Amount']

        employeenumber = request.POST['Employee_Number']
        designation = request.POST['Designation']
        location = request.POST['Location']
        gender = request.POST['Gender']
        dob = request.POST['DOB']
        blood = request.POST['Blood']
        contact = request.POST['Contact_Number']
        emergencycontact = request.POST['Emergency_Contact']
        email = request.POST['Email']
        parent = request.POST['Parent'].capitalize()
        spouse = request.POST['Spouse'].capitalize()
        file = request.FILES.get('File', None)
        if file:
            file = request.FILES['File']
        else:
            file=''
        street = request.POST['street']
        city = request.POST['city']
        state = request.POST['state']
        pincode = request.POST['pincode']
        country = request.POST['country']
        tempStreet = request.POST['tempStreet']
        tempCity = request.POST['tempCity']
        tempState = request.POST['tempState']
        tempPincode = request.POST['tempPincode']
        tempCountry = request.POST['tempCountry']
        
        bankdetails = request.POST['Bank_Details']
        if bankdetails == "Yes":
            accoutnumber = request.POST['Account_Number']
            ifsc = request.POST['IFSC']
            bankname = request.POST['BankName']
            branchname = request.POST['BranchName']
            transactiontype = request.POST['Transaction_Type']
        else:
            accoutnumber = ''
            ifsc = ''
            bankname = ''
            branchname = ''
            transactiontype = ''

        if request.POST['tds_applicable'] == 'Yes':
            tdsapplicable = request.POST['tds_applicable']
            tdstype = request.POST['TDS_Type']
            
            if tdstype == 'Amount':
                tdsvalue = request.POST['TDS_Amount']
            elif tdstype == 'Percentage':
                tdsvalue = request.POST['TDS_Percentage']
            else:
                tdsvalue = 0
        elif request.POST['tds_applicable'] == 'No':
            tdsvalue = 0
            tdstype = ''
            tdsapplicable = request.POST['tds_applicable']
        else:
            tdsvalue = 0
            tdstype = ''
            tdsapplicable = ''

        incometax = request.POST['Income_Tax']
        aadhar = request.POST['Aadhar']
        uan = request.POST['UAN']
        pf = request.POST['PF']
        pan = request.POST['PAN']
        pr = request.POST['PR']

        if dob == '':
            age = 2
        else:
            dob2 = date.fromisoformat(dob)
            today = date.today()
            age = int(today.year - dob2.year - ((today.month, today.day) < (dob2.month, dob2.day)))
        
        sid = request.session['s_id']
        employee = Fin_Login_Details.objects.get(id=sid)
        
        if employee.User_Type == 'Company':
            companykey =  Fin_Company_Details.objects.get(Login_Id_id=sid)
        elif employee.User_Type == 'Staff':
            staffkey = Fin_Staff_Details.objects.get(Login_Id=sid)
            companykey = Fin_Company_Details.objects.get(id=staffkey.company_id_id)
        else:
            distributorkey = Fin_Distributors_Details.objects.get(login_Id=sid)
            companykey = Fin_Company_Details.objects.get(id=distributorkey.company_id_id)

        
        if Employee.objects.filter(employee_mail=email,mobile = contact,employee_number=employeenumber,company_id = companykey.id).exists():
            messages.error(request,'user exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif Employee.objects.filter(mobile = contact,company_id = companykey.id).exists():
            messages.error(request,'phone number exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif Employee.objects.filter(emergency_contact = emergencycontact,company_id = companykey.id).exists():
            messages.error(request,'emergency phone number exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif Employee.objects.filter(employee_mail=email,company_id = companykey.id).exists():
            messages.error(request,'email exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif Employee.objects.filter(employee_number=employeenumber,company_id = companykey.id).exists():
            messages.error(request,'employee id exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif incometax != '' and Employee.objects.filter(income_tax_number = incometax,company_id = companykey.id).exists():
            messages.error(request,'Income Tax Number exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif pf != '' and Employee.objects.filter(pf_account_number = pf,company_id = companykey.id).exists():
            messages.error(request,'PF account number exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif aadhar != '' and Employee.objects.filter(aadhar_number = aadhar,company_id = companykey.id).exists():
            messages.error(request,'Aadhar number exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif pan != '' and Employee.objects.filter(pan_number = pan,company_id = companykey.id).exists():
            messages.error(request,'PAN number exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif uan != '' and Employee.objects.filter(universal_account_number = uan,company_id = companykey.id).exists():
            messages.error(request,'Universal account number exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif pr != '' and Employee.objects.filter(pr_account_number = pr,company_id = companykey.id).exists():
            messages.error(request,'PR account number exist')
            return redirect('Fin_editAttendance',mn,yr,pk)
        
        elif bankdetails.lower() == 'yes':
            if accoutnumber != '' and Employee.objects.filter(account_number=accoutnumber,company_id = companykey.id).exists():
                messages.error(request,'Bank account number already exist')
                return redirect('Fin_editAttendance',mn,yr,pk)
            
            else:
                if employee.User_Type == 'Company':
                    

                    new = Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                            employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                            employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                            employee_status = 'Active' ,company_id = companykey.id,login_id=sid,salary_amount = salaryamount ,
                            amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                            age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                            emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                            ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                            tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                            income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                            pr_account_number = pr,upload_file = file,employee_salary_type =salary_type,salary_effective_from=salarydate,
                            city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                            temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                    new.save()

                    history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                    history.save()
            
                elif employee.User_Type == 'Staff':
                    

                    new =  Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                                employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                                employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                                employee_salary_type = salary_type,employee_status = 'Active' ,company_id = companykey.id,login_id=sid ,
                                amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                                age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                                emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                                ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                                tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                                income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                                pr_account_number = pr,upload_file = file,salary_amount = salaryamount,salary_effective_from=salarydate,
                                city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                                temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                    
                    new.save()

                    history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                    history.save()
        
        else:
            if employee.User_Type == 'Company':
                

                new = Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                        employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                        employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                        employee_status = 'Active' ,company_id = companykey.id,login_id=sid,salary_amount = salaryamount ,
                        amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                        age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                        emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                        ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                        tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                        income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                        pr_account_number = pr,upload_file = file,employee_salary_type =salary_type,salary_effective_from=salarydate,
                        city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                        temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                new.save()

                history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                history.save()
        
            elif employee.User_Type == 'Staff':
                

                new =  Employee(upload_image=image,title = title,first_name = firstname,last_name = lastname,alias = alias,
                            employee_mail = email,employee_number = employeenumber,employee_designation = designation,
                            employee_current_location = location,mobile = contact,date_of_joining = joiningdate,
                            employee_salary_type = salary_type,employee_status = 'Active' ,company_id = companykey.id,login_id=sid ,
                            amount_per_hour = amountperhour ,total_working_hours = workinghour,gender = gender ,date_of_birth = dob ,
                            age = age,blood_group = blood,fathers_name_mothers_name = parent,spouse_name = spouse,
                            emergency_contact = emergencycontact,provide_bank_details = bankdetails,account_number = accoutnumber,
                            ifsc = ifsc,name_of_bank = bankname,branch_name = branchname,bank_transaction_type = transactiontype,
                            tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue,pan_number = pan,
                            income_tax_number = incometax,aadhar_number = aadhar,universal_account_number = uan,pf_account_number = pf,
                            pr_account_number = pr,upload_file = file,salary_amount = salaryamount,salary_effective_from=salarydate,
                            city=city,street=street,state=state,country=country,pincode=pincode,temporary_city=tempCity,
                            temporary_street=tempStreet,temporary_state=tempState,temporary_pincode=tempPincode,temporary_country=tempCountry)
                
                new.save()

                history = Employee_History(company_id = companykey.id,login_id=sid,employee_id = new.id,date = date.today(),action = 'Created')
                history.save()

        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
            employee = Employee.objects.filter(company_id=com.id)
            
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
            employee = Employee.objects.filter(company_id=com.company_id_id)
        return redirect('Fin_editAttendance',mn,yr,pk)
        
        
###Loan Account by haripriya####

def loan_ac_listoutpage(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        print("  listout page")
        print(s_id)

        login_det = Fin_Login_Details.objects.get(id = s_id) 
        print(login_det)

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

            all_bankings = Fin_BankHolder.objects.filter(Company = com)
            loan = loan_account.objects.filter(company = com)
            print(loan)
            print(com)
            print(all_bankings)
            print("company listout page")
            
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            

            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')

            all_bankings = Fin_BankHolder.objects.filter(Company = com.company_id)
            loan = loan_account.objects.filter(company = com.company_id)
            print("staff listoutpage")
            print(loan)
            print(com)
            print(all_bankings)


        context = {
            'data':login_det,
            'com':com,
            'allmodules':allmodules,
            'all_bankings':all_bankings,
            'loan':loan
        }
        return render(request,'company/loan_account/loan_account_list.html',context)
    else:
       return redirect('/')


def loan_create_page(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        print("enter to create page")
        print(s_id)

        loginn = Fin_Login_Details.objects.get(id = s_id)
        
        print(loginn)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = loginn)
            allmodules = Fin_Modules_List.objects.get(company_id = com, status = 'New')
            loan = loan_account.objects.filter(company=com)
            bank_holder =Fin_BankHolder.objects.filter(Company=com)
            bank=Fin_Banking.objects.filter(company=com)
            bank_names = Fin_Banking.objects.filter(company=com).values_list('bank_name', flat=True).distinct()
            history = Fin_loanAccountHistory.objects.filter(Company=com)
            current_date = date.today().strftime('%Y-%m-%d')
            print("company details")
            print(com)
            print(loan)
            

        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = loginn)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id, status = 'New')
            loan = loan_account.objects.filter(company=com.company_id)
            bank_holder =Fin_BankHolder.objects.filter(Company=com.company_id)
            bank=Fin_Banking.objects.filter(company=com.company_id)
            bank_names = Fin_Banking.objects.filter(company=com.company_id).values_list('bank_name', flat=True).distinct()
            history = Fin_loanAccountHistory.objects.filter(Company=com.company_id)
            current_date = date.today().strftime('%Y-%m-%d')
            print("Staff details")
            print(com)
            print(loan)
        return render(request,'company/loan_account/loan_Create_Page.html',{'allmodules':allmodules,'com':com,'data':loginn,'bank_holder':bank_holder,'bank':bank,'current_date':current_date,'history':history,'bank_names':bank_names})


def loan_bankdata(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = login)
        customer= request.GET.get('id')
        cust = Fin_Banking.objects.get(bank_name=customer,company_id=com)
        data7 = {'acc': cust.account_number,'name':cust.bank_name}
        return JsonResponse(data7)

      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = login)
        customer = request.GET.get('id')
        cust = Fin_Banking.objects.get(bank_name=customer,company_id=staf.company_id)
        data7 = {'acc': cust.account_number,'name':cust.bank_name}
        return JsonResponse(data7)



def create_loan_ac(request):
    if request.method == 'POST':
        s_id = request.session['s_id']
        print("value saving create page")
        print(s_id)
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = data)
            print("company details")
            print(com)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = data).company_id
            print("staff details")
            print(com)
    
        account_name = request.POST.get('acc_name')
        account_number = request.POST.get('acc_number')
        lenderbank = request.POST.get('lender')
        received_bank = request.POST.get('recieved')
        interest = request.POST.get('intrest',0)
        term = request.POST.get('term')
        loan_amount = int(request.POST.get('balance'))
        processing_value = request.POST.get('processing', '0')
        processing = int(processing_value) if processing_value.isdigit() else 0
        paid = request.POST.get('paid')

        recieved_cheque_id = request.POST.get('recieved_cheque_id')
        recieved_upi_id = request.POST.get('recieved_upi_id')
        recieved_bnk_id = request.POST.get('recieved_bnk_id')
        paid_cheque_id = request.POST.get('paid_cheque_id')
        paid_bnk_id = request.POST.get('paid_bnk_id')
        paid_upi_id = request.POST.get('paid_upi_id')


        status = "Active"
        desc = request.POST.get('desc','')
        date = request.POST.get('date')
        balance = loan_amount 
        recieved_amount = loan_amount -processing
        if received_bank == 'cash':
            received_bankname = 'cash'
            
        elif received_bank == 'upi':
            received_bankname = 'upi'
        elif received_bank == 'cheque':
            received_bankname = 'cheque'
        else:
            received = Fin_Banking.objects.get(company=com,bank_name=received_bank)
            received_bankname = received.bank_name
            received.opening_balance += balance
            received.save()
        
        if paid == 'cash':
            processing_bankname = 'cash'
            
        elif paid == 'upi':
            processing_bankname = 'upi'
        elif paid == 'cheque':
            processing_bankname = 'cheque'
        else:
            processing_bank = Fin_Banking.objects.get(company=com,bank_name=paid)
            processing_bankname = processing_bank.bank_name
            processing_bank.opening_balance -= processing
            processing_bank.save()
        

        loan = loan_account(
                account_name=account_name,
                account_number=account_number,
                lenderbank=lenderbank,
                recieced_bank=received_bankname,
                intrest=interest,
                term=term,
                loan_amount=loan_amount,
                processing=processing,
                paid=processing_bankname,
                status=status,
                desc=desc,
               
                balance=balance,
                date=date,
                recieved_amount=recieved_amount,
                paid_cheque =  paid_cheque_id,
                paid_upi = paid_upi_id,
                paid_bank_acc_number = paid_bnk_id,

                recieved_cheque = recieved_cheque_id,
                recieved_upi = recieved_upi_id,
                bank_acc_number = recieved_bnk_id,
                company=com,
                login_details = data
                
            )
        loan.save()
        his = Fin_loanAccountHistory.objects.create(
                      
                        Company=com ,
                        LoginDetails=data,
                        loan_ac=loan,
                        date=timezone.now(),
                        action='Created'
                    )   
        his.save()

        l_id = loan_account.objects.get(id=loan.id)
        if paid == 'cash':
            # Create transaction records
            trans = loan_transaction(
                bank_type='OPENING BAL',
                from_trans=lenderbank,
                to_trans=received_bankname,
                loan_desc=desc,
                type='LOAN APPROVED',
                company=com,
                login_details = data,
                loan_amount=loan_amount,
                loan_date=date,
                loan=l_id,
                total =loan_amount,
                balance=loan_amount,


           
            )
            trans.save()
            his = Fin_LoanTransactionHistory.objects.create(
                login_details= data,
                company=com,
                transaction=trans,
              
                loan_ac=loan,
                action='Created'


            )
            
            his.save()
        
        
            transaction = loan_transaction(
                bank_type='PROCESSING FEE',
                from_trans=lenderbank,
                to_trans=received_bankname,
                company=com,
                login_details = data,
                loan_desc=desc,
                type='LOAN ADJ',
                loan_amount=processing,
                loan_date=date,
                loan=l_id,
                total =processing,
                balance=loan_amount,
                
            )
            transaction.save()
            # his = Fin_LoanTransactionHistory.objects.create(
            #     login_details= data,
            #     company=com,
            #     loan_transaction=transaction,
            #     date=timezone.now(),
            #     loan_ac=loan,
            #     action='Created'


            # )
            # his.save()
        else:
            trans = loan_transaction(
                bank_type='OPENING BAL',
                from_trans=lenderbank,
                to_trans=received_bankname,
                loan_desc=desc,
                type='LOAN APPROVED',
                company=com,
                login_details = data,
                loan_amount=loan_amount,
                loan_date=date,
                loan=l_id,
                total =loan_amount,
                balance=loan_amount,
            )
            trans.save()

            # his = Fin_LoanTransactionHistory.objects.create(
            #     login_details= data,
            #     company=com,
            #     loan_transaction=trans,
            #     date=timezone.now(),
            #     loan_ac=loan,
            #     action='Created'
            
            # )
            # his.save()
        
        
        
            transaction = loan_transaction(
                bank_type='PROCESSING FEE',
                from_trans=lenderbank,
                to_trans=received_bankname,
                company=com,
                login_details = data,
                loan_desc=desc,
                type='LOAN ADJ',
                loan_amount=processing,
                loan_date=date,
                loan=l_id,
                total =processing,
                 balance=loan_amount,
                
            )
            transaction.save()

            his = Fin_LoanTransactionHistory.objects.create(
                login_details= data,
                company=com,
                transaction=transaction,
                loan_ac=loan,
           
                action='Created'
            
            )
            his.save()
            
             
        print('DONE')

    return redirect('loan_ac_listoutpage')
       


def loan_check(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = data)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = data).company_id
    pan_number = request.GET.get('emp', None)
    print(pan_number)
    data = {
        'is_tak': loan_account.objects.filter(company=com, account_name=pan_number).exists()
        
    }
    print(data)
    if data['is_tak']:
        data['error_message'] = 'Loan Account  already exists.'

    return JsonResponse(data)
        

def loan_list(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        loginn = Fin_Login_Details.objects.get(id = s_id) 
        global loan_id_global
        if loginn.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id = s_id)
            company=cmp
            allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')
            
            loan_id_global = id
            loan=loan_account.objects.get(id=id)
            loan_tr=loan_transaction.objects.filter(loan_id=id)
            bnk_name = loan.account_name
            last_transaction = loan_tr.last()
            balance=last_transaction.balance
            hist = Fin_loanAccountHistory.objects.filter(loan_ac=loan,Company=company)
            latest_item_id=Fin_LoanTransactionHistory.objects.filter(loan_ac=loan,company=company)
            history = Fin_loanAccountHistory.objects.filter(loan_ac=loan,Company=company).last()
            
            bnk_acc = Fin_BankHolder.objects.get(Holder_name=bnk_name,Company=company)
            try:
                created = Fin_loanAccountHistory.objects.get(loan_ac = loan, action = 'Created')
            except:
                created = None
            print(bnk_name)
            print(loan)
        elif loginn.User_Type == 'Staff':
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id)
            company=cmp.company_id
             

            allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')
         
            loan_id_global = id
            loan=loan_account.objects.get(id=id)
            loan_tr=loan_transaction.objects.filter(loan_id=id)
            bnk_name = loan.account_name
            last_transaction = loan_tr.last()
            balance=last_transaction.balance
            hist = Fin_loanAccountHistory.objects.filter(loan_ac=loan,Company=company)
            history = Fin_loanAccountHistory.objects.filter(loan_ac=loan,Company=company).last()
            latest_item_id=Fin_LoanTransactionHistory.objects.filter(loan_ac=loan,company=company)
            
            bnk_acc = Fin_BankHolder.objects.get(Holder_name=bnk_name,Company=company)
            try:
                created = Fin_loanAccountHistory.objects.get(loan_ac = loan, action = 'Created')
            except:
                created = None
            print(bnk_name)
            print(loan)
        context={
                
                'loan':loan,
                
                'data':loginn,
                'loan_tr':loan_tr,
                'loan_id_global':loan_id_global,
                'bnk_acc':bnk_acc,
                'allmodules':allmodules,
                'cmp':company,
                'com':cmp,
                'hist':hist,
                'latest_item_id':latest_item_id,
                'balance':balance,
                'history':history,
                'state':'0'

                
        }
        return render(request,'company/loan_account/loan_account_view.html',context)


def loan_lists_edit(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        loginn = Fin_Login_Details.objects.get(id = s_id) 
        global loan_id_global
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = loginn)
        
            allmodules = Fin_Modules_List.objects.get(company_id =com,status = 'New')
        
            loan_id_global = id
            loan=loan_account.objects.get(id=id)
            loan_tr=loan_transaction.objects.filter(loan=id)
            bnk_name = loan.account_name
            hist = Fin_loanAccountHistory.objects.filter(loan_ac = loan).last()
            bnk_acc = Fin_BankHolder.objects.get(Holder_name=bnk_name,Company=com)
        
            try:
                created = Fin_loanAccountHistory.objects.get(loan_ac = loan, action = 'Created')
            except:
                created = None
            print(bnk_name)
            print(loan)
        elif loginn.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = loginn)
            

            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            
            loan_id_global = id
            loan=loan_account.objects.get(id=id)
            loan_tr=loan_transaction.objects.filter(loan=id)
            bnk_name = loan.account_name
            hist = Fin_loanAccountHistory.objects.filter(loan_ac = loan).last()
            bnk_acc = Fin_BankHolder.objects.get(Holder_name=bnk_name,Company=com.company_id)
        
            try:
                created = Fin_loanAccountHistory.objects.get(loan_ac = loan, action = 'Created')
            except:
                created = None
            print(bnk_name)
            print(loan)
        context={
                
                'loan':loan,
                
                'data':loginn,
                'loan_tr':loan_tr,
                'loan_id_global':loan_id_global,
                'bnk_acc':bnk_acc,
                'allmodules':allmodules,
                'com':com,
                'history':hist,
                
                'state':'1'

                
        }
        return render(request,'company/loan_account/loan_account_view.html',context)


def active_status(request,id):
    loan=loan_account.objects.get(id=id)
    loan.status = 'Active'
    loan.save()
    return redirect('loan_lists_edit',id)
    
    
def inactive_status(request,id):
    loan=loan_account.objects.get(id=id)
    loan.status = 'Inactive'
    loan.save()
    return redirect('loan_lists_edit',id)



def loanaccont_trans(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 
        global loan_id_global
        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')
        
            loan_id_global = id
        
            bank=Fin_Banking.objects.filter(company=com)
            current_date = date.today().strftime('%Y-%m-%d')

        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            

            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            
            loan_id_global = id
        
            bank=Fin_Banking.objects.filter(company=com.company_id)
            current_date = date.today().strftime('%Y-%m-%d')

        context={
        
            'bank':bank, 
            'loan_id_global':loan_id_global, 
            'current_date':current_date,
            'allmodules':allmodules,
            'com':com,
            'data':login_det,
        }
        return render(request,'company/loan_account/loan_account_repayment.html',context)
    

def create_loanac_trans(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')
    
    
        if request.method == 'POST':
            principal = int(request.POST.get('principal'))
            date = request.POST.get('date')
            intrest = request.POST.get('interest',0)
            total = int(request.POST.get('total'))
            received_from = request.POST.get('recieved')
            received_from_upi = request.POST.get('paid_upi_id')
            received_from_cheque = request.POST.get('paid_cheque_id')
            received_from_bank_acc = request.POST.get('paid_bnk_id')

            print(id)
            # Fetch the loan account
            loan = loan_account.objects.get(id=id)
            print(loan.lenderbank)
            if received_from == 'cash':
                loan.balance -= principal
                loan.save()
               
            elif received_from == 'upi':
                loan.balance -= principal
                loan.save()
                
            elif received_from == 'cheque':
                # Deduct from company's cash balance
                loan.balance -= principal
                loan.save()
            else:
                # Deduct from the selected bank's balance
                received_bank = Fin_Banking.objects.get(id=received_from)
                received_bank.opening_balance -= principal
                received_bank.save()
                loan.balance -= principal
                loan.save()
                
                # Create a transaction record
            transaction = loan_transaction(
                bank_type='EMI PAID',
                from_trans=received_from if received_from != 'CASH' else 'cash',
                to_trans=loan.lenderbank,
             
                loan_desc=received_from if received_from != 'cash' else loan.lenderbank,
                type='LOAN ADJ',
                loan_amount=principal,
                loan_intrest=intrest,
                loan_date=date,
                loan_id=loan.id,
                balance=loan.balance,
                total = total,
                recieved_cheque=received_from_cheque,
                recieved_upi=received_from_upi,
                bank_acc_number=received_from_bank_acc,
                recieved_bank=received_from,
                company=company,
                login_details=login_det
            
            )
            transaction.save()
            his = Fin_LoanTransactionHistory.objects.create(
                login_details= login_det,
                company=company,
                transaction=transaction,
               
                loan_ac=loan,
                action='Created'


            )
            
            his.save()

        return redirect('loan_list',id)


def additional_loan_approve(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
           
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

            loan=loan_account.objects.get(id=id)
            current_date = date.today().strftime('%Y-%m-%d')
            bank=Fin_Banking.objects.filter(company=com)
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            

            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')

            loan=loan_account.objects.get(id=id)
            current_date = date.today().strftime('%Y-%m-%d')
            bank=Fin_Banking.objects.filter(company=com.company_id)

        context={
            'loan':loan,
            'current_date':current_date,
            'bank':bank,
            'com':com,
            'data':login_det,
            'allmodules':allmodules

        }
        return render(request,'company/loan_account/additional_loanaccount.html',context)


def additional_loan_transaction(request , id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')
    
        employ = loan_account.objects.get(id=id)
        print(employ)
    
    
        if request.method == 'POST':
            principal = int(request.POST.get('remain_loan'))
            date = request.POST.get('adjdate')
            new_loan = int(request.POST.get('new'))
            total = request.POST.get('amount')
            
            cheque_id = request.POST['cheque_id'] 
            upi_id = request.POST['upi_id'] 
            bnk_id = request.POST['bnk_id'] 
            payment_method = request.POST['payment_method']
            print(payment_method)
            lt=loan_transaction(from_trans=employ.lenderbank,to_trans=employ.recieced_bank,company=company,login_details=login_det,bank_type='ADDITIONAL LOAN ISSUED',loan_amount=new_loan,total=new_loan,
            balance = total,loan_date=date,loan_intrest=0,recieved_upi=upi_id,recieved_cheque=cheque_id,type=payment_method, recieved_bank=payment_method,bank_acc_number= bnk_id,loan=employ)
            lt.save()
            his = Fin_LoanTransactionHistory.objects.create(
                login_details= login_det,
                company=company,
                transaction=lt,
           
                loan_ac=employ,
                action='Created'


            )
            
            his.save()

            employ.balance = total
            res = int(employ.loan_amount) + new_loan
            employ.loan_amount = res
            print(total)
            print(principal)
            print(res)
            employ.save()
            
        return redirect('loan_list',id)


def edit_loan_ac_repayment(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')
            loan_tr = loan_transaction.objects.get(id=id)
        
            bank=Fin_Banking.objects.filter(company=com)
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            

            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            loan_tr = loan_transaction.objects.get(id=id)
        
            bank=Fin_Banking.objects.filter(company=com.company_id)
        return render(request,'company/loan_account/edit_loacac_repayment.html',{'loan_tr':loan_tr,'com':com,'bank':bank,'allmodules':allmodules,'data':login_det})


def save_edit_loan_repayment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')
        loan = loan_transaction.objects.get(id=id)
        bal=loan.balance
        l=loan.loan_id
        ac=loan_account.objects.get(id=l)
        loan_id=loan.loan
        print('ffff'+' '+str(ac.id))
        print(ac.balance)
        if request.method == 'POST':
            principal = int(request.POST.get('principal'))
            date = request.POST.get('date')
            intrest = request.POST.get('interest')
            total = int(request.POST.get('total'))
            received_from = request.POST.get('recieved')
            principal = request.POST.get('principal')

            paid_cheque_id = request.POST.get('paid_cheque_id')
            paid_upi_id = request.POST.get('paid_upi_id')
            paid_bnk_id = request.POST.get('paid_bnk_id')

            bank = Fin_Banking.objects.filter(company=company)

           
            loan.loan_amount = principal
            loan.loan_date = date
            loan.loan_intrest = intrest
            loan.recieved_bank = received_from
            loan.total = total
            loan.recieved_cheque=paid_cheque_id
            loan.recieved_upi=paid_upi_id
            loan.bank_acc_number=paid_bnk_id
           
            loan.save()
            trans2 = Fin_LoanTransactionHistory(company =company ,login_details=login_det,transaction=loan,loan_ac=ac,action='Edited')
            trans2.save()
            loan_trans = loan_transaction.objects.filter(company=company,loan=ac.id)
            print(loan_trans)
            


            for i in loan_trans:
                    total_balance =ac.balance
                    print('balance '+ str(total_balance) )
                    if i.bank_type=='OPENING BAL':
                        res = ac.balance = i.loan_amount
                    elif i.bank_type == 'EMI PAID':
                        res = ac.balance - i.loan_amount
                        print('true')
                    elif i.bank_type == 'ADDITIONAL LOAN ISSUED':
                        print('false')
                        res = ac.balance + i.loan_amount
                    i.balance  = res
                    i.save()
                    ac.balance = res
                    ac.save()

                    print('done+edited')
            

            return redirect('loan_list',ac.id)  # Redirect to the appropriate URL after editing

        return render(request, 'company/loan_account/edit_loacac_repayment.html', {'loan': loan})


def delete_loanac_payment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')
        
        dl_loan = get_object_or_404(loan_transaction, id=id) 
        print(dl_loan) # Use get_object_or_404 to handle exceptions
        from_trans = dl_loan.from_trans
        to_trans = dl_loan.to_trans
        amount = dl_loan.loan_amount
        total_amount = dl_loan.total
        print(dl_loan.from_trans)
        dl_acc = loan_account.objects.get(id=dl_loan.loan_id)
        dl_loan.save()
        # Update company cash and bank balances
        loan_trans = loan_transaction.objects.filter(company=company,loan=dl_acc)
        print(loan_trans)
        dl_loan.delete()    
        


        for i in loan_trans:
                    total_balance =dl_acc.balance
                    print('balance '+ str(total_balance) )
                    if i.bank_type=='OPENING BAL':
                        res = dl_acc.balance = i.loan_amount
                        rest = dl_acc.loan_amount = i.loan_amount
                        print('open')
                        print(res)
                    elif i.bank_type == 'EMI PAID':
                        res = dl_acc.balance - i.loan_amount
                        
                        print('true')
                        print(res)

                    elif i.bank_type == 'ADDITIONAL LOAN ISSUED':
                        print('false')
                        

                        res = dl_acc.balance + i.loan_amount
                        rest= dl_acc.loan_amount - i.loan_amount
                        print(res)
                    i.balance  = res
                    i.loan_amount =rest
                    i.save()
                    dl_acc.balance = res
                    dl_acc.loan_amount=rest
                    dl_acc.save()
                    print('deleeted')
                    print('done')
        # Delete the loan transaction
        

        return redirect('loan_list',loan_id_global)


def Fin_LoanAccountHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        loan = loan_account.objects.get(id = id)
        print(loan)
        his = Fin_loanAccountHistory.objects.filter(loan_ac = loan)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/loan_account/loan_account_history.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'loan':loan})
    else:
       return redirect('/')


def edit_additional_Loan(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

            bank=Fin_Banking.objects.filter(company=com)
            employ = loan_transaction.objects.get(id=id)
            employ_ln = employ.loan.id
            print(employ_ln)
            employ_ln= loan_account.objects.get(id=employ_ln)
            remain = employ.balance - employ.loan_amount
            print('remAian')
            print(remain)
            reset_amount = int(employ_ln.loan_amount) - employ.loan_amount
            print(reset_amount)
            la = int(employ_ln.loan_amount) - employ.loan_amount
            employ_ln.loan_amount=la
            employ_ln.balance = reset_amount
            employ_ln.save()
            print('done')

            employ.save()
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            

            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')

            bank=Fin_Banking.objects.filter(company=com.company_id)
            employ = loan_transaction.objects.get(id=id)
            employ_ln = employ.loan.id
            print(employ_ln)
            employ_ln= loan_account.objects.get(id=employ_ln)
            remain = employ.balance - employ.loan_amount
            print('remAian')
            print(remain)
            reset_amount = int(employ_ln.loan_amount) - employ.loan_amount
            print(reset_amount)
            la = int(employ_ln.loan_amount) - employ.loan_amount
            employ_ln.loan_amount=la
            employ_ln.balance = reset_amount
            employ_ln.save()
            print('done')

            employ.save()
        context={
            'bank':bank,
            'com':com,
            'employ':employ,
            'remain':remain,
            'data':login_det,
            'allmodules':allmodules
        }
        return render(request,'company/loan_account/edit_loan_addtional.html',context)


def save_edit_additional_loan(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = company,status = 'New')

        bank=Fin_Banking.objects.filter(company=company)
    
        employ = loan_transaction.objects.get(id=id)
        employ_ln = employ.loan.id
        print(employ_ln)
        employ_ln= loan_account.objects.get(id=employ_ln)
        remain = employ.balance - employ.loan_amount
        print('remAian')
        print(remain)
        reset_amount = int(employ_ln.loan_amount) - employ.loan_amount
        print(reset_amount)
        la = int(employ_ln.loan_amount) - employ.loan_amount
        employ_ln.loan_amount=la
        employ_ln.balance = reset_amount
        employ_ln.save()
        print('done')

        employ.save()

        
       
        if request.method == 'POST':
            principal = request.POST.get('new')
            date = request.POST.get('adjdate')
            total = request.POST.get('amount')
            cheque_id = request.POST['cheque_id'] 
            upi_id = request.POST['upi_id'] 
            bnk_id = request.POST['bnk_id'] 
            payment_method = request.POST['payment_method']
            employ.loan_amount = principal
            employ.loan_intrest = 0
            employ.loan_date = date
            employ.total = principal
            employ.balance = total
            employ.recieved_cheque = cheque_id
            employ.recieved_upi = upi_id
            employ.type = payment_method
            print(total)
            print('goback')
            employ.save()
            trans2 = Fin_LoanTransactionHistory(company =company ,login_details=login_det,transaction=employ,loan_ac=employ_ln,action='Edited')
            trans2.save() 
            employ_ln.balance += int(total)
            employ_ln.loan_amount += int(principal)
            employ_ln.save()
            
            
            print(employ_ln)
            print('hdhdh')
            loan_id = employ_ln.id
            loan_trans = loan_transaction.objects.filter(company=company,loan=loan_id)
            print(loan_trans)
            


            for i in loan_trans:
                    total_balance =employ_ln.balance
                    print('balance '+ str(total_balance) )
                    if i.bank_type=='OPENING BAL':
                        res = employ_ln.balance = i.loan_amount
                    elif i.bank_type == 'EMI PAID':
                        res = employ_ln.balance - i.loan_amount
                        print('true')
                    elif i.bank_type == 'ADDITIONAL LOAN ISSUED':
                        print('false')
                        res = employ_ln.balance + i.loan_amount
                    i.balance  = res
                    i.save()
                    employ_ln.balance = res
                    employ_ln.save()

                    print('done1')
        return redirect('loan_list',employ_ln.id)


def delet_loanaccount(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            company = com
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            company = com.company_id
        loan = loan_account.objects.get(id=id)
        print(loan.lenderbank)
        
        
        loan.delete()
        
        return redirect('loan_ac_listoutpage')


def edit_loan_account(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']

        login_det = Fin_Login_Details.objects.get(id = s_id) 

        if login_det.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = login_det)
            allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')
            bank=Fin_Banking.objects.filter(company=com)
            loan = loan_account.objects.get(id=id)
            if request.method == 'POST':
            # Retrieve the company and loan account objects
            
                loan = loan_account.objects.get(id=id)
                
                
                loan.account_name = request.POST.get('acc_name')
                loan.account_number = request.POST.get('acc_number')
                loan.lenderbank = request.POST.get('lender')
                loan.recieced_bank = request.POST.get('recieved')
                i=request.POST.get('recieved')
                print(i)
                loan.paid = request.POST.get('paid')
                print(loan.paid)
                loan.paid_cheque = request.POST.get('paid_cheque_id')
                loan.paid_upi = request.POST.get('paid_upi_id')
                loan.paid_bank_acc_number = request.POST.get('paid_bnk_id')

                loan.recieved_cheque = request.POST.get('recieved_cheque_id')
                loan.recieved_upi = request.POST.get('recieved_upi_id')
                loan.bank_acc_number = request.POST.get('recieved_bnk_id')

                loan.intrest = request.POST.get('intrest')
                loan.term = request.POST.get('term')
                loan.loan_amount = int(request.POST.get('balance'))
                processing_value = request.POST.get('processing', 0)
                loan.processing = int(processing_value) if processing_value.isdigit() else 0

                loan.status = "Active"
                loan.desc = request.POST.get('desc')
                loan.date = request.POST.get('date')
                loan.balance = loan.loan_amount
                loan.recieved_amount = loan.loan_amount - loan.processing
                print('doneee')
                print(loan.recieved_amount)
            
                loan.save()
                
                if loan.recieced_bank == 'cash':
                    # Add the new value
                    loan.balance = loan.recieved_amount
                    print('reciec')
                    
                elif loan.recieced_bank == 'upi':
                    loan.recieced_bank = 'upi'
                elif loan.recieced_bank == 'cheque':
                    
                    loan.recieced_bank = 'cheque'
                else:
                    received = Fin_Banking.objects.get(company=com,bank_name=loan.recieced_bank)
                    received.opening_balance += loan.recieved_amount
                    received.save()

                if loan.paid == 'cash':
                    # Add the new value
                    loan.balance = loan.recieved_amount
                    print('reciec')
                
                elif loan.paid == 'upi':
                    loan.paid = 'upi'
                elif loan.paid == 'cheque':
                    loan.paid = 'cheque'
                else:
                    received = Fin_Banking.objects.get(company=com,bank_name=loan.paid)
                    received.opening_balance += loan.recieved_amount
                    received.save()
                # Check if paid bank is cash
            
                # Update the loan account fields
            
                # Update related bank transactions
                bnk = loan_transaction.objects.filter(loan=loan)
                for transaction in bnk:
                    if loan.lenderbank == 'cash':
                        if transaction.bank_type == 'OPENING BAL':
                            transaction.loan_amount = loan.loan_amount
                
                            transaction.balance = loan.loan_amount
                            transaction.loan_date = loan.date
                            transaction.loan_desc = loan.desc
                            transaction.from_trans = loan.lenderbank
                            transaction.to_trans = loan.recieced_bank
                            transaction.total = loan.loan_amount
                            transaction.save()
                        elif transaction.bank_type == 'PROCESSING FEE':
                            transaction.loan_amount = loan.processing
                            transaction.balance = loan.loan_amount
                            transaction.loan_date = loan.date
                            transaction.loan_desc = loan.desc
                            transaction.from_trans = loan.lenderbank
                            transaction.to_trans = loan.recieced_bank
                            transaction.total = loan.processing
                            transaction.save()
                    else:
                        if transaction.bank_type == 'OPENING BAL':
                            transaction.loan_amount = loan.loan_amount
                            transaction.balance = loan.loan_amount
                            transaction.loan_date = loan.date
                            transaction.loan_desc = loan.desc
                            transaction.from_trans = loan.lenderbank
                            transaction.to_trans = loan.recieced_bank
                            transaction.total = loan.loan_amount
                            transaction.save()
                        if transaction.bank_type == 'PROCESSING FEE':
                            transaction.loan_amount = loan.processing
                            transaction.balance = loan.loan_amount
                            transaction.loan_date = loan.date
                            transaction.loan_desc = loan.desc
                            transaction.from_trans = loan.lenderbank
                            transaction.to_trans = loan.recieced_bank
                            transaction.total = loan.processing
                            transaction.save()

                
                        # Redirect to the loan list page or show a success message
                print(loan.id)
                loan_id=loan.id
        
                loan_trans = loan_transaction.objects.filter(company=com,loan=loan_id)
                print(loan_trans)
                


                for i in loan_trans:
                        total_balance =loan.balance
                        print('balance '+ str(total_balance) )
                        if i.bank_type=='OPENING BAL':
                            res = loan.balance = i.loan_amount
                        elif i.bank_type == 'EMI PAID':
                            res = loan.balance - i.loan_amount
                            print('true')
                        elif i.bank_type == 'ADDITIONAL LOAN ISSUED':
                            print('false')
                            res = loan.balance + i.loan_amount
                        i.balance  = res
                        i.save()
                        loan.balance = res
                        loan.save()

                        print('done')


                loan.save()
                Fin_loanAccountHistory.objects.create(
                            # Company=com,
                            Company=com ,
                            LoginDetails=login_det,
                            loan_ac=loan,
                            date=timezone.now(),
                            action='Edited'
                        ) 
                return redirect('loan_lists_edit',id)

            # Handle GET request and render the edit form
            return render(request, 'company/loan_account/edit_loan_account.html',{'loan':loan,'com':com,'bank':bank,'allmodules':allmodules,'data':login_det})
        
        elif login_det.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = login_det)
            

            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            bank=Fin_Banking.objects.filter(company=com.company_id)
            loan = loan_account.objects.get(id=id)
            if request.method == 'POST':
            # Retrieve the company and loan account objects
            
                loan = loan_account.objects.get(id=id)
                
                
                loan.account_name = request.POST.get('acc_name')
                loan.account_number = request.POST.get('acc_number')
                loan.lenderbank = request.POST.get('lender')
                loan.recieced_bank = request.POST.get('recieved')
                i=request.POST.get('recieved')
                print(i)
                loan.paid = request.POST.get('paid')
                print(loan.paid)
                loan.paid_cheque = request.POST.get('paid_cheque_id')
                loan.paid_upi = request.POST.get('paid_upi_id')
                loan.paid_bank_acc_number = request.POST.get('paid_bnk_id')

                loan.recieved_cheque = request.POST.get('recieved_cheque_id')
                loan.recieved_upi = request.POST.get('recieved_upi_id')
                loan.bank_acc_number = request.POST.get('recieved_bnk_id')

                loan.intrest = request.POST.get('intrest')
                loan.term = request.POST.get('term')
                loan.loan_amount = int(request.POST.get('balance'))
                processing_value = request.POST.get('processing', 0)
                loan.processing = int(processing_value) if processing_value.isdigit() else 0

                loan.status = "Active"
                loan.desc = request.POST.get('desc')
                loan.date = request.POST.get('date')
                loan.balance = loan.loan_amount
                loan.recieved_amount = loan.loan_amount - loan.processing
                print('doneee')
                print(loan.recieved_amount)
            
                loan.save()
                
                if loan.recieced_bank == 'cash':
                    # Add the new value
                    loan.balance = loan.recieved_amount
                    print('reciec')
                    
                elif loan.recieced_bank == 'upi':
                    loan.recieced_bank = 'upi'
                elif loan.recieced_bank == 'cheque':
                    
                    loan.recieced_bank = 'cheque'
                else:
                    received = Fin_Banking.objects.get(company=com.company_id,bank_name=loan.recieced_bank)
                    received.opening_balance += loan.recieved_amount
                    received.save()

                if loan.paid == 'cash':
                    # Add the new value
                    loan.balance = loan.recieved_amount
                    print('reciec')
                
                elif loan.paid == 'upi':
                    loan.paid = 'upi'
                elif loan.paid == 'cheque':
                    loan.paid = 'cheque'
                else:
                    received = Fin_Banking.objects.get(company=com.company_id,bank_name=loan.paid)
                    received.opening_balance += loan.recieved_amount
                    received.save()
                # Check if paid bank is cash
            
                # Update the loan account fields
            
                # Update related bank transactions
                bnk = loan_transaction.objects.filter(loan=loan)
                for transaction in bnk:
                    if loan.lenderbank == 'cash':
                        if transaction.bank_type == 'OPENING BAL':
                            transaction.loan_amount = loan.loan_amount
                
                            transaction.balance = loan.loan_amount
                            transaction.loan_date = loan.date
                            transaction.loan_desc = loan.desc
                            transaction.from_trans = loan.lenderbank
                            transaction.to_trans = loan.recieced_bank
                            transaction.total = loan.loan_amount
                            transaction.save()
                        elif transaction.bank_type == 'PROCESSING FEE':
                            transaction.loan_amount = loan.processing
                            transaction.balance = loan.loan_amount
                            transaction.loan_date = loan.date
                            transaction.loan_desc = loan.desc
                            transaction.from_trans = loan.lenderbank
                            transaction.to_trans = loan.recieced_bank
                            transaction.total = loan.processing
                            transaction.save()
                    else:
                        if transaction.bank_type == 'OPENING BAL':
                            transaction.loan_amount = loan.loan_amount
                            transaction.balance = loan.loan_amount
                            transaction.loan_date = loan.date
                            transaction.loan_desc = loan.desc
                            transaction.from_trans = loan.lenderbank
                            transaction.to_trans = loan.recieced_bank
                            transaction.total = loan.loan_amount
                            transaction.save()
                        if transaction.bank_type == 'PROCESSING FEE':
                            transaction.loan_amount = loan.processing
                            transaction.balance = loan.loan_amount
                            transaction.loan_date = loan.date
                            transaction.loan_desc = loan.desc
                            transaction.from_trans = loan.lenderbank
                            transaction.to_trans = loan.recieced_bank
                            transaction.total = loan.processing
                            transaction.save()

                
                        # Redirect to the loan list page or show a success message
                print(loan.id)
                loan_id=loan.id
        
                loan_trans = loan_transaction.objects.filter(company=com.company_id,loan=loan_id)
                print(loan_trans)
                


                for i in loan_trans:
                        total_balance =loan.balance
                        print('balance '+ str(total_balance) )
                        if i.bank_type=='OPENING BAL':
                            res = loan.balance = i.loan_amount
                        elif i.bank_type == 'EMI PAID':
                            res = loan.balance - i.loan_amount
                            print('true')
                        elif i.bank_type == 'ADDITIONAL LOAN ISSUED':
                            print('false')
                            res = loan.balance + i.loan_amount
                        i.balance  = res
                        i.save()
                        loan.balance = res
                        loan.save()

                        print('done')


                loan.save()
                Fin_loanAccountHistory.objects.create(
                            # Company=com,
                            Company=com.company_id ,
                            LoginDetails=login_det,
                            loan_ac=loan,
                            date=timezone.now(),
                            action='Edited'
                        ) 
                return redirect('loan_lists_edit',id)

            # Handle GET request and render the edit form
            return render(request, 'company/loan_account/edit_loan_account.html',{'loan':loan,'com':com,'bank':bank,'allmodules':allmodules,'data':login_det})



def Fin_Share_loanaccount(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        loan=loan_account.objects.get(id=id)
        loan_tr = loan_transaction.objects.filter(loan=id,company=com)
        bnk_name = loan.account_name
                    
        bnk_acc = Fin_BankHolder.objects.get(Holder_name=bnk_name,Company=com)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                fdate = request.POST['fdate']
                edate = request.POST['ldate']

                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']

                if fdate and edate:
                    loan_tr = loan_transaction.objects.filter(loan_date__gte=fdate, loan_date__lte=edate)
                
                context = {'loan':loan,'loan_tr':loan_tr,'data':data,'company':com ,'bnk_acc':bnk_acc,'fdate':fdate,'edate':edate}
                template_path = 'company/loan_account/loanacnt_share.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)

                pdf = result.getvalue()
                filename = f'LoanAccount - {loan.id}.pdf'
                subject = f"LoanAccount  - {loan.id}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Loan Account - Bill-{loan.id}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Loan Account details has been shared via email successfully..!')
                return redirect('loan_list',id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')   
            return redirect('loan_list',id) 


def loanac_attachFile(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

        elif data.User_Type == 'Staff':
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        loan= loan_account.objects.get(company=com,id=id)
        if request.method == 'POST':
            if len(request.FILES) != 0:
            
                if loan.attach_file != "":
                    os.remove(loan.attach_file.path)
                loan.attach_file=request.FILES['file']
            loan.save()
        return redirect('loan_list',id)


def get_loanrepayment_data(request):                                                                 #new by tinto mt (item)
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
            id = request.GET.get('repaymentId2')
            print('repay')
            print(id)
            # com = Fin_Company_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_LoanTransactionHistory.objects.filter(transaction=id)
            print(1111)
            # for i in option_objects:
            #     print(i.action)
            #     print("s1")
            for option in option_objects:
                date=option.date
                action=option.action
                print(option.action)
                first_name=option.login_details.First_name
                last_name=option.login_details.Last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)
    elif login.User_Type == 'Staff':
            id = request.GET.get('repaymentId2')
            # staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_LoanTransactionHistory.objects.filter(transaction=id)
            print(1111)
            for option in option_objects:
                date=option.date
                action=option.action
                first_name=option.login_details.First_name
                last_name=option.login_details.Last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)
            return JsonResponse(options)
    
def get_loanaddition_data(request):                                                                 #new by tinto mt (item)
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
            id = request.GET.get('additionalId2')
            # com = Fin_Company_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_LoanTransactionHistory.objects.filter(transaction=id)
            print(1111)
            for option in option_objects:
                date=option.date
                action=option.action
                first_name=option.login_details.First_name
                last_name=option.login_details.Last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)
    elif login.User_Type == 'Staff':
            id = request.GET.get('additionalId2')
            # staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_LoanTransactionHistory.objects.filter(transaction=id)
            print(1111)
            for option in option_objects:
                date=option.date
                action=option.action
                first_name=option.login_details.First_name
                last_name=option.login_details.Last_name
                options[option.id] = [date,action,first_name,last_name,f"{date}"]
            return JsonResponse(options)


def save_account(request):
    selected_bank = None
    error_message_account = ""
    
    if 's_id' in request.session:
        s_id = request.session['s_id']
    
        data = Fin_Login_Details.objects.get(id=s_id)

        if data.User_Type == "Company":
                # Company case
            com = Fin_Company_Details.objects.get(Login_Id=data)
            allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
            account_holder = Fin_BankHolder.objects.filter(Company=com)
            bank_queryset = Fin_Banking.objects.filter(company=com)

        else:
                # Staff case
            com = Fin_Staff_Details.objects.get(Login_Id=data)
            allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
            account_holder = Fin_BankHolder.objects.filter(Company=com.company_id)
            bank_queryset = Fin_Banking.objects.filter(company=com.company_id)
        if request.method == "POST":
           
            account_name = request.POST.get("account_name")
            account_number = request.POST.get("account_number")
            ifsc_code = request.POST.get("ifsc_code")
            swift_code = request.POST.get("swift_code")
            bank_name = request.POST.get("bank_name")
            branch_name = request.POST.get("branch_name")
            name = request.POST.get('name')
            alias = request.POST.get('alias')
            phone_number = request.POST.get('phone_number')
            email = request.POST.get('email')
            account_type = request.POST.get('account_type')
            mailing_name = request.POST.get('mailing_name')
            address = request.POST.get('address')
            country = request.POST.get('country')
            state = request.POST.get('state')
            pin = request.POST.get('pin')
            date = request.POST.get('date')
            amount = request.POST.get('amount')
            types= request.POST.get('retype')
            pan_it_number = request.POST.get('pan_it_number')
            registration_type = request.POST.get('registration_type')
            gstin_un = request.POST.get('gstin_un')
          
            set_cheque_book_range = request.POST.get('set_cheque_book_range')
            enable_cheque_printing = request.POST.get('enable_cheque_printing')
            set_cheque_printing_configuration = request.POST.get('set_cheque_printing_configuration')
            
            print(
                account_number,
                ifsc_code,
                swift_code,
                bank_name,
                branch_name,
                name,
                alias,
                phone_number,
                email,
                account_type,
                set_cheque_book_range,
                enable_cheque_printing,
                set_cheque_printing_configuration,
                pan_it_number,
                registration_type,
                gstin_un,
               
                mailing_name,
                address,
                country,
                state,
                pin,
                date,
                amount,)
               
            if 'bank_name' in request.POST:
                selected_bank_name = request.POST['bank_name']
                account_number = request.POST.get('account_number', '')
                ifsc_code = request.POST.get('ifsc_code', '')

                if data.User_Type == "Company":
                    bank_queryset = Fin_Banking.objects.filter(
                        company=com,
                        bank_name=selected_bank_name,
                        account_number=account_number,
                        ifsc_code=ifsc_code
                    )

                    if not bank_queryset.exists():
                        selected_bank = Fin_Banking.objects.create(
                            company=com,
                            bank_name=selected_bank_name,
                            branch_name=request.POST.get('branch_name', ''),
                            ifsc_code=request.POST.get('ifsc_code', ''),
                            account_number=account_number
                        )
                    else:
                        for bank_instance in bank_queryset:
                            bank_instance.branch_name = request.POST.get('branch_name', '')
                            bank_instance.ifsc_code = request.POST.get('ifsc_code', '')
                            bank_instance.save()

                        selected_bank = bank_queryset.first()

                else:
                    bank_queryset = Fin_Banking.objects.filter(
                        company=com.company_id,
                        bank_name=selected_bank_name,
                        account_number=account_number,
                        ifsc_code=ifsc_code
                    )

                    if not bank_queryset.exists():
                        selected_bank = Fin_Banking.objects.create(
                            company=com.company_id,
                            bank_name=selected_bank_name,
                            branch_name=request.POST.get('branch_name', ''),
                            ifsc_code=request.POST.get('ifsc_code', ''),
                            account_number=account_number
                        )
                    else:
                        for bank_instance in bank_queryset:
                            bank_instance.branch_name = request.POST.get('branch_name', '')
                            bank_instance.ifsc_code = request.POST.get('ifsc_code', '')
                            bank_instance.save()

                        selected_bank = bank_queryset.first()

                if selected_bank is not None:
                    swift_code = request.POST.get('swift_code', '')

                if Fin_BankHolder.objects.filter(
                    Q(Account_number=selected_bank.account_number) |
                    Q(phone_number=phone_number) |
                    Q(Pan_it_number=pan_it_number) |
                    Q(Email=email),
                    Company=com if data.User_Type == "Company" else com.company_id
                ).exists():
                    existing_holder = Fin_BankHolder.objects.filter(
                        Q(Account_number=selected_bank.account_number) |
                        Q(phone_number=phone_number) |
                        Q(Pan_it_number=pan_it_number) |
                        Q(Email=email),
                        Company=com if data.User_Type == "Company" else com.company_id
                    ).first()

                    error_messages = []

                    if existing_holder:
                  
                        if existing_holder.Account_number == account_number:
                            res= "Account number is already in use by another holder."
                            return JsonResponse({'status': False, 'message':res})

                        if existing_holder.phone_number == phone_number:
                            res="Phone number is already in use by another holder."
                            return JsonResponse({'status': False, 'message':res})

                        if existing_holder.Pan_it_number == pan_it_number:
                            res="PAN number is already in use by another holder."
                            return JsonResponse({'status': False, 'message':res})

                        if existing_holder.Email == email:
                            res="Email is already in use by another holder."
                            return JsonResponse({'status': False, 'message':res})

                    if registration_type in ['Regular', 'Composition']:
                        gstin_un = request.POST.get('gstin_un', '')
                        if Fin_BankHolder.objects.filter(Q(Gstin_un=gstin_un), Company=com if data.User_Type == "Company" else com.company_id).exists():
                            res="GST number is already in use by another holder."
                            return JsonResponse({'status': False, 'message':res})

                    if error_messages:
                        print(f"Errors: {error_messages}")
                        context = {
                                    'bank': bank_queryset,
                                    'error_messages_account': error_messages,
                                    'com': com,
                                    'allmodules': allmodules,
                                    'data': data,
                        }
                        return render(request, 'company/loan_account/loan_Create_Page.html', context)

                    
                    

            account_holder = Fin_BankHolder(
                LoginDetails=data,
                Company=com if data.User_Type == "Company" else com.company_id,
                Holder_name=name,
                Alias=alias,
                phone_number=phone_number,
                Email=email,
                Account_type=account_type,
                Mailing_name=mailing_name,
                Address=address,
                Country=country,
                State=state,
                Pin=pin,
                Date=date,
                ArithmeticErrormount=amount,
                Open_type=types,
                Pan_it_number=pan_it_number,
                Registration_type=registration_type,
                Gstin_un=gstin_un,
                Swift_code=swift_code,
                Bank_name=selected_bank.bank_name,
                Account_number=selected_bank.account_number,
                Branch_name=selected_bank.branch_name,
                Ifsc_code=selected_bank.ifsc_code,
                Set_cheque_book_range=True if set_cheque_book_range == "Yes" else False,
                Enable_cheque_printing=True if enable_cheque_printing == "Yes" else False,
                Set_cheque_printing_configuration=True if set_cheque_printing_configuration == "Yes" else False,
            )
            account_holder.save()
            print("LoginDetails:", account_holder.LoginDetails)
            print("Company:", account_holder.Company)
            print("Holder_name:", account_holder.Holder_name)
            print("Alias:", account_holder.Alias)
            print("phone_number:", account_holder.phone_number)
            print("Email:", account_holder.Email)
            print("Account_type:", account_holder.Account_type)
            print("Mailing_name:", account_holder.Mailing_name)
            print("Address:", account_holder.Address)
            print("Country:", account_holder.Country)
            print("State:", account_holder.State)
            print("Pin:", account_holder.Pin)
            print("Date:", account_holder.Date)
            print("ArithmeticErrormount:", account_holder.ArithmeticErrormount)
            print("Open_type:", account_holder.Open_type)
            print("Pan_it_number:", account_holder.Pan_it_number)
            print("Registration_type:", account_holder.Registration_type)
            print("Gstin_un:", account_holder.Gstin_un)
            print("Swift_code:", account_holder.Swift_code)
            print("Bank_name:", account_holder.Bank_name)
            print("Account_number:", account_holder.Account_number)
            print("Branch_name:", account_holder.Branch_name)
            print("Ifsc_code:", account_holder.Ifsc_code)
            print("Set_cheque_book_range:", account_holder.Set_cheque_book_range)
            print("Enable_cheque_printing:", account_holder.Enable_cheque_printing)
            print("Set_cheque_printing_configuration:", account_holder.Set_cheque_printing_configuration)

    
            account_holder.banking_details = selected_bank
            account_holder.save()

            Fin_BankHolderHistory.objects.create(
                                            # Company=com,
                Company=com if data.User_Type == "Company" else com.company_id,
                LoginDetails=data,
                Holder=account_holder,
                date=timezone.now(),
                action='Created'
            )
            return JsonResponse({'status': True})

        return redirect('loan_create_page')


def loanac_dropdown(request):                                                                 
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_BankHolder.objects.filter(Company=com)
            print(1111)
            for option in option_objects:
                account_name=option.Holder_name
                
                options[option.id] = [account_name]

            return JsonResponse(options)
    elif login.User_Type == 'Staff':
            staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Fin_BankHolder.objects.filter(Company=staf.company_id)
            for option in option_objects:
                account_name=option.Holder_name
                options[option.id] = [account_name]
            return JsonResponse(options)
            
#End

# debit note view tinto mt
        
def Fin_debitnotelist(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        deli = Fin_Debit_Note.objects.filter(Company = cmp)
        return render(request,'company/Fin_Debit_Note_List.html',{'allmodules':allmodules,'com':com, 'cmp':cmp,'data':data,'deli':deli})
    else:
       return redirect('/')
     
    
def Fin_debitnoteadd(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=data)
                cmp = com
                allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
                
                vend = Fin_Vendors.objects.filter(Company=com, status='Active')
                itms = Fin_Items.objects.filter(Company=com, status='Active')
                units = Fin_Units.objects.filter(Company=com)
                banks = Fin_Banking.objects.filter(company=com)
                acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')
                lst = Fin_Price_List.objects.filter(Company=com, status='Active')
                # recbill=Fin_Recurring_Bills.objects.filter(company=com)
            
                trms = Fin_Company_Payment_Terms.objects.filter(Company = com)
            else:
                com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
                cmp = com
                allmodules = Fin_Modules_List.objects.get(company_id=com.id, status='New')
                banks = Fin_Banking.objects.filter(company=com.id)
                vend = Fin_Vendors.objects.filter(Company=com.id, status='Active')
                itms = Fin_Items.objects.filter(Company=com.id, status='Active')
                units = Fin_Units.objects.filter(Company=com.id)
                acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com.id).order_by('account_name')
                lst = Fin_Price_List.objects.filter(Company=com.id, status='Active')
                # recbill=Fin_Recurring_Bills.objects.filter(Company=com.id)

                trms = Fin_Company_Payment_Terms.objects.filter(Company = com.id)


            latest_eway = Fin_Debit_Note.objects.filter(Company=com).order_by('-reference_number').first()

            new_number = int(latest_eway.reference_number) + 1 if latest_eway else 1

            if Fin_Debite_Note_Reference.objects.filter(Company=com).exists():
                deleted = Fin_Debite_Note_Reference.objects.filter(Company=com).last()
                
                if deleted:
                    while int(deleted.reference_number) >= new_number:
                        new_number += 1

            nxtEway = ""
            lastEway = Fin_Debit_Note.objects.filter(Company=com).last()
            if lastEway:
                eway_no = str(lastEway.debit_note_number)
                print("Original eway_no:", eway_no)

                for i in range(len(eway_no) - 1, -1, -1):
                    if eway_no[i].isdigit():
                        # Increment the last digit by 1
                        new_digit = str((int(eway_no[i]) + 1) % 10)

                        # Replace the last digit in the input string
                        result = eway_no[:i] + new_digit + eway_no[i+1:]
                        print("Modified eway_no:", result)

                        # Break out of the loop after updating the last digit
                        break

                numbers = []
                stri = []


                nxtEway = result

            context = {
                'com': cmp,
                'LoginDetails': data,
                'allmodules': allmodules,
                'data': data,
                'com':com,
                
                'venders': vend,
                'items': itms,
                'lst': lst,
                'ESTNo':nxtEway,
                # 'recbill':recbill,
                'banks':banks,
              
                'pTerms':trms,
                'accounts':acc,
                'units':units,
                'ref_no':new_number
            }
            return render(request, 'company/Fin_Debit_Note_Add.html', context)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')
    return redirect('Fin_debitnotelist')


def vendordata(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        print(customer_id)
        cust = Fin_Vendors.objects.get(id=customer_id,Company_id=com.id)
  
        recbill = Fin_Recurring_Bills.objects.filter(vendor=customer_id, company_id=com.id)
        purbill = Fin_Purchase_Bill.objects.filter(vendor=customer_id, company_id=com.id)

        recbill_data = [{'id': bill.id, 'bill_number': bill.bill_number} for bill in recbill]
        purbill_data = [{'id': bill.id, 'bill_number': bill.bill_no} for bill in purbill]

        # Combine recbill_data and purbill_data
        combined_data = recbill_data + purbill_data

        # Now you can use combined_data, which contains either recurring bills or purchase bills
        for data in combined_data:
            print(data['bill_number'])


        # Other customer information
        data7 = {
      
            'recbill_data': combined_data,
        }

        # Combine both sets of data
        combined_data = {'recbill_data': combined_data,      'email': cust.email,
            'billing_street': cust.billing_street,
            'billing_city': cust.billing_city,
            'billing_state': cust.billing_state,
            'gst_type': cust.gst_type,
            'gstin': cust.gstin,
            'place_of_supply': cust.place_of_supply, 'customer_data': data7}

        # Return JsonResponse with the combined data
        return JsonResponse(combined_data)
      
       
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        customer_id = request.GET.get('id')
        print(customer_id)
        cust = Fin_Vendors.objects.get(id=customer_id,Company_id= staf.company_id_id)
  
        recbill = Fin_Recurring_Bills.objects.filter(vendor=customer_id, company_id= staf.company_id_id)
        purbill = Fin_Purchase_Bill.objects.filter(vendor=customer_id, company_id= staf.company_id_id)

        recbill_data = [{'id': bill.id, 'bill_number': bill.bill_number} for bill in recbill]
        purbill_data = [{'id': bill.id, 'bill_number': bill.bill_no} for bill in purbill]

        # Combine recbill_data and purbill_data
        combined_data = recbill_data + purbill_data

        # Now you can use combined_data, which contains either recurring bills or purchase bills
        for data in combined_data:
            print(data['bill_number'])


        # Other customer information
        data7 = {
      
            'recbill_data': combined_data,
        }

        # Combine both sets of data
        combined_data = {'recbill_data': combined_data,      'email': cust.email,
            'billing_street': cust.billing_street,
            'billing_city': cust.billing_city,
            'billing_state': cust.billing_state,
            'gst_type': cust.gst_type,
            'gstin': cust.gstin,
            'place_of_supply': cust.place_of_supply, 'customer_data': data7}

        # Return JsonResponse with the combined data
        return JsonResponse(combined_data)



def Fin_newdebitnote(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            CHNo = request.POST['debit_no']
            vendorid = request.POST['vendor']
            print(vendorid+"gg")
            vid=Fin_Vendors.objects.get(id=vendorid)
            # PatternStr = []
            # for word in CHNo:
            #     if word.isdigit():
            #         pass
            #     else:
            #         PatternStr.append(word)
            
            # pattern = ''
            # for j in PatternStr:
            #     pattern += j

            # pattern_exists = checkEstimateNumberPattern(pattern)

            # if pattern !="" and pattern_exists:
            #     res = f'<script>alert("Challan No. Pattern already Exists.! Try another!");window.history.back();</script>'
            #     return HttpResponse(res)

            # if Fin_Delivery_Challan.objects.filter(Company = com, challan_no__iexact = CHNo).exists():
            #     res = f'<script>alert("Challan Number `{CHNo}` already exists, try another!");window.history.back();</script>'
            #     return HttpResponse(res)
            
            debit = Fin_Debit_Note(
                Company = com,
                LoginDetails = com.Login_Id,
                Vendor = vid,
                vendor_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_number = request.POST['reference_number'],
                debit_note_number = CHNo,
                bill_type =  None if request.POST['bill_type'] == "" else request.POST['bill_type'],
                bill_number= None if request.POST['bill_number'] == "" else Fin_Purchase_Bill.objects.get(id = request.POST['bill_number']).bill_no if request.POST['bill_type'] == 'Bill' else Fin_Recurring_Bills.objects.get(id = request.POST['bill_number']).recurring_bill_number,
                
                debit_note_date = request.POST['debit_date'],
                payment_type = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_id = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                document= request.POST['file'],
                
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                note = request.POST['note'],
                paid=0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance=0.0 if request.POST['balance'] == "" else float(request.POST['balance'])
                )

            debit.save()
            challanref = Fin_Debite_Note_Reference(
                Company = com,
                LoginDetails = com.Login_Id,
                debit_note=debit,
                
                reference_number = request.POST['reference_number'],
                
            )

            challanref.save()



            # if len(request.FILES) != 0:
            #     challan.document=request.FILES.get('file')
            # challan.save()

            if 'Draft' in request.POST:
                debit.status = "Draft"
            elif "Save" in request.POST:
                debit.status = "Saved" 
            debit.save()

            # # Save Estimate items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    created_instance = Fin_Debit_Note_Items.objects.create(debit_note = debit, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]),  tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    itm.current_stock -= int(ele[4])
                    created_instance.save()
                    itm.save()
            
            # # Save transaction
                    
            Fin_Debite_Note_History.objects.create(
                Company = com,
                LoginDetails = data,
                debit_note = debit,
                date=timezone.now().date(),
                
               
                action = 'Created'
            )

            return redirect(Fin_debitnotelist)
        else:
            return redirect(Fin_debitnotelist)
    else:
       return redirect('/')

def Fin_checkdebitNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        EstNo = request.GET['EstNum']

        nxtEstNo = ""
        lastEstmate = Fin_Debit_Note.objects.filter(Company = com).last()
        # lastEstmate = Fin_Delivery_Challan.objects.filter(Company=com).last()
        if lastEstmate:
                eway_no = str(lastEstmate.debit_note_number)
                print("Original eway_no:", eway_no)

                for i in range(len(eway_no) - 1, -1, -1):
                    if eway_no[i].isdigit():
                        # Increment the last digit by 1
                        new_digit = str((int(eway_no[i]) + 1) % 10)

                        # Replace the last digit in the input string
                        result = eway_no[:i] + new_digit + eway_no[i+1:]
                        print("Modified eway_no:", result)

                        # Break out of the loop after updating the last digit
                        break
        # if lastEstmate:
        #     Est_no = str(lastEstmate.challan_no)
        #     numbers = []
        #     stri = []
        #     for word in Est_no:
        #         if word.isdigit():
        #             numbers.append(word)
        #         else:
        #             stri.append(word)
            
        #     num=''
        #     for i in numbers:
        #         num +=i
            
        #     st = ''
        #     for j in stri:
        #         st = st+j

            # est_num = int(num)+1

            # if num[0] == '0':
            #     if est_num <10:
            #         nxtEstNo = st+'0'+ str(est_num)
            #     else:
            #         nxtEstNo = st+ str(est_num)
            # else:
        nxtEstNo = result

        PatternStr = result
        # for word in EstNo:
        #     if word.isdigit():
        #         pass
        #     else:
        #         PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkEstimateNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Challan No. Pattern already Exists.!'})
        elif Fin_Estimate.objects.filter(Company = com, estimate_no__iexact = EstNo).exists():
            return JsonResponse({'status':False, 'message':'Challan No. already Exists.!'})
        elif nxtEstNo != "" and EstNo != nxtEstNo:
            return JsonResponse({'status':False, 'message':'Challan No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')


def billdata(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        itemname = request.GET.get('itemname')
        billnumber = request.GET.get('billnumber')
        print(billnumber)
        
        itm = Fin_Items.objects.get(name=itemname,Company_id=com.id)
        print(itm.name+"hh")
        pbill=Fin_Purchase_Bill.objects.get(bill_no=billnumber,company_id=com.id)
        if pbill is not None:
            pbillitem=Fin_Purchase_Bill_Item.objects.get(pbill=pbill,company_id=com.id,item=itm)
        else:
            rbill=Fin_Recurring_Bills.objects.get(bill_number=billnumber,company_id=com.id)
            pbillitem=Fin_Recurring_Bill_Items.objects.get(recurring_bill=rbill,company_id=com.id,item=itm)

        

        
       
        print(pbillitem.item.name)

        billitemqty=pbillitem.qty
        print(billitemqty)
        data7 = {'itemnames':pbillitem.item.name,'qty':billitemqty}
        return JsonResponse(data7)

      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        

        itemname = request.GET.get('itemname')
        billnumber = request.GET.get('billnumber')
        print(billnumber)
        
        itm = Fin_Items.objects.get(name=itemname,Company_id=staf.company_id_id)
        print(itm.name+"hh")
        pbill=Fin_Purchase_Bill.objects.get(bill_no=billnumber,company_id=staf.company_id_id)
        if pbill is not None:
            pbillitem=Fin_Purchase_Bill_Item.objects.get(pbill=pbill,company_id=staf.company_id_id,item=itm)
        else:
            rbill=Fin_Recurring_Bills.objects.get(bill_number=rbill,company_id=staf.company_id_id)
            pbillitem=Fin_Recurring_Bill_Items.objects.get(recurring_bill=billnumber,company_id=staf.company_id_id,item=itm)

        

        
       
        print(pbillitem.item.name)

        billitemqty=pbillitem.qty
        print(billitemqty)
        data7 = {'itemnames':pbillitem.item.name,'qty':billitemqty}
        return JsonResponse(data7)


def Fin_debit_overview(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        Estimate = Fin_Debit_Note.objects.get(id = id)
        cmt = Fin_Debite_Note_Comments.objects.filter(debit_note = Estimate)
        hist = Fin_Debite_Note_History.objects.filter(debit_note = Estimate).last()
        EstItems = Fin_Debit_Note_Items.objects.filter(debit_note = Estimate)
        histpry = Fin_Debite_Note_History.objects.filter(debit_note = Estimate)
        try:
            created = Fin_Debite_Note_History.objects.get(debit_note = Estimate, action = 'Created')
        except:
            created = None
#  'comments':cmt, 
        return render(request,'company/Fin_Debit_Note_Overview.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'estimate':Estimate,'estItems':EstItems, 'history':hist,'created':created,'comments':cmt,'histpry2':histpry})
    else:
       return redirect('/')

def Fin_editdebitnote(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        est = Fin_Debit_Note.objects.get(id = id)
        estItms = Fin_Debit_Note_Items.objects.filter(debit_note = est)
        cust = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        banks = Fin_Banking.objects.filter(company=com.id)
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

       
        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'estimate':est, 'estItems':estItms, 'customers':cust, 'items':itms,'banks':banks,
            'customers':cust, 'items':itms, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc
           
        }
        return render(request,'company/Fin_Debit_Note_Edit.html',context)
    else:
       return redirect('/')


def editdebit(request,id):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        est = Fin_Debit_Note.objects.get(id = id)
        if request.method == 'POST':
            ESTNo = request.POST['debit_no']

            PatternStr = []
            for word in ESTNo:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkEstimateNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Debit No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if est.debit_note_number != ESTNo and Fin_Debit_Note.objects.filter(Company = com, debit_note_date__iexact = ESTNo).exists():
                res = f'<script>alert("Debit Number `{ESTNo}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            est.Vendor = None if request.POST['customer'] == "" else Fin_Vendors.objects.get(id = request.POST['customer'])
            est.vendor_email = request.POST['customerEmail']
            est.billing_address = request.POST['bill_address']
            est.gst_type = request.POST['gst_type']
            est.gstin = request.POST['gstin']
            est.place_of_supply = request.POST['place_of_supply']

            est.debit_note_number = ESTNo
            est.bill_type =  None if request.POST['bill_type'] == "" else request.POST['bill_type']
            est.bill_number= None if request.POST['bill_number'] == "" else Fin_Purchase_Bill.objects.get(id = request.POST['bill_number']).bill_no if request.POST['bill_type'] == 'Bill' else Fin_Recurring_Bills.objects.get(id = request.POST['bill_number']).recurring_bill_number
           
            est.debit_note_date = request.POST['debit_date']
            est.payment_type = request.POST['payment_type']
            est.cheque_number = request.POST['cheque_id']
            est.upi_id = request.POST['upi_id']
            est.bank_account = request.POST['bnk_id']
           

            est.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            est.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            est.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            est.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            est.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            est.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            est.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            est.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            est.paid= 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            est.balance= 0.0 if request.POST['balance'] == "" else float(request.POST['balance'])

            est.note = request.POST['note']

            if len(request.FILES) != 0:
                est.file=request.FILES.get('file')

            est.save()

            # Save estimate items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            print(itemName)
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("price[]")
            plc=request.POST['place_of_supply']

            cgst=request.POST.getlist("taxGST[]")
            igst=request.POST.getlist("taxIGST[]")

            if plc!=com.State:
                    tax = igst
                    est.igst = float(request.POST['igst'])
                    est.cgst = 0
                    est.sgst = 0
                    est.save()

            if plc==com.State:
                    tax = cgst
                    est.igst = 0
                    est.cgst = float(request.POST['cgst'])
                    est.sgst = float(request.POST['sgst'])
                    d = float(request.POST['cgst'])
                   
                    est.save()

             

            # tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            est_item_ids = request.POST.getlist("id[]")
            EstItem_ids = [int(id) for id in est_item_ids]

            estimate_items = Fin_Debit_Note_Items.objects.filter(debit_note = est)
            object_ids = [obj.id for obj in estimate_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in EstItem_ids]

            Fin_Debit_Note_Items.objects.filter(id__in=ids_to_delete).delete()
            
            count = Fin_Debit_Note_Items.objects.filter(debit_note = est).count()

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(EstItem_ids) and EstItem_ids and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total,EstItem_ids)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None'  :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    if int(len(itemId))>int(count):
                        if ele[9] == 0:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Debit_Note_Items.objects.create(debit_note = est, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = ele[5],  tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                            itm.current_stock -= int(ele[4])
                            # created_instance.save()
                            itm.save()
                        else:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Debit_Note_Items.objects.filter( id = int(ele[9])).update(debit_note = est, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = ele[5],  tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                            itm.current_stock -= int(ele[4])
                            # created_instance.save()
                            itm.save()
                    else:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        Fin_Debit_Note_Items.objects.filter( id = int(ele[9])).update(debit_note = est, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = ele[5],  tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                        itm.current_stock -= int(ele[4])
                            # created_instance.save()
                        itm.save()
            # Save transaction
                    
            Fin_Debite_Note_History.objects.create(
                Company = com,
                LoginDetails = data,
                debit_note = est,
                date=timezone.now().date(),
                action = 'Edited'
            )

            return redirect(Fin_debit_overview, id)
        else:
            return redirect(Fin_debit_overview, id)
   

def Fin_deletedebit(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        est = Fin_Debit_Note.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        Fin_Debit_Note_Items.objects.filter(debit_note = est).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_Debite_Note_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Debite_Note_Reference.objects.get(Company = com,debit_note=est)
            if int(est.reference_number) > int(deleted.reference_number):
                deleted.reference_number = est.reference_number
                deleted.save()
        else:
            Fin_Debite_Note_Reference.objects.create(Company = com, reference_number = est.reference_number)
        
        est.delete()
        return redirect(Fin_debitnotelist)

def Fin_adddebitComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        est = Fin_Debit_Note.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Debite_Note_Comments.objects.create(Company = com, debit_note = est, comments = cmt)
            return redirect(Fin_debit_overview, id)
        return redirect(Fin_debit_overview, id)
    return redirect('/')


def Fin_deletedebitComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Debite_Note_Comments.objects.get(id = id)
        estId = cmt.debit_note.id
        cmt.delete()
        return redirect(Fin_debit_overview, estId)


def Fin_attachdebitFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        est = Fin_Debit_Note.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            est.document = request.FILES.get('file')
            est.save()

        return redirect(Fin_debit_overview, id)
    else:
        return redirect('/')
   

def Fin_sharedebitToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        est = Fin_Debit_Note.objects.get(id = id)
        itms = Fin_Debit_Note_Items.objects.filter(debit_note = est)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                print(emails_list)
            
                context = {'estimate':est, 'estItems':itms,'cmp':com}
                template_path = 'company/Fin_Debit_Note_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Debit{est.debit_note_number}'
                subject = f"Debi_Note{est.debit_note_number}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached debit note for - #-{est.debit_note_number}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Debit Note has been shared via email successfully..!')
                return redirect(Fin_debit_overview,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_debit_overview, id)


def Fin_convertdebit(request,id):
    if 's_id' in request.session:

        est = Fin_Debit_Note.objects.get(id = id)
        est.status = 'Saved'
        est.save()
        return redirect(Fin_debit_overview, id)



def checkitem(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        itemname = request.GET.get('itemname')
        billnumber = request.GET.get('billnumber')
        print(billnumber)
        
        itm = Fin_Items.objects.get(name=itemname,Company_id=com.id)
        print(itm.name+"hh")
        pbill=Fin_Purchase_Bill.objects.get(bill_no=billnumber,company_id=com.id)
        # if pbill is not None:
        try:
            pbillitem = Fin_Purchase_Bill_Item.objects.get(pbill=pbill, company_id=com.id, item=itm)
            billitemqty=pbillitem.qty
            itmname=pbillitem.item.name
        except Fin_Purchase_Bill_Item.DoesNotExist:
            itmname = 0
            billitemqty=0

        #     print("null1")
        # else:
        #     rbill=Fin_Recurring_Bills.objects.get(bill_number=billnumber,company_id=com.id)
        #     pbillitem=Fin_Recurring_Bill_Items.objects.get(recurring_bill=rbill,company_id=com.id,item=itm)
        #     print("null2")
        # if pbillitem is  None:
        #     pbillitem=0
        #     print("null")

        

        
       
        # print(pbillitem.item.name)

        

        print("kkll")
        print(billitemqty)
        data7 = {'itemnames':itmname,'qty':billitemqty}
        return JsonResponse(data7)

      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        

        itemname = request.GET.get('itemname')
        billnumber = request.GET.get('billnumber')
        print(billnumber)
        
        itm = Fin_Items.objects.get(name=itemname,Company_id=staf.company_id_id)
        print(itm.name+"hh")
        pbill=Fin_Purchase_Bill.objects.get(bill_no=billnumber,company_id=staf.company_id_id)
        # if pbill is not None:
        try:
            pbillitem = Fin_Purchase_Bill_Item.objects.get(pbill=pbill, company_id=staf.company_id_id, item=itm)
            billitemqty=pbillitem.qty
            itmname=pbillitem.item.name
        except Fin_Purchase_Bill_Item.DoesNotExist:
            itmname = 0
            billitemqty=0

        #     print("null1")
        # else:
        #     rbill=Fin_Recurring_Bills.objects.get(bill_number=billnumber,company_id=com.id)
        #     pbillitem=Fin_Recurring_Bill_Items.objects.get(recurring_bill=rbill,company_id=com.id,item=itm)
        #     print("null2")
        # if pbillitem is  None:
        #     pbillitem=0
        #     print("null")

        

        
       
        # print(pbillitem.item.name)

        

        print("kkll")
        print(billitemqty)
        data7 = {'itemnames':itmname,'qty':billitemqty}
        return JsonResponse(data7)
#End

# harikrishnan-------------------------

def Fin_recurring_bill_list(request):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id,status = 'New')
        bill = Fin_Recurring_Bills.objects.filter(company_id=com.id)   
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id,status = 'New')
        bill = Fin_Recurring_Bills.objects.filter(company_id=com.company_id_id)     
    return render(request,'company/Fin_Recurring_Bill_List.html',{'allmodules':allmodules,'bill':bill,'com':com,'data':loginn})

def Fin_recurring_bill_create_page(request):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    todayDate = date.today().strftime("%Y-%m-%d")
    
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        companyDetails = Fin_Company_Details.objects.get(id = com.id)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        vendors = Fin_Vendors.objects.filter(Company_id=com.id,status='Active')
        payment_terms = Fin_Company_Payment_Terms.objects.filter(Company_id=com.id)
        customers = Fin_Customers.objects.filter(Company_id=com.id,status='Active')
        items = Fin_Items.objects.filter(Company_id=com.id)
        units = Fin_Units.objects.filter(Company = com)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')
        repeat = Fin_CompanyRepeatEvery.objects.filter(company_id=com.id)
        pricelist_p = Fin_Price_List.objects.filter(Company_id=com.id,type='Purchase')
        pricelist_s = Fin_Price_List.objects.filter(Company_id=com.id,type='Sales')
        bank = Fin_Banking.objects.filter(company_id=com.id,bank_status = 'Active')
        
        nxtRb = ""
        lastRb = Fin_Recurring_Bills.objects.filter(company_id = com.id).last()
        if lastRb:
            rb_no = str(lastRb.recurring_bill_number)
            prefix = ''.join(filter(str.isalpha, rb_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, rb_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtRb = prefix + padded_rb_num
            
        else:
            nxtRb = 'RB01'

        recurringBill = Fin_Recurring_Bill_Reference.objects.filter(company_id = com.id)
        if recurringBill:
            recurringBillLatest = recurringBill.latest('id')
            data = {
                        'referenceID': recurringBillLatest.reference_number + 1
                    }
        else:
            data = {
                        'referenceID': 1
                    }
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        companyDetails = Fin_Company_Details.objects.get(id = com.company_id_id)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        vendors = Fin_Vendors.objects.filter(Company_id=com.company_id_id,status='Active')
        payment_terms = Fin_Company_Payment_Terms.objects.filter(Company_id=com.company_id_id)
        customers = Fin_Customers.objects.filter(Company_id=com.company_id_id,status='Active')
        items = Fin_Items.objects.filter(Company_id=com.company_id_id)
        units = Fin_Units.objects.filter(Company_id = com.company_id_id)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company_id=com.company_id_id).order_by('account_name')
        repeat = Fin_CompanyRepeatEvery.objects.filter(company_id=com.company_id_id)
        pricelist_p = Fin_Price_List.objects.filter(Company_id=com.company_id_id,type='Purchase')
        bank = Fin_Banking.objects.filter(company_id=com.company_id_id,bank_status = 'Active')
        pricelist_s = Fin_Price_List.objects.filter(Company_id=com.company_id_id,type='Sales')

        nxtRb = ""
        lastRb = Fin_Recurring_Bills.objects.filter(company_id = com.company_id_id).last()
        if lastRb:
            rb_no = str(lastRb.recurring_bill_number)
            prefix = ''.join(filter(str.isalpha, rb_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, rb_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtRb = prefix + padded_rb_num
            
        else:
            nxtRb = 'RB01'

        recurringBill = Fin_Recurring_Bill_Reference.objects.filter(company_id = com.company_id_id)
        if recurringBill:
            recurringBillLatest = recurringBill.latest('id')
            data = {
                        'referenceID': recurringBillLatest.reference_number + 1
                    }
        else:
            data = {
                        'referenceID': 1
                    }

    return render(request,'company/Fin_Recurring_Bill_Create_Page.html',{'todayDate':todayDate,'companyDetails':companyDetails,'allmodules':allmodules,'vendors':vendors,'pTerms':payment_terms,'items':items,'customers':customers,'refData':data,'accounts':acc,'units':units,'RepeatEvery':repeat,'list':pricelist_p,'list_s':pricelist_s,'nxtRB':nxtRb,'bank':bank,'com':com,'data':loginn})

def Fin_recurring_bill_save(request):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if request.method == 'POST':
        vendor = request.POST['select_vendor']
        vendor_name = request.POST['vendorName']
        vendor_email = request.POST['vendorEmail']
        vendor_billing_address = request.POST['venaddress']
        vendor_gst_type = request.POST['vendorGstType']
        vendor_gst_number = request.POST['vendorGstNumber']
        vendor_place_of_supply = request.POST['sourceOfSupply']
        recurring_bill_number = request.POST['RecurringBillNo'].upper()
        profile_namee = request.POST['ProfileName']
        reference_number = request.POST['ReferenceNo']
        startdate = request.POST['startDate']
        company_payment_terms = request.POST['payment_terms']
        expected_shipment_date = request.POST['endDate']
        purchase_order_number = request.POST['PurchaseOrderNo']
        payment_method = request.POST['paymentType']

        if len(request.POST['Cheque']) > 0:
            cheque_number = request.POST['Cheque'] 
        else:
            cheque_number = ''

        if len(request.POST['UPI']) > 0:
            upi_id = request.POST['UPI'] 
        else:
            upi_id = ''

        if request.POST['bankAccount'] != '':
            bank_account = request.POST['bankAccount'] 
        else:
            bank_account = ''

        if request.POST.get('priceListCheckbox') == 'on':
            pricelist = request.POST['priceListRB']
        
        
        customer = request.POST['Customer'] 
        customer_name = request.POST['customerName']
        customer_email = request.POST['customerEmail']
        customer_billing_address = request.POST['cusaddress']
        customer_gst_type = request.POST['GSTType']
        customer_gst_number = request.POST['customerGstNumber']
        customer_place_of_supply = request.POST['placeOfSupply']
        description = request.POST['Note']
        
        # if request.FILES['recurringBillDocument'] != '':
        #     RBDocument = request.FILES['recurringBillDocument']
        # else: 
        #     RBDocument = ''
        

        source = request.POST['sourceOfSupply']
        place = request.POST['companyPlace']  
        if source == 'Kerala' and place == 'Kerala':
            cgst = request.POST['cgst']  
            sgst = request.POST['sgst']
            taxAmount_igst = request.POST['taxAmount']
        else:
            cgst = 0
            sgst = 0
            taxAmount_igst = request.POST['taxAmount']

        
        sub_total = request.POST['subTotal'] 

        if request.POST['shippingCharge'] :
            shipping_charge = request.POST['shippingCharge'] 
        else:
            shipping_charge = 0
        
        if request.POST['adjustment'] :
            adjustment = request.POST['adjustment'] 
        else:
            adjustment = 0

        grand_total = request.POST['grandTotal'] 
        
        if request.POST['paidAmount'] :
            advanceAmount_paid = request.POST['paidAmount'] 
        else:
            advanceAmount_paid = 0

        balance = request.POST['balanceDue']
        status = request.POST['button'] 
        repeat_every = request.POST['RepeatEvery']

        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid).company_id

        if Fin_Recurring_Bills.objects.filter(company=com,recurring_bill_number=recurring_bill_number,purchase_order_number=purchase_order_number).exists():
            return JsonResponse({'messages': 'Recurring Bill Exists'})
        elif Fin_Recurring_Bills.objects.filter(company=com,recurring_bill_number=recurring_bill_number).exists():
            return JsonResponse({'messages': 'Recurring Bill Number Exists'})
        elif request.POST['UPI'] :
            if Fin_Recurring_Bills.objects.filter(company=com,upi_id=upi_id).exists():
                return JsonResponse({'messages': 'Upi id Exists'})
        elif request.POST['Cheque']:
            if Fin_Recurring_Bills.objects.filter(company=com,cheque_number=cheque_number).exists():
                return JsonResponse({'messages': 'Cheque number Exists'})
        # elif request.POST['bankAccount']:
        #     if Fin_Recurring_Bills.objects.filter(company=com,bank_account=bank_account).exists():
        #         return JsonResponse({'messages': 'Bank number Exists'})
        else:
            if request.POST.get('priceListCheckbox') == 'on':
                newBill = Fin_Recurring_Bills(vendor_id = vendor,recurring_bill_number = recurring_bill_number,reference_number = reference_number,
                                            purchase_order_number =purchase_order_number,payment_method = payment_method,
                                            description = description,sub_total = sub_total,cgst = cgst,bank_account=bank_account,cheque_number=cheque_number,upi_id=upi_id,
                                            sgst = sgst,taxAmount_igst = taxAmount_igst,shipping_charge = shipping_charge,adjustment = adjustment,
                                            status = status,grand_total = grand_total,advanceAmount_paid = advanceAmount_paid,balance = balance,customer_id = customer,
                                            company=com,profile_name=profile_namee,date = startdate,company_payment_terms_id = company_payment_terms,
                                            repeat_every_id=repeat_every,pricelist_id=pricelist,vendor_name=vendor_name,vendor_email=vendor_email,vendor_billing_address=vendor_billing_address,
                                            vendor_gst_type=vendor_gst_type,vendor_gst_number=vendor_gst_number,vendor_place_of_supply=vendor_place_of_supply,customer_name=customer_name,
                                            customer_email=customer_email,customer_billing_address=customer_billing_address,customer_gst_type=customer_gst_type,
                                            customer_gst_number=customer_gst_number,customer_place_of_supply=customer_place_of_supply,expected_shipment_date=expected_shipment_date)
                
            else: 
                newBill = Fin_Recurring_Bills(vendor_id = vendor,recurring_bill_number = recurring_bill_number,reference_number = reference_number,
                                            purchase_order_number =purchase_order_number,payment_method = payment_method,
                                            description = description,sub_total = sub_total,cgst = cgst,bank_account=bank_account,cheque_number=cheque_number,upi_id=upi_id,
                                            sgst = sgst,taxAmount_igst = taxAmount_igst,shipping_charge = shipping_charge,adjustment = adjustment,
                                            status = status,grand_total = grand_total,advanceAmount_paid = advanceAmount_paid,balance = balance,customer_id = customer,
                                            company=com,profile_name=profile_namee,date = startdate,company_payment_terms_id = company_payment_terms,
                                            repeat_every_id=repeat_every,vendor_name=vendor_name,vendor_email=vendor_email,vendor_billing_address=vendor_billing_address,
                                            vendor_gst_type=vendor_gst_type,vendor_gst_number=vendor_gst_number,vendor_place_of_supply=vendor_place_of_supply,customer_name=customer_name,
                                            customer_email=customer_email,customer_billing_address=customer_billing_address,customer_gst_type=customer_gst_type,
                                            customer_gst_number=customer_gst_number,customer_place_of_supply=customer_place_of_supply,expected_shipment_date=expected_shipment_date)
               
            newBill.save()
            history = Fin_Recurring_Bill_History(date=date.today(),action='Created',company=com,login_details_id = sid,recurring_bill_id =newBill.id)
            history.save()
            ref = Fin_Recurring_Bill_Reference(reference_number = reference_number ,company = com,login_details_id = sid)
            ref.save()
            
            product = tuple(request.POST.getlist("Item[]"))
            qty = tuple(request.POST.getlist("qty[]"))
            total_texts = tuple(request.POST.getlist("total[]"))
            total = [float(value) for value in total_texts]
            discount = tuple(request.POST.getlist("discount[]"))
            hsn = request.POST.getlist("hsn[]")
            sac = request.POST.getlist("sac[]")
            price = request.POST.getlist("price[]")
            
            if source == 'Kerala' and place == 'Kerala':
                tax = request.POST.getlist("gsttaxrate[]")
            else:
                tax = request.POST.getlist("igsttaxrate[]")
                    
            if loginn.User_Type == 'Company':
                com2 = Fin_Company_Details.objects.get(Login_Id = sid)
                if len(product) == len(qty) == len(discount) == len(total) == len(hsn)== len(sac) == len(tax) == len(price):
                    group = zip(product, qty, discount, total, hsn, tax, price,sac)
                    mapped=list(group)
                    for itemsNew in mapped:

                        if itemsNew[4] == '' or itemsNew[4] == 'None' :
                            hsn = None
                        else:
                            hsn = int(itemsNew[4])
                        if itemsNew[7] == '' or itemsNew[7] == 'None':
                            sac = None
                        else:
                            sac = int(itemsNew[7])

                        itemsTable = Fin_Recurring_Bill_Items(items_id = int(itemsNew[0]),quantity=int(itemsNew[1]),discount=float(itemsNew[2]),total=float(itemsNew[3]),hsn=hsn,sac=sac,tax_rate=int(itemsNew[5]),price=float(itemsNew[6]),recurring_bill_id=newBill.id,company_id=com2.id)
                        itemsTable.save()
                        
                
            elif loginn.User_Type == 'Staff' :
                com2 = Fin_Staff_Details.objects.get(Login_Id = sid)
                if len(product) == len(qty) == len(discount) == len(total) == len(hsn)== len(sac) == len(tax) == len(price):
                    group = zip(product, qty, discount, total, hsn, tax, price,sac)
                    mapped=list(group)
                    for itemsNew in mapped:

                        if itemsNew[4] == '' or itemsNew[4] == 'None' :
                            hsn = None
                        else:
                            hsn = int(itemsNew[4])
                        if itemsNew[7] == '' or itemsNew[7] == 'None':
                            sac = None
                        else:
                            sac = int(itemsNew[7])

                        itemsTable = Fin_Recurring_Bill_Items(items_id = int(itemsNew[0]),quantity=int(itemsNew[1]),discount=float(itemsNew[2]),total=float(itemsNew[3]),hsn=hsn,sac=sac,tax_rate=int(itemsNew[5]),price=float(itemsNew[6]),recurring_bill_id=newBill.id,company_id=com2.company_id_id)
                        itemsTable.save()
                        
            return JsonResponse({'messages': 'Bill created successfully','success':True})
    else:
        return JsonResponse()

def Fin_recurring_bill_usercheck(request):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if request.method == 'POST':
        recurring_bill_number = request.POST['RecurringBillNo'].upper()
        purchase_order_number = request.POST['PurchaseOrderNo']
        if len(request.POST['Cheque']) > 0:
            cheque_number = request.POST['Cheque'] 
        else:
            cheque_number = ''

        if len(request.POST['UPI']) > 0:
            upi_id = request.POST['UPI'] 
        else:
            upi_id = ''

        if len(request.POST['bankAccount']) > 0:
            bank_account = request.POST['bankAccount'] 
        else:
            bank_account = ''
        

        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid).company_id
        
        if Fin_Recurring_Bills.objects.filter(company=com,recurring_bill_number=recurring_bill_number,purchase_order_number=purchase_order_number).exists():
            messages.info(request,'Bill Exists')
            return redirect(Fin_recurring_bill_create_page)
        elif Fin_Recurring_Bills.objects.filter(company=com,recurring_bill_number=recurring_bill_number).exists():
            messages.info(request,'Bill Number Exists Exists')
            return redirect(Fin_recurring_bill_create_page)
        elif Fin_Recurring_Bills.objects.filter(company=com,purchase_order_number=purchase_order_number).exists():
            messages.info(request,'Purchase order number Exists')
            return redirect(Fin_recurring_bill_create_page)
        elif request.POST['UPI'] :
            if Fin_Recurring_Bills.objects.filter(company=com,upi_id=upi_id).exists():
                messages.info(request,'Upi id Exists')
                return redirect(Fin_recurring_bill_create_page)
        elif request.POST['Cheque']:
            if Fin_Recurring_Bills.objects.filter(company=com,cheque_number=cheque_number).exists():
                messages.info(request,'Cheque number Exists')
                return redirect(Fin_recurring_bill_create_page)
        elif request.POST['bankAccount']:
            if Fin_Recurring_Bills.objects.filter(company=com,bank_account=bank_account).exists():
                messages.info(request,'Bank number Exists')
                return redirect(Fin_recurring_bill_create_page)
        else:
            return redirect(Fin_recurring_bill_save)

def Fin_recurring_bill_overview(request,pk):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    bill1 = Fin_Recurring_Bills.objects.get(id=pk)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        items = Fin_Recurring_Bill_Items.objects.filter(recurring_bill_id = pk,company_id = com.id)
        lastHistory = Fin_Recurring_Bill_History.objects.filter(recurring_bill_id = pk,company_id = com.id).latest('id')
        comments = Fin_Recurring_Bill_Comments.objects.filter(company_id=com.id,recurring_bill_id=pk)
        if comments.exists():
            for index, comment in enumerate(comments):
                comment.index = index + 1
        else: 
            index = '0'
        companyName = com.Company_name
        companyData = {
            'caddress':com.Address,
            'city':com.City,
            'state':com.State,
            'pincode':com.Pincode,
            'phone':com.Contact,
            'email':com.Email
        }
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        items = Fin_Recurring_Bill_Items.objects.filter(recurring_bill_id = pk,company_id = com.company_id_id)
        lastHistory = Fin_Recurring_Bill_History.objects.filter(recurring_bill_id = pk,company_id = com.company_id_id).latest('id')
        comments = Fin_Recurring_Bill_Comments.objects.filter(company_id=com.company_id_id,recurring_bill_id=pk)
        if comments.exists():
            for index, comment in enumerate(comments):
                comment.index = index + 1
        else: 
            index = '0'
        companyName = com.company_id.Company_name
        companyData = {
            'caddress':com.company_id.Address,
            'city':com.company_id.City,
            'state':com.company_id.State,
            'pincode':com.company_id.Pincode,
            'phone':com.company_id.Contact,
            'email':com.company_id.Email
        }
    return render(request,'company/Fin_Recurring_Bill_Overview.html',{'allmodules':allmodules,'bill1':bill1,'companyName':companyName,'companyData':companyData,'items':items,'comments':comments,'lastHistory':lastHistory,'com':com,'data':loginn})



def Fin_get_vendor_details(request, vendor_id):

    try:
        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            vendor = Fin_Vendors.objects.get(id=vendor_id,Company_id=com.id)
            data = {
                'id': vendor.id,
                'firstname' : vendor.first_name ,
                'lastname': vendor.last_name,
                'email': vendor.email,
                'street': vendor.billing_street,
                'city':vendor.billing_city,
                'state':vendor.billing_state,
                'pincode':vendor.billing_pincode,
                'country':vendor.billing_country,
                'gst':vendor.gst_type,
                'gstin':vendor.gstin,
                'placeofsupply':vendor.place_of_supply
            }
            return JsonResponse(data)
            
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            vendor = Fin_Vendors.objects.get(id=vendor_id,Company_id=com.company_id_id)
            data = {
                'id': vendor.id,
                'firstname' : vendor.first_name ,
                'lastname': vendor.last_name,
                'email': vendor.email,
                'email': vendor.email,
                'street': vendor.billing_street,
                'city':vendor.billing_city,
                'state':vendor.billing_state,
                'pincode':vendor.billing_pincode,
                'country':vendor.billing_country,
                'gst':vendor.gst_type,
                'gstin':vendor.gstin,
                'placeofsupply':vendor.place_of_supply
            }
            return JsonResponse(data)
    except Fin_Vendors.DoesNotExist:
        return JsonResponse({'error': 'Vendor not found'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)
    
def Fin_get_customer_details(request, customer_id):
    try:
        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            customer = Fin_Customers.objects.get(id=customer_id,Company_id=com.id)
            data = {
                'id': customer.id,
                'firstname':customer.first_name,
                'lastname': customer.last_name,
                'email': customer.email,
                'placeofsupply': customer.place_of_supply,
                'gst': customer.gst_type,
                'gstin':customer.gstin,
                'street': customer.billing_street,
                'city':customer.billing_city,
                'state':customer.billing_state,
                'pincode':customer.billing_pincode,
                'country':customer.billing_country,
            }
            return JsonResponse(data)
            
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            customer = Fin_Customers.objects.get(id=customer_id,Company_id=com.company_id_id)
            data = {
                'id': customer.id,
                'firstname':customer.first_name,
                'lastname': customer.last_name,
                'email': customer.email,
                'placeofsupply': customer.place_of_supply,
                'gst': customer.gst_type,
                'gstin':customer.gstin,
                'street': customer.billing_street,
                'city':customer.billing_city,
                'state':customer.billing_state,
                'pincode':customer.billing_pincode,
                'country':customer.billing_country,
            }
            return JsonResponse(data)
        
    except Fin_Customers.DoesNotExist:
        return JsonResponse({'error': 'customer not found'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)
    
def Fin_get_item_details(request, item_id):
    try:
        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            items = Fin_Items.objects.get(Company_id=com.id,id=item_id)
            data = {
                'id' : int(items.id),
                'hsn': items.hsn,
                'sac':items.sac,
                'item_type':items.item_type,
                'price': items.purchase_price,
                'gst_tax': items.intra_state_tax,
                'igst_tax': items.inter_state_tax,
                'current_stock': items.current_stock
                
            }
            return JsonResponse(data)
            
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            items = Fin_Items.objects.get(Company_id=com.company_id_id,id=item_id)
            data = {
                'id' : int(items.id),
                'hsn': items.hsn,
                'sac':items.sac,
                'price': items.purchase_price,
                'gst_tax': items.intra_state_tax,
                'igst_tax': items.inter_state_tax,  
                'current_stock': items.current_stock
                
            }
            return JsonResponse(data)
        
    except Fin_Customers.DoesNotExist:
        return JsonResponse({'error': 'customer not found'}, status=404)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)
    
    
def Fin_check_recurring_bill_number(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id        
        RBNo = request.GET['invNum'].upper()
        nxtRb = ""
        lastRb = Fin_Recurring_Bills.objects.filter(company_id = com.id).last()
        if lastRb:
            rb_no = str(lastRb.recurring_bill_number)
            prefix = ''.join(filter(str.isalpha, rb_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, rb_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtRb = prefix + padded_rb_num

        if Fin_Recurring_Bills.objects.filter(company = com, recurring_bill_number__iexact = RBNo).exists():
            return JsonResponse({'status':False, 'message':'Recurring Bill No. already Exists.!'})
        elif nxtRb != "" and RBNo != nxtRb:
            return JsonResponse({'status':False, 'message':'Recurring Bill No. is not continuous.!'})
        else:
            return JsonResponse({'status':True})
    else:
       return JsonResponse()

def Fin_new_unit_modal(request):
    if request.method == 'POST':
        unit = request.POST['unitName'].upper()
        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            
            data = {
                'units':units
            }
            return JsonResponse(data)
            
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            units = Fin_Units(name = unit,Company=com.company_id_id)
            units.save()
            data = {
                'units':units
            }
            return JsonResponse(data)
        
def Fin_unit_reload_modal(request):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        units = Fin_Units.objects.filter(Company_id = com.id)
        data = {
                'units':units
            }
        return JsonResponse(data)
        
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        units = Fin_Units.objects.filter(Company_id = com.company_id_id)
        data = {
                'units':units
            }
        return JsonResponse(data)
        
def Fin_new_payment_terms_recurring(request):
    if request.method == 'POST':
        termName = request.POST['term_name'].upper()
        termDays = request.POST['days']
        sid = request.session['s_id']
        loginn = Fin_Login_Details.objects.get(id=sid)
        if loginn.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            paymentTerm = Fin_Company_Payment_Terms(term_name = termName,days = termDays,Company_id = com.id)
            paymentTerm.save()
            terms = [{'term_name': paymentTerm.term_name,'id': paymentTerm.id}]
            return JsonResponse({'terms':terms,'success':True})
            
            
        elif loginn.User_Type == 'Staff' :
            com = Fin_Staff_Details.objects.get(Login_Id = sid)
            paymentTerm = Fin_Company_Payment_Terms(term_name = termName,days = termDays,Company_id = com.company_id_id)
            paymentTerm.save()
            terms = [{'term_name': paymentTerm.term_name,'id': paymentTerm.id}]
            return JsonResponse({'terms':terms},content_type='application/json')

def Fin_recurring_bill_delete(request,pk):
    recurBill = Fin_Recurring_Bills.objects.get(id=pk)
    recurBill.delete()
    return redirect('Fin_recurring_bill_list')

def Fin_recurring_bill_attach_file(request,pk):
    recurBill = Fin_Recurring_Bills.objects.get(id=pk)
    if request.method == 'POST':
        file = request.FILES['attachment']
        recurBill.attachment = file
        recurBill.save()
        return redirect(reverse('Fin_recurring_bill_overview', kwargs={'pk': pk}))
    return redirect('Fin_recurring_bill_list')

def Fin_recurring_bill_edit_page(request,pk):
    recur = Fin_Recurring_Bills.objects.get(id=pk)
    itemTable = Fin_Recurring_Bill_Items.objects.filter(recurring_bill_id=pk)
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        companyDetails = Fin_Company_Details.objects.get(id = com.id)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        vendors = Fin_Vendors.objects.filter(Company_id=com.id,status='Active')
        payment_terms = Fin_Company_Payment_Terms.objects.filter(Company_id=com.id)
        customers = Fin_Customers.objects.filter(Company_id=com.id,status='Active')
        items = Fin_Items.objects.filter(Company_id=com.id)
        units = Fin_Units.objects.filter(Company = com)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=com).order_by('account_name')
        repeat = Fin_CompanyRepeatEvery.objects.filter(company_id=com.id)
        pricelist_p = Fin_Price_List.objects.filter(Company_id=com.id,type='Purchase')
        bank = Fin_Banking.objects.filter(company_id=com.id,bank_status = 'Active')
        pricelist_s = Fin_Price_List.objects.filter(Company_id=com.id,type='Sales')

        nxtRb = ""
        lastRb = Fin_Recurring_Bills.objects.filter(company_id = com.id).last()
        if lastRb:
            rb_no = str(lastRb.recurring_bill_number)
            prefix = ''.join(filter(str.isalpha, rb_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, rb_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtRb = prefix + padded_rb_num
            
        else:
            nxtRb = 'RB01'

        recurringBill = Fin_Recurring_Bills.objects.filter(company_id = com.id)
        if recurringBill:
            recurringBillLatest = recurringBill.latest('id')
            data = {
                        'referenceID': recurringBillLatest.reference_number + 1
                    }
        else:
            data = {
                        'referenceID': 1
                    }
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        companyDetails = Fin_Company_Details.objects.get(id = com.company_id_id)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')
        vendors = Fin_Vendors.objects.filter(Company_id=com.company_id_id,status='Active')
        payment_terms = Fin_Company_Payment_Terms.objects.filter(Company_id=com.company_id_id)
        customers = Fin_Customers.objects.filter(Company_id=com.company_id_id,status='Active')
        items = Fin_Items.objects.filter(Company_id=com.company_id_id)
        units = Fin_Units.objects.filter(Company_id = com.company_id_id)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company_id=com.company_id_id).order_by('account_name')
        repeat = Fin_CompanyRepeatEvery.objects.filter(company_id=com.company_id_id)
        pricelist_p = Fin_Price_List.objects.filter(Company_id=com.company_id_id,type='Purchase')
        bank = Fin_Banking.objects.filter(company_id=com.company_id_id,bank_status = 'Active')
        pricelist_s = Fin_Price_List.objects.filter(Company_id=com.company_id_id,type='Sales')

        nxtRb = ""
        lastRb = Fin_Recurring_Bills.objects.filter(company_id = com.company_id_id).last()
        if lastRb:
            rb_no = str(lastRb.recurring_bill_number)
            prefix = ''.join(filter(str.isalpha, rb_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, rb_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtRb = prefix + padded_rb_num
            
        else:
            nxtRb = 'RB01'

        recurringBill = Fin_Recurring_Bills.objects.filter(company_id = com.company_id_id)
        if recurringBill:
            recurringBillLatest = recurringBill.latest('id')
            data = {
                        'referenceID': recurringBillLatest.reference_number + 1
                    }
        else:
            data = {
                        'referenceID': 1
                    }

    return render(request,'company/Fin_Recurring_Bill_Edit_Page.html',{'companyDetails':companyDetails,'allmodules':allmodules,'vendors':vendors,'pTerms':payment_terms,'items':items,'customers':customers,'refData':data,'accounts':acc,'units':units,'RepeatEvery':repeat,'recur':recur,'itemTable':itemTable,'list':pricelist_p,'list_s':pricelist_s,'bank':bank,'nxtRB':nxtRb,'com':com,'data':loginn})

def Fin_recurring_bill_edit_save(request,pk):
    recur = Fin_Recurring_Bills.objects.get(id=pk)
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    if request.method == 'POST':
        recur.vendor_id = request.POST['select_vendor']
        recur.profile_name = request.POST['ProfileName']
        recur.date = request.POST['startDate']
        recur.company_payment_terms_id = request.POST['payment_terms']
        recur.purchase_order_number = request.POST['PurchaseOrderNo']
        recur.payment_method = request.POST['paymentType']
        recur.vendor_name = request.POST['vendorName']
        recur.vendor_email = request.POST['vendorEmail']
        recur.vendor_billing_address = request.POST['venaddress']
        recur.vendor_gst_type = request.POST['vendorGstType']
        recur.vendor_gst_number = request.POST['vendorGstNumber']
        recur.vendor_place_of_supply = request.POST['sourceOfSupply']
        recur.expected_shipment_date = request.POST['endDate']
        
        if request.POST['RecurringBillNo']:
            recur.recurring_bill_number = request.POST['RecurringBillNo']
            
        if recur.payment_method == '' or recur.payment_method == 'Cash':
            recur.upi_id = ''
            recur.bank_account = ''
            recur.cheque_number = ''
        elif recur.payment_method == 'UPI':
            recur.upi_id = request.POST['UPI'] 
            recur.bank_account = ''
            recur.cheque_number = ''
        elif recur.payment_method == 'Cheque':
            recur.cheque_number = request.POST['Cheque'] 
            recur.upi_id = ''
            recur.bank_account = ''
        else:
            recur.bank_account = request.POST['bankAccount'] 
            recur.upi_id = ''
            recur.cheque_number = ''
            

        
        
        recur.customer_id = request.POST['Customer']
        recur.customer_name = request.POST['customerName']
        recur.customer_email = request.POST['customerEmail']
        recur.customer_billing_address = request.POST['cusaddress']
        recur.customer_gst_type = request.POST['GSTType']
        recur.customer_gst_number = request.POST['customerGstNumber']
        recur.customer_place_of_supply = request.POST['placeOfSupply']
        recur.description = request.POST['Note']

        recur.sub_total = request.POST['subTotal']

        source = request.POST['sourceOfSupply']
        place = request.POST['companyPlace']

        
        recur.taxAmount_igst = request.POST['taxAmount']
        recur.cgst = request.POST['cgst']
        recur.sgst = request.POST['sgst']
        
        recur.shipping_charge = request.POST['shippingCharge'] 
        recur.adjustment = request.POST['adjustment'] 
        recur.grand_total = request.POST['grandTotal'] 
        recur.advanceAmount_paid = request.POST['paidAmount'] 
        recur.balance = request.POST['balanceDue']
        recur.repeat_every_id = request.POST['RepeatEvery']

        rbnumber = request.POST['RecurringBillNo']
        ponumber = request.POST['PurchaseOrderNo']
        banknum = request.POST['bankAccount']
        cheqnum = request.POST['Cheque']
        upid = request.POST['UPI']
        
        if request.POST.get('priceListCheckbox') == 'on':
            recur.pricelist_id = int(request.POST.get('priceListRB'))
        else:
            recur.pricelist_id = None
        
        
        if loginn.User_Type == 'Company':
            com2 = Fin_Company_Details.objects.get(Login_Id = sid)
        elif loginn.User_Type == 'Staff' :
            com2 = Fin_Staff_Details.objects.get(Login_Id = sid).company_id
        
        if Fin_Recurring_Bills.objects.filter(company=com2,recurring_bill_number=rbnumber,purchase_order_number=ponumber).exclude(id=pk).exists():
            print('1111111111')
            return JsonResponse({'messages': 'Recurring Bill Exists'})
        elif Fin_Recurring_Bills.objects.filter(company=com2,recurring_bill_number=rbnumber).exclude(id=pk).exists():
            print('22222222')
            return JsonResponse({'messages': 'Recurring Bill Number Exists'})
        # elif Fin_Recurring_Bills.objects.filter(Q(company=com2) & ~Q(purchase_order_number='') & Q(purchase_order_number=purchase_order_number)).exclude(id=pk).exists():
        #     return JsonResponse({'messages': 'Purchase order number Exists'})
        elif Fin_Recurring_Bills.objects.filter(Q(company=com2) & ~Q(upi_id='') & Q(upi_id=upid)).exclude(id=pk).exists():
                return JsonResponse({'messages': 'Upi id Exists'})
        elif Fin_Recurring_Bills.objects.filter(Q(company=com2) & ~Q(cheque_number= '') & Q(cheque_number=cheqnum)).exclude(id=pk).exists():
                return JsonResponse({'messages': 'Cheque number Exists'})
        # elif request.POST['bankAccount']:
        #     if Fin_Recurring_Bills.objects.filter(Q(company=com2) & ~Q(bank_account='') & Q(bank_account=banknum)).exclude(id=pk).exists():
        #         return JsonResponse({'messages': 'Bank number Exists'})
        else:
            recur.save()

            if loginn.User_Type == 'Company':
                com = Fin_Company_Details.objects.get(Login_Id = sid)
                history = Fin_Recurring_Bill_History(date=date.today(),action='Edited',company_id=com.id,login_details_id = sid,recurring_bill_id =pk)
                history.save()
                
                
            elif loginn.User_Type == 'Staff' :
                com = Fin_Staff_Details.objects.get(Login_Id = sid)
                history = Fin_Recurring_Bill_History(date=date.today(),action='Edited',company_id=com.company_id_id,login_details_id = sid,recurring_bill_id = pk)
                history.save()
            
            
            

            product = tuple(request.POST.getlist("Item[]"))
            qty = tuple(request.POST.getlist("qty[]"))
            total_texts = tuple(request.POST.getlist("total[]"))
            total = [float(value) for value in total_texts]
            discount = tuple(request.POST.getlist("discount[]"))
            hsn = request.POST.getlist("hsn[]")
            sac = request.POST.getlist("sac[]")
            price = request.POST.getlist("price[]")
            
            if source == 'Kerala' and place == 'Kerala':
                tax = request.POST.getlist("gsttaxrate[]")
            else:
                tax = request.POST.getlist("igsttaxrate[]")
            
                    

            if loginn.User_Type == 'Company':
                com = Fin_Company_Details.objects.get(Login_Id = sid)
                recurItems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill_id=pk,company_id=com.id)
                for i in recurItems:
                    i.delete()
                if len(product) == len(qty) == len(discount) == len(total) == len(hsn) == len(sac) == len(tax) == len(price):
                    group = zip(product, qty, discount, total, hsn, tax, price,sac)
                    mapped=list(group)
                    for itemsNew in mapped:

                        if itemsNew[4] == '' or itemsNew[4] == 'None' :
                            hsn = None
                        else:
                            hsn = int(itemsNew[4])
                        if itemsNew[7] == '' or itemsNew[7] == 'None':
                            sac = None
                        else:
                            sac = int(itemsNew[7])

                        itemsTable = Fin_Recurring_Bill_Items(items_id = int(itemsNew[0]),quantity=int(itemsNew[1]),discount=float(itemsNew[2]),total=float(itemsNew[3]),hsn=hsn,sac=sac,tax_rate=int(itemsNew[5]),price=float(itemsNew[6]),recurring_bill_id=pk,company_id=com.id)
                        itemsTable.save()
                
            elif loginn.User_Type == 'Staff' :
                com = Fin_Staff_Details.objects.get(Login_Id = sid)
                recurItems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill_id=pk,company_id=com.company_id_id)
                for i in recurItems:
                    i.delete()
                if len(product) == len(qty) == len(discount) == len(total) == len(hsn) == len(sac) == len(tax) == len(price):
                    group = zip(product, qty, discount, total, hsn, tax, price,sac)
                    mapped=list(group)
                    for itemsNew in mapped:

                        if itemsNew[4] == '' or itemsNew[4] == 'None' :
                            hsn = None
                        else:
                            hsn = int(itemsNew[4])
                        if itemsNew[7] == '' or itemsNew[7] == 'None':
                            sac = None
                        else:
                            sac = int(itemsNew[7])

                        itemsTable = Fin_Recurring_Bill_Items(items_id = int(itemsNew[0]),quantity=int(itemsNew[1]),discount=float(itemsNew[2]),total=float(itemsNew[3]),hsn=hsn,sac=sac,tax_rate=int(itemsNew[5]),price=float(itemsNew[6]),recurring_bill_id=pk,company_id=com.company_id_id)
                        itemsTable.save()
                    
            return JsonResponse({'messages':'successfully edited','relo':True})
    return JsonResponse({'messages':'failed'})
       
def Fin_createVendor_modal(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            
        if request.method == 'POST':
            fName = request.POST['first_name']
            lName = request.POST['last_name']
            gstIn = request.POST['gstin']
            pan = request.POST['pan_no']
            email = request.POST['email']
            phn = request.POST['mobile']

            if Fin_Vendors.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
                return JsonResponse({'msg':'Vendor already exists, try another!','success':False})
            elif Fin_Vendors.objects.filter(Company = com, gstin__iexact = gstIn).exists():
                return JsonResponse({'msg':'GSTIN numeber already exists, try another!','success':False})
            elif Fin_Vendors.objects.filter(Company = com, pan_no__iexact = pan).exists():
                return JsonResponse({'msg':'PAN No already exists, try another!','success':False})
            elif Fin_Vendors.objects.filter(Company = com, mobile__iexact = phn).exists():
                return JsonResponse({'msg':'Phone Number already exists, try another!','success':False})
            elif Fin_Vendors.objects.filter(Company = com, email__iexact = email).exists():
                return JsonResponse({'msg':'Email already exists, try another!','success':False})

            vnd = Fin_Vendors(
                Company = com,
                LoginDetails = com.Login_Id,
                title = request.POST['title'],
                first_name = fName,
                last_name = lName,
                company = request.POST['company_name'],
                location = request.POST['location'],
                place_of_supply = request.POST['place_of_supply'],
                gst_type = request.POST['gst_type'],
                gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
                pan_no = pan,
                email = email,
                mobile = phn,
                website = request.POST['website'],
                price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
                payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
                opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
                open_balance_type = request.POST['balance_type'],
                current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
                credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']),
                currency = request.POST['currency'],
                billing_street = request.POST['street'],
                billing_city = request.POST['city'],
                billing_state = request.POST['state'],
                billing_pincode = request.POST['pincode'],
                billing_country = request.POST['country'],
                ship_street = request.POST['shipstreet'],
                ship_city = request.POST['shipcity'],
                ship_state = request.POST['shipstate'],
                ship_pincode = request.POST['shippincode'],
                ship_country = request.POST['shipcountry'],
                status = 'Active'
            )
            vnd.save()

            vendors = [{'id': vnd.id, 'first_name': vnd.first_name , 'last_name': vnd.last_name}]
            return JsonResponse({'success': True, 'vendors': vendors}, content_type='application/json')

        else:
            return JsonResponse({'error': 'Invalid request method'})
    else:
        return JsonResponse({'error': 'User not logged in'})

def Fin_createCustomer_modal(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            fName = request.POST['first_name']
            lName = request.POST['last_name']
            gstIn = request.POST['gstin']
            pan = request.POST['pan_no']
            email = request.POST['email']
            phn = request.POST['mobile']

            if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
                return JsonResponse({'msg':'Customer already exists, try another!','success':False})
            elif Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
                return JsonResponse({'msg':'GSTIN number already exists, try another!','success':False})
            elif Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
                return JsonResponse({'msg':'PAN No already exists, try another!','success':False})
            elif Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
                return JsonResponse({'msg':'Phone Number already exists, try another!','success':False})
            elif Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
                return JsonResponse({'msg':'Email already exists, try another!','success':False})

            cust = Fin_Customers(
                Company = com,
                LoginDetails = data,
                title = request.POST['title'],
                first_name = fName,
                last_name = lName,
                company = request.POST['company_name'],
                location = request.POST['location'],
                place_of_supply = request.POST['place_of_supply'],
                gst_type = request.POST['gst_type'],
                gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
                pan_no = pan,
                email = email,
                mobile = phn,
                website = request.POST['website'],
                price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
                payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
                opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
                open_balance_type = request.POST['balance_type'],
                current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
                credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']),
                billing_street = request.POST['street'],
                billing_city = request.POST['city'],
                billing_state = request.POST['state1'],
                billing_pincode = request.POST['pincode'],
                billing_country = request.POST['country'],
                ship_street = request.POST['shipstreet'],
                ship_city = request.POST['shipcity'],
                ship_state = request.POST['shipstate'],
                ship_pincode = request.POST['shippincode'],
                ship_country = request.POST['shipcountry'],
                status = 'Active'
            )
            cust.save()

            #save transaction

            Fin_Customers_History.objects.create(
                Company = com,
                LoginDetails = data,
                customer = cust,
                action = 'Created'
            )
            customers = [{'id': cust.id, 'first_name': cust.first_name , 'last_name': cust.last_name}]
            return JsonResponse({'success': True, 'customers': customers}, content_type='application/json')

        else:
            print('------error on line 17973--------------')
            return JsonResponse({'error': 'Invalid request method'})
    else:
        print('------error on line 17976--------------')
        return JsonResponse({'error': 'User not logged in'})

def Fin_createNewItem_modal(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            name = request.POST['name']
            type = request.POST['type']
            unit = request.POST.get('unit')
            if request.POST['hsn']:
                hsn = request.POST['hsn']
                sac = None
            elif request.POST['sac']:
                sac = request.POST['sac']
                hsn = None
            tax = request.POST['taxref']
            gstTax = 0 if tax == 'non taxable' else request.POST['intra_st']
            igstTax = 0 if tax == 'non taxable' else request.POST['inter_st']
            purPrice = request.POST['pcost']
            purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
            purDesc = request.POST['pur_desc']
            salePrice = request.POST['salesprice']
            saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
            saleDesc = request.POST['sale_desc']
            inventory = request.POST.get('invacc')
            stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
            stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
            minStock = request.POST['min_stock']
            createdDate = date.today()
            
            #save item and transaction if item or hsn doesn't exists already
            if Fin_Items.objects.filter(Company=com, name__iexact=name).exists():
                res = f"{name} already exists, try another!"
                return JsonResponse({'status': False, 'msg':res})
            elif Fin_Items.objects.filter(Q(Company=com) & (Q(hsn__iexact=hsn) & Q(hsn__isnull=False))).exists():
                res = f"HSN - {hsn} already exists, try another.!"
                return JsonResponse({'status': False, 'msg':res})
            elif Fin_Items.objects.filter(Q(Company=com) & (Q(sac__iexact=sac) & Q(sac__isnull=False))).exists():
                res = f"SAC - {sac} already exists, try another.!"
                return JsonResponse({'status': False, 'msg':res})
            else:
                item = Fin_Items(
                    Company = com,
                    LoginDetails = data,
                    name = name,
                    item_type = type,
                    unit = unit,
                    hsn = hsn,
                    sac=sac,
                    tax_reference = tax,
                    intra_state_tax = gstTax,
                    inter_state_tax = igstTax,
                    sales_account = saleAccount,
                    selling_price = salePrice,
                    sales_description = saleDesc,
                    purchase_account = purAccount,
                    purchase_price = purPrice,
                    purchase_description = purDesc,
                    item_created = createdDate,
                    min_stock = minStock,
                    inventory_account = inventory,
                    opening_stock = stock,
                    current_stock = stock,
                    stock_in = 0,
                    stock_out = 0,
                    stock_unit_rate = stockUnitRate,
                    status = 'Active'
                )
                item.save()

                #save transaction

                Fin_Items_Transaction_History.objects.create(
                    Company = com,
                    LoginDetails = data,
                    item = item,
                    action = 'Created'
                )
                
                Items = [{'id': item.id, 'name': item.name }]
                return JsonResponse({'success': True, 'Items': Items}, content_type='application/json')

        return JsonResponse({'error': 'Invalid request method'})
    else:
       return JsonResponse({'error': 'User not logged in'})

def Fin_saveItemUnit_modal(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == "POST":
            Name = request.POST['name'].upper()

            if Fin_Units.objects.filter(Company = com, name = Name).exists():
                return JsonResponse({'status':False, 'message':'Unit already exists.!'})
            else:
                unit = Fin_Units(
                    Company = com,
                    name = Name
                )
                unit.save()
                return JsonResponse({'status':True})
                
def Fin_end_date(request):
    paymentID = request.GET.get('payment')
    day = Fin_Company_Payment_Terms.objects.get(id=paymentID)
    return JsonResponse({'countDays' : day.days}, content_type='application/json')

def Fin_recurring_bill_email(request):
    try:
        if request.method == 'POST':
            emails_string = request.POST['email_ids']
            pk = request.POST['bill_id_email']
            cmpID = request.POST['company_ID_email']
            data = Fin_Recurring_Bills.objects.get(id=pk)
            cmp = Fin_Company_Details.objects.get(id=cmpID)
            items = Fin_Recurring_Bill_Items.objects.filter(recurring_bill_id = pk)
            keyy = 1
            # Split the string by commas and remove any leading or trailing whitespace
            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = "Here's the requested profile"
            companyData = {
            'caddress':cmp.Address,
            'city':cmp.City,
            'state':cmp.State,
            'pincode':cmp.Pincode,
            'phone':cmp.Contact,
            'email':cmp.Email
            }
            

            context = {'companyName': cmp.Company_name, 'bill1': data,'companyData':companyData,'email_message': email_message,'items':items}
            print('context working')

            if keyy == '0' or keyy == '1' :
                template_path = 'company/Fin_Recurring_Bill_Template1_PDF.html'
                print('tpath working1')

                template = get_template(template_path)
                print('template working1')

                html = template.render(context)
                print('html working1')

                result = BytesIO()
                print('bytes working1')

                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result,path='company/Fin_Recurring_Bill_Template1_PDF.html',base_url=request.build_absolute_uri('/static/assets/css/bootstrap.min.css'))
                print('pisa working1')
            
            elif keyy == '2':
                template_path = 'company/Fin_Recurring_Bill_Template2_PDF.html'
                print('tpath working2')

                template = get_template(template_path)
                print('template working2')

                html = template.render(context)
                print('html working2')

                result = BytesIO()
                print('bytes working2')

                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result,path='company/Fin_Recurring_Bill_Template2_PDF.html',base_url=request.build_absolute_uri('/static/assets/css/bootstrap.min.css'))
                print('pisa working2')
            
            elif keyy == '3':
                template_path = 'company/Fin_Recurring_Bill_Template3_PDF.html'
                print('tpath working3')

                template = get_template(template_path)
                print('template working3')

                html = template.render(context)
                print('html working3')

                result = BytesIO()
                print('bytes working3')

                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result,path='company/Fin_Recurring_Bill_Template3_PDF.html',base_url=request.build_absolute_uri('/static/assets/css/bootstrap.min.css'))
                print('pisa working3')

            elif keyy == '4':
                template_path = 'company/Fin_Recurring_Bill_Slip_PDF.html'
                print('tpath working4')

                template = get_template(template_path)
                print('template working4')

                html = template.render(context)
                print('html working4')

                result = BytesIO()
                print('bytes working4')

                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result,path='company/Fin_Recurring_Bill_Slip_PDF.html',base_url=request.build_absolute_uri('/static/assets/css/bootstrap.min.css'))
                print('pisa working4')

            if pdf.err:
                raise Exception(f"PDF generation error: {pdf.err}")

            pdf = result.getvalue()
            print('')
            filename = f"Recurring_Bill_No.{data.recurring_bill_number}.pdf"
            subject = f"Here is the details of Recurring_Bill_No.{data.recurring_bill_number}.pdf"
            email = EmailMessage(subject, f"Hi, \n{email_message} -of -{cmp.Company_name}. ", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)
            messages.success(request, 'Report has been shared via email successfully..!')
            # return JsonResponse({'success': True})
            return redirect(reverse('Fin_recurring_bill_overview', kwargs={'pk': pk}))
    except Exception as e:
        messages.error(request, f'Error while sending report: {e}')
        # return JsonResponse({'error': str(e)})
        return redirect(reverse('Fin_recurring_bill_overview', kwargs={'pk': pk}))

def Fin_recurring_bill_comment(request):
    if request.method == 'POST':
        print(request.POST,'---------2332323---------')  
        sid = request.session.get('s_id')
        comment = request.POST.get('comment')
        billID = request.POST.get('bill_id')
        companyID = request.POST.get('company_ID')

        NewComment = Fin_Recurring_Bill_Comments(company_id = companyID,
                                            login_details_id = sid,
                                            recurring_bill_id = billID,
                                            comment = comment)
        NewComment.save()

        comments = Fin_Recurring_Bill_Comments.objects.filter(company_id=companyID, recurring_bill_id=billID)
        if comments.exists():
            for index, comment_obj in enumerate(comments):
                comment_obj.index = index + 1
        else:
            index = 0
        return JsonResponse({'success': True,'comments': list(comments.values())}, safe=False)
        
        # return redirect(reverse('Fin_recurring_bill_overview', kwargs={'pk': billID}))

def Fin_recurring_bill_comment_delete(request,pk,id):
    comment = Fin_Recurring_Bill_Comments.objects.get(id=pk)
    comment.delete()
    redirect_url = reverse('Fin_recurring_bill_overview', args=[id])
    return redirect(redirect_url)

def Fin_recurring_bill_history(request,pk):
    sid = request.session['s_id']
    loginn = Fin_Login_Details.objects.get(id=sid)
    RB = Fin_Recurring_Bills.objects.get(id=pk)
    history = Fin_Recurring_Bill_History.objects.filter(recurring_bill_id=pk)
    if loginn.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
    elif loginn.User_Type == 'Staff' :
        com = Fin_Staff_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.company_id_id, status = 'New')

    return render(request,'company/Fin_Recurring_Bill_History.html',{'history':history,'RB':RB,'allmodules':allmodules,'com':com,'data':loginn})

def Fin_recurring_bill_convert(request,pk):
    recurBill = Fin_Recurring_Bills.objects.get(id=pk)
    recurBill.status = 'Save'
    recurBill.save()
    messages.info(request,'Bill Converted Successfully !')
    return redirect('Fin_recurring_bill_list')

def Fin_shareRBToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        inv = Fin_Recurring_Bills.objects.get(id = id)
        items = Fin_Recurring_Bill_Items.objects.filter(recurring_bill = inv)
        companyData = {
            'caddress':com.Address,
            'city':com.City,
            'state':com.State,
            'pincode':com.Pincode,
            'phone':com.Contact,
            'email':com.Email
            }
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = 'Here is the requested Recurring Bill'
                # print(emails_list)
            
                context = {'companyName': com.Company_name, 'bill1': inv,'companyData':companyData,'email_message': email_message,'items':items}
                template_path = 'company/Fin_Recurring_Bill_PDF.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Invoice_{inv.recurring_bill_number}'
                subject = f"Invoice_{inv.recurring_bill_number}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Invoice for - INVOICE-{inv.recurring_bill_number}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Recurring Bill details has been shared via email successfully..!')
                return redirect(Fin_recurring_bill_overview,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_recurring_bill_overview, id)



def Fin_check_recurring_bill_number_editpage(request,pk):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id        
        RBNo = request.GET['RbNum'].upper()
        nxtRb = ""
        RB = Fin_Recurring_Bills.objects.get(id=pk)
        curRb = RB.recurring_bill_number
        print(curRb,'currentrecuringbilllll')
        print(RBNo,'inout nummm')
        lastRb = Fin_Recurring_Bills.objects.filter(company_id = com.id).last()
        if lastRb:
            rb_no = str(lastRb.recurring_bill_number)
            prefix = ''.join(filter(str.isalpha, rb_no))  # Extract prefix letters
            num_part = ''.join(filter(str.isdigit, rb_no))  # Extract numeric part
            rb_num = int(num_part) + 1 
            padded_rb_num = str(rb_num).zfill(len(num_part))
            nxtRb = prefix + padded_rb_num

        if Fin_Recurring_Bills.objects.filter(company = com, recurring_bill_number__iexact = RBNo).exclude(id=pk).exists():
            return JsonResponse({'status':False, 'message':'Recurring Bill No already Exists.!'})
        elif curRb == RBNo:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
        elif nxtRb != "" and RBNo != nxtRb:
            return JsonResponse({'status':False, 'message':'Bill No is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def Fin_get_bank_details(request,bankNum):
        bank = Fin_Banking.objects.get(account_number=bankNum)
        data = {
            'acc_number': bank.account_number,
        }
        return JsonResponse(data)

def Fin_check_hsn_RB(request):
    hsnVal = request.POST['hsn']
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id=s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
    if Fin_items.objects.filter(Company=com,hsn=hsnVal).exists():
        data = {
            'status':True
        }
        return JsonResponse(data)
    else:
        data = {
            'status':False
        }
        return JsonResponse(data)

def Fin_get_pricelist_details(request,price_id,items_id):
    plist = Fin_Price_List.objects.get(id=price_id)

    if plist.item_rate == "Customized individual rate":
        lists = Fin_PriceList_Items.objects.get(list_id=price_id,item_id=items_id)
        cusRate = lists.custom_rate
        print(cusRate)
        return JsonResponse({'opr':'Custom','customerRate':cusRate})
        
    else:
        if plist.up_or_down == 'Markup':
            perc = int(plist.percentage)
            return JsonResponse({'opr':'UP','perc':perc})
        else:
            perc = int(plist.percentage)
            return JsonResponse({'opr':'DOWN','perc':perc
            })
            
# harikrishnan end-------------------------

def loan_bankdata_repayment(request):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = login)
        customer= request.GET.get('id')
        cust = Fin_Banking.objects.get(id=customer,company_id=com)
        data7 = {'acc': cust.account_number,'name':cust.bank_name}
        return JsonResponse(data7)

      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = login)
        customer = request.GET.get('id')
        cust = Fin_Banking.objects.get(id=customer,company_id=staf.company_id)
        data7 = {'acc': cust.account_number,'name':cust.bank_name}
        return JsonResponse(data7)
        
        
#...............Payment Received..................Antony Tom...........

def Fin_view_payment_received(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        payment = Fin_Payment_Received.objects.filter(company = cmp)


        return render(request,'company/Fin_view_payment_received.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data,'payment':payment})
    else:
       return redirect('/')

def Fin_add_payment_received(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        customer = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        tod = datetime.now().strftime('%Y-%m-%d')
        pTerms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp,type='Sales',status = 'Active')
        bnk_acnt = Fin_Banking.objects.filter(company = cmp)

        latest_pay = Fin_Payment_Received.objects.filter(company = cmp).order_by('-id').first()

        new_number = int(latest_pay.referance_no) + 1 if latest_pay else 1

        if Fin_Payment_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Payment_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1



        nxtInv = ""
        lastInv = Fin_Payment_Received.objects.filter(company = cmp).last()
        if lastInv:
            inv_no = str(lastInv.payment_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)
        else:
            nxtInv = 'PL01'

       
        

        return render(request,'company/Fin_add_payment_received.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data,'customer':customer,'tod':tod,'pTerms':pTerms,'list':lst,'next_count':new_number,'nxtInv':nxtInv,'bnk_acnt':bnk_acnt})
    else:
       return redirect('/')


def get_payemnt_bankacc_num(request):
    try:
        if 's_id' in request.session:
            s_id = request.session['s_id']
            data = Fin_Login_Details.objects.get(id=s_id)

            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
                cmp = com
            else:
                com = Fin_Staff_Details.objects.get(Login_Id=s_id)
                cmp = com.company_id

            if request.method == 'POST':
                bank = Fin_Banking.objects.get(id=request.POST.get('bankId'), company=cmp)
                return JsonResponse({'status': True, 'accountNumber': bank.account_number})
            else:
                return JsonResponse({'status': False, 'error': 'Invalid request method'})
        else:
            return JsonResponse({'status': False, 'error': 'Session ID not found'})
    except Exception as e:
        print(e)
        return JsonResponse({'status': False, 'error': str(e)})

def Fin_paymentreceivecustomer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        
        custId = request.POST['id']
        cust = Fin_Customers.objects.get(id = custId)

        if cust:
            if cust.price_list and cust.price_list.type == 'Sales':
                list = True
                listId = cust.price_list.id
                listName = cust.price_list.name
            else:
                list = False
                listId = None
                listName = None
            context = {
                'status':True, 'id':cust.id, 'email':cust.email, 'gstType':cust.gst_type,'shipState':cust.place_of_supply,'gstin':False if cust.gstin == "" or cust.gstin == None else True, 'gstNo':cust.gstin, 'priceList':list, 'ListId':listId, 'ListName':listName,
                'street':cust.billing_street, 'city':cust.billing_city, 'state':cust.billing_state, 'country':cust.billing_country, 'pincode':cust.billing_pincode
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status':False, 'message':'Something went wrong..!'})
    else:
       return redirect('/')


def Fin_create_receivepayment_customer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        fName = request.POST['first_name']
        lName = request.POST['last_name']
        gstIn = request.POST['gstin']
        pan = request.POST['pan_no']
        email = request.POST['email']
        phn = request.POST['mobile']

        if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            res = f"Customer `{fName} {lName}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif gstIn != "" and Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            res = f"GSTIN `{gstIn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
            res = f"PAN No `{pan}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
            res = f"Phone Number `{phn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
            res = f"Email `{email}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})

        cust = Fin_Customers(
            Company = com,
            LoginDetails = data,
            title = request.POST['title'],
            first_name = fName,
            last_name = lName,
            company = request.POST['company_name'],
            location = request.POST['location'],
            place_of_supply = request.POST['place_of_supply'],
            gst_type = request.POST['gst_type'],
            gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
            pan_no = pan,
            email = email,
            mobile = phn,
            website = request.POST['website'],
            price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
            payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
            opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            open_balance_type = request.POST['balance_type'],
            current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']),
            billing_street = request.POST['street'],
            billing_city = request.POST['city'],
            billing_state = request.POST['state'],
            billing_pincode = request.POST['pincode'],
            billing_country = request.POST['country'],
            ship_street = request.POST['shipstreet'],
            ship_city = request.POST['shipcity'],
            ship_state = request.POST['shipstate'],
            ship_pincode = request.POST['shippincode'],
            ship_country = request.POST['shipcountry'],
            status = 'Active'
        )
        cust.save()

        #save transaction

        Fin_Customers_History.objects.create(
            Company = com,
            LoginDetails = data,
            customer = cust,
            action = 'Created'
        )

        return JsonResponse({'status': True})
    
    else:
        return redirect('/')

def Fin_getpaymentreceivecustomers(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        options = {}
        option_objects = Fin_Customers.objects.filter(Company = com, status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')


def Fin_newCustomerPaymentReceivedTerm(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        term = request.POST['term']
        days = request.POST['days']

        if not Fin_Company_Payment_Terms.objects.filter(Company = com, term_name__iexact = term).exists():
            Fin_Company_Payment_Terms.objects.create(Company = com, term_name = term, days =days)
            
            list= []
            terms = Fin_Company_Payment_Terms.objects.filter(Company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False})

    else:
        return redirect('/')

def Fin_check_paymentreceived_CustomerName(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        fName = request.POST['fname']
        lName = request.POST['lname']

        if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            msg = f'{fName} {lName} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
    
def Fin_check_paymentreceived_CustomerGSTIN(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        gstIn = request.POST['gstin']

        if Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            msg = f'{gstIn} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
    
def Fin_check_paymentreceived_CustomerPAN(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        pan = request.POST['pan']

        if Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
            msg = f'{pan} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')

def Fin_check_paymentreceived_CustomerPhone(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        phn = request.POST['phone']

        if Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
            msg = f'{phn} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')

def Fin_check_paymentreceived_CustomerEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        email = request.POST['email']

        if Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
            msg = f'{email} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')


def Fin_Create_Payment_Received(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id
        bnk_acnt = Fin_Banking.objects.filter(company = com)
        bank_name_list = [account.bank_name for account in bnk_acnt]
        if request.method == 'POST':

            payment = Fin_Payment_Received(
                company=com,
                logindetails=com.Login_Id,
                customer=Fin_Customers.objects.get(id=request.POST['customer']),
                referance_no=request.POST['ref_num'],
                payment_date=request.POST['paymdate'],
                payment_no=request.POST['payment_num'],
                payment_method=None if request.POST['pmethod'] == "" else request.POST['pmethod'],
                cheque_no= 'NULL' if request.POST['chq_id'] == "" or request.POST['pmethod'] !='Cheque' else request.POST['chq_id'],
                upi_no='NULL' if request.POST['upiid'] == "" or request.POST['pmethod'] !='UPI' else request.POST['upiid'],
                bank_no="NULL" if request.POST['bank_acc'] == ""  or request.POST['pmethod'] not in bank_name_list else request.POST['bank_acc'],
                total_amount=request.POST['tamount'],
                total_balance=request.POST['tbalance'],
                total_payment=request.POST['tpayment'],
            )

            payment.save()
            pdate = tuple(request.POST.getlist("inv_date[]"))
            pduedate = tuple(request.POST.getlist("duedate[]"))
            pinvoice_type = tuple(request.POST.getlist("inv_type[]"))
            pinvoice_no = tuple(request.POST.getlist("trans_no[]"))
            pinvoice_amount = tuple(request.POST.getlist("inv_amount[]"))
        
            pinvoice_payment = tuple(request.POST.getlist("inv_payment[]"))
           
            p_invoice_balance = tuple(request.POST.getlist("inv_balance[]"))
          
            

            payment_received = Fin_Payment_Received.objects.get(id=payment.id)
            mapped = []  # Initialize mapped
            if len(pdate) == len(pduedate) == len(pinvoice_type) == len(pinvoice_no) == len(
                    pinvoice_amount) == len(pinvoice_payment) == len(p_invoice_balance):
                mapped = zip(pdate, pduedate, pinvoice_type, pinvoice_no, pinvoice_amount, pinvoice_payment,
                             p_invoice_balance)
                mapped = list(mapped)
                print(mapped)
            for ele in mapped:
                Fin_Payment_Invoice.objects.create(pdate=ele[0], pduedate=ele[1], pinvoice_type=ele[2],
                                                   pinvoice_no=ele[3], pinvoice_amount=ele[4],
                                                   pinvoice_payment=ele[5], p_invoice_balance=ele[6],
                                                   payment=payment_received, company=com, logindetails=data,
                                                   
                                                   )
                
            tr_history = Fin_Payment_History(
                Company=com,
                LoginDetails=data,
                payment=payment,
                action='Created'
            )
            tr_history.save()

            if 'save_as_draft' in request.POST:
                payment.status = "Draft"
            elif "save_as_saved" in request.POST:
                payment.status = "Saved"

            payment.save()

            return redirect("Fin_view_payment_received")
        else:
            return redirect("Fin_view_payment_received")
    else:
        return redirect('/')


def Fin_overview_payment_received(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        payment = Fin_Payment_Received.objects.get(id = id)
        cmt = Fin_Payment_Comments.objects.filter(payment = payment)
        hist = Fin_Payment_History.objects.filter(payment = payment).last()
        created = Fin_Payment_History.objects.get(payment = payment, action = 'Created')
        pinvoice = Fin_Payment_Invoice.objects.filter(payment = payment,company=com)
        
        allmodules = Fin_Modules_List.objects.get(company_id = com,status = 'New')

        created = Fin_Payment_History.objects.get(payment = payment, action = 'Created')

        
        return render(request,'company/Fin_overview_payment_received.html',{'allmodules':allmodules,'com':com,'cmp':com, 'data':data,'payment':payment,'cmt':cmt,'hist':hist,'created':created,'pinvoice':pinvoice})  

def Fin_convertpaymentsave(request,id):
    if 's_id' in request.session:

        payment = Fin_Payment_Received.objects.get(id = id)
        payment.status = 'Saved'
        payment.save()
        return redirect(Fin_overview_payment_received, id)

def Fin_payment_received_Comment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id

        payment = Fin_Payment_Received.objects.get(id=id)
        if request.method == "POST":
            cmt = request.POST.get('comment', '').strip()
            if cmt:
                Fin_Payment_Comments.objects.create(Company=com, payment=payment, comments=cmt)
                return JsonResponse({'success': True, 'message': 'Comment added successfully'})
            else:
                return JsonResponse({'success': False, 'message': 'Empty comment'})
        else:
            return JsonResponse({'success': False, 'message': 'Invalid request method'})
    else:
        return JsonResponse({'success': False, 'message': 'Session not found'})


def Fin_deletePaymentComment(request, id):
    if 's_id' in request.session:
        try:
            cmt = Fin_Payment_Comments.objects.get(id=id)
            pay = cmt.payment.id
            cmt.delete()
            return JsonResponse({'success': True, 'payment_id': pay})
        except Fin_Payment_Comments.DoesNotExist:
            return JsonResponse({'success': False, 'error': 'Comment not found'})
    else:
        return JsonResponse({'success': False, 'error': 'Session not found'})
    
def Fin_Payment_Received_History(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        payment = Fin_Payment_Received.objects.get(id = id)
        history = Fin_Payment_History.objects.filter(payment = payment)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        
        return render(request,'company/Fin_Payment_Received_History.html',{'allmodules':allmodules,'com':com,'data':data,'payment':payment, 'history':history})
    else:
       return redirect('/')
    

def Fin_deletePayment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        payment = Fin_Payment_Received.objects.get( id = id)
        payment_invoice=Fin_Payment_Invoice.objects.filter(payment = payment,company=com)

        if Fin_Payment_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Payment_Reference.objects.get(Company = com)
            if int(payment.referance_no) > int(deleted.reference_no):
                deleted.reference_no = payment.referance_no
                deleted.save()
        else:
            Fin_Payment_Reference.objects.create(Company = com, reference_no = payment.referance_no,LoginDetails=data)
        
        payment.delete()
        payment_invoice.delete()
        return redirect(Fin_view_payment_received)



def Fin_sharePaymentToEmail(request,id):

    if request.method == 'POST':
        if 's_id' in request.session:
            s_id = request.session['s_id']
            data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        fromdate = request.POST['FromD']
        todate = request.POST['ToD']
        emails_string = request.POST['email_ids']
        if fromdate == '' and todate == '' :
            data = Fin_Payment_Received.objects.filter(company=com)
            print(data,'data 1')
        else:
            data = Fin_Payment_Received.objects.filter(company=com,start_date__gte=fromdate, start_date__lte=todate)
            print(data,'data 2')


        payment=Fin_Payment_Received.objects.filter(id=id)
        pid=''
        for p in payment:
            pid =p.id
        

        emails_list = [email.strip() for email in emails_string.split(',')]
        email_message = request.POST['email_message']

        pdf_data = request.POST.get('pdf_data')
        pdf_binary = base64.b64decode(pdf_data)
        pdf_file = ContentFile(pdf_binary, name='Payment.pdf')
                
        filename = f'PaymentReceived-{com.Company_name}.pdf'
        subject = f"PaymentReceived_details - {com.Company_name}"
        email_message = request.POST.get('email_message', '') 

            
        emails_list = request.POST.get('email_ids', '').split(',')

            
        email = EmailMultiAlternatives(
                subject,
                f"Hi, \n{email_message} -of -{com.Company_name}. ",
                from_email=settings.EMAIL_HOST_USER,
                to=emails_list
        )

            
        email.attach(filename, pdf_file.read(), "application/pdf")
        email.send(fail_silently=False)

        # messages.success(request, 'Report has been shared via email successfully..!')
        print('jso')
        return JsonResponse({'message':''})
    else:        
        return JsonResponse({'message':''})



def fetch_invoice_data(request):
    if request.method == 'POST':
        if 's_id' in request.session:
            s_id = request.session['s_id']
            data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp1 = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp1 = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        id = request.POST['customer']
        # cId = request.POST['custId']
        # print(cId)
        # x = cId.split()
        # x.append(" ")
        # a = x[0]
        # b = x[1]
        # if x[2] is not None:
        #     b = x[1] + " " + x[2]
        # print(a)
        # print(b)
        cstmr = Fin_Customers.objects.get(id = id, Company = cmp1)
        c_name = str(cstmr.id)
        c_name1 = str(cstmr.id)

        # custobject = Fin_Customers.objects.values().filter(first_name=a, last_name=b, Company=cmp1)
        # invitems = invoice.objects.values().filter(customername=id ,cid =cmp1,status='Approved')
        paymentList = []

        custopenblan = Fin_Customers.objects.get(id=id,Company =cmp1)
        
        if custopenblan.opening_balance > 0:
            try:
                cust1 = Fin_Customers.objects.get(id=id,Company =cmp1)
                dict = {
                    'date':cust1.date.strftime('%m/%d/%Y'),'inv_type':'Opening Balance','trans_no':'','inv_amount':cust1.opening_balance,'inv_payment':'0','inv_balance':cust1.opening_balance
                }
                paymentList.append(dict)
                date = cust1.date
                opb = cust1.opening_balance
                
                obdue = cust1.open_balance_type

            except:
                cust1 = Fin_Customers.objects.get(id=id,Company =cmp1)
                dict = {
                    'date':cust1.date.strftime('%m/%d/%Y'),'inv_type':'Opening Balance','trans_no':'','inv_amount':cust1.opening_balance,'inv_payment':'0','inv_balance':cust1.opening_balance
                }
                paymentList.append(dict)
                date = cust1.date
                opb = cust1.opening_balance
                
                obdue = cust1.opening_balance_due
        
        
        invitems = Fin_Invoice.objects.filter(Customer=c_name ,Company =cmp1,status='Saved')
        for i in invitems:
            dict = {
                    'date':i.invoice_date.strftime('%m/%d/%Y'),'inv_type':'Invoice','trans_no':i.invoice_no,'inv_amount':i.grandtotal,'inv_payment':i.paid_off,'inv_balance':i.balance
            }
            paymentList.append(dict)
        

        recinvitesm = Fin_Recurring_Invoice.objects.filter(Customer=c_name ,Company =cmp1)
        for i in recinvitesm:
            dict = {
                    'date':i.start_date.strftime('%m/%d/%Y'),'inv_type':'Recurring Invoice','trans_no':i.rec_invoice_no,'inv_amount':i.grandtotal,'inv_payment':i.paid_off,'inv_balance':i.balance
            }
            paymentList.append(dict)
        credit = Fin_CreditNote.objects.filter(Customer=c_name ,Company =cmp1)
        for i in credit:
            dict = {
                    'date':i.creditnote_date.strftime('%m/%d/%Y'),'inv_type':'Credit Note','trans_no':i.creditnote_number,'inv_amount':i.grandtotal,'inv_payment':i.paid,'inv_balance':i.balance
            }
            print("Credit Note Values:")
            print("Date:", dict['date'])
            print("Type:", dict['inv_type'])
            print("Transaction Number:", dict['trans_no'])
            print("Amount:", dict['inv_amount'])
            print("Payment:", dict['inv_payment'])
            print("Balance:", dict['inv_balance'])
            paymentList.append(dict)
           

        x_data = list(invitems)
        
 
        # return JsonResponse({"status":" not","invitem":x_data,"ct":ct,'date':date,'opb':opb,'obdue':obdue,})
        return JsonResponse(json.dumps(paymentList),content_type="application/json", safe=False)

def Fin_edit_payment_received(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        payment = Fin_Payment_Received.objects.get(id=id)
        customer = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        pTerms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp,type='Sales',status = 'Active')
        bnk_acnt = Fin_Banking.objects.filter(company = cmp)
        payemnt_invoice = Fin_Payment_Invoice.objects.filter(payment=payment,company = cmp)

        return render(request,'company/Fin_edit_payment_received.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data,'customer':customer,'pTerms':pTerms,'list':lst,'payment':payment,'bnk_acnt':bnk_acnt,'payemnt_invoice':payemnt_invoice})
    else:
       return redirect('/')


def Fin_Update_Payment_Received(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        payment=Fin_Payment_Received.objects.get(id=id)
        bnk_acnt = Fin_Banking.objects.filter(company = com)
        bank_name_list = [account.bank_name for account in bnk_acnt]
        if request.method == 'POST':

            payment.customer = Fin_Customers.objects.get(id = request.POST['customer'])
            # customer_email = request.POST['customerEmail'],
            # billing_address = request.POST['bill_address'],
            # gst_treatment = request.POST['gst_treatment'],
            # gstin = request.POST['gstin'],
            payment.referance_no = request.POST['ref_num']
            payment.payment_date = str(request.POST['paymdate'])
            payment.payment_no = request.POST['payment_num']
            payment.payment_method = None if request.POST['pmethod'] == "" else request.POST['pmethod']
            # payment.cheque_no = None if request.POST['chq_id'] == "" or request.POST['pmethod'] !='Cheque' else request.POST['chq_id']
            if request.POST['chq_id'] == "" or request.POST['pmethod'] !='Cheque':
                payment.cheque_no = 'NULL'
            else:
                payment.cheque_no = request.POST['chq_id']
            # payment.upi_no = None if request.POST['upiid'] == "" or request.POST['pmethod'] !='UPI':
            if request.POST['upiid'] == "" or request.POST['pmethod'] !='UPI':
                payment.upi_no = 'NULL'
            else:
                payment.upi_no = request.POST['upiid']
            if request.POST['bank_acc'] == "" or request.POST['pmethod'] not in bank_name_list:
                payment.bank_no = 'NULL'
            else:
                payment.bank_no = request.POST['bank_acc']

            payment.total_amount=request.POST['tamount']
            payment.total_balance=request.POST['tbalance']
            payment.total_payment=request.POST['tpayment']
            Fin_Payment_Invoice.objects.filter(payment=payment,company=com).delete()

            payment.save()

            pdate =  tuple(request.POST.getlist("inv_date[]"))
            pduedate =  tuple(request.POST.getlist("duedate[]"))
            pinvoice_type =  tuple(request.POST.getlist("inv_type[]"))
            pinvoice_no =  tuple(request.POST.getlist("trans_no[]"))
            pinvoice_amount =  tuple(request.POST.getlist("inv_amount[]"))
            pinvoice_payment =  tuple(request.POST.getlist("inv_payment[]"))
            p_invoice_balance =  tuple(request.POST.getlist("inv_balance[]"))

            payment_received = Fin_Payment_Received.objects.get(id=payment.id)
            mapped = []  # Initialize mapped
            if len(pdate)==len(pduedate)==len(pinvoice_type)==len(pinvoice_no)==len(pinvoice_amount)==len(pinvoice_payment)==len(p_invoice_balance):
                mapped=zip(pdate, pduedate, pinvoice_type, pinvoice_no, pinvoice_amount, pinvoice_payment, p_invoice_balance)
                mapped=list(mapped)
            for ele in mapped:
                Fin_Payment_Invoice.objects.create(pdate=ele[0], pduedate=ele[1], pinvoice_type=ele[2], pinvoice_no=ele[3], pinvoice_amount=ele[4], pinvoice_payment=ele[5], p_invoice_balance=ele[6], payment=payment_received, company=com,logindetails=data)

            tr_history=Fin_Payment_History(
                                            Company = com,
                                            LoginDetails = data,
                                            payment = payment,
                                            action = 'Updated'
                                        )
            tr_history.save() 
           
            return redirect(Fin_overview_payment_received,id)
        else:
            return redirect(Fin_overview_payment_received,id)
    else:
       return redirect('/')


def payment_add_file(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id    
        
        payment = Fin_Payment_Received.objects.get(id=id,company=com)

    if request.method == 'POST':
        
        if len(request.FILES) != 0:
           
            if payment.file != "default.jpg":
                 os.remove(payment.file.path)
                
            payment.file=request.FILES['file']
        
        payment.save()
        return redirect('Fin_overview_payment_received',id)
        
#End
#------------------------------Salary Details---------------------------------------#

def Fin_salary_details(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)

        for salary_detail in salary_details:
                try:
                    salary_detail.month = int(salary_detail.month)
                    salary_detail.month_name = calendar.month_name[salary_detail.month]

                except (ValueError, IndexError):
                    salary_detail.month_name = 'Invalid Month'

                salary_detail.save()  
                 
              
        return render(request,'company/salarydetails/Fin_salarydetails.html',{'allmodules':allmodules,
                                                                              'com':com,'data':data,
                                                                              'salary_details':salary_details
                                                                              })
    else:
       return redirect('/')

def sort_employee_name_salary(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com
           

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id

        salary_details = Fin_SalaryDetails.objects.filter(company=company).order_by('employee__first_name', 'employee__last_name')
        for salary_detail in salary_details:
            try:
                salary_detail.month_name = calendar.month_name[int(salary_detail.month)]
            except (ValueError, IndexError):
                salary_detail.month_name = 'Invalid Month'
            salary_detail.save()  
    
        return render(request, 'company/salarydetails/Fin_salarydetails.html', {'salary_details': salary_details,'allmodules':allmodules,'com':com,'data':data})

    else:
       return redirect('/')


def payroll_sort_employeesalary_by_month(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com
           

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id

        
        salary_details = Fin_SalaryDetails.objects.filter(company=company).order_by('month', 'year')
        for salary_detail in salary_details:
            try:
                salary_detail.month_name = calendar.month_name[int(salary_detail.month)]
            except (ValueError, IndexError):
                salary_detail.month_name = 'Invalid Month'
            salary_detail.save()  

        return render(request, 'company/salarydetails/Fin_salarydetails.html', {'salary_details': salary_details,'allmodules':allmodules,'com':com,'data':data})
    else:
      
      return redirect('/')

def filter_by_status_save(request):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id


        salary_details = Fin_SalaryDetails.objects.filter(company=company, status='save').order_by('employee__first_name', 'employee__last_name')
        for salary_detail in salary_details:
            try:
                salary_detail.month_name = calendar.month_name[int(salary_detail.month)]
            except (ValueError, IndexError):
                salary_detail.month_name = 'Invalid Month'
            salary_detail.save()  
       
        return render(request, 'company/salarydetails/Fin_salarydetails.html', {'salary_details': salary_details,'allmodules':allmodules,'com':com,'data':data})
     else:
      
      return redirect('/')

def filter_by_status_draft(request):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com
           

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id  

        salary_details = Fin_SalaryDetails.objects.filter(company=company, status='draft').order_by('employee__first_name', 'employee__last_name')

        for salary_detail in salary_details:
            try:
                salary_detail.month_name = calendar.month_name[int(salary_detail.month)]
            except (ValueError, IndexError):
                salary_detail.month_name = 'Invalid Month'
            salary_detail.save()  

        return render(request, 'company/salarydetails/Fin_salarydetails.html', {'salary_details': salary_details,'allmodules':allmodules,'com':com,'data':data})
     else:
      
      return redirect('/')


def payroll_addsalarydetails(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company = com.company_id

        if request.method == 'POST':
            employee_id = request.POST.get('employee')
            selected_employee = Employee.objects.get(id=employee_id, company=company)

            casual_leave = int(request.POST.get('casual_leave', 0))
            other_cuttings = Decimal(request.POST.get('other_cuttings', 0))
            add_bonus = Decimal(request.POST.get('add_bonus', 0))
            salary_str = request.POST.get('salary', '0')
            leaves_str = request.POST.get('attendance', '0')
            leave = Decimal(leaves_str) if leaves_str.replace('.', '', 1).isdigit() else Decimal(0)
            holiday = int(request.POST.get('holidays', 0))
            total_working_days = int(request.POST.get('working_days', 0))
            monthly_salary_str = request.POST.get('monthly_salary', '0')
            monthly_salary = Decimal(monthly_salary_str) if monthly_salary_str.replace('.', '', 1).isdigit() else Decimal(0)
            month = int(request.POST.get('month', 0))
            year = int(request.POST.get('year', 0))
            hra = int(request.POST.get('HRA', 0))
            other_allowance = int(request.POST.get('Other_Allowance', 0))
            conveyance_allowance = int(request.POST.get('Conveyance_Allowance', 0))

            if selected_employee.salary_amount:
                _, num_days = monthrange(year, month)
                selected_employee_amount = Decimal(selected_employee.salary_amount)
                daily_wage = selected_employee_amount / num_days
                leave_deduction = round((leave - casual_leave) * daily_wage)
            else:
                leave_deduction = 0

            # submit = request.POST.get('submit')
            # status = "save" if submit == "save" else "draft"
            if 'Save' in request.POST:
                status='save' 
            else:
                status='draft'

            salary_detail = Fin_SalaryDetails(
                employee=selected_employee,
                company=company,
                salary_date=request.POST.get('salary_date'),
                month=month,
                year=year,
                casual_leave=casual_leave,
                leave=leave,
                holiday=holiday,
                other_cuttings=other_cuttings,
                add_bonus=add_bonus,
                description=request.POST.get('description'),
                total_salary=monthly_salary,
                total_working_days=total_working_days,
                leave_deduction=leave_deduction,
                status=status,
                hra=hra,
                other_allowance=other_allowance,
                conveyance_allowance=conveyance_allowance,
            )
            salary_detail.save()

            sal_history_obj = Fin_SalaryDetailsHistory()
            sal_history_obj.company = company
            sal_history_obj.login_details = data
            sal_history_obj.salary_details = salary_detail
            sal_history_obj.date = date.today()
            sal_history_obj.action = 'Created'
            sal_history_obj.save()

            return redirect('Fin_salary_details')

        months = list(calendar.month_name)[1:]
        years = range(2000, 2030)
        employees = Employee.objects.filter(company=company,employee_status='Active')
        holiday = Holiday.objects.filter(company=company)

        context = {
            'months': months,
            'years': years,
            'employees': employees,
            'com': com,
            'leave': 0,
            'holiday': 0,
            'working_days': 0,
            'allmodules': allmodules,
            'data': data,
            'salary_details': salary_details,
        }
        return render(request, 'company/salarydetails/Fin_payroll_addsalarydetails.html', context)
    else:
        return redirect('/')
        
def Fin_salarysave(request,employee_id,salary_id):
    sal_obj = Fin_SalaryDetails.objects.get(id=salary_id)
    sal_obj.status='save'
    sal_obj.save()
    return redirect('Fin_salary_overview',employee_id,salary_id)
    
def listemployee_salary(request):
    if request.method == 'POST':
                if 's_id' in request.session:
                    s_id = request.session.get('s_id')
                else:
                    return JsonResponse({'error': 'Session UID not found'}, status=401)
            
                employee_id = request.POST.get('id').split(" ")[0]
                try:
                    cust = Employee.objects.get(id=employee_id)
                    sal_obj = Fin_SalaryDetails.objects.filter(employee=cust).last()


                    employee_mail = cust.employee_mail
                    employee_number = cust.employee_number
                    date_of_joining = cust.date_of_joining
                    salary_amount = cust.salary_amount
                    employee_designation = cust.employee_designation

                    hra = 0  # Initialize hra with a default value

                    if sal_obj is not None:
                        if sal_obj.hra:   
                            hra = sal_obj.hra              
    

                    return JsonResponse({
                        'email': employee_mail,
                        'employeeno': employee_number,
                        'joindate': date_of_joining,
                        'amount': salary_amount,
                        'designation': employee_designation,
                        'hra': hra,

                        
                        

                    }, safe=False)
                except Employee.DoesNotExist:
                    return JsonResponse({'error': 'Selected employee not found.'}, status=404)
                
    return JsonResponse({'error': 'Invalid request method'}, status=400)


import calendar
MONTH_NAMES = {
            1: 'January',
            2: 'February',
            3: 'March',
            4: 'April',
            5: 'May',
            6: 'June',
            7: 'July',
            8: 'August',
            9: 'September',
            10: 'October',
            11: 'November',
            12: 'December',
        }            


def AddEmployeeInSalaryPage(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com
           

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id

        try: 
            if request.POST:
                print('values inserted')
                title = request.POST['Title']
                first_name = request.POST['firstname'].replace(' ','')
                last_name = request.POST['lastname'].replace(' ','')
                alias = request.POST['alias']
                date_of_joining = request.POST['joindate']
                salarydate = request.POST['Salary_Date']
                print(request.POST['amount'])
                salary_amount = request.POST['amount']
                if request.POST['amount'] == '':
                    salary_amount = None
                else:
                    salary_amount = request.POST['amount']

                amountperhour = request.POST['perhour']
                if amountperhour == '' or amountperhour == '0':
                    amountperhour = 0
                else:
                    amountperhour = request.POST['perhour']

                workinghour = request.POST['workhour']
                if workinghour == '' or workinghour == '0':
                    workinghour = 0
                else:
                    workinghour = request.POST['workhour']

                salary_type = request.POST['salary_type']
                employee_number = request.POST['employeeno']
                employee_designation = request.POST['designation']
                employee_current_location = request.POST['location']   
                gender = request.POST['gender']
                image = request.FILES.get('Image', None)
                if image:
                    image = request.FILES['Image']
                else:
                    image = ''
                date_of_birth = request.POST['dateofbirth']
                blood_group = request.POST['bloodgroup']
                mobile = request.POST['mobile']
                emergency_contact = request.POST['generalphone']
                employee_mail = request.POST['email'] 
                fathers_name_mothers_name = request.POST['fathersmothersname']
                spouse_name = request.POST['spousename']
                file = request.FILES.get('File', None)
                if file:
                    file = request.FILES['File']
                else:
                    file=''
                street = request.POST['street']
                city = request.POST['city']
                state = request.POST['state']
                pincode = request.POST['pincode']
                country = request.POST['country']
                temporary_street = request.POST['tempstreet']
                temporary_city = request.POST['tempcity']
                temporary_state = request.POST['tempstate']
                temporary_pincode = request.POST['temppincode']
                temporary_country = request.POST['tempcountry'] 
                provide_bank_details = request.POST['bankdetails']
                account_number = request.POST['acno']
                ifsc = request.POST['ifsccode']
                name_of_bank = request.POST['bankname']
                branch_name = request.POST['branchname']       
                bank_transaction_type = request.POST['transactiontype']
           
                if request.POST['tds_applicable'] == 'Yes':
                    tdsapplicable = request.POST['tds_applicable']
                    tdstype = request.POST['TDS_Type']
                    
                    if tdstype == 'Amount':
                        tdsvalue = request.POST['TDS_Amount']
                    elif tdstype == 'Percentage':
                        tdsvalue = request.POST['TDS_Percentage']
                    else:
                        tdsvalue = 0
                elif request.POST['tds_applicable'] == 'No':
                    tdsvalue = 0
                    tdstype = ''
                    tdsapplicable = request.POST['tds_applicable']
                else:
                    tdsvalue = 0
                    tdstype = ''
                    tdsapplicable = ''
                incometax = request.POST['Income_Tax']
                aadhar_number = request.POST['adharnumber'] 
                universal_account_number = request.POST['universalaccountnumber']
                pan_number = request.POST['pannumber']
                pf_account_number = request.POST['pfaccountnumber']
                pr_account_number = request.POST['praccountnumber']

                if date_of_birth == '':
                    age = 2
                else:
                    dob2 = date.fromisoformat(date_of_birth)
                    today = date.today()
                    age = int(today.year - dob2.year - ((today.month, today.day) < (dob2.month, dob2.day)))    


                if Employee.objects.filter(employee_mail=employee_mail,mobile = mobile,employee_number=employee_number,company_id = company.id).exists():
                            messages.error(request,'user exist')
                            return redirect('payroll_addsalarydetails')
                        
                elif Employee.objects.filter(mobile = mobile,company_id = company.id).exists():
                    messages.error(request,'phone number exist')
                    return redirect('payroll_addsalarydetails')
                
                elif Employee.objects.filter(emergency_contact = emergency_contact,company_id = company.id).exists():
                    messages.error(request,'emergency phone number exist')
                    return redirect('payroll_addsalarydetails')
                
                elif Employee.objects.filter(employee_mail=employee_mail,company_id = company.id).exists():
                    messages.error(request,'email exist')
                    return redirect('payroll_addsalarydetails')
                
                elif Employee.objects.filter(employee_number=employee_number,company_id = company.id).exists():
                    messages.error(request,'employee id exist')
                    return redirect('payroll_addsalarydetails')
                
                elif incometax != '' and Employee.objects.filter(income_tax_number = incometax,company_id = company.id).exists():
                    messages.error(request,'Income Tax Number exist')
                    return redirect('payroll_addsalarydetails')
                
                elif pf_account_number != '' and Employee.objects.filter(pf_account_number = pf_account_number,company_id = company.id).exists():
                    messages.error(request,'PF account number exist')
                    return redirect('payroll_addsalarydetails')
                
                elif aadhar_number != '' and Employee.objects.filter(aadhar_number = aadhar_number,company_id = company.id).exists():
                    messages.error(request,'Aadhar number exist')
                    return redirect('payroll_addsalarydetails')
                
                elif pan_number != '' and Employee.objects.filter(pan_number = pan_number,company_id = company.id).exists():
                    messages.error(request,'PAN number exist')
                    return redirect('payroll_addsalarydetails')
                
                elif universal_account_number != '' and Employee.objects.filter(universal_account_number = universal_account_number,company_id = company.id).exists():
                    messages.error(request,'Universal account number exist')
                    return redirect('payroll_addsalarydetails')
                
                elif pr_account_number != '' and Employee.objects.filter(pr_account_number = pr_account_number,company_id = company.id).exists():
                    messages.error(request,'PR account number exist')
                    return redirect('payroll_addsalarydetails')
                
                elif provide_bank_details.lower() == 'yes':
                    if account_number != '' and Employee.objects.filter(account_number=account_number,company_id = company.id).exists():
                        messages.error(request,'Bank account number already exist')
                        return redirect('payroll_addsalarydetails')
                        
                
                emppayroll = Employee(title=title,first_name=first_name,
                                                    last_name=last_name,alias=alias,company=company,
                                                    employee_current_location=employee_current_location,
                                                    employee_mail=employee_mail,
                                                    mobile=mobile,
                                                    date_of_joining=date_of_joining,
                                                    salary_effective_from=salarydate,                                                  
                                                    salary_amount=salary_amount,amount_per_hour=amountperhour,total_working_hours = workinghour,employee_number=employee_number,
                                                    employee_designation=employee_designation,employee_salary_type =salary_type,
                                                    gender=gender,date_of_birth=date_of_birth,
                                                    blood_group=blood_group,fathers_name_mothers_name=fathers_name_mothers_name,
                                                    spouse_name= spouse_name,upload_image=image,upload_file = file,
                                                    emergency_contact=emergency_contact,
                                                    provide_bank_details=provide_bank_details,account_number=account_number,ifsc=ifsc,
                                                    name_of_bank=name_of_bank, branch_name= branch_name,
                                                    bank_transaction_type=bank_transaction_type,pan_number=pan_number,
                                                    universal_account_number=universal_account_number,
                                                    pf_account_number=pf_account_number,pr_account_number= pr_account_number,                                               
                                                    street=street,income_tax_number = incometax,
                                                    city=city,state=state,employee_status='Active',
                                                    pincode=pincode,country=country,
                                                    temporary_street=temporary_street,temporary_city=temporary_city,
                                                    temporary_state=temporary_state,temporary_pincode=temporary_pincode,
                                                    temporary_country=temporary_country,age = age,
                                                    aadhar_number=aadhar_number, tds_applicable = tdsapplicable, tds_type = tdstype,percentage_amount = tdsvalue
                                                    )
                       
                emppayroll.save()
                print('done')
                return redirect('payroll_addsalarydetails')
        except:
             print('sorry')
             return redirect('payroll_addsalarydetails') 

def getDays(request):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            company=com
        
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            company=com.company_id

        if request.method == 'POST':   
            employee_id = request.POST.get('id')
            empid = Employee.objects.get(id=employee_id)
            month = request.POST.get('month')
            year = request.POST.get('year')
            month = int(month)
            year = int(year)

            try:
                result = Fin_SalaryDetails.objects.get(employee=empid, month=month, year=year)
                if result:
                    return JsonResponse({'error': 'Salary Already Executed.'}, status=404)
                
            except Fin_SalaryDetails.DoesNotExist:

                start_date = datetime(year, month, 1)
                if month == 12:
                    end_date = datetime(year + 1, 1, 1) - timedelta(days=1)
                else:
                    end_date = datetime(year, month % 12 + 1, 1) - timedelta(days=1)
                start_date = start_date.strftime("%Y-%m-%d")
                end_date = end_date.strftime("%Y-%m-%d")

                leave_count = Fin_Attendances.objects.filter(
                    employee=empid,
                    company=company,
                    start_date__range=(start_date, end_date),
                    status='Leave'
                )


                # Clculating leave days ----------------
                count_leave = 0

                for i in leave_count:
                    x = i.end_date - i.start_date
                    leave_days = x.days
                    if leave_days == 0:
                        leave_days = 1
                    else:
                        leave_days = leave_days + 1
                    count_leave = int(count_leave + leave_days)



                holidays_count = Holiday.objects.filter(company=company,start_date__range=(start_date, end_date)).count()

                _, num_days = calendar.monthrange(year, month)
                working_days = num_days - holidays_count
                
                try:
                    return JsonResponse({
                        'month': MONTH_NAMES.get(month, ''),
                        'holiday': holidays_count,
                        'leave': count_leave,   
                        'working_days' : working_days, 
                                
                    }, safe=False)

                except Employee.DoesNotExist:
                    return JsonResponse({'error': 'Selected employee not found.'}, status=404)

        return JsonResponse({'error': 'Invalid request method'}, status=400)

def calculate_salary(request):
   
        if request.method == 'POST':
            salary = Decimal(request.POST.get('salary', 0))        
            casual_leave = int(request.POST.get('casual_leave',0))
            other_cuttings = Decimal(request.POST.get('other_cuttings', 0))
            add_bonus = Decimal(request.POST.get('add_bonus', 0))
            leave = int(request.POST.get('attendance', 0))
            holiday = int(request.POST.get('holiday', 0))
            month = int(request.POST.get('month'))
            year = int(request.POST.get('year', 0))
            
            hra_str = request.POST.get('hra', '0')
            hra_float = float(hra_str)
            hra = int(round(hra_float)) 

            Other_Allowance_str = request.POST.get('Other_Allowance')
            Other_Allowance_float = float(Other_Allowance_str)
            Other_Allowance = int(round(Other_Allowance_float)) 

            Conveyance_Allowance_str = request.POST.get('Conveyance_Allowance')
            Conveyance_Allowance_float = float(Conveyance_Allowance_str)
            Conveyance_Allowance = int(round(Conveyance_Allowance_float)) 

            _, num_days = monthrange(year, month)
            wg = salary / num_days
            s1 = wg * leave
            leave_deduction = round((leave - casual_leave) * wg, 2)
            monthly_salary = (salary - s1 - other_cuttings) + (add_bonus + hra + Other_Allowance + Conveyance_Allowance)
            monthly_salary = int(monthly_salary)
            if leave == 0:
                pass
            else:
                monthly_salary += (casual_leave * wg)

            return JsonResponse({'monthly_salary': monthly_salary, 'leave_deduction': leave_deduction})

        return JsonResponse({'error': 'Invalid request method'}, status=400)

def item_dropdown(request):

    company1 = Fin_Company_Details.objects.get(id=request.session["s_id"])

    options = {}
    option_objects = Fin_Items.objects.filter(company=company1)
    for option in option_objects:
        options[option.id] = [option.name]

    return JsonResponse(options) 

def itemdata(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com
           

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id
        
            id = request.GET.get('id')
            toda = date.today()
            tod = toda.strftime("%Y-%m-%d")
            # to = toda.strftime("%d-%m-%Y")
            item = Fin_Items.objects.get(name=id,company=company)
            hsn = item.hsn
            qty = item.stock
            price = item.purchase_cost
            gst = item.intra_st
            sgst = item.inter_st
            places=company.state
            return JsonResponse({"status":" not",'hsn':hsn,'qty':qty,'places':places,'price':price,'gst':gst,'sgst':sgst,'data':data,'allmodules':allmodules,'com':com})
        return redirect('/')



def Fin_salary_overview(request, employee_id, salary_id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.get(id=salary_id)
            hist = Fin_SalaryDetailsHistory.objects.filter(company = com,salary_details__id=salary_id).last()

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.get(id=salary_id)
            hist = Fin_SalaryDetailsHistory.objects.filter(company = com.company_id,salary_details__id=salary_id).last()

        try:
            employee = Employee.objects.get(id=employee_id)
            comments= Employee_Comment.objects.filter(employee=employee)
            if salary_id:
                salary_details = Fin_SalaryDetails.objects.filter(employee=employee, id=salary_id)
            else:
                salary_details = Fin_SalaryDetails.objects.filter(employee=employee)

            for salary_detail in salary_details:
                try:
                    salary_detail.month = int(salary_detail.month)
                    salary_detail.month_name = calendar.month_name[salary_detail.month]
                except (ValueError, IndexError):
                    salary_detail.month_name = 'Invalid Month'

                salary_detail.total_deduction = salary_detail.other_cuttings + salary_detail.leave_deduction
                salary_detail.leave_minus_casual_leave = salary_detail.leave - salary_detail.casual_leave

        except Fin_Company_Details.DoesNotExist:
            return JsonResponse({'error': 'Company not found'}, status=404)
        except Employee.DoesNotExist:
            return JsonResponse({'error': 'Employee not found'}, status=404)

        context = {
            'employee': employee,
            'salary_details': salary_details,
            'allmodules':allmodules,
            'com':com,
            'data':data,
            'history':hist,
            'salary_id':salary_id,
            'comments':comments,
        }

        return render(request, 'company/salarydetails/Fin_overview.html', context)
    else:
      
      return redirect('/')

def Fin_salarypdf(request, employee_id, salary_id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com


        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id


        try:
            employee = Employee.objects.get(id=employee_id, company=company)
            salary_details = get_object_or_404(Fin_SalaryDetails, id=salary_id, employee=employee)

            try:
                salary_details.month = int(salary_details.month)
                salary_details.month_name = calendar.month_name[salary_details.month]
            except (ValueError, IndexError):
                salary_details.month_name = 'Invalid Month'
            
            total_deduction = salary_details.other_cuttings + salary_details.leave_deduction
            leave_minus_casual_leave = salary_details.leave - salary_details.casual_leave

        except Fin_Company_Details.DoesNotExist:
            return HttpResponse('Company not found', status=404)
        except Employee.DoesNotExist:
            return HttpResponse('Employee not found', status=404)

        template_path = 'company/salarydetails/Fin_salarypdf.html'
        context = {
            'employee': employee,
            'com': com,
            'salary_details': [salary_details],  
            'total_deduction': total_deduction,
            'leave_minus_casual_leave': leave_minus_casual_leave,
        }

            # Render the template to HTML string
        html = render_to_string(template_path, context)

        fname = f"payslip_{employee.first_name}.{employee.last_name}"
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename={fname}.pdf'
        
        # Generate PDF from HTML string
        pisa_status = pisa.CreatePDF(html, dest=response)

        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')

        return response

def Fin_shareSalaryToEmail(request, employee_id, salary_id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com


        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id

        if request.user:
            try:
                if request.method == 'POST':
                    emails_string = request.POST['email_ids']

                    emails_list = [email.strip() for email in emails_string.split(',')]
                    email_message = request.POST['email_message']

                    employee = Employee.objects.get(id=employee_id, company=company)
                    salary_details = get_object_or_404( Fin_SalaryDetails, id=salary_id, employee=employee)

                    context = {
                        'employee': employee,
                        'com': com,
                        'salary_details': [salary_details],
                        'allmodules':allmodules,
                    }

                    template_path = 'company/salarydetails/Fin_salarypdf.html'
                    template = get_template(template_path)
                    html = template.render(context)

                    result = BytesIO()
                    pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                    pdf = result.getvalue()

                    filename = f'Salary_Statement_{employee.employee_number}.pdf'
                    subject = f"Salary Statement for {employee.first_name} {employee.last_name}"
                    from_email = settings.EMAIL_HOST_USER 
                    to_email = emails_list


                    email = EmailMultiAlternatives(subject, email_message, from_email, to_email)
                    # email.attach_alternative(html, "text/html")  # Attach HTML content
                    email.attach(filename, pdf, "application/pdf")  # Attach PDF file
                    email.send(fail_silently=False)

                    messages.success(request, 'Salary statement has been shared via email successfully..!')
                    return redirect('Fin_salary_overview', employee_id=employee_id, salary_id=salary_id)
            
            except Exception as e:
                print(f"An exception occurred: {e}")

                # Print more information for debugging
                print(f"employee_id: {employee_id}")
                print(f"salary_id: {salary_id}")
                print(f"request.user.id: {request.user.id}")

                messages.error(request, f'{e}')
                return redirect('Fin_salary_overview', employee_id=employee_id, salary_id=salary_id)

        return HttpResponse("Unauthorized", status=401)
    else:
      
      return redirect('/')


def Fin_deletesalary(request,employee_id,salary_id=None):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com


        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id
        employee = Employee.objects.get(id=employee_id, company=company)
        if salary_id:
            salary_detail = get_object_or_404(Fin_SalaryDetails, id=salary_id, employee=employee)
            salary_detail.delete()
        else:
            salary_details = Fin_SalaryDetails.objects.filter(employee=employee)
            salary_details.delete()
        return redirect('Fin_salary_details') 



def Fin_addEmployeeComment(request,employee_id,salary_id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        employee = Employee.objects.get(id=employee_id,company=com)
        print('hii',employee_id,salary_id)

        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Employee_Comment.objects.create(company = com, employee = employee, comment = cmt)
            return redirect(Fin_salary_overview, employee_id,salary_id)
        return redirect(Fin_salary_overview, employee_id,salary_id)
    return redirect('/')        

def Fin_deleteEmployeeComment(request,id,salary_id):
    if 's_id' in request.session:
        try:
            cmt = Employee_Comment.objects.get(id = id)
            empId = cmt.employee.id
            cmt.delete()
            return redirect(Fin_salary_overview, empId,salary_id)  
        except Employee_Comment.DoesNotExist:
            sal_details=Fin_SalaryDetails.objects.get(id=salary_id)
            empId = sal_details.employee.id
            return redirect(Fin_salary_overview, empId,salary_id)  
        
# def Fin_changeEmployeeStatus(request,id,status):
#     if 's_id' in request.session:
        
#         cust = Employee.objects.get(id = id)
#         cust.status = status
#         cust.save()
#         return redirect(Fin_salary_overview, id)        

def Fin_salaryedit(request, employee_id,salary_id=None):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com)
            company=com

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            salary_details = Fin_SalaryDetails.objects.filter(company=com.company_id)
            company=com.company_id

        try:
            employee = Employee.objects.get(id=employee_id, company=company)
            if salary_id:
                salary_detail = Fin_SalaryDetails.objects.get(employee=employee, id=salary_id)
            else:
                salary_detail, created = Fin_SalaryDetails.objects.get_or_create(employee=employee)
            
        
        except Employee.DoesNotExist:
            raise Http404("Employee not found")
        except Fin_SalaryDetails.DoesNotExist:
            raise Http404("Salary details not found")
        
        salary_detail.month = int(salary_detail.month)
        salary_detail.month_name = calendar.month_name[salary_detail.month]
       

        if request.POST:
            salary_detail=Fin_SalaryDetails.objects.get(id=salary_id)
            salary_detail.salary_date = request.POST.get('salary_date')
            salary_detail.month = request.POST.get('month')
            salary_detail.year = request.POST.get('year')
            salary_detail.casual_leave = request.POST.get('casual_leave')
            salary_detail.leave = request.POST.get('attendance')
            salary_detail.holiday = request.POST.get('holidays')
            salary_detail.other_cuttings = request.POST.get('other_cuttings')
            salary_detail.add_bonus = request.POST.get('add_bonus')
            salary_detail.total_working_days = request.POST.get('working_days')
            salary_detail.description = request.POST.get('description')
            salary_detail.total_salary = request.POST.get('monthly_salary')
            salary_detail.hra = request.POST.get('HRA')
            salary_detail.conveyance_allowance = request.POST.get('Conveyance_Allowance')
            salary_detail.other_allowance = request.POST.get('Other_Allowance')
            salary_detail.save()


           
            sal_history_obj = Fin_SalaryDetailsHistory()
            sal_history_obj.company=company
            sal_history_obj.login_details=data
            sal_history_obj.salary_details=salary_detail
            sal_history_obj.date=date.today()
            sal_history_obj.action='Edited'
            sal_history_obj.save()

            return redirect('Fin_salary_overview', employee_id=salary_detail.employee.id, salary_id=salary_detail.id)
        
        employees = Employee.objects.filter(company=company)
        months = [{'value': i, 'name': calendar.month_name[i], 'selected': i == salary_detail.month} for i in range(1, 13)]
        years = range(2000, 2030)
        years = range(2000, 2030)
        holiday =  Holiday.objects.filter(company=company)
        result = Fin_SalaryDetails.objects.get(id=salary_id,employee=employee_id)
        month = int(result.month)
        year = int(result.year)

        start_date = datetime(year, month, 1)
        if month == 12:
            end_date = datetime(year + 1, 1, 1) - timedelta(days=1)
        else:
            end_date = datetime(year, month % 12 + 1, 1) - timedelta(days=1)
            start_date = start_date.strftime("%Y-%m-%d")
            end_date = end_date.strftime("%Y-%m-%d")

        leave_count = Fin_Attendances.objects.filter( employee=employee_id,
                    company=company,
                    start_date__range=(start_date, end_date),
                    status='Leave')

         # Clculating leave days ----------------
        count_leave = 0

        for i in leave_count:
            x = i.end_date - i.start_date
            leave_days = x.days
            if leave_days == 0:
                leave_days = 1
            else:
                leave_days = leave_days + 1
            count_leave = int(count_leave + leave_days)
        result.leave=count_leave
        result.save()
        print(result)

        context = {
            'salary_detail': salary_detail,
            'employee': employee,
            'employees': employees,
            'months': months,
            'years': years,
            'com': com,
            'leave': 0,
            'holiday': 0,
            'working_days': 0,           
            'month_name': calendar.month_name[salary_detail.month],
            
        }

        return render(request, 'company/salarydetails/Fin_salaryedit.html', context)

def Fin_SalaryHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        cust = Employee.objects.get(id = id)
        salary_details  = Fin_SalaryDetails.objects.filter(employee=cust)

        his = Fin_SalaryDetailsHistory.objects.filter(salary_details__in = salary_details)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            return render(request,'company/salarydetails/Fin_salary_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'employee':cust})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            return render(request,'company/salarydetails/Fin_salary_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'employee':cust})
    else:
       return redirect('/')   

#-------------------------End-----------------------#

#...............Payment Received..................Antony Tom...........

def Fin_checkpaymentNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        invNo = request.GET['payment_num']

        nxtInv = ""
        lastInv = Fin_Payment_Received.objects.filter(company = com).last()
        if lastInv:
            inv_no = str(lastInv.payment_no)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)
            
            num=''
            for i in numbers:
                num +=i
            
            st = ''
            for j in stri:
                st = st+j

            inv_num = int(num)+1

            if num[0] == '0':
                if inv_num <10:
                    nxtInv = st+'0'+ str(inv_num)
                else:
                    nxtInv = st+ str(inv_num)
            else:
                nxtInv = st+ str(inv_num)

        if Fin_Payment_Received.objects.filter(company = com, payment_no__iexact = invNo).exists():
            return JsonResponse({'status':False, 'message':'Payment No already Exists.!'})
        elif nxtInv != "" and invNo != nxtInv:
            return JsonResponse({'status':False, 'message':'Payment No is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')
        
#End

# CREATED BY AISWARYA
def Fin_paymentmade(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            paymentmade = Fin_PaymentMade.objects.filter(Company = com)
            return render(request,'company/Fin_PaymentMade.html',{'allmodules':allmodules,'com':com,'data':data,'paymentmade':paymentmade})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            paymentmade = Fin_PaymentMade.objects.filter(Company = com.company_id)
            return render(request,'company/Fin_PaymentMade.html',{'allmodules':allmodules,'com':com,'data':data, 'paymentmade':paymentmade})
    else:
       return redirect('/')


def Fin_addpaymentmade(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')
        vend = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        recurring_bills = Fin_Recurring_Bills.objects.filter(company=cmp)
        purchase_bills = Fin_Purchase_Bill.objects.filter(company=cmp)
        debit_notes = Fin_Debit_Note.objects.filter(Company=cmp)
        payment_details = Fin_PaymentMadeDetails.objects.filter(Company=cmp)
        paymentmade = Fin_PaymentMade.objects.filter(Company=cmp)


        latest_po = Fin_PaymentMade.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_po.reference_no) + 1 if latest_po else 1

        if Fin_PaymentMade_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_PaymentMade_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_no) >= new_number:
                    new_number+=1

        nxtPO = ""
        lastPO = Fin_PaymentMade.objects.filter(Company=cmp).last()
        if lastPO:
            paymentmade_no = str(lastPO.payment_number)
            prefix = ''.join(filter(str.isalpha, paymentmade_no))
            num_part = ''.join(filter(str.isdigit, paymentmade_no))
            num_len = len(num_part)
            p_made_num = int(num_part) + 1

            nxtPO = f"{prefix}{p_made_num:0{num_len}}"
        else:
            nxtPO = 'PM01'


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'vendors':vend, 'items':itms, 'pTerms':trms,'list':lst,
            'ref_no':new_number,'banks':bnk,'PONo':nxtPO,'units':units, 'accounts':acc,'recurring_bills':recurring_bills,'purchase_bills':purchase_bills,
            'debit_notes':debit_notes,'payment_details':payment_details,'paymentmade':paymentmade,
        }
        return render(request,'company/Fin_Add_PaymentMade.html',context)
    else:
       return redirect('/')


def Fin_SaveBills(request):
    if request.method == 'POST':
        vendor_id = request.POST.get('vendor_id')
        bill_type = request.POST.get('bill_type')
        bill_data_str = request.POST.get('bill_data')

        try:
            bill_data = json.loads(bill_data_str)

            for index, bill_item in enumerate(bill_data):
                unique_identifier = get_random_string(length=5)  
                timestamp = datetime.now().strftime("%Y%m%d%H%M%S")  
                unique_bill_number = f"{bill_item['bill_number']}-{bill_type}-{timestamp}-{unique_identifier}"

                Fin_PaymentMadeDetails.objects.create(
                    vendor_id=vendor_id,
                    type=bill_type,
                    date=bill_item['date'],
                    bill_number=unique_bill_number,
                    balance_amount=bill_item['balance_amount'],
                    payment=bill_item['payment'],
                    loop_index=index  
                )

            return JsonResponse({'success': True, 'message': 'Bills saved successfully'})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})
    else:
        return JsonResponse({'success': False, 'error': 'Invalid request method'})


def Fin_VendorPaymentDetails_Edit(request):
    if request.method == 'POST':
        vendor_id = request.POST.get('vendor_id')
        print('Vendor ID:', vendor_id)  
        payments_made = Fin_PaymentMade.objects.filter(vendor=vendor_id)
        
        if payments_made:
            serialized_data = {
                'opening_balance': [],
                'recurring_bills': [],
                'purchase_bills': [],
                'debit_notes': [],
            }

            for payment in payments_made:
              
                payment_details = Fin_PaymentMadeDetails.objects.filter(paymentmade=payment, vendor=vendor_id)
                
                for detail in payment_details:
                    if detail.type == 'Opening Balance':
                        serialized_data['opening_balance'].append({
                            'date': detail.date,
                            'balance': detail.balance_amount,
                            'payment': detail.payment,
                        })
                    elif detail.type == 'Recurring Bill':
                        serialized_data['recurring_bills'].append({
                            'date': detail.date,
                            'number': detail.bill_number,
                            'balance': detail.balance_amount,
                            'payment': detail.payment,
                        })
                    elif detail.type == 'Purchase Bill':
                        serialized_data['purchase_bills'].append({
                            'date': detail.date,
                            'number': detail.bill_number,
                            'balance': detail.balance_amount,
                            'payment': detail.payment,
                        })
                    elif detail.type == 'Debit Note':
                        serialized_data['debit_notes'].append({
                            'date': detail.date,
                            'number': detail.bill_number,
                            'balance': detail.balance_amount,
                            'payment': detail.payment,
                        })

            return JsonResponse(serialized_data)
        else:
            return JsonResponse({'error': 'Payment data not found for the vendor.'}, status=404)
    else:
        return JsonResponse({'error': 'Invalid request method.'}, status=405)

def Fin_PaymentMade_getVendorData(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)

        vndId = request.POST['id']  
        vend = Fin_Vendors.objects.get(id=vndId)
    
        if vend:
            recurring_bills = Fin_Recurring_Bills.objects.filter(vendor=vend)
            debit_notes = Fin_Debit_Note.objects.filter(Vendor=vend)
            purchase_bills = Fin_Purchase_Bill.objects.filter(vendor=vend)

            payment_details = Fin_PaymentMadeDetails.objects.filter(vendor=vend)

    
            context = {
                'status': True, 
                'id': vend.id, 
                'email': vend.email, 
                'gstType': vend.gst_type,
                'shipState': vend.place_of_supply,
                'gstin': False if not vend.gstin else True, 
                'gstNo': vend.gstin,
                'street': vend.billing_street, 
                'city': vend.billing_city, 
                'state': vend.billing_state, 
                'country': vend.billing_country, 
                'pincode': vend.billing_pincode,
                'recurring_bills': list(recurring_bills.values()),  
                'debit_notes': list(debit_notes.values()),        
                'purchase_bills': list(purchase_bills.values()), 
                'payment_details': serializers.serialize('json', payment_details),
                'opening_balance': {
                    'date': vend.date,
                    'opening_balance': vend.opening_balance,
                    'id': vend.id,
                    'current_balance': vend.current_balance,
                }
                 
            }
            return JsonResponse(context)
        else:
            return JsonResponse({'status': False, 'message': 'Vendor not found.'})
    else:
        return redirect('/')


def Fin_checkPaymentMadeNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id

        try:
            PaymentMadeNo = request.GET['PMNum']
        except KeyError:
            return HttpResponseBadRequest("Payment. Made No. is required.")

        nxtPO = ""
        lastPO = Fin_PaymentMade.objects.filter(Company=com).last()
        if lastPO:
            last_number = lastPO.payment_number
            num_part = ''.join(filter(str.isdigit, last_number))
            prefix = ''.join(filter(str.isalpha, last_number))
            num_len = len(num_part)
            nxt_number = int(num_part) + 1
            nxtPO = f"{prefix}{nxt_number:0{num_len}}"

        expected_prefix = ''.join(filter(str.isalpha, nxtPO)) if nxtPO else None
        provided_prefix = ''.join(filter(str.isalpha, PaymentMadeNo))
        
        if expected_prefix and provided_prefix != expected_prefix:
            return JsonResponse({'status': False, 'message': f'Payment. Made No pattern inconsistency!'})

     
        if not re.match(r'^[a-zA-Z]+\d+$', PaymentMadeNo):
            return JsonResponse({'status': False, 'message': 'Payment. Made No pattern inconsistency!'})
            

        if Fin_PaymentMade.objects.filter(Company=com, payment_number__iexact=PaymentMadeNo).exists():
            return JsonResponse({'status': False, 'message': 'Payment. Made No already exists!'})
        elif nxtPO and PaymentMadeNo != nxtPO:
            return JsonResponse({'status': False, 'message': 'Payment. Made No is not continuous!'})
        else:
            return JsonResponse({'status': True, 'message': 'Number is okay!'})
    else:
        return redirect('/')



def Fin_createPaymentMade(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
       
        if request.method == 'POST':
            PMNum = request.POST['payment_number']
            payment_method = request.POST.get('payment_method', '')

            if not payment_method:
                alert_script = '<script>alert("Please choose a Payment Method.");</script>'
                return HttpResponse(alert_script + '<script>window.history.back();</script>')
            
            if Fin_PaymentMade.objects.filter(Company = com, payment_number__iexact = PMNum).exists():
                res = f'<script>alert("PaymentMade Number `{PMNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            vendor_id = request.POST.get('vendorId', '')
            vendor = None
            vendor_name = ''
            if vendor_id:
                vendor = Fin_Vendors.objects.get(id=vendor_id)
                vendor_name = f"{vendor.title} {vendor.first_name} {vendor.last_name}"

            total_amount = float(request.POST.get('tamount', 0))
            total_payment = float(request.POST.get('total_payment', 0))
            total_balance = float(request.POST.get('total_balance', 0))


            PMade = Fin_PaymentMade(
                Company = com,
                LoginDetails = com.Login_Id,
                vendor=vendor,
                vendor_name=vendor_name,
                vendor_email = request.POST['vendorEmail'],
                vendor_address = request.POST['vendor_bill_address'],
                vendor_gst_type = request.POST['vendor_gst_type'],
                vendor_gstin = request.POST['vendor_gstin'],
                vendor_source_of_supply = request.POST['source_of_supply'],
                reference_no = request.POST['reference_number'],
                payment_number = PMNum,
                payment_date = request.POST['payment_date'],
                payment_method=payment_method,
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_id = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                total_amount=total_amount,
                total_payment=total_payment,
                total_balance=total_balance,   
                
            ) 
            PMade.save()

            if len(request.FILES) != 0:
                PMade.file=request.FILES.get('file')
            PMade.save()

            if 'Draft' in request.POST:
                PMade.status = "Draft"
            elif "Save" in request.POST:
                PMade.status = "Saved" 
            PMade.save()

            for v in Fin_Vendors.objects.filter(id=vendor_id):
                if v.opening_balance:
                    opening_balance_date = parse_date(str(request.POST.get('opening_balance_date')))
                    payment_amount = float(request.POST.get('opening_balance_payment', 0))
                    Fin_PaymentMadeDetails.objects.create(
                        Company=com,
                        LoginDetails=data,
                        vendor=vendor,
                        type='Opening Balance',
                        date=opening_balance_date,
                        bill_number=request.POST.get('opening_balance_id'),
                        balance_amount=request.POST.get('opening_balance_amount'),
                        total_amount =request.POST.get('opening_total_amount'),
                        payment=payment_amount,
                        paymentmade=PMade,
                        payment_number=PMNum,
                    )                    

            for bill in Fin_Recurring_Bills.objects.filter(company=com, vendor_id=vendor_id):
                unique_identifier = "recurring_" + str(bill.id)
                recurring_bill_date = parse_date(str(request.POST.get(f'recurring_bill_date_{unique_identifier}'))) 
                payment_amount = float(request.POST.get(f'recurring_bill_payment_{unique_identifier}', 0)) 

                Fin_PaymentMadeDetails.objects.create(
                    Company=com,
                    LoginDetails=data,
                    vendor=vendor,
                    type='Recurring Bill',
                    date=recurring_bill_date,
                    bill_number=bill.recurring_bill_number,
                    balance_amount=bill.balance,
                    total_amount = bill.grand_total,
                    payment=payment_amount,
                    paymentmade=PMade,
                    payment_number=PMNum,
                )

            for purchase_bill in Fin_Purchase_Bill.objects.filter(company=com, vendor_id=vendor_id):
                unique_identifier = "bill_" + str(purchase_bill.id)
                purchase_bill_date = parse_date(str(request.POST.get(f'purchase_bill_date_{unique_identifier}')))
                payment_amount = float(request.POST.get(f'purchase_bill_payment_{unique_identifier}', 0)) 
                

                Fin_PaymentMadeDetails.objects.create(
                    Company=com,
                    LoginDetails=data,
                    type='Purchase Bill',
                    vendor=vendor,
                    date=purchase_bill_date,
                    bill_number=purchase_bill.bill_no,
                    balance_amount=purchase_bill.balance,
                    payment=payment_amount,
                    total_amount=purchase_bill.grandtotal,
                    paymentmade=PMade,
                    payment_number=PMNum,
                )
  
            for note in Fin_Debit_Note.objects.filter(Company=com, Vendor_id=vendor_id):
                unique_identifier = "debit_" + str(note.id)
                debit_note_date = parse_date(str(request.POST.get(f'debit_note_date_{unique_identifier}')))
                payment_amount = float(request.POST.get(f'debit_note_payment_{unique_identifier}', 0)) 
                Fin_PaymentMadeDetails.objects.create(
                    Company=com,
                    LoginDetails=data,
                    type='Debit Note',
                    vendor=vendor,
                    date=debit_note_date,
                    bill_number=note.debit_note_number,
                    balance_amount=note.balance,
                    total_amount =note.grandtotal,
                    payment=payment_amount,
                    paymentmade=PMade,
                    payment_number=PMNum,
                )

            Fin_PaymentMade_History.objects.create(
                Company = com,
                LoginDetails = data,
                paymentmade = PMade,
                action = 'Created'
            )
            return redirect(Fin_paymentmade)
        else:
            return redirect(Fin_addpaymentmade)
    else:
       return redirect('/')



def Fin_ViewPaymentMade(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        paymentmade = Fin_PaymentMade.objects.get(id = id)
        cmt = Fin_PaymentMade_Comments.objects.filter(paymentmade = paymentmade)
        payment_details = Fin_PaymentMadeDetails.objects.filter(paymentmade=paymentmade)
        hist = Fin_PaymentMade_History.objects.filter(paymentmade = paymentmade).last()
        try:
            created = Fin_PaymentMade_History.objects.get(paymentmade = paymentmade, action = 'Created')
        except:
            created = None
        return render(request,'company/Fin_PaymentMadeOverview.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'paymentmade': paymentmade,'payment_details':payment_details,'history':hist, 'comments':cmt, 'created':created})
    else:
       return redirect('/')



def Fin_convertPaymentMade(request,id):
    if 's_id' in request.session:
        paymentmade = Fin_PaymentMade.objects.get(id = id)
        paymentmade.status = 'Saved'
        paymentmade.save()
        return redirect(Fin_ViewPaymentMade, id)



def Fin_addPaymentMadeComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        paymentmade = Fin_PaymentMade.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()
            Fin_PaymentMade_Comments.objects.create(Company = com, paymentmade = paymentmade, comments = cmt)
            return redirect(Fin_ViewPaymentMade, id)
        return redirect(Fin_ViewPaymentMade, id)
    return redirect('/')


def Fin_deletePaymentMadeComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_PaymentMade_Comments.objects.get(id = id)
        paymentmadeId = cmt.paymentmade.id
        cmt.delete()
        return redirect(Fin_ViewPaymentMade, paymentmadeId)
    


def Fin_PaymentMadeHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        paymentmade = Fin_PaymentMade.objects.get(id = id)
        his = Fin_PaymentMade_History.objects.filter(paymentmade=paymentmade)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_PaymentMade_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'paymentmade':paymentmade})
    else:
       return redirect('/')
    

def Fin_deletePaymentMade(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        try:
            data = Fin_Login_Details.objects.get(id=s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id=s_id)
            else:
                staff_details = Fin_Staff_Details.objects.get(Login_Id=s_id)
                com = staff_details.company_id 
            try:
                paymentmade = Fin_PaymentMade.objects.get(id=id)
                
                Fin_PaymentMade_Comments.objects.filter(paymentmade=paymentmade).delete()
                Fin_PaymentMade_History.objects.filter(paymentmade=paymentmade).delete()
                Fin_PaymentMade_Reference.objects.filter(paymentmade=paymentmade).delete()
                paymentmade.delete()
               
                return redirect('Fin_paymentmade')
            except Fin_PaymentMade.DoesNotExist:
                message = f"Fin_PaymentMade instance with ID {id} does not exist for the company {com}"
                return render(request, '404.html', {'message': message}, status=404)
        except Fin_Login_Details.DoesNotExist:
            return redirect('/')  
    return redirect('Fin_ViewPaymentMade')



def Fin_attachPaymentMadeFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        paymentmade = Fin_PaymentMade.objects.get(id = id)
        if request.method == 'POST' and len(request.FILES) != 0:
            paymentmade.file = request.FILES.get('file')
            paymentmade.save()
        return redirect(Fin_ViewPaymentMade, id)
    else:
        return redirect('/')


def Fin_PaymentMadePdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        paymentmade = Fin_PaymentMade.objects.get(id = id)
        payment_details = Fin_PaymentMadeDetails.objects.filter(paymentmade=paymentmade)
        context = {'paymentmade':paymentmade,'cmp':com ,'payment_details':payment_details}
        template_path = 'company/Fin_PaymentMade_Pdf.html'
        fname = 'Payment_Made'+ paymentmade.payment_number
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        template = get_template(template_path)
        html = template.render(context)
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')



def Fin_sharePaymentMadeToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        paymentmade = Fin_PaymentMade.objects.get(id = id)
        payment_details = Fin_PaymentMadeDetails.objects.filter(paymentmade=paymentmade)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
              
                context = {'paymentmade':paymentmade,'cmp':com ,'payment_details':payment_details}
                template_path = 'company/Fin_PaymentMade_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Payment_Made{paymentmade.payment_number}'
                subject = f"Payment_Made_{paymentmade.payment_number}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Payment Made for - #-{paymentmade.payment_number}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Payment Made details has been shared via email successfully..!')
                return redirect(Fin_ViewPaymentMade,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_ViewPaymentMade, id)


def Fin_PaymentMade_createVendorAjax(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        fName = request.POST['first_name']
        lName = request.POST['last_name']
        gstIn = request.POST['gstin']
        pan = request.POST['pan_no']
        email = request.POST['email']
        phn = request.POST['mobile']

        if Fin_Vendors.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            res = f"Vendor `{fName} {lName}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif gstIn != "" and Fin_Vendors.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            res = f"GSTIN `{gstIn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Vendors.objects.filter(Company = com, pan_no__iexact = pan).exists():
            res = f"PAN No `{pan}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Vendors.objects.filter(Company = com, mobile__iexact = phn).exists():
            res = f"Phone Number `{phn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Vendors.objects.filter(Company = com, email__iexact = email).exists():
            res = f"Email `{email}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})

        vnd = Fin_Vendors(
            Company = com,
            LoginDetails = com.Login_Id,
            title = request.POST['title'],
            first_name = fName,
            last_name = lName,
            company = request.POST['company_name'],
            location = request.POST['location'],
            place_of_supply = request.POST['place_of_supply'],
            gst_type = request.POST['gst_type'],
            gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
            pan_no = pan,
            email = email,
            mobile = phn,
            website = request.POST['website'],
            price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
            payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
            opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            open_balance_type = request.POST['balance_type'],
            current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            credit_limit = 0 if request.POST['credit_limit'] == "" else abs(float(request.POST['credit_limit'])) * -1,
            currency = request.POST['currency'],
            billing_street = request.POST['street'],
            billing_city = request.POST['city'],
            billing_state = request.POST['state'],
            billing_pincode = request.POST['pincode'],
            billing_country = request.POST['country'],
            ship_street = request.POST['shipstreet'],
            ship_city = request.POST['shipcity'],
            ship_state = request.POST['shipstate'],
            ship_pincode = request.POST['shippincode'],
            ship_country = request.POST['shipcountry'],
            status = 'Active'
        )
        vnd.save()

        Fin_Vendor_History.objects.create(
            Company = com,
            LoginDetails = data,
            Vendor = vnd,
            action = 'Created'
        )

        return JsonResponse({'status': True})
    
    else:
        return redirect('/')


def Fin_PaymentMade_getVendors(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        options = {}
        option_objects = Fin_Vendors.objects.filter(Company = com, status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')


def Fin_EditPaymentMade(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')
        paymentmade = Fin_PaymentMade.objects.get(id = id)
        recurring_bills = Fin_Recurring_Bills.objects.filter(company=cmp)
        purchase_bills = Fin_Purchase_Bill.objects.filter(company=cmp)
        debit_notes = Fin_Debit_Note.objects.filter(Company=cmp)
        vend = Fin_Vendors.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
        payment_details = Fin_PaymentMadeDetails.objects.filter(Company=cmp,paymentmade=paymentmade)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'paymentmade':paymentmade, 'pTerms':trms,'list':lst,
            'banks':bnk,'units':units, 'accounts':acc, 'vendors':vend,'recurring_bills':recurring_bills,'purchase_bills':purchase_bills,
            'debit_notes':debit_notes,'payment_details':payment_details,
        }
        return render(request,'company/Fin_EditPaymentMade.html',context)
    else:
       return redirect('/')


def Fin_UpdatePaymentMade(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        paymentmade = Fin_PaymentMade.objects.get(id = id)
        
        if request.method == 'POST':
            PMNum = request.POST['payment_number']
            print("Payment Number:", PMNum)
            payment_method = request.POST.get('payment_method', '')

            if not payment_method:
                alert_script = '<script>alert("Please choose a Payment Method.");</script>'
                return HttpResponse(alert_script + '<script>window.history.back();</script>')
            
            if paymentmade.payment_number != PMNum and Fin_PaymentMade.objects.filter(Company = com, payment_number__iexact = PMNum).exists():
                res = f'<script>alert("Payment Made Number `{PMNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            vendor_id = request.POST.get('vendorId', '')
            vendor = None
            vendor_name = ''
            if vendor_id:
                vendor = Fin_Vendors.objects.get(id=vendor_id)
                vendor_name = f"{vendor.title} {vendor.first_name} {vendor.last_name}"
                


            total_amount = float(request.POST.get('tamount', 0))
            total_payment = float(request.POST.get('total_payment', 0))
            total_balance = float(request.POST.get('total_balance', 0))
            
            paymentmade.vendor = vendor
            paymentmade.vendor_name = vendor_name
            paymentmade.vendor_email = request.POST['vendorEmail']
            paymentmade.vendor_address = request.POST['vendor_bill_address']
            paymentmade.vendor_gst_type = request.POST['vendor_gst_type']
            paymentmade.vendor_gstin = request.POST['vendor_gstin']
            paymentmade.vendor_source_of_supply = request.POST['source_of_supply']

            paymentmade.reference_no = request.POST['reference_number']
            paymentmade.payment_number = PMNum
            paymentmade.payment_date = request.POST['payment_date']
            paymentmade.payment_method = payment_method
            paymentmade.cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            paymentmade.upi_id = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            paymentmade.bank_account = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            paymentmade.total_payment=total_payment
            paymentmade.total_balance=total_balance

            print("Payment Made ID:", paymentmade.id)
            print("Total Payment:", total_payment)


            if len(request.FILES) != 0:
                paymentmade.file=request.FILES.get('file')
            paymentmade.save()
            

            Fin_PaymentMadeDetails.objects.filter(paymentmade=paymentmade).delete()
            
            opening_balance_date = parse_date(str(request.POST.get('opening_balance_date')))
            if vendor_id:
                vendor = Fin_Vendors.objects.get(id=vendor_id)
                if vendor.opening_balance:
                    opening_balance, _ = Fin_PaymentMadeDetails.objects.get_or_create(
                        Company=com,
                        LoginDetails = data,
                        paymentmade=paymentmade,
                        type='Opening Balance',
                        payment_number=PMNum,
                        vendor=vendor,
                    )
                    opening_balance.date = opening_balance_date
                    opening_balance.bill_number = request.POST.get('opening_balance_id')
                    opening_balance.total_amount = request.POST.get('opening_total_amount')
                    opening_balance.balance_amount = request.POST.get('opening_balance_amount')
                    opening_balance.payment = request.POST.get('opening_balance_payment', 0)
                    opening_balance.save()


            a = request.POST.getlist(f'recurring_bill_number')
            b = request.POST.getlist(f'recurring_bill_payment')
            c = request.POST.getlist(f'recurring_bill_balance')
            d = request.POST.getlist(f'recurring_bill_date')
            e = request.POST.getlist(f'recurring_bill_amount')
            for value,payment,balance,date,total in zip(a,b,c,d,e) :
                print(value,payment)   
                for bill in Fin_Recurring_Bills.objects.filter(company=com, vendor_id=vendor_id):
                    recurring_bill, _ = Fin_PaymentMadeDetails.objects.get_or_create(
                        Company=com,
                        LoginDetails = data,
                        paymentmade=paymentmade,
                        type='Recurring Bill',
                        bill_number=value,
                        vendor=vendor,
                        balance_amount= balance,
                        payment_number=PMNum,
                        date=date,
                        total_amount=total,
                    )
                    recurring_bill.payment = payment
                    recurring_bill.save()


            a = request.POST.getlist(f'purchase_bill_number')
            b = request.POST.getlist(f'purchase_bill_payment')
            c = request.POST.getlist(f'purchase_bill_balance')
            d = request.POST.getlist(f'purchase_bill_date')
            e = request.POST.getlist(f'purchase_bill_amount')
            for value,payment,balance,date,total in zip(a,b,c,d,e) :
                print(value,payment)
                    
                for purchase_bill in Fin_Purchase_Bill.objects.filter(company=com, vendor_id=vendor_id):
                    purchase_bill, _ = Fin_PaymentMadeDetails.objects.get_or_create(
                        Company=com,
                        LoginDetails = data,
                        paymentmade=paymentmade,
                        type='Purchase Bill',
                        bill_number= value,
                        vendor=vendor,
                        balance_amount= balance,
                        payment_number=PMNum,
                        date=date,
                        total_amount = total,
                        
                    )
                    purchase_bill.payment = payment
                    purchase_bill.save()
                    
            a = request.POST.getlist(f'debit_note_number')
            b = request.POST.getlist(f'debit_note_payment')
            c = request.POST.getlist(f'debit_note_balance')
            d = request.POST.getlist(f'debit_note_date')
            e = request.POST.getlist(f'debit_note_amount')
            for value,payment,balance,date,total in zip(a,b,c,d,e) :
                print(value,payment)
                for note in Fin_Debit_Note.objects.filter(Company=com, Vendor_id=vendor_id): 
                    debit_note, _ = Fin_PaymentMadeDetails.objects.get_or_create(
                        Company=com,
                        LoginDetails = data,
                        paymentmade=paymentmade,
                        type='Debit Note',
                        bill_number=value,
                        vendor=vendor,
                        balance_amount=balance,
                        payment_number=PMNum,
                        date=date,
                        total_amount=total,
                    )
                    debit_note.payment = payment
                    debit_note.save()
                    


            Fin_PaymentMade_History.objects.create(
                Company = com,
                LoginDetails = data,
                paymentmade = paymentmade,
                action = 'Edited'
            )

            return redirect(Fin_ViewPaymentMade, id)
        else:
            return redirect(Fin_EditPaymentMade, id)
    else:
       return redirect('/')


def fetch_payments(request):
    if request.method == 'POST':
        
        bill_type = request.POST.get('bill_type')
        paymentmade_id = request.POST.get('paymentmade_id')
        vendor_id = request.POST.get('vendor_id')

        if bill_type == 'Opening Balance':
            payments = Fin_PaymentMadeDetails.objects.filter(paymentmade_id=paymentmade_id, vendor_id=vendor_id, type='Opening Balance')
        elif bill_type == 'Recurring Bill':
            bill_number = request.POST.get('bill_number')
            payments = Fin_PaymentMadeDetails.objects.filter(paymentmade_id=paymentmade_id, type='Recurring Bill', bill_number=bill_number)
        elif bill_type == 'Purchase Bill':
            bill_number = request.POST.get('bill_number')
            payments = Fin_PaymentMadeDetails.objects.filter(paymentmade_id=paymentmade_id, type='Purchase Bill', bill_number=bill_number)
        elif bill_type == 'Debit Note':
            bill_number = request.POST.get('bill_number')
            payments = Fin_PaymentMadeDetails.objects.filter(paymentmade_id=paymentmade_id, type='Debit Note', bill_number=bill_number)
        else:
            payments = []

        payments_data = [{'id': payment.id, 'amount': payment.payment, 'bill_type': bill_type, 'bill_number': payment.bill_number, 'vendor_id': payment.vendor_id} for payment in payments]
        return JsonResponse(payments_data, safe=False)
    else:
        return JsonResponse({'error': 'Invalid request method'}, status=400)
#END

def Fin_Get_All_Items_Add(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
    itm = Fin_Items.objects.filter(Company = com, status = 'Active')
    itm_data = [{'id': obj.id, 'name': obj.name, 'hsn': obj.hsn,'sac': obj.sac,'item_type': obj.item_type, 'cstock': obj.current_stock, 'price': obj.purchase_price, 'intra_tax': obj.intra_state_tax, 'inter_tax': obj.inter_state_tax} for obj in itm]
    return JsonResponse(itm_data, safe=False)
    
    
def Fin_Get_All_Items_Edit(request):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
    id = request.POST['pbill_id']
    itm = Fin_Items.objects.filter(Company = com, status = 'Active')
    pbill = Fin_Purchase_Bill.objects.get(id = id)
    pitm = Fin_Purchase_Bill_Item.objects.filter(pbill = pbill)
    pitm_dict = {}
    for obj in pitm:
        pitm_dict[obj.item.id] = obj.qty
    itm_data = []
    for i in itm:
        if i.id in pitm_dict.keys():
            temp_stock = i.current_stock - pitm_dict[i.id]
            itm_data.append({'id': i.id, 'name': i.name, 'hsn': i.hsn,'sac': i.sac,'item_type': i.item_type, 'cstock': temp_stock, 'price': i.purchase_price, 'intra_tax': i.intra_state_tax, 'inter_tax': i.inter_state_tax})
        else:
            itm_data.append({'id': i.id, 'name': i.name, 'hsn': i.hsn,'sac': i.sac,'item_type': i.item_type, 'cstock': i.current_stock, 'price': i.purchase_price, 'intra_tax': i.intra_state_tax, 'inter_tax': i.inter_state_tax})
    return JsonResponse(itm_data, safe=False)
    
    
# < ------------- Shemeem -------- > CASH IN HAND < ------------------------------- >
def Fin_cashInHand(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

        cash = Fin_CashInHand.objects.filter(Company = cmp)
        bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
        inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cash', paid__gt = 0)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
        rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cash', Paid_amount__gt = 0)
        # payrec= Fin_Payment_Received.objects.filter(company = cmp, payment_method__iexact='cash', total_payment__gt = 0)
        
        
        bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cash', paid__gt = 0)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cash', advanceAmount_paid__gt = 0)
        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cash', paid__gt = 0)
        # paymade = Fin_PaymentMade.objects.filter(Company = cmp, payment_method__iexact = 'cash', total_payment__gt = 0)
        
        empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
        empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
        lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cash', principle_amount__gt = 0)
        slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cash')
        
        context = {
            'allmodules':allmodules,
            'com':com,
            'cmp':cmp,
            'data':data,
            'cash':cash,
            'bank_transactions': bnk,
            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            # 'paymentReceived':payrec,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,
            # 'paymentMade':paymade,

            'empLoan':empLoan,
            'empAddLoan':empAddLoan,
            'loanRepay':lnRpy,
            'empSalary':slry,
        }
        return render(request,'company/Fin_Cash_In_Hand.html',context)
    else:
       return redirect('/')

def Fin_addCash(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

        context = {
            'allmodules':allmodules,
            'com':com,
            'cmp':cmp,
            'data':data,
        }
        return render(request,'company/Fin_Cash_Add.html',context)
    else:
       return redirect('/')

def Fin_saveAddCash(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == "POST":
            adj = request.POST['adjustment']
            amt = 0.0 if request.POST['amount'] == "" else float(request.POST['amount'])
            cash = Fin_CashInHand(
                Company = com,
                LoginDetails = com.Login_Id,
                adjustment = adj,
                amount = amt,
                adjust_date = request.POST['adjustment_date'],
                description = request.POST['description'],
            )

            cash.save()

        return redirect(Fin_cashInHand)
    else:
       return redirect('/')

def Fin_editAddCash(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

        cash = Fin_CashInHand.objects.get(id = id)

        context = {
            'allmodules':allmodules,
            'com':com,
            'cmp':cmp,
            'data':data,
            'cash':cash
        }
        return render(request, 'company/Fin_Cash_Edit.html',context)
    else:
       return redirect('/')

def Fin_updateAddCash(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        if request.method == 'POST':
            cash = Fin_CashInHand.objects.get(id = id)
            adj = request.POST['adjustment']
            amt = 0.0 if request.POST['amount'] == "" else float(request.POST['amount'])

            cash.adjustment = adj
            cash.amount = amt
            cash.adjust_date = request.POST['adjustment_date']
            cash.description = request.POST['description']

            cash.save()

        return redirect(Fin_cashInHand)
    else:
       return redirect('/')

def Fin_cashInHandStatement(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

        cash = Fin_CashInHand.objects.filter(Company = cmp)
        bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
        inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cash', paid__gt = 0)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
        rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cash', Paid_amount__gt = 0)
        # payrec= Fin_Payment_Received.objects.filter(company = cmp, payment_method__iexact='cash', total_payment__gt = 0)
        
        
        bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cash', paid__gt = 0)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cash', advanceAmount_paid__gt = 0)
        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cash', paid__gt = 0)
        # paymade = Fin_PaymentMade.objects.filter(Company = cmp, payment_method__iexact = 'cash', total_payment__gt = 0)
        
        empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
        empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
        lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cash', principle_amount__gt = 0)
        slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cash')
        
        context = {
            'allmodules':allmodules,
            'com':com,
            'cmp':cmp,
            'data':data,
            'cash':cash,
            'bank_transactions': bnk,
            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            # 'paymentReceived':payrec,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,
            # 'paymentMade':paymade,

            'empLoan':empLoan,
            'empAddLoan':empAddLoan,
            'loanRepay':lnRpy,
            'empSalary':slry,
        }
        return render(request,'company/Fin_Cash_In_Hand_Statement.html',context)
    else:
       return redirect('/')

def Fin_cashInHandStatementPdf(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        bal = request.GET['balance']
        startDate = request.GET['start']
        endDate = request.GET['end']
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None

        if startDate == None or endDate == None:
            cash = Fin_CashInHand.objects.filter(Company = cmp)
            bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
            inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
            crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cash', paid__gt = 0)
            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
            sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
            rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cash', Paid_amount__gt = 0)
            # payrec= Fin_Payment_Received.objects.filter(company = cmp, payment_method__iexact='cash', total_payment__gt = 0)
            
            
            bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cash', paid__gt = 0)
            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cash', advanceAmount_paid__gt = 0)
            pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cash', paid__gt = 0)
            # paymade = Fin_PaymentMade.objects.filter(Company = cmp, payment_method__iexact = 'cash', total_payment__gt = 0)
            
            empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
            empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
            lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cash', principle_amount__gt = 0)
            slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cash')
        else:
            cash = Fin_CashInHand.objects.filter(Company = cmp, adjust_date__range = [startDate, endDate])
            bnk = Fin_BankTransactions.objects.filter(company=cmp, adjustment_date__range = [startDate, endDate]).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
            inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate], payment_method__iexact = 'cash', paid_off__gt = 0)
            crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate], payment_type__iexact = 'cash', paid__gt = 0)
            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate] , payment_method__iexact = 'cash', paid_off__gt = 0)
            sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate], payment_method__iexact='cash', paid_off__gt = 0)
            rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate], Payment_Method__iexact='cash', Paid_amount__gt = 0)
            # payrec= Fin_Payment_Received.objects.filter(company = cmp, payment_method__iexact='cash', total_payment__gt = 0)
            
            
            bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], pay_type__iexact='cash', paid__gt = 0)
            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], payment_method__iexact='cash', advanceAmount_paid__gt = 0)
            pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], payment_method__iexact='cash', paid_off__gt = 0)
            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], payment_type__iexact='cash', paid__gt = 0)
            # paymade = Fin_PaymentMade.objects.filter(Company = cmp, payment_method__iexact = 'cash', total_payment__gt = 0)
            
            empLoan = Fin_Loan.objects.filter(company = cmp, loan_date__range = [startDate, endDate], payment_method__iexact = 'cash')
            empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, new_date__range = [startDate, endDate], payment_method__iexact = 'cash')
            lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_date__range = [startDate, endDate], payment_method__iexact = 'cash', principle_amount__gt = 0)
            slry = Fin_SalaryDetails.objects.filter(company=cmp, salary_date__range = [startDate, endDate], employee__pay_head__iexact='cash')
        
        context = {
            'cmp':cmp,
            'cash':cash,
            'bank_transactions': bnk,
            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            # 'paymentReceived':payrec,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,
            # 'paymentMade':paymade,

            'empLoan':empLoan,
            'empAddLoan':empAddLoan,
            'loanRepay':lnRpy,
            'empSalary':slry,
            'balance':bal
        }
        
        template_path = 'company/Fin_CashInHandStatement_Pdf.html'
        fname = 'Cash_in_hand'
        # return render(request, 'company/Fin_Invoice_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareCashInHandStatementToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                bal = request.POST['balance']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                if startDate == None or endDate == None:
                    cash = Fin_CashInHand.objects.filter(Company = cmp)
                    bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
                    inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cash', paid__gt = 0)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
                    rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cash', Paid_amount__gt = 0)
                    # payrec= Fin_Payment_Received.objects.filter(company = cmp, payment_method__iexact='cash', total_payment__gt = 0)
                    
                    
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cash', paid__gt = 0)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cash', advanceAmount_paid__gt = 0)
                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cash', paid__gt = 0)
                    # paymade = Fin_PaymentMade.objects.filter(Company = cmp, payment_method__iexact = 'cash', total_payment__gt = 0)
                    
                    empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
                    empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
                    lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cash', principle_amount__gt = 0)
                    slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cash')
                else:
                    cash = Fin_CashInHand.objects.filter(Company = cmp, adjust_date__range = [startDate, endDate])
                    bnk = Fin_BankTransactions.objects.filter(company=cmp, adjustment_date__range = [startDate, endDate]).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
                    inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate], payment_method__iexact = 'cash', paid_off__gt = 0)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate], payment_type__iexact = 'cash', paid__gt = 0)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate] , payment_method__iexact = 'cash', paid_off__gt = 0)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate], payment_method__iexact='cash', paid_off__gt = 0)
                    rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate], Payment_Method__iexact='cash', Paid_amount__gt = 0)
                    # payrec= Fin_Payment_Received.objects.filter(company = cmp, payment_method__iexact='cash', total_payment__gt = 0)
                    
                    
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], pay_type__iexact='cash', paid__gt = 0)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], payment_method__iexact='cash', advanceAmount_paid__gt = 0)
                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], payment_method__iexact='cash', paid_off__gt = 0)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], payment_type__iexact='cash', paid__gt = 0)
                    # paymade = Fin_PaymentMade.objects.filter(Company = cmp, payment_method__iexact = 'cash', total_payment__gt = 0)
                    
                    empLoan = Fin_Loan.objects.filter(company = cmp, loan_date__range = [startDate, endDate], payment_method__iexact = 'cash')
                    empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, new_date__range = [startDate, endDate], payment_method__iexact = 'cash')
                    lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_date__range = [startDate, endDate], payment_method__iexact = 'cash', principle_amount__gt = 0)
                    slry = Fin_SalaryDetails.objects.filter(company=cmp, salary_date__range = [startDate, endDate], employee__pay_head__iexact='cash')
                
                context = {
                    'cmp':cmp,
                    'cash':cash,
                    'bank_transactions': bnk,
                    'invoice':inv,
                    'recInvoice':recInv,
                    'creditNote':crdNt,
                    'salesOrder':sordr,
                    'retainerInvoice':rtInv,
                    # 'paymentReceived':payrec,
                    
                    'bill':bill,
                    'recurringBill':rcrbl,
                    'purchaseOrder':pordr,
                    'debitNote':dbtnt,
                    # 'paymentMade':paymade,

                    'empLoan':empLoan,
                    'empAddLoan':empAddLoan,
                    'loanRepay':lnRpy,
                    'empSalary':slry,
                    'balance':bal
                }
                template_path = 'company/Fin_CashInHandStatement_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Cash_In_Hand'
                subject = f"Cash_In_Hand"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Statement for - Cash_in_hand. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Statement has been shared via email successfully..!')
                return redirect(Fin_cashInHandStatement)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_cashInHandStatement)

def Fin_cashInHandGraph(request, period):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')
        print('period==',period)

        cash = Fin_CashInHand.objects.filter(Company = cmp)
        bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
        inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cash', paid__gt = 0)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
        rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cash', Paid_amount__gt = 0)
        # payrec= Fin_Payment_Received.objects.filter(company = cmp, payment_method__iexact='cash', total_payment__gt = 0)
        
        
        bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cash', paid__gt = 0)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cash', advanceAmount_paid__gt = 0)
        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cash', paid__gt = 0)
        # paymade = Fin_PaymentMade.objects.filter(Company = cmp, payment_method__iexact = 'cash', total_payment__gt = 0)
        
        empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
        empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
        lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cash', principle_amount__gt = 0)
        slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cash')

        if period == 'year_wise':
            # Graph data 
            data1 = []
            data2 = []
            label = []

            for yr in range((date.today().year)-9, (date.today().year)+1):
                label.append(yr)
                cashInflow = 0
                cashOutflow = 0
                for i in cash:
                    if i.adjust_date.year == yr and i.adjustment.lower() == 'add cash':
                        cashInflow += float(i.amount)
                    if i.adjust_date.year == yr and i.adjustment.lower() == 'reduce cash':
                        cashOutflow += float(i.amount)

                for i in bnk:
                    if i.adjustment_date.year == yr and i.transaction_type.lower() == 'cash deposit':
                        cashInflow += float(i.amount)
                    if i.adjustment_date.year == yr and i.transaction_type.lower() == 'cash withdraw':
                        cashOutflow += float(i.amount)

                for i in inv:
                    if i.invoice_date.year == yr:
                        cashInflow += float(i.paid_off)
                
                for i in recInv:
                    if i.start_date.year == yr:
                        cashInflow += float(i.paid_off)

                for i in crdNt:
                    if i.creditnote_date.year == yr:
                        cashOutflow += float(i.paid)

                for i in sordr:
                    if i.sales_order_date.year == yr:
                        cashInflow += float(i.paid_off)

                for i in rtInv:
                    if i.Retainer_Invoice_date.year == yr:
                        cashInflow += float(i.paid_off)

                for i in bill:
                    if i.bill_date.year == yr:
                        cashOutflow += float(i.paid)

                for i in rcrbl:
                    if i.date.year == yr:
                        cashOutflow += float(i.advanceAmount_paid)

                for i in pordr:
                    if i.purchase_order_date.year == yr:
                        cashOutflow += float(i.paid_off)

                for i in dbtnt:
                    if i.debit_note_date.year == yr:
                        cashInflow += float(i.paid)

                for i in empLoan:
                    if i.loan_date.year == yr:
                        cashOutflow += float(i.loan_amount)

                for i in empAddLoan:
                    if i.new_date.year == yr:
                        cashOutflow += float(i.new_loan)

                for i in lnRpy:
                    if i.payment_date.year == yr:
                        cashInflow += float(i.principle_amount)

                for i in slry:
                    if i.salary_date.year == yr:
                        cashOutflow += float(i.total_salary)

                data1.append(float(cashInflow))
                data2.append(float(cashOutflow))
        else:
            data1 = []
            data2 = []
            label = []
            current_year = datetime.today().year
            current_month = datetime.today().month
            filterDt = datetime(current_year, 1, 1)
            filterDate = filterDt.strftime("%Y-%m-%d")
            print(filterDate)

            for month in range(1, current_month + 1):
                label.append(datetime(current_year, month, 1).strftime("%B"))
                cashInflow = 0
                cashOutflow = 0
                for i in cash:
                    if i.adjust_date.year == current_year and i.adjust_date.month == month and i.adjustment.lower() == 'add cash':
                        cashInflow += float(i.amount)
                    if i.adjust_date.year == current_year and i.adjust_date.month == month and i.adjustment.lower() == 'reduce cash':
                        cashOutflow += float(i.amount)

                for i in bnk:
                    if i.adjustment_date.year == current_year and i.adjustment_date.month == month and i.transaction_type.lower() == 'cash deposit':
                        cashInflow += float(i.amount)
                    if i.adjustment_date.year == current_year and i.adjustment_date.month == month and i.transaction_type.lower() == 'cash withdraw':
                        cashOutflow += float(i.amount)

                for i in inv:
                    if i.invoice_date.year == current_year and i.invoice_date.month == month:
                        cashInflow += float(i.paid_off)
                
                for i in recInv:
                    if i.start_date.year == current_year and i.start_date.month == month:
                        cashInflow += float(i.paid_off)

                for i in crdNt:
                    if i.creditnote_date.year == current_year and i.creditnote_date.month == month:
                        cashOutflow += float(i.paid)

                for i in sordr:
                    if i.sales_order_date.year == current_year and i.sales_order_date.month == month:
                        cashInflow += float(i.paid_off)

                for i in rtInv:
                    if i.Retainer_Invoice_date.year == current_year and i.Retainer_Invoice_date.month == month:
                        cashInflow += float(i.paid_off)

                for i in bill:
                    if i.bill_date.year == current_year and i.bill_date.month == month:
                        cashOutflow += float(i.paid)

                for i in rcrbl:
                    if i.date.year == current_year and i.date.month == month:
                        cashOutflow += float(i.advanceAmount_paid)

                for i in pordr:
                    if i.purchase_order_date.year == current_year and i.purchase_order_date.month == month:
                        cashOutflow += float(i.paid_off)

                for i in dbtnt:
                    if i.debit_note_date.year == current_year and i.debit_note_date.month == month:
                        cashInflow += float(i.paid)

                for i in empLoan:
                    if i.loan_date.year == current_year and i.loan_date.month == month:
                        cashOutflow += float(i.loan_amount)

                for i in empAddLoan:
                    if i.new_date.year == current_year and i.new_date.month == month:
                        cashOutflow += float(i.new_loan)

                for i in lnRpy:
                    if  i.payment_date.year == current_year and i.payment_date.month == month:
                        cashInflow += float(i.principle_amount)

                for i in slry:
                    if  i.salary_date.year == current_year and i.salary_date.month == month:
                        cashOutflow += float(i.total_salary)

                data1.append(float(cashInflow))
                data2.append(float(cashOutflow))

            label = json.dumps(label)
        print('Label',label)
        print('data1',data1)
        print('data2',data2)
        context = {
            'allmodules':allmodules,
            'com':com,
            'cmp':cmp,
            'data':data,
            'cashIn':data1,
            'cashOut':data2,
            'label':label,
            'period': period
        }
        return render(request,'company/Fin_Cash_In_Hand_Graph.html',context)
    else:
       return redirect('/')

def Fin_deleteAddedCash(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        csh = Fin_CashInHand.objects.get(id = id)
        csh.delete()

        return redirect(Fin_cashInHand)
    else:
        return redirect('/')
        
# End

@csrf_exempt
def check_employee_id(request):
    if request.method == 'POST' and request.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest':
        try:
            employee_id = request.POST.get('employeeId')
            # Check if the employee ID already exists
            if Employee.objects.filter(employee_number=employee_id).exists():
                return JsonResponse({'exists': True})
            else:
                return JsonResponse({'exists': False})
        except Exception as e:
            print('Error:', e)
            return JsonResponse({'error': 'An error occurred'})

    # If the request is not AJAX or not POST, return error
    return JsonResponse({'error': 'Invalid request'})
    
#-----------Reshna-Retainer_Invoice---------------------------------------------#
def Fin_RET_INV_Listout(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            ret_inv = Fin_Retainer_Invoice.objects.filter(Company = com)
            return render(request,'company/RET_INV/Ret_Inv_Listout.html',{'allmodules':allmodules,'com':com,'data':data,'ret_inv': ret_inv})
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            ret_inv = Fin_Retainer_Invoice.objects.filter(Company = com.company_id)
            return render(request,'company/RET_INV/Ret_Inv_Listout.html',{'allmodules':allmodules,'com':com,'data':data,'ret_inv': ret_inv})
    else:
       return redirect('/')

def Fin_RET_INV_Add(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id=s_id, status='New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            allmodules = Fin_Modules_List.objects.get(company_id=com.company_id, status='New')
            cmp = com.company_id

        item = Fin_Items.objects.filter(Company=cmp, status='Active')
        customer = Fin_Customers.objects.filter(Company=cmp, status='Active')
        payment_terms = Fin_Company_Payment_Terms.objects.filter(Company=cmp)
        bank = Fin_Banking.objects.filter(company=cmp)
        plist = Fin_Price_List.objects.filter(Company=cmp, status='Active')
        units = Fin_Units.objects.filter(Company=cmp)
        account = Fin_Chart_Of_Account.objects.filter(
            Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'),
            Company=cmp).order_by('account_name')

        latest_ri = Fin_Retainer_Invoice.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_ri.Reference_number) + 1 if latest_ri else 1

        if Fin_Retainer_Invoice_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_Retainer_Invoice_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.Reference_no)>= new_number:
                    new_number+=1

        new_ri_number = "" 
        if latest_ri:
            last_ri_number = latest_ri.Retainer_Invoice_number
            code_prefix = last_ri_number[:last_ri_number.find(next(filter(str.isdigit, last_ri_number)))]
            numeric_part = last_ri_number[len(code_prefix):] 
            new_numeric_part = int(numeric_part) + 1
            new_ri_number = f'{code_prefix}{str(new_numeric_part).zfill(len(numeric_part))}'

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'customer': customer, 'item': item,
            'banks': bank, 'pterm': payment_terms, 'unit': units, 'account': account, 'plist': plist,
            'ref_no': new_number, 'riNo': new_ri_number
        }
        return render(request, 'company/RET_INV/RET_INV_add.html', context)
    else:
        return redirect('/')

def Fin_validate_retinv_number(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id
        
        RINo = request.GET['ret_inv_no']

        nxtRI = ""
        lastRI = Fin_Retainer_Invoice.objects.filter(Company=com).last()
        if lastRI:
            last_ri_number = lastRI.Retainer_Invoice_number
            code_prefix = last_ri_number[:last_ri_number.find(next(filter(str.isdigit, last_ri_number)))]
            numeric_part = last_ri_number[len(code_prefix):] 
            new_numeric_part = int(numeric_part) + 1
            nxtRI = f'{code_prefix}{str(new_numeric_part).zfill(len(numeric_part))}'

        if Fin_Retainer_Invoice.objects.filter(Company=com, Retainer_Invoice_number__iexact=RINo).exists():
            return JsonResponse({'status': False, 'message': 'Retainer Invoice No already Exists.!'})
        elif nxtRI != "" and RINo != nxtRI:
            return JsonResponse({'status': False, 'message': 'Retainer Invoice No is not continuous.!'})
        else:
            return JsonResponse({'status': True, 'message': 'Retainer Number is okay.!'})
    else:
       return redirect('/')

    return JsonResponse({'valid': False, 'error': 'Session not found'})


def Fin_Create_RET_INV(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        if request.method == 'POST':
            customer = Fin_Customers.objects.get(id=request.POST.get('customer_id'))
            customer_email = request.POST.get('customerEmail')
            billing_address = request.POST.get('bill_address')
            gst_type = request.POST.get('gst_type')
            gstin = request.POST.get('gstin')
            place_of_supply = request.POST.get('place_of_supply')
            ret_inv_no = request.POST.get('ret_inv_no')
            reference_no=request.POST.get('reference_no')
            ret_inv_date = request.POST.get('ret_inv_date')
            note = request.POST.get('note')
            payment_method = None if request.POST.get('payment_method') == "" else request.POST.get('payment_method')
            upi = None if request.POST.get('upi') == "" else request.POST.get('upi')
            acc_no = None if request.POST.get('a/c_no')   == "" else request.POST.get('a/c_no')
            cheque = None if request.POST.get('cheque') == "" else request.POST.get('cheque')
            sub_total = 0.0 if request.POST.get('sub_total') == "" else float(request.POST.get('sub_total'))
            adjustment = 0.0 if request.POST.get('adjustment') == "" else float(request.POST.get('adjustment'))
            grand_total = 0.0 if request.POST.get('grand_total') == "" else float(request.POST.get('grand_total'))
            paid_amount= 0.0 if request.POST.get('paid_amount') == "" else float(request.POST.get('paid_amount'))
            balance = request.POST.get('grand_total') if request.POST.get('balance') == "" else request.POST.get('balance')
            note=request.POST.get('note')
            sent = request.POST.get('Sent')
            draft = request.POST.get('Draft')
            ret_inv = Fin_Retainer_Invoice(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer=customer,
                Customer_email=customer_email,
                Customer_billing_address=billing_address,
                Customer_gst_type=gst_type,
                Customer_gstin=gstin,
                Customer_place_of_supply=place_of_supply,
                Retainer_Invoice_number=ret_inv_no,
                Reference_number=reference_no,
                Retainer_Invoice_date=ret_inv_date,
                Payment_Method=payment_method,
                Cheque_number=cheque,
                UPI_number=upi,
                Bank_account_no=acc_no,
                Description=note,
                Sub_total=sub_total,
                Adjustment=adjustment,
                Grand_total=grand_total,
                Paid_amount=paid_amount,
                Balance=balance,
            )

            ret_inv.save()

            if len(request.FILES) != 0:
               ret_inv.file=request.FILES.get('file')
            ret_inv.save()

            if sent != None:
                ret_inv.status = 'Sent'
                ret_inv.save()
            else:
                ret_inv.status = 'Draft'
                ret_inv.save()
            ret_inv.save()


            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("price[]")
            description = request.POST.getlist("description[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(description)==len(discount)==len(total) and itemId and itemName and qty and price and description and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,description,discount,total)
                mapped = list(mapped)
                for ele in mapped:
                    
                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]
                        

                    item = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_Retainer_Invoice_Items.objects.create(Ret_Inv=ret_inv, Item = item, HSN = hsn,SAC=sac, Quantity= int(ele[4]), Price= float(ele[5]), Discription = ele[6], discount = float(ele[7]), Total = float(ele[8]))
                    item.current_stock -= int(ele[4])
                    item.save()
            
            Fin_Retainer_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                Ret_Invoice = ret_inv,
                action = 'Created'
            )


            return redirect(Fin_RET_INV_Listout)
        else:
            return redirect(Fin_RET_INV_Add)
    else:
       return redirect('/')

def Fin_RET_INV_Customer(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            lst = Fin_Price_List.objects.filter(Company=com, status='Active')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            lst = Fin_Price_List.objects.filter(Company=com, status='Active')

        fName = request.POST['first_name']
        lName = request.POST['last_name']
        gstIn = request.POST['gstin']
        pan = request.POST['pan_no']
        email = request.POST['email']
        phn = request.POST['mobile']

        if Fin_Customers.objects.filter(Company = com, first_name__iexact = fName, last_name__iexact = lName).exists():
            res = f"Customer `{fName} {lName}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif gstIn != "" and Fin_Customers.objects.filter(Company = com, gstin__iexact = gstIn).exists():
            res = f"GSTIN `{gstIn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, pan_no__iexact = pan).exists():
            res = f"PAN No `{pan}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, mobile__iexact = phn).exists():
            res = f"Phone Number `{phn}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
        elif Fin_Customers.objects.filter(Company = com, email__iexact = email).exists():
            res = f"Email `{email}` already exists, try another!"
            return JsonResponse({'status': False, 'message':res})
    
        
        cust = Fin_Customers(
            Company = com,
            LoginDetails = data,
            title = request.POST['title'],
            first_name = fName,
            last_name = lName,
            company = request.POST['company_name'],
            location = request.POST['location'],
            place_of_supply = request.POST['place_of_supply'],
            gst_type = request.POST['gst_type'],
            gstin = None if request.POST['gst_type'] == "Unregistered Business" or request.POST['gst_type'] == 'Overseas' or request.POST['gst_type'] == 'Consumer' else gstIn,
            pan_no = pan,
            email = email,
            mobile = phn,
            website = request.POST['website'],
            price_list = None if request.POST['price_list'] ==  "" else Fin_Price_List.objects.get(id = request.POST['price_list']),
            payment_terms = None if request.POST['payment_terms'] == "" else Fin_Company_Payment_Terms.objects.get(id = request.POST['payment_terms']),
            opening_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            open_balance_type = request.POST['balance_type'],
            current_balance = 0 if request.POST['open_balance'] == "" else float(request.POST['open_balance']),
            credit_limit = 0 if request.POST['credit_limit'] == "" else float(request.POST['credit_limit']),
            billing_street = request.POST['street'],
            billing_city = request.POST['city'],
            billing_state = request.POST['state'],
            billing_pincode = request.POST['pincode'],
            billing_country = request.POST['country'],
            ship_street = request.POST['shipstreet'],
            ship_city = request.POST['shipcity'],
            ship_state = request.POST['shipstate'],
            ship_pincode = request.POST['shippincode'],
            ship_country = request.POST['shipcountry'],
            status = 'Active'
        )
        cust.save()

        

        Fin_Customers_History.objects.create(
            Company = com,
            LoginDetails = data,
            customer = cust,
            action = 'Created'
        )

        return JsonResponse({'status': True})
    
    else:
        return redirect('/')
    
def Fin_get_RET_INV_Customers(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        options = {}
        option_objects = Fin_Customers.objects.filter(Company = com, status = 'Active')
        for option in option_objects:
            options[option.id] = [option.id , option.title, option.first_name, option.last_name]

        return JsonResponse(options)
    else:
        return redirect('/')

def Fin_Retinvcustomer_paymentterm(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        term = request.POST['term']
        days = request.POST['days']

        if not Fin_Company_Payment_Terms.objects.filter(Company = com, term_name__iexact = term).exists():
            Fin_Company_Payment_Terms.objects.create(Company = com, term_name = term, days =days)
            
            list= []
            terms = Fin_Company_Payment_Terms.objects.filter(Company = com)

            for term in terms:
                termDict = {
                    'name': term.term_name,
                    'id': term.id
                }
                list.append(termDict)

            return JsonResponse({'status':True,'terms':list},safe=False)
        else:
            return JsonResponse({'status':False})

    else:
        return redirect('/')         

def Fin_RETINV_CustomerData(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        customerid = request.POST['id']
        cust = Fin_Customers.objects.get(id = customerid)
        email = cust.email
        street = cust.billing_street
        city = cust.billing_city
        state = cust.billing_state
        pincode = cust.billing_pincode
        country = cust.billing_country
        gsttype = cust.gst_type
        gstno = cust.gstin
        placesupply = cust.place_of_supply
        
        context = {
                'id':cust.id,'placesupply':placesupply,'country':country,'city':city,'street':street,'pincode':pincode,'state':state,'email' : email, 'gstno' : gstno, 'gsttype': gsttype}
    return JsonResponse(context, safe=False)

def fetch_bank_account(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
    
        bank_id = request.GET.get('bankid')
    
        try:
            bank = Fin_Banking.objects.get(id=bank_id,company = com)
            bank_account = bank.account_number 
            print(bank_account)
            return JsonResponse({'bank_account': bank_account})
        except Fin_Banking.DoesNotExist:
            return JsonResponse({'error': 'Bank account not found'}, status=404)
       
def Fin_RETInvoiceItem(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        name = request.POST['name']
        type = request.POST['type']
        unit = request.POST.get('unit')
        if request.POST['hsn']:
            hsn = request.POST['hsn']
            sac = None
        elif request.POST['sac']:
            sac = request.POST['sac']
            hsn = None
        tax = request.POST['taxref']
        gstTax = 0 if tax == 'non taxable' else request.POST['intra_st']
        igstTax = 0 if tax == 'non taxable' else request.POST['inter_st']
        purPrice = request.POST['pcost']
        purAccount = None if not 'pur_account' in request.POST or request.POST['pur_account'] == "" else request.POST['pur_account']
        purDesc = request.POST['pur_desc']
        salePrice = request.POST['salesprice']
        saleAccount = None if not 'sale_account' in request.POST or request.POST['sale_account'] == "" else request.POST['sale_account']
        saleDesc = request.POST['sale_desc']
        inventory = request.POST.get('invacc')
        stock = 0 if request.POST.get('stock') == "" else request.POST.get('stock')
        stockUnitRate = 0 if request.POST.get('stock_rate') == "" else request.POST.get('stock_rate')
        minStock = request.POST['min_stock']
        createdDate = date.today()
        
        item = Fin_Items(
                Company = com,
                LoginDetails = data,
                name = name,
                item_type = type,
                unit = unit,
                hsn = hsn,
                sac=sac,
                tax_reference = tax,
                intra_state_tax = gstTax,
                inter_state_tax = igstTax,
                sales_account = saleAccount,
                selling_price = salePrice,
                sales_description = saleDesc,
                purchase_account = purAccount,
                purchase_price = purPrice,
                purchase_description = purDesc,
                item_created = createdDate,
                min_stock = minStock,
                inventory_account = inventory,
                opening_stock = stock,
                current_stock = stock,
                stock_in = 0,
                stock_out = 0,
                stock_unit_rate = stockUnitRate,
                status = 'Active'
            )
        item.save()

            #save transaction

        Fin_Items_Transaction_History.objects.create(
                Company = com,
                LoginDetails = data,
                item = item,
                action = 'Created'
            )
            
        return JsonResponse({'status': True})
    else:
       return redirect('/')

def validate_hsn(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id
        hsn = request.POST.get('hsn')
        if hsn:
            if Fin_Items.objects.filter(hsn__iexact=hsn,Company = com).exists():
                return JsonResponse({'status': False, 'message': f"HSN - {hsn} already exists, try another."})
            else:
                return JsonResponse({'status': True})
        

def validate_name(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id).company_id
   
        name = request.POST.get('name')
        if name:
            if Fin_Items.objects.filter(Company=com, name__iexact=name).exists():
                return JsonResponse({'status': False, 'message': f"Item with name '{name}' already exists, please choose another name."})
            else:
                return JsonResponse({'status': True})
        
def Fin_Reloaditems(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        items = {}
        option_objects = Fin_Items.objects.filter(Company = com, status='Active')
        for option in option_objects:
            items[option.id] = [option.name]

        return JsonResponse(items)
    else:
        return redirect('/')

def Fin_RETINVItemDetails(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        itemName = request.GET['item']
        item = Fin_Items.objects.get(Company = com, name = itemName)

       
        context = {
            'status':True,
            'id': item.id,
            'hsn':item.hsn,
            'sac':item.sac,
            'item_type':item.item_type,
            'sales_rate':item.selling_price,
            'avl':item.current_stock,

        }
        return JsonResponse(context)
    else:
       return redirect('/')

def Fin_RI_Overview(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        ri = Fin_Retainer_Invoice.objects.get(id = id)
        cmt = Fin_Retainer_Invoice_Comments.objects.filter(Ret_Invoice = ri)
        history = Fin_Retainer_Invoice_History.objects.filter(Ret_Invoice =ri).last()
        riItems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = ri)
        created = Fin_Retainer_Invoice_History.objects.get(Ret_Invoice =ri, action = 'Created')

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
            allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
       
        bank_name = None
        if ri.Payment_Method not in ['Cash', 'Cheque', 'UPI']:
            try:
                bank = Fin_Banking.objects.get(id=ri.Payment_Method,company=cmp)
                bank_name = bank.bank_name
                
            except Fin_Banking.DoesNotExist:
               
                pass
        is_bank_payment = ri.Payment_Method not in ['Cash', 'Cheque', 'UPI']
        return render(request,'company/RET_INV/RET_INV_overview.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'Ret_Invoice':ri,'riItems':riItems, 'history':history, 'comments':cmt, 'created':created,'bank_name': bank_name, 'is_bank_payment': is_bank_payment})
    else:
       return redirect('/')
       
def Fin_addRETINVComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        rtinv = Fin_Retainer_Invoice.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_Retainer_Invoice_Comments.objects.create(Company = com, Ret_Invoice =  rtinv , comments = cmt,LoginDetails = com.Login_Id)
            return redirect(Fin_RI_Overview, id)
        return redirect(Fin_RI_Overview, id)
    return redirect('/')

def Fin_deleteRETINVComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_Retainer_Invoice_Comments.objects.get(id = id)
        riId = cmt.Ret_Invoice.id
        cmt.delete()
        return redirect(Fin_RI_Overview,  riId )
    
def Fin_RIHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        retinv = Fin_Retainer_Invoice.objects.get(id = id)
        history = Fin_Retainer_Invoice_History.objects.filter(Ret_Invoice= retinv)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/RET_INV/RET_INV_history.html',{'allmodules':allmodules,'com':com,'data':data,'history':history, 'retinv':retinv})
    else:
       return redirect('/')
    
def Fin_deleteRI(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        retinv = Fin_Retainer_Invoice.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        for i in Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = retinv):
            item = Fin_Items.objects.get(id = i.Item.id)
            item.current_stock += i.Quantity
            item.save()
        
        Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = retinv).delete()

        
        if Fin_Retainer_Invoice_Reference.objects.filter(Company = com).exists():
            deleted = Fin_Retainer_Invoice_Reference.objects.get(Company = com)
            if int(retinv.Reference_number) > int(deleted.Reference_no):
                deleted.Reference_no = retinv.Reference_number
                deleted.save()
        else:
            Fin_Retainer_Invoice_Reference.objects.create(Company = com, Reference_no= retinv.Reference_number)
        
        retinv.delete()
        return redirect(Fin_RET_INV_Listout)

def Fin_RIPdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        retinv = Fin_Retainer_Invoice.objects.get(id = id)
        itms = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv= retinv)
    
        context = {'retinv':retinv, 'riItems':itms,'cmp':com}
        
        template_path = 'company/RET_INV/RET_INV_Pdf.html'
        fname = 'RetainerInvoice_'+retinv.Retainer_Invoice_number
        # return render(request, 'company/Fin_Invoice_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareRIEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        retinv = Fin_Retainer_Invoice.objects.get(id = id)
        itms = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = retinv)
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                context = {'retinv':retinv, 'riItems':itms,'cmp':com}
                template_path = 'company/RET_INV/RET_INV_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Retainer_Invoice_{retinv.Retainer_Invoice_number}'
                subject = f"Invoice_{retinv.Retainer_Invoice_number}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Retainer Invoice for -RETAINER INVOICE-{retinv.Retainer_Invoice_number}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Retainer_Invoice details has been shared via email successfully..!')
                return redirect(Fin_RI_Overview,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_RI_Overview, id)


def Fin_RET_INV_edit(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
            cmp = com.company_id
       
        retinv = Fin_Retainer_Invoice.objects.get(id = id)
        retItms = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv=retinv)
        item = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        customer = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        payment_terms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bank = Fin_Banking.objects.filter(company = cmp)
        list = Fin_Price_List.objects.filter(Company = cmp, status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        account = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')
       
        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customer':customer, 'item':item, 
           'banks':bank,'pterm':payment_terms,'unit':units,'account':account,'plist':list,'retinv':retinv,'retItms':retItms
        }
        return render(request,'company/RET_INV/RET_INV_edit.html',context)
    else:
       return redirect('/')

def Fin_RET_INV_update(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        retinv = Fin_Retainer_Invoice.objects.get(id = id)
        if request.method == 'POST':
            rinum = request.POST['ret_inv_no']
            if retinv.Retainer_Invoice_number != rinum and Fin_Retainer_Invoice.objects.filter(Company = com, Retainer_Invoice_number__iexact = rinum).exists():
                res = f'<script>alert("Retainer Invoice Number `{rinum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            retinv.Customer = Fin_Customers.objects.get(id = request.POST['customer_id'])
            retinv.Customer_email = request.POST['customerEmail']
            retinv.Customer_billing_address = request.POST['bill_address']
            retinv.Customer_gst_type = request.POST['gst_type']
            retinv.Customer_gstin = request.POST['gstin']
            retinv.Customer_place_of_supply = request.POST['place_of_supply']
            retinv.Retainer_Invoice_number= rinum
            retinv.Retainer_Invoice_date = request.POST['ret_inv_date']
            retinv.Payment_Method= None if request.POST['payment_method'] == "" else request.POST['payment_method']
            retinv.Cheque_number= None if request.POST['cheque'] == "" else request.POST['cheque']
            retinv.UPI_number = None if request.POST['upi'] == "" else request.POST['upi']
            retinv.Bank_account_no = None if request.POST['a/c_no'] == "" else request.POST['a/c_no']
            retinv.Sub_total = 0.0 if request.POST['sub_total'] == "" else float(request.POST['sub_total'])
          
          
            retinv.Adjustment = 0.0 if request.POST['adjustment'] == "" else float(request.POST['adjustment'])
           
            retinv.Grand_total = 0.0 if request.POST['grand_total'] == "" else float(request.POST['grand_total'])
            retinv.Paid_amount = 0.0 if request.POST['paid_amount'] == "" else float(request.POST['paid_amount'])
            retinv.Balance = request.POST['grand_total'] if request.POST['balance'] == "" else float(request.POST['balance'])
            retinv.Description= request.POST['note']

            if len(request.FILES) != 0:
                retinv.Document=request.FILES.get('file')

            retinv.save()

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("price[]")
            description = request.POST.getlist("description[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            ri_item_ids = request.POST.getlist("id[]")

            riitem_ids = [int(id) for id in ri_item_ids]

            ri_items = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = retinv)
            object_ids = [obj.id for obj in ri_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in riitem_ids]
            for itmId in ids_to_delete:
                riItem = Fin_Retainer_Invoice_Items.objects.get(id = itmId)
                item = Fin_Items.objects.get(id = riItem.Item.id)
                item.current_stock += riItem.Quantity
                item.save()

            Fin_Retainer_Invoice_Items.objects.filter(id__in=ids_to_delete).delete()
            
            count = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv= retinv).count()
           
            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(description)==len(discount)==len(total)==len(riitem_ids) and riitem_ids and itemId and itemName and qty and price and description and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,description,discount,total,riitem_ids)
                mapped = list(mapped)
                for ele in mapped:
                   
                    if int(len(itemId))>int(count):

                        if ele[2] == '' or ele[2] == 'None'  :
                            hsn = None
                        else:
                            hsn = ele[2]
                        if ele[3] == '' or ele[3] == 'None':
                            sac = None
                        else:
                            sac = ele[3]

                        if ele[9] == 0:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            Fin_Retainer_Invoice_Items.objects.create(Ret_Inv= retinv, Item = itm, HSN = hsn,SAC=sac, Quantity = int(ele[4]), Price = float(ele[5]), Discription = ele[6], discount = float(ele[7]), Total = float(ele[8]))
                            itm.current_stock -= int(ele[3])
                            itm.save()
                        else:
                            itm = Fin_Items.objects.get(id = int(ele[0]))
                            retinvItm = Fin_Retainer_Invoice_Items.objects.get(id = int(ele[9]))
                            crQty = int(retinvItm.Quantity)
                            
                            Fin_Retainer_Invoice_Items.objects.filter( id = int(ele[9])).update(Ret_Inv =retinv, Item = itm, HSN = hsn,SAC=sac, Quantity = int(ele[4]), Price = float(ele[5]),  Discription= ele[6], discount = float(ele[7]), Total = float(ele[8]))
                            
                            if crQty < int(ele[4]):
                                itm.current_stock -=  abs(crQty - int(ele[4]))
                            elif crQty > int(ele[4]):
                                itm.current_stock += abs(crQty - int(ele[4]))
                            itm.save()
                    else:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        retinvItm= Fin_Retainer_Invoice_Items.objects.get(id = int(ele[9]))
                        crQty = int(retinvItm.Quantity)

                        Fin_Retainer_Invoice_Items.objects.filter( id = int(ele[9])).update(Ret_Inv = retinv, Item = itm, HSN = hsn,SAC=sac, Quantity = int(ele[4]), Price = float(ele[5]), Discription = ele[6], discount = float(ele[7]), Total = float(ele[8]))

                        if crQty < int(ele[4]):
                            itm.current_stock -=  abs(crQty - int(ele[4]))
                        elif crQty > int(ele[4]):
                            itm.current_stock += abs(crQty - int(ele[4]))
                        itm.save()
            
           
                    
            Fin_Retainer_Invoice_History.objects.create(
                Company = com,
                LoginDetails = data,
                Ret_Invoice = retinv,
                action = 'Edited'
            )

            return redirect(Fin_RI_Overview, id)
        else:
            return redirect(Fin_RET_INV_edit, id)
    else:
       return redirect('/')

def Fin_convertRI(request,id):
    if 's_id' in request.session:

        RI= Fin_Retainer_Invoice.objects.get(id = id)
        RI.status = 'Sent'
        RI.save()
        return redirect(Fin_RI_Overview, id)
        
#End

def emp_dropdown_active_not(request):                                                                 
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    if login.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Employee.objects.filter(company=com,employee_status='Active')
            print(1111)
            for option in option_objects:
                title=option.title
                first_name=option.first_name
                last_name=option.last_name
                options[option.id] = [title,first_name,last_name,f"{title}"]
            return JsonResponse(options)
    elif login.User_Type == 'Staff':
            staf = Fin_Staff_Details.objects.get(Login_Id = sid)
            options = {}
            option_objects = Employee.objects.filter(company=staf.company_id,employee_status='Active')
            for option in option_objects:
                title=option.title
                first_name=option.first_name
                last_name=option.last_name
                options[option.id] = [title,first_name,last_name,f"{title}"]
            return JsonResponse(options)
            
            
def employee_edit(request, employee_id,sal_id):
    if request.method == 'POST':

        try:

            emp_obj = Employee.objects.get(id=employee_id)

            emp_obj.title = request.POST['Title']
            emp_obj.first_name = request.POST['firstname'].capitalize()
            emp_obj.last_name = request.POST['lastname'].capitalize()
            emp_obj.alias = request.POST['alias']
            emp_obj.date_of_joining= request.POST['joindate']
            emp_obj.salary_effective_from = request.POST['Salary_Date']
            emp_obj.salary_amount = request.POST['amount']
            emp_obj.employee_salary_type = request.POST['salary_type']

            image = request.FILES.get('Image', None)
            if image:
                emp_obj.upload_image = request.FILES['Image']
            else:
                emp_obj.upload_image = emp_obj.upload_image

            emp_obj.date_of_birth = request.POST['dateofbirth']
            emp_obj.blood_group = request.POST['bloodgroup']
            emp_obj.gender = request.POST['gender']

            dob = request.POST['dateofbirth']

            if dob == '':
                age = 2
            else:
                dob2 = date.fromisoformat(dob)
                today = date.today()
                emp_obj.age = int(today.year - dob2.year - ((today.month, today.day) < (dob2.month, dob2.day)))

            if request.POST['amount'] == '':
                emp_obj.salary_amount = None
            else:
                 emp_obj.salary_amount = request.POST['amount']

            emp_obj.amount_per_hour = request.POST.get('perhour') or 0
            emp_obj.total_working_hours = request.POST.get('workhour') or 0
            emp_obj.employee_designation = request.POST['designation']
            emp_obj.employee_current_location = request.POST['location']
            emp_obj.gender = request.POST['gender']
            emp_obj.upload_image = request.FILES.get('Image', '') or ''
            emp_obj.date_of_birth = request.POST['dateofbirth']
            emp_obj.blood_group = request.POST['bloodgroup']
            emp_obj.mobile = request.POST['mobile']
            emp_obj.emergency_contact = request.POST['generalphone']
            emp_obj.employee_mail = request.POST['email']
            emp_obj.fathers_name_mothers_name = request.POST['fathersmothersname']
            emp_obj.spouse_name = request.POST['spousename']
            emp_obj.upload_file = request.FILES.get('File', '') or ''
            emp_obj.street = request.POST['street']
            emp_obj.city = request.POST['city']
            emp_obj.state = request.POST['state']
            emp_obj.pincode = request.POST['pincode']
            emp_obj.country = request.POST['country']
            emp_obj.temporary_street = request.POST['tempstreet']
            emp_obj.temporary_city = request.POST['tempcity']
            emp_obj.temporary_state = request.POST['tempstate']
            emp_obj.temporary_pincode = request.POST['temppincode']
            emp_obj.temporary_country = request.POST['tempcountry']
            emp_obj.provide_bank_details = request.POST['bankdetails']
            emp_obj.account_number = request.POST['acno']
            emp_obj.ifsc = request.POST['ifsccode']
            emp_obj.name_of_bank = request.POST['bankname']
            emp_obj.branch_name = request.POST['branchname']
            emp_obj.bank_transaction_type = request.POST['transactiontype']
            emp_obj.tds_applicable = request.POST['tds_applicable']
            emp_obj.tds_type = request.POST['TDS_Type']
            emp_obj.percentage_amount = request.POST['TDS_Amount'] if request.POST['TDS_Type'] == 'Amount' else request.POST['TDS_Percentage']
            emp_obj.income_tax_number = request.POST['Income_Tax']
            emp_obj.aadhar_number = request.POST['adharnumber']
            emp_obj.universal_account_number = request.POST['universalaccountnumber']
            emp_obj.pan_number = request.POST['pannumber']
            emp_obj.pf_account_number = request.POST['pfaccountnumber']
            emp_obj.pr_account_number = request.POST['praccountnumber']

           

            
            emp_obj.save()
            return redirect('Fin_salaryedit',employee_id,sal_id)

        except Employee.DoesNotExist:
            print('Employee Not Found')
            
            
def Edit_getDays(request):
     if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)

        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            company=com
        
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            company=com.company_id

        if request.method == 'POST':   
            employee_id = request.POST.get('id')
            empid = Employee.objects.get(id=employee_id)
            month = request.POST.get('month')
            year = request.POST.get('year')
            month = int(month)
            year = int(year)

            try:
                result = Fin_SalaryDetails.objects.get(employee=empid, month=month, year=year)
                start_date = datetime(year, month, 1)
                if month == 12:
                    end_date = datetime(year + 1, 1, 1) - timedelta(days=1)
                else:
                    end_date = datetime(year, month % 12 + 1, 1) - timedelta(days=1)
                start_date = start_date.strftime("%Y-%m-%d")
                end_date = end_date.strftime("%Y-%m-%d")

                leave_count = Fin_Attendances.objects.filter(
                    employee=empid,
                    company=company,
                    start_date__range=(start_date, end_date),
                    status='Leave'
                )


                # Clculating leave days ----------------
                count_leave = 0

                for i in leave_count:
                    x = i.end_date - i.start_date
                    leave_days = x.days
                    if leave_days == 0:
                        leave_days = 1
                    else:
                        leave_days = leave_days + 1
                    count_leave = int(count_leave + leave_days)



                holidays_count = Holiday.objects.filter(company=company,start_date__range=(start_date, end_date)).count()

                _, num_days = calendar.monthrange(year, month)
                working_days = num_days - holidays_count
                
                try:
                    return JsonResponse({
                        'month': MONTH_NAMES.get(month, ''),
                        'holiday': holidays_count,
                        'leave': count_leave,   
                        'working_days' : working_days, 
                                
                    }, safe=False)

                except Employee.DoesNotExist:
                    return JsonResponse({'error': 'Selected employee not found.'}, status=404)
               
                
            except Fin_SalaryDetails.DoesNotExist:
                    return JsonResponse({'error': 'Salary details not found.',
                                         'month': MONTH_NAMES.get(month, ''),
                        'holiday': 0,
                        'leave': 0,   
                        'working_days' : 0,}, status=404)

               

        return JsonResponse({'error': 'Invalid request method'}, status=400)
        
        
# < ------------- Shemeem -------- > CHEQUES < ------------------------------- >

def Fin_cheques(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

        inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cheque', paid_off__gt = 0)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cheque', paid__gt = 0)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cheque', paid_off__gt = 0)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cheque', paid_off__gt = 0)
        rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cheque', Paid_amount__gt = 0)
        
        
        bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cheque', paid__gt = 0)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cheque', advanceAmount_paid__gt = 0)
        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cheque', paid_off__gt = 0)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cheque', paid__gt = 0)
        
        empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cheque')
        empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cheque')
        lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cheque', principle_amount__gt = 0)
        slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cheque')

        loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'cheque', loan_amount__gt = 0)
        lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
        lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'cheque', loan_amount__gt = 0)

        context = {
            'allmodules':allmodules,
            'com':com,
            'cmp':cmp,
            'data':data,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'empLoan':empLoan,
            'empAddLoan':empAddLoan,
            'loanRepay':lnRpy,
            'empSalary':slry,

            'loanAccount':loanAcc,
            'loanAdditional':lonAddAcc,
            'emiPaid':lonAccEmi,
        }
        return render(request,'company/Fin_Cheques.html',context)
    else:
       return redirect('/')

def Fin_chequeStatement(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

        inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cheque', paid_off__gt = 0)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cheque', paid__gt = 0)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cheque', paid_off__gt = 0)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cheque', paid_off__gt = 0)
        rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cheque', Paid_amount__gt = 0)
        
        
        bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cheque', paid__gt = 0)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cheque', advanceAmount_paid__gt = 0)
        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cheque', paid_off__gt = 0)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cheque', paid__gt = 0)
        
        empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cheque')
        empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cheque')
        lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cheque', principle_amount__gt = 0)
        slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cheque')
        
        loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'cheque', loan_amount__gt = 0)
        lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
        lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'cheque', loan_amount__gt = 0)

        context = {
            'allmodules':allmodules,
            'com':com,
            'cmp':cmp,
            'data':data,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'empLoan':empLoan,
            'empAddLoan':empAddLoan,
            'loanRepay':lnRpy,
            'empSalary':slry,

            'loanAccount':loanAcc,
            'loanAdditional':lonAddAcc,
            'emiPaid':lonAccEmi,
        }
        return render(request,'company/Fin_Cheques_Statement.html',context)
    else:
       return redirect('/')

def Fin_chequeStatementPdf(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        bal = request.GET['balance']
        startDate = request.GET['start']
        endDate = request.GET['end']
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None

        if startDate == None or endDate == None:
            inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cheque', paid_off__gt = 0)
            crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cheque', paid__gt = 0)
            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cheque', paid_off__gt = 0)
            sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cheque', paid_off__gt = 0)
            rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cheque', Paid_amount__gt = 0)
            
            
            bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cheque', paid__gt = 0)
            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cheque', advanceAmount_paid__gt = 0)
            pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cheque', paid_off__gt = 0)
            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cheque', paid__gt = 0)
            
            empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cheque')
            empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cheque')
            lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cheque', principle_amount__gt = 0)
            slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cheque')

            loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'cheque', loan_amount__gt = 0)
            lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
            lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
        else:
            inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate], payment_method__iexact = 'cheque', paid_off__gt = 0)
            crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate], payment_type__iexact = 'cheque', paid__gt = 0)
            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate] , payment_method__iexact = 'cheque', paid_off__gt = 0)
            sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate], payment_method__iexact='cheque', paid_off__gt = 0)
            rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate], Payment_Method__iexact='cheque', Paid_amount__gt = 0)
            
            bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], pay_type__iexact='cheque', paid__gt = 0)
            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], payment_method__iexact='cheque', advanceAmount_paid__gt = 0)
            pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], payment_method__iexact='cheque', paid_off__gt = 0)
            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], payment_type__iexact='cheque', paid__gt = 0)
            
            empLoan = Fin_Loan.objects.filter(company = cmp, loan_date__range = [startDate, endDate], payment_method__iexact = 'cheque')
            empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, new_date__range = [startDate, endDate], payment_method__iexact = 'cheque')
            lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_date__range = [startDate, endDate], payment_method__iexact = 'cheque', principle_amount__gt = 0)
            slry = Fin_SalaryDetails.objects.filter(company=cmp, salary_date__range = [startDate, endDate], employee__pay_head__iexact='cheque')
            
            loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', loan_date__range = [startDate, endDate], to_trans__iexact = 'cheque', loan_amount__gt = 0)
            lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', loan_date__range = [startDate, endDate], recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
            lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', loan_date__range = [startDate, endDate], recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
        
        context = {
            'cmp':cmp,
            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'empLoan':empLoan,
            'empAddLoan':empAddLoan,
            'loanRepay':lnRpy,
            'empSalary':slry,

            'loanAccount':loanAcc,
            'loanAdditional':lonAddAcc,
            'emiPaid':lonAccEmi,

            'balance':bal
        }
        
        template_path = 'company/Fin_ChequesStatement_Pdf.html'
        fname = 'Cheque_Payments'
        # return render(request, 'company/Fin_Invoice_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareChequeStatementToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                bal = request.POST['balance']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                if startDate == None or endDate == None:
                    inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cheque', paid_off__gt = 0)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cheque', paid__gt = 0)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cheque', paid_off__gt = 0)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cheque', paid_off__gt = 0)
                    rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cheque', Paid_amount__gt = 0)
                    
                    
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cheque', paid__gt = 0)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cheque', advanceAmount_paid__gt = 0)
                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cheque', paid_off__gt = 0)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cheque', paid__gt = 0)
                    
                    empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cheque')
                    empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cheque')
                    lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cheque', principle_amount__gt = 0)
                    slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cheque')

                    loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'cheque', loan_amount__gt = 0)
                    lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
                    lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
                else:
                    inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate], payment_method__iexact = 'cheque', paid_off__gt = 0)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate], payment_type__iexact = 'cheque', paid__gt = 0)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate] , payment_method__iexact = 'cheque', paid_off__gt = 0)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate], payment_method__iexact='cheque', paid_off__gt = 0)
                    rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate], Payment_Method__iexact='cheque', Paid_amount__gt = 0)
                    
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], pay_type__iexact='cheque', paid__gt = 0)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], payment_method__iexact='cheque', advanceAmount_paid__gt = 0)
                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], payment_method__iexact='cheque', paid_off__gt = 0)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], payment_type__iexact='cheque', paid__gt = 0)
                    
                    empLoan = Fin_Loan.objects.filter(company = cmp, loan_date__range = [startDate, endDate], payment_method__iexact = 'cheque')
                    empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, new_date__range = [startDate, endDate], payment_method__iexact = 'cheque')
                    lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_date__range = [startDate, endDate], payment_method__iexact = 'cheque', principle_amount__gt = 0)
                    slry = Fin_SalaryDetails.objects.filter(company=cmp, salary_date__range = [startDate, endDate], employee__pay_head__iexact='cheque')

                    loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', loan_date__range = [startDate, endDate], to_trans__iexact = 'cheque', loan_amount__gt = 0)
                    lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', loan_date__range = [startDate, endDate], recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
                    lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', loan_date__range = [startDate, endDate], recieved_bank__iexact = 'cheque', loan_amount__gt = 0)
                
                context = {
                    'cmp':cmp,
                    'invoice':inv,
                    'recInvoice':recInv,
                    'creditNote':crdNt,
                    'salesOrder':sordr,
                    'retainerInvoice':rtInv,
                    
                    'bill':bill,
                    'recurringBill':rcrbl,
                    'purchaseOrder':pordr,
                    'debitNote':dbtnt,

                    'empLoan':empLoan,
                    'empAddLoan':empAddLoan,
                    'loanRepay':lnRpy,
                    'empSalary':slry,

                    'loanAccount':loanAcc,
                    'loanAdditional':lonAddAcc,
                    'emiPaid':lonAccEmi,

                    'balance':bal
                }
                template_path = 'company/Fin_ChequesStatement_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Cheque_Payments'
                subject = f"Cheque_Payments"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Statement for - Cheque payments. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Statement has been shared via email successfully..!')
                return redirect(Fin_chequeStatement)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_chequeStatement)

# < ------------- Shemeem -------- > UPI < ------------------------------- >

def Fin_upiPayments(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

        inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'upi', paid_off__gt = 0)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'upi', paid__gt = 0)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'upi', paid_off__gt = 0)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='upi', paid_off__gt = 0)
        rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='upi', Paid_amount__gt = 0)
        
        
        bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='upi', paid__gt = 0)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='upi', advanceAmount_paid__gt = 0)
        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='upi', paid_off__gt = 0)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='upi', paid__gt = 0)
        
        empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'upi')
        empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'upi')
        lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'upi', principle_amount__gt = 0)
        slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='upi')

        loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'upi', loan_amount__gt = 0)
        lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'upi', loan_amount__gt = 0)
        lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'upi', loan_amount__gt = 0)
        
        context = {
            'allmodules':allmodules,
            'com':com,
            'cmp':cmp,
            'data':data,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'empLoan':empLoan,
            'empAddLoan':empAddLoan,
            'loanRepay':lnRpy,
            'empSalary':slry,

            'loanAccount':loanAcc,
            'loanAdditional':lonAddAcc,
            'emiPaid':lonAccEmi,
        }
        return render(request,'company/Fin_UPI.html',context)
    else:
       return redirect('/')

def Fin_upiStatement(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

        inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'upi', paid_off__gt = 0)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'upi', paid__gt = 0)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'upi', paid_off__gt = 0)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='upi', paid_off__gt = 0)
        rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='upi', Paid_amount__gt = 0)
        
        
        bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='upi', paid__gt = 0)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='upi', advanceAmount_paid__gt = 0)
        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='upi', paid_off__gt = 0)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='upi', paid__gt = 0)
        
        empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'upi')
        empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'upi')
        lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'upi', principle_amount__gt = 0)
        slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='upi')

        loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'upi', loan_amount__gt = 0)
        lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'upi', loan_amount__gt = 0)
        lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'upi', loan_amount__gt = 0)
        
        context = {
            'allmodules':allmodules,
            'com':com,
            'cmp':cmp,
            'data':data,

            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'empLoan':empLoan,
            'empAddLoan':empAddLoan,
            'loanRepay':lnRpy,
            'empSalary':slry,

            'loanAccount':loanAcc,
            'loanAdditional':lonAddAcc,
            'emiPaid':lonAccEmi,
        }
        return render(request,'company/Fin_UPI_Statement.html',context)
    else:
       return redirect('/')

def Fin_upiStatementPdf(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        startDate = request.GET['start']
        endDate = request.GET['end']
        bal = request.GET['balance']
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None

        if startDate == None or endDate == None:
            inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'upi', paid_off__gt = 0)
            crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'upi', paid__gt = 0)
            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'upi', paid_off__gt = 0)
            sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='upi', paid_off__gt = 0)
            rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='upi', Paid_amount__gt = 0)
            
            
            bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='upi', paid__gt = 0)
            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='upi', advanceAmount_paid__gt = 0)
            pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='upi', paid_off__gt = 0)
            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='upi', paid__gt = 0)
            
            empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'upi')
            empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'upi')
            lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'upi', principle_amount__gt = 0)
            slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='upi')

            loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'upi', loan_amount__gt = 0)
            lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'upi', loan_amount__gt = 0)
            lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'upi', loan_amount__gt = 0)
        else:
            inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate], payment_method__iexact = 'upi', paid_off__gt = 0)
            crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate], payment_type__iexact = 'upi', paid__gt = 0)
            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate] , payment_method__iexact = 'upi', paid_off__gt = 0)
            sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate], payment_method__iexact='upi', paid_off__gt = 0)
            rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate], Payment_Method__iexact='upi', Paid_amount__gt = 0)
            
            bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], pay_type__iexact='upi', paid__gt = 0)
            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], payment_method__iexact='upi', advanceAmount_paid__gt = 0)
            pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], payment_method__iexact='upi', paid_off__gt = 0)
            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], payment_type__iexact='upi', paid__gt = 0)
            
            empLoan = Fin_Loan.objects.filter(company = cmp, loan_date__range = [startDate, endDate], payment_method__iexact = 'upi')
            empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, new_date__range = [startDate, endDate], payment_method__iexact = 'upi')
            lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_date__range = [startDate, endDate], payment_method__iexact = 'upi', principle_amount__gt = 0)
            slry = Fin_SalaryDetails.objects.filter(company=cmp, salary_date__range = [startDate, endDate], employee__pay_head__iexact='upi')

            loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', loan_date__range = [startDate, endDate], to_trans__iexact = 'upi', loan_amount__gt = 0)
            lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', loan_date__range = [startDate, endDate], recieved_bank__iexact = 'upi', loan_amount__gt = 0)
            lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', loan_date__range = [startDate, endDate], recieved_bank__iexact = 'upi', loan_amount__gt = 0)
        
        context = {
            'cmp':cmp,
            'invoice':inv,
            'recInvoice':recInv,
            'creditNote':crdNt,
            'salesOrder':sordr,
            'retainerInvoice':rtInv,
            
            'bill':bill,
            'recurringBill':rcrbl,
            'purchaseOrder':pordr,
            'debitNote':dbtnt,

            'empLoan':empLoan,
            'empAddLoan':empAddLoan,
            'loanRepay':lnRpy,
            'empSalary':slry,

            'loanAccount':loanAcc,
            'loanAdditional':lonAddAcc,
            'emiPaid':lonAccEmi,

            'balance': bal
        }
        
        template_path = 'company/Fin_UPIStatement_Pdf.html'
        fname = 'UPI_Payments'
        # return render(request, 'company/Fin_Invoice_Pdf.html',context)
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareUpiStatementToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                bal = request.POST['balance']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                if startDate == None or endDate == None:
                    inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'upi', paid_off__gt = 0)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'upi', paid__gt = 0)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'upi', paid_off__gt = 0)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='upi', paid_off__gt = 0)
                    rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='upi', Paid_amount__gt = 0)
                    
                    
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='upi', paid__gt = 0)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='upi', advanceAmount_paid__gt = 0)
                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='upi', paid_off__gt = 0)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='upi', paid__gt = 0)
                    
                    empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'upi')
                    empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'upi')
                    lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'upi', principle_amount__gt = 0)
                    slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='upi')

                    loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'upi', loan_amount__gt = 0)
                    lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'upi', loan_amount__gt = 0)
                    lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'upi', loan_amount__gt = 0)
                else:
                    inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate], payment_method__iexact = 'upi', paid_off__gt = 0)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate], payment_type__iexact = 'upi', paid__gt = 0)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate] , payment_method__iexact = 'upi', paid_off__gt = 0)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate], payment_method__iexact='upi', paid_off__gt = 0)
                    rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate], Payment_Method__iexact='upi', Paid_amount__gt = 0)
                    
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], pay_type__iexact='upi', paid__gt = 0)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], payment_method__iexact='upi', advanceAmount_paid__gt = 0)
                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], payment_method__iexact='upi', paid_off__gt = 0)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], payment_type__iexact='upi', paid__gt = 0)
                    
                    empLoan = Fin_Loan.objects.filter(company = cmp, loan_date__range = [startDate, endDate], payment_method__iexact = 'upi')
                    empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, new_date__range = [startDate, endDate], payment_method__iexact = 'upi')
                    lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_date__range = [startDate, endDate], payment_method__iexact = 'upi', principle_amount__gt = 0)
                    slry = Fin_SalaryDetails.objects.filter(company=cmp, salary_date__range = [startDate, endDate], employee__pay_head__iexact='upi')

                    loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', loan_date__range = [startDate, endDate], to_trans__iexact = 'upi', loan_amount__gt = 0)
                    lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', loan_date__range = [startDate, endDate], recieved_bank__iexact = 'upi', loan_amount__gt = 0)
                    lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', loan_date__range = [startDate, endDate], recieved_bank__iexact = 'upi', loan_amount__gt = 0)

                context = {
                    'cmp':cmp,
                    'invoice':inv,
                    'recInvoice':recInv,
                    'creditNote':crdNt,
                    'salesOrder':sordr,
                    'retainerInvoice':rtInv,
                    
                    'bill':bill,
                    'recurringBill':rcrbl,
                    'purchaseOrder':pordr,
                    'debitNote':dbtnt,

                    'empLoan':empLoan,
                    'empAddLoan':empAddLoan,
                    'loanRepay':lnRpy,
                    'empSalary':slry,

                    'loanAccount':loanAcc,
                    'loanAdditional':lonAddAcc,
                    'emiPaid':lonAccEmi,
                    
                    'balance':bal
                }
                template_path = 'company/Fin_UPIStatement_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'UPI_Payments'
                subject = f"UPI_Payments"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Statement for - UPI payments. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Statement has been shared via email successfully..!')
                return redirect(Fin_upiStatement)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_upiStatement)

# End

# < ------------- Shemeem -------- > CREDIT NOTES < ------------------------------- >
def Fin_creditNotes(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        cred = Fin_CreditNote.objects.filter(Company = cmp)
        context = {
            'allmodules':allmodules,'com':com, 'cmp':cmp,'data':data,'creditNotes':cred
        }
        return render(request,'company/Fin_Credit_Notes.html', context)
    else:
       return redirect('/')

def Fin_addCreditNote(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, type__iexact='sales', status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')

        # Fetching last creditNote and assigning upcoming ref no as current + 1
        # Also check for if any bill is deleted and ref no is continuos w r t the deleted creditNote
        latest_cred = Fin_CreditNote.objects.filter(Company = cmp).order_by('-id').first()

        new_number = int(latest_cred.reference_number) + 1 if latest_cred else 1

        if Fin_CreditNote_Reference.objects.filter(Company = cmp).exists():
            deleted = Fin_CreditNote_Reference.objects.get(Company = cmp)
            
            if deleted:
                while int(deleted.reference_number) >= new_number:
                    new_number+=1

        # Finding next invoice number w r t last invoic number if exists.
        nxtCN = ""
        if latest_cred:
            inv_no = str(latest_cred.creditnote_number)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtCN = st + num.zfill(len(num))
            else:
                nxtCN = st + str(inv_num).zfill(len(num))
        else:
            nxtCN = 'CN001'

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'items':itms, 'pTerms':trms,'priceListItems':lst,
            'ref_no':new_number,'banks':bnk,'credNo':nxtCN,'units':units, 'accounts':acc
        }
        return render(request,'company/Fin_Credit_NotesAdd.html',context)
    else:
        return redirect('/')

def Fin_getInvoiceNumbers(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        cust = request.GET['custId']
        invType = request.GET['invType']

        invoices = {}
        customer = Fin_Customers.objects.get(id = cust)
        if not customer:
            return JsonResponse({'message':'Customer Not Found, Try again..'})

        if invType == 'Invoice':
            invs = Fin_Invoice.objects.filter(Company = com, Customer = customer)

            for option in invs:
                if not Fin_CreditNote.objects.filter(Company = com, invoice_number__iexact = option.invoice_no).exists():
                    invoices[option.id] = [option.id, option.invoice_no]
                else:
                    continue
        
        if invType == 'Recurring Invoice':
            invs = Fin_Recurring_Invoice.objects.filter(Company = com, Customer = customer)

            for option in invs:
                if not Fin_CreditNote.objects.filter(Company = com, invoice_number__iexact = option.rec_invoice_no).exists():
                    invoices[option.id] = [option.id, option.rec_invoice_no]
                else:
                    continue

        return JsonResponse(invoices)
    else:
        return redirect('/')

def Fin_getInvoiceNumbersEdit(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        cust = request.GET['custId']
        invType = request.GET['invType']
        invNo = request.GET['invNum']

        invoices = {}
        customer = Fin_Customers.objects.get(id = cust)
        if not customer:
            return JsonResponse({'message':'Customer Not Found, Try again..'})

        if invType == 'Invoice':
            invs = Fin_Invoice.objects.filter(Company = com, Customer = customer)

            for option in invs:
                if option.invoice_no == invNo:
                    invoices[option.id] = [option.id, option.invoice_no]

                if not Fin_CreditNote.objects.filter(Company = com, invoice_number__iexact = option.invoice_no).exists():
                    invoices[option.id] = [option.id, option.invoice_no]
                else:
                    continue
        
        if invType == 'Recurring Invoice':
            invs = Fin_Recurring_Invoice.objects.filter(Company = com, Customer = customer)

            for option in invs:
                if option.rec_invoice_no == invNo:
                    invoices[option.id] = [option.id, option.rec_invoice_no]
                if not Fin_CreditNote.objects.filter(Company = com, invoice_number__iexact = option.rec_invoice_no).exists():
                    invoices[option.id] = [option.id, option.rec_invoice_no]
                else:
                    continue

        return JsonResponse(invoices)
    else:
        return redirect('/')

def Fin_getInvoiceDet(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        invoiceId = request.GET['id']
        invType = request.GET['type']

        items = {}
        if invType == 'Invoice':
            inv = Fin_Invoice.objects.get(id = invoiceId)
            itms = Fin_Invoice_Items.objects.filter(Invoice = inv)

        if invType == 'Recurring Invoice':
            inv = Fin_Recurring_Invoice.objects.get(id = invoiceId)
            itms = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice = inv)

        if not itms:
            return JsonResponse({'message':'Items Not Found for the selected number,\nAdd Items or Try again..'})

        for item in itms:
            items[item.id] = [item.id, item.Item.name, item.Item.id, item.hsn, item.quantity, item.Item.current_stock, item.price, item.Item.selling_price, item.tax, item.discount, item.total,item.sac]
        # if invType == 'Invoice':
        #     for item in itms:
        #         items[item.id] = [item.id, item.Item.name, item.hsn, item.quantity, item.Item.current_stock, item.price, item.tax, item.discount, item.total]
        
        # if invType == 'Recurring Invoice':
        #     for item in itms:
        #         items[item.id] = [item.id, item.Item.name, item.hsn, item.quantity, item.Item.current_stock, item.price, item.tax, item.discount, item.total]

        return JsonResponse(items)
    else:
        return redirect('/')

def Fin_createCreditNote(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        if request.method == 'POST':
            cnNum = request.POST['credit_note_no']

            PatternStr = []
            for word in cnNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkCreditNoteNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Credit Note No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if Fin_CreditNote.objects.filter(Company = com, creditnote_number__iexact = cnNum).exists():
                res = f'<script>alert("Credit Not Number `{cnNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            cNote = Fin_CreditNote(
                Company = com,
                LoginDetails = com.Login_Id,
                Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId']),
                customer_email = request.POST['customerEmail'],
                billing_address = request.POST['bill_address'],
                gst_type = request.POST['gst_type'],
                gstin = request.POST['gstin'],
                place_of_supply = request.POST['place_of_supply'],
                reference_number = request.POST['reference_number'],
                creditnote_number = cnNum,
                invoice_type = None if request.POST['invoice_type'] == "" else request.POST['invoice_type'],
                invoice_number = None if request.POST['invoice_number'] == "" else Fin_Invoice.objects.get(id = request.POST['invoice_number']).invoice_no if request.POST['invoice_type'] == 'Invoice' else Fin_Recurring_Invoice.objects.get(id = request.POST['invoice_number']).rec_invoice_no,
                creditnote_date = request.POST['credit_note_date'],
                price_list_applied = True if 'priceList' in request.POST else False,
                price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id']),
                payment_type = None if request.POST['payment_method'] == "" else request.POST['payment_method'],
                cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id'],
                upi_id = None if request.POST['upi_id'] == "" else request.POST['upi_id'],
                bank_account = None if request.POST['bnk_id'] == "" else request.POST['bnk_id'],
                subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal']),
                igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst']),
                cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst']),
                sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst']),
                tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount']),
                adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj']),
                shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship']),
                grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal']),
                paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance']),
                balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance']),
                note = request.POST['note']
            )

            cNote.save()

            if len(request.FILES) != 0:
                cNote.file=request.FILES.get('file')
            cNote.save()

            if 'Draft' in request.POST:
                cNote.status = "Draft"
            elif "Save" in request.POST:
                cNote.status = "Saved" 
            cNote.save()

            # Save invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total) and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None' :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    itm = Fin_Items.objects.get(id = int(ele[0]))
                    Fin_CreditNote_Items.objects.create(creditnote = cNote, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                    itm.current_stock -= int(ele[4])
                    itm.save()
            
            # Save transaction
                    
            Fin_CreditNote_History.objects.create(
                Company = com,
                LoginDetails = data,
                creditnote = cNote,
                action = 'Created'
            )

            return redirect(Fin_creditNotes)
    else:
        return redirect('/')

def checkCreditNoteNumber(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        credNoteNo = request.GET['credNoteNum']

        # Finding next rec_invoice number w r t last rec_invoice number if exists.
        nxtCNnum = ""
        lastCN = Fin_CreditNote.objects.filter(Company = com).last()
        if lastCN:
            inv_no = str(lastCN.creditnote_number)
            numbers = []
            stri = []
            for word in inv_no:
                if word.isdigit():
                    numbers.append(word)
                else:
                    stri.append(word)

            num = ''.join(numbers)
            st = ''.join(stri)

            inv_num = int(num) + 1
            if num[0] == 0:
                nxtCNnum = st + num.zfill(len(num)) 
            else:
                nxtCNnum = st + str(inv_num).zfill(len(num))
        # else:
        #     nxtInv = 'RI01'

        PatternStr = []
        for word in credNoteNo:
            if word.isdigit():
                pass
            else:
                PatternStr.append(word)
        
        pattern = ''
        for j in PatternStr:
            pattern += j

        pattern_exists = checkCreditNoteNumberPattern(pattern)

        if pattern !="" and pattern_exists:
            return JsonResponse({'status':False, 'message':'Credit Note No. Pattern already Exists.!'})
        elif Fin_CreditNote.objects.filter(Company = com, creditnote_number__iexact = credNoteNo).exists():
            return JsonResponse({'status':False, 'message':'Credit Note No. already Exists.!'})
        elif nxtCNnum != "" and credNoteNo != nxtCNnum:
            return JsonResponse({'status':False, 'message':'Credit Note No. is not continuous.!'})
        else:
            return JsonResponse({'status':True, 'message':'Number is okay.!'})
    else:
       return redirect('/')

def checkCreditNoteNumberPattern(pattern):
    models = [Fin_Invoice, Fin_Sales_Order, Fin_Estimate, Fin_Purchase_Bill, Fin_Manual_Journal, Fin_Recurring_Invoice, Fin_Purchase_Order]

    for model in models:
        field_name = model.getNumFieldName(model)
        if model.objects.filter(**{f"{field_name}__icontains": pattern}).exists():
            return True
    return False

def Fin_viewCreditNote(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        crd = Fin_CreditNote.objects.get(id = id)
        cmt = Fin_CreditNote_Comments.objects.filter(creditnote = crd)
        hist = Fin_CreditNote_History.objects.filter(creditnote = crd).last()
        itms = Fin_CreditNote_Items.objects.filter(creditnote = crd)
        try:
            created = Fin_CreditNote_History.objects.get(creditnote = crd, action = 'Created')
        except:
            created = None
        
        return render(request,'company/Fin_Credit_Note_Overview.html',{'allmodules':allmodules,'com':com,'cmp':cmp, 'data':data, 'credit':crd,'creditItems':itms, 'history':hist, 'comments':cmt, 'created':created})
    else:
       return redirect('/')

def Fin_convertCreditNote(request,id):
    if 's_id' in request.session:
        crd = Fin_CreditNote.objects.get(id = id)
        crd.status = 'Saved'
        crd.save()
        return redirect(Fin_viewCreditNote, id)

def Fin_addCreditNoteComment(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        crd = Fin_CreditNote.objects.get(id = id)
        if request.method == "POST":
            cmt = request.POST['comment'].strip()

            Fin_CreditNote_Comments.objects.create(Company = com, creditnote = crd, comments = cmt)
            return redirect(Fin_viewCreditNote, id)
        return redirect(Fin_viewCreditNote, id)
    return redirect('/')

def Fin_deleteCreditNoteComment(request,id):
    if 's_id' in request.session:
        cmt = Fin_CreditNote_Comments.objects.get(id = id)
        crdId = cmt.creditnote.id
        cmt.delete()
        return redirect(Fin_viewCreditNote, crdId)
    
def Fin_creditNoteHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        crd = Fin_CreditNote.objects.get(id = id)
        his = Fin_CreditNote_History.objects.filter(creditnote = crd)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_Credit_Note_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'credit':crd})
    else:
       return redirect('/')

def Fin_attachCreditNoteFile(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        crd = Fin_CreditNote.objects.get(id = id)

        if request.method == 'POST' and len(request.FILES) != 0:
            crd.document = request.FILES.get('file')
            crd.save()

        return redirect(Fin_viewCreditNote, id)
    else:
        return redirect('/')

def Fin_editCreditNote(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        crd = Fin_CreditNote.objects.get(id = id)
        crdItms = Fin_CreditNote_Items.objects.filter(creditnote = crd)

        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        cust = Fin_Customers.objects.filter(Company = cmp, status = 'Active')
        itms = Fin_Items.objects.filter(Company = cmp, status = 'Active')
        trms = Fin_Company_Payment_Terms.objects.filter(Company = cmp)
        bnk = Fin_Banking.objects.filter(company = cmp)
        lst = Fin_Price_List.objects.filter(Company = cmp, type__iexact='sales', status = 'Active')
        units = Fin_Units.objects.filter(Company = cmp)
        acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company=cmp).order_by('account_name')


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'items':itms, 'pTerms':trms,'priceListItems':lst,
            'banks':bnk,'units':units, 'accounts':acc, 'credit': crd, 'creditItems':crdItms
        }
        return render(request,'company/Fin_Credit_NotesEdit.html',context)
    else:
        return redirect('/')

def Fin_updateCreditNote(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        crd = Fin_CreditNote.objects.get(id = id)

        if request.method == 'POST':
            cnNum = request.POST['credit_note_no']

            PatternStr = []
            for word in cnNum:
                if word.isdigit():
                    pass
                else:
                    PatternStr.append(word)
            
            pattern = ''
            for j in PatternStr:
                pattern += j

            pattern_exists = checkCreditNoteNumberPattern(pattern)

            if pattern !="" and pattern_exists:
                res = f'<script>alert("Credit Note No. Pattern already Exists.! Try another!");window.history.back();</script>'
                return HttpResponse(res)

            if crd.creditnote_number != cnNum and Fin_CreditNote.objects.filter(Company = com, creditnote_number__iexact = cnNum).exists():
                res = f'<script>alert("Credit Not Number `{cnNum}` already exists, try another!");window.history.back();</script>'
                return HttpResponse(res)

            
            crd.Customer = None if request.POST['customerId'] == "" else Fin_Customers.objects.get(id = request.POST['customerId'])
            crd.customer_email = request.POST['customerEmail']
            crd.billing_address = request.POST['bill_address']
            crd.gst_type = request.POST['gst_type']
            crd.gstin = request.POST['gstin']
            crd.place_of_supply = request.POST['place_of_supply']
            crd.reference_number = request.POST['reference_number']
            crd.creditnote_number = cnNum
            crd.invoice_type = None if request.POST['invoice_type'] == "" else request.POST['invoice_type']
            crd.invoice_number = None if request.POST['invoice_number'] == "" else Fin_Invoice.objects.get(id = request.POST['invoice_number']).invoice_no if request.POST['invoice_type'] == 'Invoice' else Fin_Recurring_Invoice.objects.get(id = request.POST['invoice_number']).rec_invoice_no
            crd.creditnote_date = request.POST['credit_note_date']
            crd.price_list_applied = True if 'priceList' in request.POST else False
            crd.price_list = None if request.POST['price_list_id'] == "" else Fin_Price_List.objects.get(id = request.POST['price_list_id'])
            crd.payment_type = None if request.POST['payment_method'] == "" else request.POST['payment_method']
            crd.cheque_number = None if request.POST['cheque_id'] == "" else request.POST['cheque_id']
            crd.upi_id = None if request.POST['upi_id'] == "" else request.POST['upi_id']
            crd.bank_account = None if request.POST['bnk_id'] == "" else request.POST['bnk_id']
            crd.subtotal = 0.0 if request.POST['subtotal'] == "" else float(request.POST['subtotal'])
            crd.igst = 0.0 if request.POST['igst'] == "" else float(request.POST['igst'])
            crd.cgst = 0.0 if request.POST['cgst'] == "" else float(request.POST['cgst'])
            crd.sgst = 0.0 if request.POST['sgst'] == "" else float(request.POST['sgst'])
            crd.tax_amount = 0.0 if request.POST['taxamount'] == "" else float(request.POST['taxamount'])
            crd.adjustment = 0.0 if request.POST['adj'] == "" else float(request.POST['adj'])
            crd.shipping_charge = 0.0 if request.POST['ship'] == "" else float(request.POST['ship'])
            crd.grandtotal = 0.0 if request.POST['grandtotal'] == "" else float(request.POST['grandtotal'])
            crd.paid = 0.0 if request.POST['advance'] == "" else float(request.POST['advance'])
            crd.balance = request.POST['grandtotal'] if request.POST['balance'] == "" else float(request.POST['balance'])
            crd.note = request.POST['note']

            crd.save()

            if len(request.FILES) != 0:
                crd.file=request.FILES.get('file')
            crd.save()

            # Save invoice items.

            itemId = request.POST.getlist("item_id[]")
            itemName = request.POST.getlist("item_name[]")
            hsn  = request.POST.getlist("hsn[]")
            sac  = request.POST.getlist("sac[]")
            qty = request.POST.getlist("qty[]")
            price = request.POST.getlist("priceListPrice[]") if 'priceList' in request.POST else request.POST.getlist("price[]")
            tax = request.POST.getlist("taxGST[]") if request.POST['place_of_supply'] == com.State else request.POST.getlist("taxIGST[]")
            discount = request.POST.getlist("discount[]")
            total = request.POST.getlist("total[]")
            crd_item_ids = request.POST.getlist("id[]")
            crdItem_ids = [int(id) for id in crd_item_ids]

            crd_items = Fin_CreditNote_Items.objects.filter(creditnote = crd)
            object_ids = [obj.id for obj in crd_items]

            ids_to_delete = [obj_id for obj_id in object_ids if obj_id not in crdItem_ids]
            for itmId in ids_to_delete:
                crdItem = Fin_CreditNote_Items.objects.get(id = itmId)
                item = Fin_Items.objects.get(id = crdItem.items.id)
                item.current_stock += crdItem.quantity
                item.save()

            Fin_CreditNote_Items.objects.filter(id__in=ids_to_delete).delete()

            if len(itemId)==len(itemName)==len(hsn)==len(sac)==len(qty)==len(price)==len(tax)==len(discount)==len(total)==len(crdItem_ids) and crdItem_ids and itemId and itemName and qty and price and tax and discount and total:
                mapped = zip(itemId,itemName,hsn,sac,qty,price,tax,discount,total,crdItem_ids)
                mapped = list(mapped)
                for ele in mapped:

                    if ele[2] == '' or ele[2] == 'None'  :
                        hsn = None
                    else:
                        hsn = ele[2]
                    if ele[3] == '' or ele[3] == 'None':
                        sac = None
                    else:
                        sac = ele[3]

                    if ele[9] == 0:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        Fin_CreditNote_Items.objects.create(creditnote = crd, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))
                        itm.current_stock -= int(ele[4])
                        itm.save()
                    else:
                        itm = Fin_Items.objects.get(id = int(ele[0]))
                        inItm = Fin_CreditNote_Items.objects.get(id = int(ele[9]))
                        crQty = int(inItm.quantity)
                        
                        Fin_CreditNote_Items.objects.filter( id = int(ele[9])).update(creditnote = crd, items = itm, hsn = hsn,sac=sac, quantity = int(ele[4]), price = float(ele[5]), tax_rate = ele[6], discount = float(ele[7]), total = float(ele[8]))

                        if crQty < int(ele[4]):
                            itm.current_stock -=  abs(crQty - int(ele[4]))
                        elif crQty > int(ele[4]):
                            itm.current_stock += abs(crQty - int(ele[4]))
                        itm.save()
            
            # Save transaction
                    
            Fin_CreditNote_History.objects.create(
                Company = com,
                LoginDetails = data,
                creditnote = crd,
                action = 'Edited'
            )

            return redirect(Fin_viewCreditNote, id)
    else:
        return redirect('/')

def Fin_creditNotePdf(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        crd = Fin_CreditNote.objects.get(id = id)
        itms = Fin_CreditNote_Items.objects.filter(creditnote = crd)
    
        context = {'credit':crd, 'creditItems':itms,'cmp':com}
        
        template_path = 'company/Fin_Credit_NotePdf.html'
        fname = 'Credit_Note_'+crd.creditnote_number
        # Create a Django response object, and specify content_type as pdftemp_
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] =f'attachment; filename = {fname}.pdf'
        # find the template and render it.
        template = get_template(template_path)
        html = template.render(context)

        # create a pdf
        pisa_status = pisa.CreatePDF(
        html, dest=response)
        # if error then show some funny view
        if pisa_status.err:
            return HttpResponse('We had some errors <pre>' + html + '</pre>')
        return response
    else:
        return redirect('/')

def Fin_shareCreditNoteToEmail(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                crd = Fin_CreditNote.objects.get(id = id)
                itms = Fin_CreditNote_Items.objects.filter(creditnote = crd)
            
                context = {'credit':crd, 'creditItems':itms,'cmp':com}
                template_path = 'company/Fin_Credit_NotePdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Credit_Note_{crd.creditnote_number}'
                subject = f"Credit_Note_{crd.creditnote_number}"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Credit Note for - #-{crd.creditnote_number}. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Credit Note details has been shared via email successfully..!')
                return redirect(Fin_viewCreditNote,id)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_viewCreditNote, id)

def Fin_deleteCreditNote(request, id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        crd = Fin_CreditNote.objects.get( id = id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        for i in Fin_CreditNote_Items.objects.filter(creditnote = crd):
            item = Fin_Items.objects.get(id = i.items.id)
            item.current_stock += i.quantity
            item.save()
        
        Fin_CreditNote_Items.objects.filter(creditnote = crd).delete()

        # Storing ref number to deleted table
        # if entry exists and lesser than the current, update and save => Only one entry per company
        if Fin_CreditNote_Reference.objects.filter(Company = com).exists():
            deleted = Fin_CreditNote_Reference.objects.get(Company = com)
            if int(crd.reference_number) > int(deleted.reference_number):
                deleted.reference_number = crd.reference_number
                deleted.save()
        else:
            Fin_CreditNote_Reference.objects.create(Company = com, LoginDetails = com.Login_Id, reference_number = crd.reference_number)
        
        crd.delete()
        return redirect(Fin_creditNotes)
        
def Fin_getInvoicePaidAmount(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        invoiceId = request.GET['id']
        invType = request.GET['invType']

        paid = 0
        if invType == 'Invoice':
            inv = Fin_Invoice.objects.get(id = invoiceId)
            paid = inv.paid_off

        if invType == 'Recurring Invoice':
            inv = Fin_Recurring_Invoice.objects.get(id = invoiceId)
            paid = inv.paid_off

        return JsonResponse({'status':True, 'paid':paid})
    else:
        return redirect('/')

#End

# < ------------- Shemeem -------- > Reports - Sales by Item & Customer < ------------------------------- >
def Fin_salesByCustomerReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totInv = 0
        totRecInv = 0
        totCrdNote = 0
        subTot = 0
        subTotWOCrd = 0

        cust = Fin_Customers.objects.filter(Company=cmp)
        
        for c in cust:
            customerName = c.first_name +" "+c.last_name
            count = 0
            sales = 0

            inv = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
            recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')
            crd = Fin_CreditNote.objects.filter(Customer=c, status = 'Saved')

            for i in inv:
                sales += float(i.grandtotal)
                totInv += float(i.grandtotal)
                subTot += float(i.subtotal)
                subTotWOCrd += float(i.subtotal)

            for r in recInv:
                sales += float(r.grandtotal)
                totRecInv += float(r.grandtotal)
                subTot += float(r.subtotal)
                subTotWOCrd += float(r.subtotal)

            for n in crd:
                sales -= float(n.grandtotal)
                totCrdNote += float(n.grandtotal)
                subTot -= float(n.subtotal)

            count = len(inv) + len(recInv) + len(crd)

            details = {
                'name': customerName,
                'count':count,
                'sales':sales
            }

            reportData.append(details)

        totCust = len(cust)
        totSale = totInv + totRecInv - totCrdNote
        totSaleWOCrdNote = totInv + totRecInv

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
            'totalCustomers':totCust, 'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'totalCreditNote': totCrdNote,
            'subtotal':subTot, 'subtotalWOCredit':subTotWOCrd, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOCrdNote,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_sales_by_customer.html', context)
    else:
        return redirect('/')

def Fin_salesByCustomerReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            trans = request.GET['transactions']
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
            totInv = 0
            totRecInv = 0
            totCrdNote = 0
            subTot = 0
            subTotWOCrd = 0

            cust = Fin_Customers.objects.filter(Company=cmp)

            for c in cust:
                customerName = c.first_name +" "+c.last_name
                count = 0
                sales = 0

                if startDate == None or endDate == None:
                    if trans == "all":
                        inv = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
                        recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')
                        crd = Fin_CreditNote.objects.filter(Customer=c, status = 'Saved')
                    elif trans == 'invoice':
                        inv = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
                        recInv = None
                        crd = None
                    elif trans == 'recurring_invoice':
                        inv = None
                        recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')
                        crd = None
                    elif trans == 'credit_notes':
                        inv = None
                        recInv = None
                        crd = Fin_CreditNote.objects.filter(Customer=c, status = 'Saved')
                else:
                    if trans == 'all':
                        inv = Fin_Invoice.objects.filter(Customer=c, invoice_date__range = [startDate, endDate], status = 'Saved')
                        recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                        crd = Fin_CreditNote.objects.filter(Customer=c, creditnote_date__range = [startDate, endDate], status = 'Saved')
                    elif trans == 'invoice':
                        inv = Fin_Invoice.objects.filter(Customer=c, invoice_date__range = [startDate, endDate], status = 'Saved')
                        recInv = None
                        crd = None
                    elif trans == 'recurring_invoice':
                        inv = None
                        recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                        crd = None
                    elif trans == 'credit_notes':
                        inv = None
                        recInv = None
                        crd = Fin_CreditNote.objects.filter(Customer=c, creditnote_date__range = [startDate, endDate], status = 'Saved')

                if inv:
                    count += len(inv)
                    for i in inv:
                        sales += float(i.grandtotal)
                        totInv += float(i.grandtotal)
                        subTot += float(i.subtotal)
                        subTotWOCrd += float(i.subtotal)

                if recInv:
                    count += len(recInv)
                    for r in recInv:
                        sales += float(r.grandtotal)
                        totRecInv += float(r.grandtotal)
                        subTot += float(r.subtotal)
                        subTotWOCrd += float(r.subtotal)
                
                if crd:
                    count += len(crd)
                    for n in crd:
                        sales -= float(n.grandtotal)
                        totCrdNote += float(n.grandtotal)
                        subTot -= float(n.subtotal)

                details = {
                    'name': customerName,
                    'count':count,
                    'sales':sales
                }

                reportData.append(details)

            totCust = len(cust)
            totSale = totInv + totRecInv - totCrdNote
            totSaleWOCrdNote = totInv + totRecInv

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
                'totalCustomers':totCust, 'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'totalCreditNote': totCrdNote,
                'subtotal':subTot, 'subtotalWOCredit':subTotWOCrd, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOCrdNote,
                'startDate':startDate, 'endDate':endDate, 'transaction':trans,
            }
            return render(request,'company/reports/Fin_sales_by_customer.html', context)
    else:
        return redirect('/')

def Fin_shareSalesByCustomerReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totInv = 0
                totRecInv = 0
                totCrdNote = 0
                subTot = 0
                subTotWOCrd = 0

                cust = Fin_Customers.objects.filter(Company=com)

                for c in cust:
                    customerName = c.first_name +" "+c.last_name
                    count = 0
                    sales = 0

                    if startDate == None or endDate == None:
                        if trans == "all":
                            inv = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
                            recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')
                            crd = Fin_CreditNote.objects.filter(Customer=c, status = 'Saved')
                        elif trans == 'invoice':
                            inv = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
                            recInv = None
                            crd = None
                        elif trans == 'recurring_invoice':
                            inv = None
                            recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')
                            crd = None
                        elif trans == 'credit_notes':
                            inv = None
                            recInv = None
                            crd = Fin_CreditNote.objects.filter(Customer=c, status = 'Saved')
                    else:
                        if trans == 'all':
                            inv = Fin_Invoice.objects.filter(Customer=c, invoice_date__range = [startDate, endDate], status = 'Saved')
                            recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                            crd = Fin_CreditNote.objects.filter(Customer=c, creditnote_date__range = [startDate, endDate], status = 'Saved')
                        elif trans == 'invoice':
                            inv = Fin_Invoice.objects.filter(Customer=c, invoice_date__range = [startDate, endDate], status = 'Saved')
                            recInv = None
                            crd = None
                        elif trans == 'recurring_invoice':
                            inv = None
                            recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                            crd = None
                        elif trans == 'credit_notes':
                            inv = None
                            recInv = None
                            crd = Fin_CreditNote.objects.filter(Customer=c, creditnote_date__range = [startDate, endDate], status = 'Saved')

                    if inv:
                        count += len(inv)
                        for i in inv:
                            sales += float(i.grandtotal)
                            totInv += float(i.grandtotal)
                            subTot += float(i.subtotal)
                            subTotWOCrd += float(i.subtotal)

                    if recInv:
                        count += len(recInv)
                        for r in recInv:
                            sales += float(r.grandtotal)
                            totRecInv += float(r.grandtotal)
                            subTot += float(r.subtotal)
                            subTotWOCrd += float(r.subtotal)
                    
                    if crd:
                        count += len(crd)
                        for n in crd:
                            sales -= float(n.grandtotal)
                            totCrdNote += float(n.grandtotal)
                            subTot -= float(n.subtotal)

                    details = {
                        'name': customerName,
                        'count':count,
                        'sales':sales
                    }

                    reportData.append(details)

                totCust = len(cust)
                totSale = totInv + totRecInv - totCrdNote
                totSaleWOCrdNote = totInv + totRecInv
            
                context = {'reportData':reportData,'cmp':com, 'startDate':startDate, 'endDate':endDate,'totalCustomers':totCust, 'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'totalCreditNote': totCrdNote,'subtotal':subTot, 'subtotalWOCredit':subTotWOCrd, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOCrdNote}
                template_path = 'company/reports/Fin_Sales_by_customer_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_SalesByCustomer'
                subject = f"Report_SalesByCustomer"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Sales By Customer. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_salesByCustomerReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_salesByCustomerReport)

def Fin_salesByItemReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totInv = 0
        totRecInv = 0
        totCrdNote = 0
        subTot = 0
        subTotWOCrd = 0

        itms = Fin_Items.objects.filter(Company=cmp)

        for i in itms:
            itemName = i.name
            price = i.selling_price
            quantity = 0
            amount = 0

            inv = Fin_Invoice_Items.objects.filter(Item=i)
            recInv = Fin_Recurring_Invoice_Items.objects.filter(Item=i)
            crd = Fin_CreditNote_Items.objects.filter(items=i)

            for i in inv:
                amount += float(i.total)
                totInv += float(i.total)
                subTot += (i.quantity * i.price)
                subTotWOCrd += (i.quantity * i.price)
                quantity += i.quantity

            for r in recInv:
                amount += float(r.total)
                totRecInv += float(r.total)
                subTot += (r.quantity * r.price)
                subTotWOCrd += (r.quantity * r.price)
                quantity += r.quantity

            for n in crd:
                amount -= float(n.total)
                totCrdNote += float(n.total)
                subTot -= (n.quantity * n.price)
                quantity -= n.quantity

            details = {
                'name': itemName,
                'quantity':quantity,
                'price':price,
                'amount':amount
            }

            reportData.append(details)

        totItems = len(itms)
        totSale = totInv + totRecInv - totCrdNote
        totSaleWOCrdNote = totInv + totRecInv


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
            'totalItems':totItems, 'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'totalCreditNote': totCrdNote,
            'subtotal':subTot, 'subtotalWOCredit':subTotWOCrd, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOCrdNote,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_sales_by_item.html', context)
    else:
        return redirect('/')

def Fin_salesByItemsReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
            totInv = 0
            totRecInv = 0
            totCrdNote = 0
            subTot = 0
            subTotWOCrd = 0

            itms = Fin_Items.objects.filter(Company=cmp)

            for i in itms:
                itemName = i.name
                price = i.selling_price
                quantity = 0
                amount = 0

                if startDate == None or endDate == None:
                    inv = Fin_Invoice_Items.objects.filter(Item=i)
                    recInv = Fin_Recurring_Invoice_Items.objects.filter(Item=i)
                    crd = Fin_CreditNote_Items.objects.filter(items=i)
                else:
                    inv = Fin_Invoice_Items.objects.filter(Item=i, Invoice__invoice_date__range = [startDate, endDate])
                    recInv = Fin_Recurring_Invoice_Items.objects.filter(Item=i, RecInvoice__start_date__range = [startDate, endDate])
                    crd = Fin_CreditNote_Items.objects.filter(items=i, creditnote__creditnote_date__range = [startDate, endDate])

                if inv:
                    for i in inv:
                        amount += float(i.total)
                        totInv += float(i.total)
                        subTot += (i.quantity * i.price)
                        subTotWOCrd += (i.quantity * i.price)
                        quantity += i.quantity

                if recInv:
                    for r in recInv:
                        amount += float(r.total)
                        totRecInv += float(r.total)
                        subTot += (r.quantity * r.price)
                        subTotWOCrd += (r.quantity * r.price)
                        quantity += r.quantity
                
                if crd:
                    for n in crd:
                        amount -= float(n.total)
                        totCrdNote += float(n.total)
                        subTot -= (n.quantity * n.price)
                        quantity -= n.quantity

                details = {
                    'name': itemName,
                    'quantity':quantity,
                    'price':price,
                    'amount':amount
                }

                reportData.append(details)

            totItems = len(itms)
            totSale = totInv + totRecInv - totCrdNote
            totSaleWOCrdNote = totInv + totRecInv

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
                'totalItems':totItems, 'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'totalCreditNote': totCrdNote,
                'subtotal':subTot, 'subtotalWOCredit':subTotWOCrd, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOCrdNote,
                'startDate':startDate, 'endDate':endDate
            }
            return render(request,'company/reports/Fin_sales_by_item.html', context)
    else:
        return redirect('/')

def Fin_shareSalesByItemReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totInv = 0
                totRecInv = 0
                totCrdNote = 0
                subTot = 0
                subTotWOCrd = 0

                itms = Fin_Items.objects.filter(Company=com)

                for i in itms:
                    itemName = i.name
                    price = i.selling_price
                    quantity = 0
                    amount = 0

                    if startDate == None or endDate == None:
                        inv = Fin_Invoice_Items.objects.filter(Item=i)
                        recInv = Fin_Recurring_Invoice_Items.objects.filter(Item=i)
                        crd = Fin_CreditNote_Items.objects.filter(items=i)
                    else:
                        inv = Fin_Invoice_Items.objects.filter(Item=i, Invoice__invoice_date__range = [startDate, endDate])
                        recInv = Fin_Recurring_Invoice_Items.objects.filter(Item=i, RecInvoice__start_date__range = [startDate, endDate])
                        crd = Fin_CreditNote_Items.objects.filter(items=i, creditnote__creditnote_date__range = [startDate, endDate])

                    if inv:
                        for i in inv:
                            amount += float(i.total)
                            totInv += float(i.total)
                            subTot += (i.quantity * i.price)
                            subTotWOCrd += (i.quantity * i.price)
                            quantity += i.quantity

                    if recInv:
                        for r in recInv:
                            amount += float(r.total)
                            totRecInv += float(r.total)
                            subTot += (r.quantity * r.price)
                            subTotWOCrd += (r.quantity * r.price)
                            quantity += r.quantity
                    
                    if crd:
                        for n in crd:
                            amount -= float(n.total)
                            totCrdNote += float(n.total)
                            subTot -= (n.quantity * n.price)
                            quantity -= n.quantity

                    details = {
                        'name': itemName,
                        'quantity':quantity,
                        'price':price,
                        'amount':amount
                    }

                    reportData.append(details)

                totItems = len(itms)
                totSale = totInv + totRecInv - totCrdNote
                totSaleWOCrdNote = totInv + totRecInv
            
                context = {'reportData':reportData,'cmp':com, 'startDate':startDate, 'endDate':endDate,'totalItems':totItems, 'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'totalCreditNote': totCrdNote,'subtotal':subTot, 'subtotalWOCredit':subTotWOCrd, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOCrdNote}
                template_path = 'company/reports/Fin_Sales_by_item_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_SalesByItem'
                subject = f"Report_SalesByItem"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Sales By Item. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_salesByItemReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_salesByItemReport)
# End

def Fin_Check_New_Item_SAC(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        sac = int(request.POST['itm_sac'])
        print(sac)

        if Fin_Items.objects.filter(Company = com,sac__iexact = sac,sac__isnull = False).exists():
            print('exist')
            msg = f'{sac} already exists, Try another.!'
            return JsonResponse({'is_exist':True, 'message':msg})
        else:
            print('not exist')
            return JsonResponse({'is_exist':False})
    else:
        return redirect('/')
        
        
def emploanrepayment(request,pk):
    sid = request.session['s_id']
    login = Fin_Login_Details.objects.get(id=sid)
    
    if login.User_Type == 'Company':
        com = Fin_Company_Details.objects.get(Login_Id = sid)
        allmodules = Fin_Modules_List.objects.get(company_id = com.id, status = 'New')
        loan = Fin_Loan.objects.get(id=pk)
        employee = Employee.objects.get(id=loan.employee.id)
        trans=Fin_Employee_Loan_Transactions.objects.filter(employee=employee)
        banks=Fin_Banking.objects.filter(company=com)
      
        
    elif login.User_Type == 'Staff' :
        staf = Fin_Staff_Details.objects.get(Login_Id = sid)
        com=staf.company_id
        loan = Fin_Loan.objects.get(id=pk)
        allmodules = Fin_Modules_List.objects.get(company_id = staf.company_id_id, status = 'New')
        employee = Employee.objects.get(id=loan.employee.id)
        trans=Fin_Employee_Loan_Transactions.objects.filter(employee=loan.employee)
        banks=Fin_Banking.objects.filter(company=com)
      

    return render(request,'company/Employee_loan_repayment.html',{'allmodules':allmodules,'loan':loan,'employee':employee,'trans':trans,'com':com,'banks':banks})   
    
    
# ------------------------------------ Purchase Report ------------------------------------

def Fin_purchase_report_vendor(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totbills = 0
        totrbills = 0
        totdnote = 0
        subTot = 0
        subTotWODbt = 0

        vend = Fin_Vendors.objects.filter(Company=cmp)
        
        for v in vend:
            vendorName = v.first_name +" "+v.last_name
            count = 0
            purchase = 0

            bills = Fin_Purchase_Bill.objects.filter(company = v.Company, vendor = v, status = 'Save')
            rbills = Fin_Recurring_Bills.objects.filter(company = v.Company, vendor = v, status = 'Save')
            dnote = Fin_Debit_Note.objects.filter(Company = v.Company, Vendor = v, status = 'Saved')

            for b in bills:
                purchase += float(b.grandtotal)
                totbills += float(b.grandtotal)
                subTot += float(b.subtotal)
                subTotWODbt += float(b.subtotal)

            for r in rbills:
                purchase += float(r.grand_total)
                totrbills += float(r.grand_total)
                subTot += float(r.sub_total)
                subTotWODbt += float(r.sub_total)

            for d in dnote:
                purchase -= float(d.grandtotal)
                totdnote += float(d.grandtotal)
                subTot -= float(d.subtotal)

            count = len(bills) + len(rbills) + len(dnote)

            details = {
                'name': vendorName,
                'count':count,
                'purchase':purchase
            }

            reportData.append(details)

        totvend = len(vend)
        totPurchase = totbills + totrbills - totdnote
        totWODbdNote = totbills + totrbills

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
            'totalVendors':totvend, 'totalbills':totbills, 'totalrbills':totrbills, 'totalDebitNote': totdnote,
            'subtotal':subTot, 'subtotalWODebit':subTotWODbt, 'totPurchase':totPurchase, 'totalPurchaseWODebit':totWODbdNote,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/Fin_PurchaseReport_Vendor.html', context)
    else:
        return redirect('/')

def Fin_Share_Purchase_Report_Vendor(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totbills = 0
                totRecBills = 0
                totDbtNote = 0
                subTot = 0
                subTotWODbt = 0

                vend = Fin_Vendors.objects.filter(Company=com)

                for v in vend:
                    vendorName = v.first_name +" "+v.last_name
                    count = 0
                    purchase = 0

                    if startDate == None or endDate == None:
                        if trans == "all":
                            bills = Fin_Purchase_Bill.objects.filter(company = v.Company, vendor = v, status = 'Save')
                            rbills = Fin_Recurring_Bills.objects.filter(company = v.Company, vendor = v, status = 'Save')
                            dnote = Fin_Debit_Note.objects.filter(Company = v.Company, Vendor = v, status = 'Saved')
                        elif trans == 'bill':
                            bills = Fin_Purchase_Bill.objects.filter(company = v.Company, vendor = v, status = 'Save')
                            rbills = None
                            dnote = None
                        elif trans == 'recurring_bill':
                            bills = None
                            rbills = Fin_Recurring_Bills.objects.filter(company = v.Company, vendor = v, status = 'Save')
                            dnote = None
                        elif trans == 'debit_notes':
                            bills = None
                            rbills = None
                            dnote = Fin_Debit_Note.objects.filter(Company = v.Company, Vendor = v, status = 'Saved')
                    else:
                        if trans == 'all':
                            bills = Fin_Purchase_Bill.objects.filter(company = v.Company, vendor = v, bill_date__range = [startDate, endDate], status = 'Save')
                            rbills = Fin_Recurring_Bills.objects.filter(company = v.Company, vendor = v, date__range = [startDate, endDate], status = 'Save')
                            dnote = Fin_Debit_Note.objects.filter(Company = v.Company, Vendor = v, debit_note_date__range = [startDate, endDate], status = 'Saved')
                        elif trans == 'bill':
                            bills = Fin_Purchase_Bill.objects.filter(company = v.Company, vendor = v, bill_date__range = [startDate, endDate], status = 'Save')
                            rbills = None
                            dnote = None
                        elif trans == 'recurring_bill':
                            bills = None
                            rbills = Fin_Recurring_Bills.objects.filter(company = v.Company, vendor = v, date__range = [startDate, endDate], status = 'Save')
                            dnote = None
                        elif trans == 'debit_notes':
                            bills = None
                            rbills = None
                            dnote = Fin_Debit_Note.objects.filter(Company = v.Company, Vendor = v, debit_note_date__range = [startDate, endDate], status = 'Saved')

                    if bills:
                        count += len(bills)
                        for i in bills:
                            purchase += float(i.grandtotal)
                            totbills += float(i.grandtotal)
                            subTot += float(i.subtotal)
                            subTotWODbt += float(i.subtotal)

                    if rbills:
                        count += len(rbills)
                        for r in rbills:
                            purchase += float(r.grand_total)
                            totRecBills += float(r.grand_total)
                            subTot += float(r.sub_total)
                            subTotWODbt += float(r.sub_total)
                    
                    if dnote:
                        count += len(dnote)
                        for n in dnote:
                            purchase -= float(n.grandtotal)
                            totDbtNote += float(n.grandtotal)
                            subTot -= float(n.subtotal)

                    details = {
                        'name': vendorName,
                        'count':count,
                        'purchase':purchase
                    }

                    reportData.append(details)

                totVendors = len(vend)
                totPurchase = totbills + totRecBills - totDbtNote
                totPurchaseWODebit = totbills + totRecBills
            
                context = {
                        'reportData':reportData,'cmp':com, 'startDate':startDate, 'endDate':endDate,'totalVendors':totVendors, 'totalBills':totbills, 
                        'totalRecBills':totRecBills, 'totalDebitNote': totDbtNote,'subtotal':subTot, 'subtotalWODebit':subTotWODbt, 'totalPurchase':totPurchase, 
                        'totalWODebit':totPurchaseWODebit
                    }
                template_path = 'company/Fin_PurchaseReport_Vendor_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                filename = f'Purchase_Report_Vendor.pdf'
                subject = f"Sharing Purchase Report by Vendor"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Purchase Report by Vendor. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_purchase_report_vendor)
        except Exception as e:
            messages.error(request, f'{e}')
            return redirect(Fin_purchase_report_vendor)


def Fin_customize_purchase_report_vendor(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            trans = request.GET['transactions']
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
            totbills = 0
            totRecBills = 0
            totDbtNote = 0
            subTot = 0
            subTotWODbt = 0

            vend = Fin_Vendors.objects.filter(Company=cmp)

            for v in vend:
                vendorName = v.first_name +" "+v.last_name
                count = 0
                purchase = 0

                if startDate == None or endDate == None:
                    if trans == "all":
                        bills = Fin_Purchase_Bill.objects.filter(company = v.Company, vendor = v, status = 'Save')
                        rbills = Fin_Recurring_Bills.objects.filter(company = v.Company, vendor=v, status = 'Save')
                        dnote = Fin_Debit_Note.objects.filter(Company = v.Company, Vendor = v, status = 'Saved')
                    elif trans == 'bill':
                        bills = Fin_Purchase_Bill.objects.filter(company = v.Company, vendor = v, status = 'Save')
                        rbills = None
                        dnote = None
                    elif trans == 'recurring_bill':
                        bills = None
                        rbills = Fin_Recurring_Bills.objects.filter(company = v.Company, vendor = v, status = 'Save')
                        dnote = None
                    elif trans == 'debit_notes':
                        bills = None
                        rbills = None
                        dnote = Fin_Debit_Note.objects.filter(Company = v.Company, Vendor = v, status = 'Saved')
                else:
                    if trans == 'all':
                        bills = Fin_Purchase_Bill.objects.filter(company = v.Company, vendor = v, bill_date__range = [startDate, endDate], status = 'Save')
                        rbills = Fin_Recurring_Bills.objects.filter(company = v.Company, vendor = v, date__range = [startDate, endDate], status = 'Save')
                        dnote = Fin_Debit_Note.objects.filter(Company = v.Company, Vendor = v, debit_note_date__range = [startDate, endDate], status = 'Saved')
                    elif trans == 'bill':
                        bills = Fin_Purchase_Bill.objects.filter(company = v.Company, vendor = v, bill_date__range = [startDate, endDate], status = 'Save')
                        rbills = None
                        dnote = None
                    elif trans == 'recurring_bill':
                        bills = None
                        rbills = Fin_Recurring_Bills.objects.filter(company = v.Company, vendor = v, date__range = [startDate, endDate], status = 'Save')
                        dnote = None
                    elif trans == 'debit_notes':
                        bills = None
                        rbills = None
                        dnote = Fin_Debit_Note.objects.filter(Company = v.Company, Vendor = v, debit_note_date__range = [startDate, endDate], status = 'Saved')

                if bills:
                    count += len(bills)
                    for i in bills:
                        purchase += float(i.grandtotal)
                        totbills += float(i.grandtotal)
                        subTot += float(i.subtotal)
                        subTotWODbt += float(i.subtotal)

                if rbills:
                    count += len(rbills)
                    for r in rbills:
                        purchase += float(r.grand_total)
                        totRecBills += float(r.grand_total)
                        subTot += float(r.sub_total)
                        subTotWODbt += float(r.sub_total)
                
                if dnote:
                    count += len(dnote)
                    for n in dnote:
                        purchase -= float(n.grandtotal)
                        totDbtNote += float(n.grandtotal)
                        subTot -= float(n.subtotal)

                details = {
                    'name': vendorName,
                    'count':count,
                    'purchase':purchase
                }

                reportData.append(details)

            totVendors = len(vend)
            totPurchase = totbills + totRecBills - totDbtNote
            totPurchaseWODebit = totbills + totRecBills
            
            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
                'totalVendors':totVendors, 'totalbills':totbills, 'totalrbills':totRecBills, 'totalDebitNote': totDbtNote,
                'subtotal':subTot, 'subtotalWODebit':totDbtNote, 'totPurchase':totPurchase, 'totalPurchaseWODebit':totPurchaseWODebit,
                'startDate':startDate, 'endDate':endDate, 'transaction':trans,
            }
            return render(request,'company/Fin_PurchaseReport_Vendor.html', context)
    else:
        return redirect('/')

def Fin_purchase_report_item(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totBill = 0
        totRecBill = 0
        totDbtNote = 0
        subTot = 0
        subTotWODbt = 0

        itms = Fin_Items.objects.filter(Company=cmp)

        for i in itms:
            itemName = i.name
            price = i.selling_price
            quantity = 0
            amount = 0

            bill = Fin_Purchase_Bill_Item.objects.filter(item=i)
            rbill = Fin_Recurring_Bill_Items.objects.filter(items=i)
            dbt = Fin_Debit_Note_Items.objects.filter(items=i)

            for b in bill:
                amount += float(b.total)
                totBill += float(b.total)
                subTot += (float(b.qty) * float(b.price))
                subTotWODbt += (float(b.qty) * float(b.price))
                quantity += float(b.qty)

            for r in rbill:
                amount += float(r.total)
                totRecBill += float(r.total)
                subTot += (float(r.quantity) * float(r.price))
                subTotWODbt += (float(r.quantity) * float(r.price))
                quantity += float(r.quantity)

            for d in dbt:
                amount -= float(d.total)
                totDbtNote += float(d.total)
                subTot -= (float(d.quantity) * float(d.price))
                quantity -= float(d.quantity)

            details = {
                'name': itemName,
                'quantity':quantity,
                'price':price,
                'amount':amount
            }

            reportData.append(details)

        totItems = len(itms)
        totPurchase = totBill + totRecBill - totDbtNote
        totWODbtNote = totBill + totRecBill

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
            'totalItems':totItems, 'totalBill':totBill, 'totalRecBill':totRecBill, 'totalDebitNote': totDbtNote,
            'subtotal':subTot, 'subtotalWODebit':subTotWODbt, 'totalPurchase':totPurchase, 'totalWODebit':totWODbtNote,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/Fin_PurchaseReport_Item.html', context)
    else:
        return redirect('/')

def Fin_customize_purchase_report_item(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
            totBill = 0
            totRecBill = 0
            totDbtNote = 0
            subTot = 0
            subTotWODbt = 0

            itms = Fin_Items.objects.filter(Company=cmp)

            for i in itms:
                itemName = i.name
                price = i.selling_price
                quantity = 0
                amount = 0

                if startDate == None or endDate == None:
                    bill = Fin_Purchase_Bill_Item.objects.filter(item=i)
                    rbill = Fin_Recurring_Bill_Items.objects.filter(items=i)
                    dbt = Fin_Debit_Note_Items.objects.filter(items=i)
                else:
                    bill = Fin_Purchase_Bill_Item.objects.filter(item=i, pbill__bill_date__range = [startDate, endDate])
                    rbill = Fin_Recurring_Bill_Items.objects.filter(items=i, recurring_bill__date__range = [startDate, endDate])
                    dbt = Fin_Debit_Note_Items.objects.filter(items=i, debit_note__debit_note_date__range = [startDate, endDate])
                if bill:
                    for b in bill:
                        amount += float(b.total)
                        totBill += float(b.total)
                        subTot += (float(b.qty) * float(b.price))
                        subTotWODbt += (float(b.qty) * float(b.price))
                        quantity += float(b.qty)

                if rbill:
                    for r in rbill:
                        amount += float(r.total)
                        totRecBill += float(r.total)
                        subTot += (float(r.quantity) * float(r.price))
                        subTotWODbt += (float(r.quantity) * float(r.price))
                        quantity += float(r.quantity)
                
                if dbt:
                    for d in dbt:
                        amount -= float(d.total)
                        totDbtNote += float(d.total)
                        subTot -= (float(d.quantity) * float(d.price))
                        quantity -= float(d.quantity)

                details = {
                    'name': itemName,
                    'quantity':quantity,
                    'price':price,
                    'amount':amount
                }

                reportData.append(details)

            totItems = len(itms)
            totPurchase = totBill + totRecBill - totDbtNote
            totWODbtNote = totBill + totRecBill

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
                'totalItems':totItems, 'totalBill':totBill, 'totalRecBill':totRecBill, 'totalDebitNote': totDbtNote,
                'subtotal':subTot, 'subtotalWODebit':subTotWODbt, 'totalPurchase':totPurchase, 'totalWODebit':totWODbtNote,
                'startDate':startDate, 'endDate':endDate
            }

            return render(request,'company/Fin_PurchaseReport_Item.html', context)
    else:
        return redirect('/')

def Fin_Share_Purchase_Report_Item(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totBill = 0
                totRecBill = 0
                totDbtNote = 0
                subTot = 0
                subTotWODbt = 0

                itms = Fin_Items.objects.filter(Company=com)

                for i in itms:
                    itemName = i.name
                    price = i.selling_price
                    quantity = 0
                    amount = 0

                    if startDate == None or endDate == None:
                        bill = Fin_Purchase_Bill_Item.objects.filter(item=i)
                        rbill = Fin_Recurring_Bill_Items.objects.filter(items=i)
                        dbt = Fin_Debit_Note_Items.objects.filter(items=i)
                    else:
                        bill = Fin_Purchase_Bill_Item.objects.filter(item=i, pbill__bill_date__range = [startDate, endDate])
                        rbill = Fin_Recurring_Bill_Items.objects.filter(items=i, recurring_bill__date__range = [startDate, endDate])
                        dbt = Fin_Debit_Note_Items.objects.filter(items=i, debit_note__debit_note_date__range = [startDate, endDate])
                    if bill:
                        for b in bill:
                            amount += float(b.total)
                            totBill += float(b.total)
                            subTot += (float(b.qty) * float(b.price))
                            subTotWODbt += (float(b.qty) * float(b.price))
                            quantity += float(b.qty)

                    if rbill:
                        for r in rbill:
                            amount += float(r.total)
                            totRecBill += float(r.total)
                            subTot += (float(r.quantity) * float(r.price))
                            subTotWODbt += (float(r.quantity) * float(r.price))
                            quantity += float(r.quantity)
                    
                    if dbt:
                        for d in dbt:
                            amount -= float(d.total)
                            totDbtNote += float(d.total)
                            subTot -= (float(d.quantity) * float(d.price))
                            quantity -= float(d.quantity)

                    details = {
                        'name': itemName,
                        'quantity':quantity,
                        'price':price,
                        'amount':amount
                    }

                    reportData.append(details)

                totItems = len(itms)
                totPurchase = totBill + totRecBill - totDbtNote
                totWODbtNote = totBill + totRecBill

                context = {
                    'cmp':com,  'reportData':reportData, 'totalItems':totItems, 'totalBill':totBill, 'totalRecBill':totRecBill, 'totalDebitNote': totDbtNote,
                    'subtotal':subTot, 'subtotalWODebit':subTotWODbt, 'totalPurchase':totPurchase, 'totalWODebit':totWODbtNote,
                    'startDate':startDate, 'endDate':endDate
                }
            
                template_path = 'company/Fin_PurchaseReport_Item_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                filename = f'Purchase_Report_Item.pdf'
                subject = f"Sharing Purchase Report by Item"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Purchase Report by Item. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_purchase_report_item)
        except Exception as e:
            messages.error(request, f'{e}')
            return redirect(Fin_purchase_report_item)
            
            
# < ------------- Shemeem -------- > Reports - DayBook < ------------------------------- >

def Fin_dayBookReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()
        print('currentDate',currentDate)

        reportData = []
        totMoneyIn = 0
        totMoneyOut = 0

        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date = currentDate)
        if sOrder:
            for s in sOrder:
                partyName = s.Customer.first_name +" "+s.Customer.last_name
                date = s.sales_order_date
                ref = s.sales_order_no
                type = 'Sales Order'
                total = s.grandtotal
                mIn = s.grandtotal
                mOut = 0
                totMoneyIn += float(s.grandtotal)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date = currentDate)
        if inv:
            for i in inv:
                partyName = i.Customer.first_name +" "+i.Customer.last_name
                date = i.invoice_date
                ref = i.invoice_no
                type = 'Invoice'
                total = i.grandtotal
                mIn = i.grandtotal
                mOut = 0
                totMoneyIn += float(i.grandtotal)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date = currentDate)
        if recInv:
            for r in recInv:
                partyName = r.Customer.first_name +" "+r.Customer.last_name
                date = r.start_date
                ref = r.rec_invoice_no
                type = 'Recurring Invoice'
                total = r.grandtotal
                mIn = r.grandtotal
                mOut = 0
                totMoneyIn += float(r.grandtotal)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date = currentDate)
        if rtInv:
            for rt in rtInv:
                partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                date = rt.Retainer_Invoice_date
                ref = rt.Retainer_Invoice_number
                type = 'Retainer Invoice'
                total = rt.Grand_total
                mIn = rt.Grand_total
                mOut = 0
                totMoneyIn += float(rt.Grand_total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        dbNote = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date = currentDate)
        if dbNote:
            for d in dbNote:
                partyName = d.Vendor.first_name +" "+d.Vendor.last_name
                date = d.debit_note_date
                ref = d.debit_note_number
                type = 'Debit Note'
                total = d.grandtotal
                mIn = d.grandtotal
                mOut = 0
                totMoneyIn += float(d.grandtotal)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        mJournal = Fin_Manual_Journal.objects.filter(Company = cmp, journal_date = currentDate)
        if mJournal:
            for debit in mJournal:
                partyName = ''
                date = debit.journal_date
                ref = debit.journal_no
                type = 'Manual Journal Debit'
                total = debit.total_debit
                mIn = debit.total_debit
                mOut = 0
                totMoneyIn += float(debit.total_debit)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

            for credit in mJournal:
                partyName = ''
                date = credit.journal_date
                ref = credit.journal_no
                type = 'Manual Journal Credit'
                total = credit.total_credit
                mOut = credit.total_credit
                mIn = 0
                totMoneyOut += float(credit.total_credit)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        pBill = Fin_Purchase_Bill.objects.filter(company = cmp, bill_date = currentDate)
        if pBill:
            for bill in pBill:
                partyName = bill.vendor.first_name +" "+bill.vendor.last_name
                date = bill.bill_date
                ref = bill.bill_no
                type = 'Purchase Bill'
                total = bill.grandtotal
                mOut = bill.grandtotal
                mIn = 0
                totMoneyOut += float(bill.grandtotal)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        rBill = Fin_Recurring_Bills.objects.filter(company = cmp, date = currentDate)
        if rBill:
            for rbill in rBill:
                partyName = rbill.vendor.first_name +" "+rbill.vendor.last_name
                date = rbill.date
                ref = rbill.recurring_bill_number
                type = 'Recurring Bill'
                total = rbill.grand_total
                mOut = rbill.grand_total
                mIn = 0
                totMoneyOut += float(rbill.grand_total)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        cNote = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date = currentDate)
        if cNote:
            for note in cNote:
                partyName = note.Customer.first_name +" "+note.Customer.last_name
                date = note.creditnote_date
                ref = note.creditnote_number
                type = 'Credit Note'
                total = note.grandtotal
                mOut = note.grandtotal
                mIn = 0
                totMoneyOut += float(note.grandtotal)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalMoneyIn':totMoneyIn, 'totalMoneyOut':totMoneyOut,
            'startDate':None, 'endDate':None, 'currentDate':currentDate.strftime("%d-%m-%Y")
        }
        return render(request,'company/reports/Fin_DayBook.html', context)
    else:
        return redirect('/')

def Fin_dayBookReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            currentDate = datetime.today()
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None


            reportData = []
            totMoneyIn = 0
            totMoneyOut = 0

            sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate])
            if sOrder:
                for s in sOrder:
                    partyName = s.Customer.first_name +" "+s.Customer.last_name
                    date = s.sales_order_date
                    ref = s.sales_order_no
                    type = 'Sales Order'
                    total = s.grandtotal
                    mIn = s.grandtotal
                    mOut = 0
                    totMoneyIn += float(s.grandtotal)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate])
            if inv:
                for i in inv:
                    partyName = i.Customer.first_name +" "+i.Customer.last_name
                    date = i.invoice_date
                    ref = i.invoice_no
                    type = 'Invoice'
                    total = i.grandtotal
                    mIn = i.grandtotal
                    mOut = 0
                    totMoneyIn += float(i.grandtotal)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate])
            if recInv:
                for r in recInv:
                    partyName = r.Customer.first_name +" "+r.Customer.last_name
                    date = r.start_date
                    ref = r.rec_invoice_no
                    type = 'Recurring Invoice'
                    total = r.grandtotal
                    mIn = r.grandtotal
                    mOut = 0
                    totMoneyIn += float(r.grandtotal)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate])
            if rtInv:
                for rt in rtInv:
                    partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                    date = rt.Retainer_Invoice_date
                    ref = rt.Retainer_Invoice_number
                    type = 'Retainer Invoice'
                    total = rt.Grand_total
                    mIn = rt.Grand_total
                    mOut = 0
                    totMoneyIn += float(rt.Grand_total)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            dbNote = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate])
            if dbNote:
                for d in dbNote:
                    partyName = d.Vendor.first_name +" "+d.Vendor.last_name
                    date = d.debit_note_date
                    ref = d.debit_note_number
                    type = 'Debit Note'
                    total = d.grandtotal
                    mIn = d.grandtotal
                    mOut = 0
                    totMoneyIn += float(d.grandtotal)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            mJournal = Fin_Manual_Journal.objects.filter(Company = cmp, journal_date__range = [startDate, endDate])
            if mJournal:
                for debit in mJournal:
                    partyName = ''
                    date = debit.journal_date
                    ref = debit.journal_no
                    type = 'Manual Journal Debit'
                    total = debit.total_debit
                    mIn = debit.total_debit
                    mOut = 0
                    totMoneyIn += float(debit.total_debit)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

                for credit in mJournal:
                    partyName = ''
                    date = credit.journal_date
                    ref = credit.journal_no
                    type = 'Manual Journal Credit'
                    total = credit.total_credit
                    mOut = credit.total_credit
                    mIn = 0
                    totMoneyOut += float(credit.total_credit)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            pBill = Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate])
            if pBill:
                for bill in pBill:
                    partyName = bill.vendor.first_name +" "+bill.vendor.last_name
                    date = bill.bill_date
                    ref = bill.bill_no
                    type = 'Purchase Bill'
                    total = bill.grandtotal
                    mOut = bill.grandtotal
                    mIn = 0
                    totMoneyOut += float(bill.grandtotal)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            rBill = Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate])
            if rBill:
                for rbill in rBill:
                    partyName = rbill.vendor.first_name +" "+rbill.vendor.last_name
                    date = rbill.date
                    ref = rbill.recurring_bill_number
                    type = 'Recurring Bill'
                    total = rbill.grand_total
                    mOut = rbill.grand_total
                    mIn = 0
                    totMoneyOut += float(rbill.grand_total)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            cNote = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate])
            if cNote:
                for note in cNote:
                    partyName = note.Customer.first_name +" "+note.Customer.last_name
                    date = note.creditnote_date
                    ref = note.creditnote_number
                    type = 'Credit Note'
                    total = note.grandtotal
                    mOut = note.grandtotal
                    mIn = 0
                    totMoneyOut += float(note.grandtotal)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)


            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalMoneyIn':totMoneyIn, 'totalMoneyOut':totMoneyOut,
                'startDate':startDate, 'endDate':endDate, 'currentDate':None
            }
            return render(request,'company/reports/Fin_DayBook.html', context)
    else:
        return redirect('/')

def Fin_shareDayBookReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                if startDate is None and endDate is None:
                    currentDate = datetime.today().strftime("%d-%m-%Y")
                else:
                    currentDate = None

                reportData = []
                totMoneyIn = 0
                totMoneyOut = 0

                sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate])
                if sOrder:
                    for s in sOrder:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.sales_order_date
                        ref = s.sales_order_no
                        type = 'Sales Order'
                        total = s.grandtotal
                        mIn = s.grandtotal
                        mOut = 0
                        totMoneyIn += float(s.grandtotal)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate])
                if inv:
                    for i in inv:
                        partyName = i.Customer.first_name +" "+i.Customer.last_name
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'Invoice'
                        total = i.grandtotal
                        mIn = i.grandtotal
                        mOut = 0
                        totMoneyIn += float(i.grandtotal)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate])
                if recInv:
                    for r in recInv:
                        partyName = r.Customer.first_name +" "+r.Customer.last_name
                        date = r.start_date
                        ref = r.rec_invoice_no
                        type = 'Recurring Invoice'
                        total = r.grandtotal
                        mIn = r.grandtotal
                        mOut = 0
                        totMoneyIn += float(r.grandtotal)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate])
                if rtInv:
                    for rt in rtInv:
                        partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'Retainer Invoice'
                        total = rt.Grand_total
                        mIn = rt.Grand_total
                        mOut = 0
                        totMoneyIn += float(rt.Grand_total)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                dbNote = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate])
                if dbNote:
                    for d in dbNote:
                        partyName = d.Vendor.first_name +" "+d.Vendor.last_name
                        date = d.debit_note_date
                        ref = d.debit_note_number
                        type = 'Debit Note'
                        total = d.grandtotal
                        mIn = d.grandtotal
                        mOut = 0
                        totMoneyIn += float(d.grandtotal)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                mJournal = Fin_Manual_Journal.objects.filter(Company = cmp, journal_date__range = [startDate, endDate])
                if mJournal:
                    for debit in mJournal:
                        partyName = ''
                        date = debit.journal_date
                        ref = debit.journal_no
                        type = 'Manual Journal Debit'
                        total = debit.total_debit
                        mIn = debit.total_debit
                        mOut = 0
                        totMoneyIn += float(debit.total_debit)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                    for credit in mJournal:
                        partyName = ''
                        date = credit.journal_date
                        ref = credit.journal_no
                        type = 'Manual Journal Credit'
                        total = credit.total_credit
                        mOut = credit.total_credit
                        mIn = 0
                        totMoneyOut += float(credit.total_credit)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                pBill = Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate])
                if pBill:
                    for bill in pBill:
                        partyName = bill.vendor.first_name +" "+bill.vendor.last_name
                        date = bill.bill_date
                        ref = bill.bill_no
                        type = 'Purchase Bill'
                        total = bill.grandtotal
                        mOut = bill.grandtotal
                        mIn = 0
                        totMoneyOut += float(bill.grandtotal)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                rBill = Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate])
                if rBill:
                    for rbill in rBill:
                        partyName = rbill.vendor.first_name +" "+rbill.vendor.last_name
                        date = rbill.date
                        ref = rbill.recurring_bill_number
                        type = 'Recurring Bill'
                        total = rbill.grand_total
                        mOut = rbill.grand_total
                        mIn = 0
                        totMoneyOut += float(rbill.grand_total)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                cNote = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate])
                if cNote:
                    for note in cNote:
                        partyName = note.Customer.first_name +" "+note.Customer.last_name
                        date = note.creditnote_date
                        ref = note.creditnote_number
                        type = 'Credit Note'
                        total = note.grandtotal
                        mOut = note.grandtotal
                        mIn = 0
                        totMoneyOut += float(note.grandtotal)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)
                context = {'cmp':cmp, 'reportData':reportData, 'totalMoneyIn':totMoneyIn, 'totalMoneyOut':totMoneyOut, 'startDate':startDate, 'endDate':endDate, 'currentDate':currentDate}
                template_path = 'company/reports/Fin_DayBook_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_DayBook'
                subject = f"Report_DayBook"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Day Book. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_dayBookReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_dayBookReport)
# End


def Fin_customerbalence(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        cust = Fin_Customers.objects.filter(Company=cmp)
        
        customers_data = []
        total_balance1 = 0 
        invoice_balance1=0
        recurring_invoice_balance1=0
        available_credits1=0
        total_invoice_balance1=0
        totCust = 0

        # Initialize total balance outside the loop
        for customer in cust:
            customerName = customer.first_name +" "+customer.last_name

            invoices = Fin_Invoice.objects.filter(Customer=customer, status='Saved')
            recurring_invoices = Fin_Recurring_Invoice.objects.filter(Customer=customer, status='Saved')
            credit_notes = Fin_CreditNote.objects.filter(Customer=customer, status='Saved')
            
            invoice_balance = sum(float(inv.balance) for inv in invoices)
            recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
            total_invoice_balance = invoice_balance + recurring_invoice_balance
            
            available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
            
            total_balance = total_invoice_balance - available_credits
            
            # Update the total balance
            total_balance1 += total_balance
            totCust = len(cust)
            invoice_balance1 += invoice_balance
            recurring_invoice_balance1 += recurring_invoice_balance
            available_credits1 += available_credits
            total_invoice_balance1+=total_invoice_balance



            customers_data.append({
                'name': customerName,                
                'invoice_balance': total_invoice_balance,
                'available_credits': available_credits,
                'total_balance': total_balance,
            })
        
        context = {
            'cust':cust,
            'customers': customers_data,
            'total_balance1': total_balance1,
            'cmp':cmp,
            'allmodules':allmodules,
            'com':com,
             'data':data,
             'totalCustomers':totCust,
             'totalInvoice':invoice_balance1,
             'totalRecInvoice':recurring_invoice_balance1, 
             'totalCreditNote': available_credits1,
             'invoice_balance':total_invoice_balance,
            'available_credits': available_credits,
            'total_invoice_balance':total_invoice_balance1,
            'invoice_c_present': True,
            'cnote_c_present': True,

        }
        
        return render(request, 'company/reports/Fin_customerbalence_report.html', context)
    else:
        return redirect('/')

def Fin_shareCustomerBalenceReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                cust = Fin_Customers.objects.filter(Company=com)
                print(cust)
        
                customers_data = []
                total_balance1 = 0 
                invoice_balance1=0
                recurring_invoice_balance1=0
                available_credits1=0
                total_invoice_balance1=0

                # Initialize total balance outside the loop
                for customer in cust:
                    customerName = customer.first_name +" "+customer.last_name
                    print(customerName)

                    invoices = Fin_Invoice.objects.filter(Customer=customer, status='Saved')
                    recurring_invoices = Fin_Recurring_Invoice.objects.filter(Customer=customer, status='Saved')
                    credit_notes = Fin_CreditNote.objects.filter(Customer=customer, status='Saved')
                    
                    invoice_balance = sum(float(inv.balance) for inv in invoices)
                    recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                    total_invoice_balance = invoice_balance + recurring_invoice_balance
                    
                    available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                    
                    total_balance = total_invoice_balance - available_credits
                    
                    # Update the total balance
                    total_balance1 += total_balance
                    totCust = len(cust)
                    invoice_balance1 += invoice_balance
                    recurring_invoice_balance1 += recurring_invoice_balance
                    available_credits1 += available_credits
                    total_invoice_balance1+=total_invoice_balance



                    customers_data.append({
                        'name': customerName,                
                        'invoice_balance': total_invoice_balance,
                        'available_credits': available_credits,
                        'total_balance': total_balance,
                    })
                
                context = {
                        'customers': customers_data,
                        'total_balance1': total_balance1,
                        'cmp':com,
                        'com':com,
                        'data':data,
                        'totalCustomers':totCust,
                        'totalInvoice':invoice_balance1,
                        'totalRecInvoice':recurring_invoice_balance1, 
                        'totalCreditNote': available_credits1,
                        'invoice_balance':total_invoice_balance,
                        'available_credits': available_credits,
                        'total_invoice_balance':total_invoice_balance1,
                        'startDate':startDate, 
                        'endDate':endDate,

                    }
            

                template_path = 'company/reports/Fin_salesBalancePdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_CustomerBalance'
                subject = f"Report_CustomerBalance"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Report CustomerBalance. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_customerbalence)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_customerbalence)


def Fin_customerbalence_report_customized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        cust = Fin_Customers.objects.filter(Company=cmp)

        customers_data = []
        total_balance1 = 0
        invoice_balance1 = 0
        recurring_invoice_balance1 = 0
        available_credits1 = 0
        total_invoice_balance1 = 0
        totCust = 0
        recurring_invoice_balance = 0
        total_invoice_balance = 0
        available_credits = 0

        # Get the start date from POST data with a default value of None
     
        if 'from_date' in request.POST:
            start_date_str = request.POST['from_date']
        else:
            start_date_str = None
        print(start_date_str)
        if 'to_date' in request.POST:
            end_date_str = request.POST['to_date']
        else:
            end_date_str = None
        
        print(end_date_str)
        

        # Check if 'bills' is present in POST data
        if 'bills' in request.POST:
            invoice_c = request.POST['bills']
        else:
            invoice_c = ''

        # Check if 'dnote' is present in POST data
        if 'dnote' in request.POST:
            cnote_c = request.POST['dnote']
        else:
            cnote_c = ''

        # Check if 'transactions' is present in POST data
        if 'transactions' in request.POST:
            name = request.POST['transactions']
        else:
            name = None
        print(name)

        # Convert start_date and end_date strings to datetime objects
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d') if start_date_str else None
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d') if end_date_str else None
        print(start_date)
        print(end_date)
        if name == 'all':
            for customer in cust:
                customerName = customer.first_name + " " + customer.last_name
                print(customerName)
                invoices = Fin_Invoice.objects.filter(Customer=customer, status='Saved')
                recurring_invoices = Fin_Recurring_Invoice.objects.filter(Customer=customer, status='Saved')
                credit_notes = Fin_CreditNote.objects.filter(Customer=customer, status='Saved')

                # Filter invoices based on start_date and end_date if provided
                if start_date and end_date:
                    print("ok")
                    invoices = invoices.filter(invoice_date__range=[start_date, end_date])
                    print(invoices)
                    recurring_invoices = recurring_invoices.filter(start_date__range=[start_date, end_date])
                    print(recurring_invoices)
                    credit_notes = credit_notes.filter(creditnote_date__range=[start_date, end_date])

                # Calculate invoice balance only if 'invoice_c_present' is true
                if invoice_c:
                    invoice_balance = sum(float(inv.balance) for inv in invoices)
                    
                    recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                    total_invoice_balance = invoice_balance + recurring_invoice_balance
                    available_credits = 0 
                    total_balance = total_invoice_balance - available_credits

                if cnote_c:
                    available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                    invoice_balance = 0  # Set invoice balance to 0
                    recurring_invoice_balance = 0
                    total_invoice_balance = 0
                    total_balance = total_invoice_balance - available_credits

                if  invoice_c and cnote_c:
                    print("cnote_c andinv2")
                    invoice_balance = sum(float(inv.balance) for inv in invoices)
                    
                    recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                    available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                    total_invoice_balance = invoice_balance + recurring_invoice_balance
                    total_balance = total_invoice_balance - available_credits

                    # Update the total balance
                total_balance1 += total_balance
                totCust = len(cust)
                invoice_balance1 += invoice_balance
                recurring_invoice_balance1 += recurring_invoice_balance
                available_credits1 += available_credits
                total_invoice_balance1 += total_invoice_balance

                

                customers_data.append({
                        'name': customerName,
                        'invoice_balance': total_invoice_balance,
                        'available_credits': available_credits,
                        'total_balance': total_balance,
                    })

        else:
            for customer in cust:
                customerName = customer.first_name + " " + customer.last_name
                print(customerName)

                # Check if the name matches the filter, if provided
                if name and name != customerName:
                    print(name)
                    continue


                # Initialize total balance outside the loop
                for customer in cust:
                    customerName = customer.first_name + " " + customer.last_name

                    # Check if the name matches the filter, if provided
                    if name and name != customerName:
                        continue

                    invoices = Fin_Invoice.objects.filter(Customer=customer, status='Saved')
                    recurring_invoices = Fin_Recurring_Invoice.objects.filter(Customer=customer, status='Saved')
                    credit_notes = Fin_CreditNote.objects.filter(Customer=customer, status='Saved')

                    # Filter invoices based on start_date and end_date if provided
                    if start_date and end_date:
                        invoices = invoices.filter(invoice_date__range=[start_date, end_date])
                        recurring_invoices = recurring_invoices.filter(start_date__range=[start_date, end_date])
                        credit_notes = credit_notes.filter(creditnote_date__range=[start_date, end_date])

                    # Calculate invoice balance only if 'bills' is true
                    if invoice_c:
                        print("invc")
                        invoice_balance = sum(float(inv.balance) for inv in invoices)
                        recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                        total_invoice_balance = invoice_balance + recurring_invoice_balance
                        available_credits = 0  # Set credit note balance to 0
                    if cnote_c:
                        print("cnote_c")
                        available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                        invoice_balance = 0  # Set invoice balance to 0
                        recurring_invoice_balance = 0
                        total_invoice_balance = 0
                    if cnote_c and invoice_c:
                        print("cnote_c andinv")
                        invoice_balance = sum(float(inv.balance) for inv in invoices)
                        recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                        total_invoice_balance = invoice_balance + recurring_invoice_balance

                        available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)

                    total_balance = total_invoice_balance - available_credits

                    # Update the total balance
                    total_balance1 += total_balance
                    totCust = len(cust)
                    invoice_balance1 += invoice_balance
                    recurring_invoice_balance1 += recurring_invoice_balance
                    available_credits1 += available_credits
                    total_invoice_balance1 += total_invoice_balance

                    customers_data.append({
                        'name': customerName,
                        'invoice_balance': total_invoice_balance,
                        'available_credits': available_credits,
                        'total_balance': total_balance,
                    })

        context = {
            'cust':cust,
            'customers': customers_data,
            'total_balance1': total_balance1,
            'cmp': cmp,
            'allmodules': allmodules,
            'com': com,
            'data': data,
            'totalCustomers': totCust,
            'totalInvoice': invoice_balance1,
            'totalRecInvoice': recurring_invoice_balance1,
            'totalCreditNote': available_credits1,
            'invoice_balance': total_invoice_balance,
            'available_credits': available_credits,
            'total_invoice_balance': total_invoice_balance1,
            'start_date': start_date_str,  # Pass start_date to the template
            'end_date': end_date_str,  # Pass end_date to the template
            'name': name,  # Pass name to the template
            'invoice_c_present': bool(invoice_c),
            'cnote_c_present': bool(cnote_c),
        }

        return render(request, 'company/reports/Fin_customerbalence_report.html', context)
    else:
        return redirect('/')
        
        
#haripriya Retainer invoice
def Fin_Retainer_Report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        totret = 0
        retainer = Fin_Retainer_Invoice.objects.filter(Company=cmp)

        for i in retainer:
                
            totret += float(i.Grand_total)

        total = totret
      

        

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'retainer':retainer,'total':total,
            
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_retainer_report.html', context)
    else:
        return redirect('/')


def Fin_RetainerInvoReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        
       
        if request.method == 'GET':
            trans = request.GET['transactions']
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            
            totret =0
            count = 0

            

           

            if startDate == None or endDate == None:
                    if trans == "all":
                        retainer = Fin_Retainer_Invoice.objects.filter(Company=cmp)
                    elif trans == 'Sent':
                        retainer = Fin_Retainer_Invoice.objects.filter( status = 'Sent')
                        
                    elif trans == 'Draft':
                        
                        retainer = Fin_Retainer_Invoice.objects.filter(status = 'Draft')
                        
            else:
                    if trans == 'all':
                        retainer = Fin_Retainer_Invoice.objects.filter(Company=cmp, Retainer_Invoice_date__range = [startDate, endDate])
                        
                    elif trans == 'Sent':
                        retainer = Fin_Retainer_Invoice.objects.filter(Company=cmp, Retainer_Invoice_date__range = [startDate, endDate], status = 'Sent')
                        
                    elif trans == 'Draft':
                        
                        retainer = Fin_Retainer_Invoice.objects.filter(Company=cmp, Retainer_Invoice_date__range = [startDate, endDate], status = 'Draft')

            if retainer:
                count += len(retainer)
                for i in retainer:
                    totret += float(i.Grand_total)            

            total=  totret      
                

           

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'retainer':retainer,
                
                'startDate':startDate, 'endDate':endDate, 'transaction':trans,'total':total,
            }
            return render(request,'company/reports/Fin_retainer_report.html', context)
    else:
        return redirect('/')

def Fin_shareRetainerInvoiceReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

               
                totInv = 0
                

                
                count = 0
                

                if startDate == None or endDate == None:
                        if trans == "all":
                             retainer = Fin_Retainer_Invoice.objects.filter(Company=com)
                        elif trans == 'Sent':
                             retainer = Fin_Retainer_Invoice.objects.filter(Company=com)
                            
                        elif trans == 'Sent':
                            retainer = Fin_Retainer_Invoice.objects.filter( status = 'Sent')
                        
                        elif trans == 'Draft':
                        
                            retainer = Fin_Retainer_Invoice.objects.filter(status = 'Draft')
                else:
                        if trans == 'all':
                            retainer = Fin_Retainer_Invoice.objects.filter(Company=com, Retainer_Invoice_date__range = [startDate, endDate])
                        
                        elif trans == 'Sent':
                            retainer = Fin_Retainer_Invoice.objects.filter(Company=com, Retainer_Invoice_date__range = [startDate, endDate], status = 'Sent')
                        
                        elif trans == 'Draft':
                        
                             retainer = Fin_Retainer_Invoice.objects.filter(Company=com, Retainer_Invoice_date__range = [startDate, endDate], status = 'Draft')

                if retainer:
                        count += len(retainer)
                        for i in retainer:
                            
                            totInv += float(i.Grand_total)
                            
                            

                    
                
                total = totInv 
                print(total)
                
            
                context = {'retainer':retainer,'cmp':com, 'startDate':startDate, 'endDate':endDate,'total':total}
                template_path = 'company/reports/Fin_retainter_invoice_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_RetainerInvoice'
                subject = f"Report_RetainerInvoice"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Report_RetainerInvoice. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_Retainer_Report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_Retainer_Report)
                
#End
# < ------------- Shemeem -------- > Reports - Sales Order Details < ------------------------------- >

def Fin_salesOrderDetailsReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        reportData = []
        totalSales = 0

        sOrder = Fin_Sales_Order.objects.filter(Company=cmp)
        if sOrder:
            for s in sOrder:
                partyName = s.Customer.first_name +" "+s.Customer.last_name
                date = s.sales_order_date
                ship_date = s.exp_ship_date
                ref = s.sales_order_no
                total = s.grandtotal
                totalSales += float(s.grandtotal)
                if s.converted_to_invoice != None:
                    st = 'Converted to Invoice'
                elif s.converted_to_rec_invoice != None:
                    st = 'Converted to Rec. Invoice'
                else:
                    st = s.status

                details = {
                    'date': date,
                    'name': partyName,
                    'sales_no':ref,
                    'ship_date':ship_date,
                    'total':total,
                    'status':st
                }
                reportData.append(details)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalSales':totalSales,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_SalesOrderReport.html', context)
    else:
        return redirect('/')

def Fin_salesOrderDetailsCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            status = request.GET['status']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None


            reportData = []
            totalSales = 0

            if startDate is None or endDate is None:
                if status == 'invoice':
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp, converted_to_invoice__isnull = False, converted_to_rec_invoice__isnull = True)
                elif status == 'recurring_invoice':
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = False)
                elif status == 'saved':
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True, status = 'Saved')
                elif status == 'draft':
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True, status = 'Draft')
                else:
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp)
            else:
                if status == 'invoice':
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = False, converted_to_rec_invoice__isnull = True)
                elif status == 'recurring_invoice':
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = False)
                elif status == 'saved':
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True, status = 'Saved')
                elif status == 'draft':
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True, status = 'Draft')
                else:
                    sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate])

            if sOrder:
                for s in sOrder:
                    partyName = s.Customer.first_name +" "+s.Customer.last_name
                    date = s.sales_order_date
                    ship_date = s.exp_ship_date
                    ref = s.sales_order_no
                    total = s.grandtotal
                    totalSales += float(s.grandtotal)
                    if s.converted_to_invoice != None:
                        st = 'Converted to Invoice'
                    elif s.converted_to_rec_invoice != None:
                        st = 'Converted to Rec. Invoice'
                    else:
                        st = s.status

                    details = {
                        'date': date,
                        'name': partyName,
                        'sales_no':ref,
                        'ship_date':ship_date,
                        'total':total,
                        'status':st
                    }
                    reportData.append(details)


            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalSales':totalSales,
                'startDate':startDate, 'endDate':endDate, 'status':status
            }
            return render(request,'company/reports/Fin_SalesOrderReport.html', context)
    else:
        return redirect('/')

def Fin_shareSalesOrderDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totalSales = 0
                if startDate is None or endDate is None:
                    if status == 'invoice':
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, converted_to_invoice__isnull = False, converted_to_rec_invoice__isnull = True)
                    elif status == 'recurring_invoice':
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = False)
                    elif status == 'saved':
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True, status = 'Saved')
                    elif status == 'draft':
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True, status = 'Draft')
                    else:
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp)
                else:
                    if status == 'invoice':
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = False, converted_to_rec_invoice__isnull = True)
                    elif status == 'recurring_invoice':
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = False)
                    elif status == 'saved':
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True, status = 'Saved')
                    elif status == 'draft':
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True, status = 'Draft')
                    else:
                        sOrder = Fin_Sales_Order.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate])

                if sOrder:
                    for s in sOrder:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.sales_order_date
                        ship_date = s.exp_ship_date
                        ref = s.sales_order_no
                        total = s.grandtotal
                        totalSales += float(s.grandtotal)
                        if s.converted_to_invoice != None:
                            st = 'Converted to Invoice'
                        elif s.converted_to_rec_invoice != None:
                            st = 'Converted to Rec. Invoice'
                        else:
                            st = s.status

                        details = {
                            'date': date,
                            'name': partyName,
                            'sales_no':ref,
                            'ship_date':ship_date,
                            'total':total,
                            'status':st
                        }
                        reportData.append(details)
                
                context = {'cmp':cmp, 'reportData':reportData, 'totalSales':totalSales, 'startDate':startDate, 'endDate':endDate}
                template_path = 'company/reports/Fin_SalesOrderDetails_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_SalesOrderDetails'
                subject = f"Report_SalesOrderDetails"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Sales Order Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_salesOrderDetailsReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_salesOrderDetailsReport)
            
#End

# < ------------- Shemeem -------- > Reports - Purchase Order Details < ------------------------------- >


def Fin_purchaseOrderDetailsReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totalPurchase = 0

        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp)
        if pOrder:
            for p in pOrder:
                partyName = p.Vendor.first_name +" "+p.Vendor.last_name
                date = p.purchase_order_date
                due_date = p.due_date
                ref = p.purchase_order_no
                total = p.grandtotal
                totalPurchase += float(p.grandtotal)
                if p.converted_to_bill != None:
                    st = 'Converted to Bill'
                elif p.converted_to_rec_bill != None:
                    st = 'Converted to Rec. Bill'
                else:
                    st = p.status

                details = {
                    'date': date,
                    'name': partyName,
                    'purchase_no':ref,
                    'due_date':due_date,
                    'total':total,
                    'status':st
                }
                reportData.append(details)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalPurchase':totalPurchase,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_PurchaseOrderReport.html', context)
    else:
        return redirect('/')

def Fin_purchaseOrderDetailsCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            status = request.GET['status']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None


            reportData = []
            totalPurchase = 0

            if startDate is None or endDate is None:
                if status == 'bill':
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, converted_to_bill__isnull = False, converted_to_rec_bill__isnull = True)
                elif status == 'recurring_bill':
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, converted_to_rec_bill__isnull = False, converted_to_bill__isnull = True)
                elif status == 'saved':
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, converted_to_bill__isnull = True, converted_to_rec_bill__isnull = True, status = 'Saved')
                elif status == 'draft':
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, converted_to_bill__isnull = True, converted_to_rec_bill__isnull = True, status = 'Draft')
                else:
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp)
            else:
                if status == 'bill':
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate], converted_to_bill__isnull = False, converted_to_rec_bill__isnull = True)
                elif status == 'recurring_bill':
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate], converted_to_bill__isnull = True, converted_to_rec_bill__isnull = False)
                elif status == 'saved':
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate], converted_to_bill__isnull = True, converted_to_rec_bill__isnull = True, status = 'Saved')
                elif status == 'draft':
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate], converted_to_bill__isnull = True, converted_to_rec_bill__isnull = True, status = 'Draft')
                else:
                    pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate])

            if pOrder:
                for p in pOrder:
                    partyName = p.Vendor.first_name +" "+p.Vendor.last_name
                    date = p.purchase_order_date
                    due_date = p.due_date
                    ref = p.purchase_order_no
                    total = p.grandtotal
                    totalPurchase += float(p.grandtotal)
                    if p.converted_to_bill != None:
                        st = 'Converted to Bill'
                    elif p.converted_to_rec_bill != None:
                        st = 'Converted to Rec. Bill'
                    else:
                        st = p.status

                    details = {
                        'date': date,
                        'name': partyName,
                        'purchase_no':ref,
                        'due_date':due_date,
                        'total':total,
                        'status':st
                    }
                    reportData.append(details)


            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalPurchase':totalPurchase,
                'startDate':startDate, 'endDate':endDate, 'status':status
            }
            return render(request,'company/reports/Fin_PurchaseOrderReport.html', context)
    else:
        return redirect('/')

def Fin_sharePurchaseOrderDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totalPurchase = 0
                if startDate is None or endDate is None:
                    if status == 'bill':
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, converted_to_bill__isnull = False, converted_to_rec_bill__isnull = True)
                    elif status == 'recurring_bill':
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, converted_to_rec_bill__isnull = False, converted_to_bill__isnull = True)
                    elif status == 'saved':
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, converted_to_bill__isnull = True, converted_to_rec_bill__isnull = True, status = 'Saved')
                    elif status == 'draft':
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, converted_to_bill__isnull = True, converted_to_rec_bill__isnull = True, status = 'Draft')
                    else:
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp)
                else:
                    if status == 'bill':
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate], converted_to_bill__isnull = False, converted_to_rec_bill__isnull = True)
                    elif status == 'recurring_bill':
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate], converted_to_bill__isnull = True, converted_to_rec_bill__isnull = False)
                    elif status == 'saved':
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate], converted_to_bill__isnull = True, converted_to_rec_bill__isnull = True, status = 'Saved')
                    elif status == 'draft':
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate], converted_to_bill__isnull = True, converted_to_rec_bill__isnull = True, status = 'Draft')
                    else:
                        pOrder = Fin_Purchase_Order.objects.filter(Company=cmp, purchase_order_date__range = [startDate, endDate])

                if pOrder:
                    for p in pOrder:
                        partyName = p.Vendor.first_name +" "+p.Vendor.last_name
                        date = p.purchase_order_date
                        due_date = p.due_date
                        ref = p.purchase_order_no
                        total = p.grandtotal
                        totalPurchase += float(p.grandtotal)
                        if p.converted_to_bill != None:
                            st = 'Converted to Bill'
                        elif p.converted_to_rec_bill != None:
                            st = 'Converted to Rec. Bill'
                        else:
                            st = p.status

                        details = {
                            'date': date,
                            'name': partyName,
                            'purchase_no':ref,
                            'due_date':due_date,
                            'total':total,
                            'status':st
                        }
                        reportData.append(details)
                
                context = {'cmp':cmp, 'reportData':reportData, 'totalPurchase':totalPurchase, 'startDate':startDate, 'endDate':endDate}
                template_path = 'company/reports/Fin_PurchaseOrderDetails_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_PurchaseOrderDetails'
                subject = f"Report_PurchaseOrderDetails"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Purchase Order Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_purchaseOrderDetailsReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_purchaseOrderDetailsReport)
            
#End
# ------------------------------------ estimate Report ------------------------------------
def Fin_estimate_report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        reportData = []
        totalSales = 0
        totcust=0

        Est = Fin_Estimate.objects.filter(Company=cmp)
        cust = Fin_Customers.objects.filter(Company=cmp)
       
        if Est:
            for s in Est:
                partyName = s.Customer.first_name +" "+s.Customer.last_name
                date = s.estimate_date
                ship_date = s.exp_date
                ref = s.reference_no
                est =s.estimate_no
                total = s.grandtotal
                invoice_no=0
                totalSales += float(s.grandtotal)
                if s.converted_to_invoice != None:
                    st = 'Converted to Invoice'
                    invoice_no = s.converted_to_invoice.invoice_no
                    print(invoice_no)
                elif s.converted_to_rec_invoice != None:
                    st = 'Converted to Rec. Invoice'
                elif s.converted_to_sales_order != None:
                    st = 'Converted to sales order'
                else:
                    st = s.status

                details = {
                    'date': date,
                    'name': partyName,
                    'sales_no':ref,
                    'ship_date':ship_date,
                    'est':est,
                    'invoice_no': invoice_no,
                    'total':total,
                    'status':st,
                    
                    
                }
                reportData.append(details)
                totcust=len(cust)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalSales':totalSales,'totcust':totcust,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_estimate_report.html', context)
    else:
        return redirect('/')
    

def Fin_estimateDetailsCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        cust = Fin_Customers.objects.filter(Company=cmp)

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            status = request.GET['status']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None


            reportData = []
            totalSales = 0
            totcust=0

            if startDate is None or endDate is None:
                if status == 'invoice':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = False, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True)
                elif status == 'recurring_invoice':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = False,converted_to_sales_order__isnull = True)
                elif status == 'sales_order':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = False)
                elif status == 'saved':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True, status = 'Saved')
                elif status == 'draft':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True, status = 'Draft')
                else:
                    sOrder = Fin_Estimate.objects.filter(Company=cmp)
            else:
                if status == 'invoice':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, estimate_date__range = [startDate, endDate], converted_to_invoice__isnull = False, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True)
                elif status == 'recurring_invoice':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, estimate_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = False,converted_to_sales_order__isnull = True)
                elif status == 'sales_order':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp,estimate_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = False)
                elif status == 'saved':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, estimate_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True, status = 'Saved')
                elif status == 'draft':
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, estimate_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True, status = 'Draft')
                else:
                    sOrder = Fin_Estimate.objects.filter(Company=cmp, estimate_date__range = [startDate, endDate])

            if sOrder:
                for s in sOrder:
                    partyName = s.Customer.first_name +" "+s.Customer.last_name
                    date = s.estimate_date
                    ship_date = s.exp_date
                    ref = s.reference_no
                    est =s.estimate_no
                    total = s.grandtotal
                    invoice_no=0
                    totalSales += float(s.grandtotal)
                    if s.converted_to_invoice != None:
                        st = 'Converted to Invoice'
                        invoice_no = s.converted_to_invoice.invoice_no
                        print(invoice_no)
                    elif s.converted_to_rec_invoice != None:
                        st = 'Converted to Rec. Invoice'
                    elif s.converted_to_sales_order != None:
                        st = 'Converted to sales order'
                    else:
                        st = s.status

                    details = {
                        'date': date,
                        'name': partyName,
                        'est':est,
                        'invoice_no': invoice_no,
                        'sales_no':ref,
                        'ship_date':ship_date,
                        'total':total,
                        'status':st
                    }
                    reportData.append(details)
                    totcust=len(cust)


            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalSales':totalSales,'totcust':totcust,
                'startDate':startDate, 'endDate':endDate, 'status':status
            }
            return render(request,'company/reports/Fin_estimate_report.html', context)
    else:
        return redirect('/')

def Fin_shareestimateDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totalSales = 0
                totcust=0
                if startDate is None or endDate is None:
                    if status == 'invoice':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = False, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True)
                    elif status == 'recurring_invoice':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = False,converted_to_sales_order__isnull = True)
                    elif status == 'sales_order':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = False)
                    elif status == 'saved':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True, status = 'Saved')
                    elif status == 'draft':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True, status = 'Draft')
                    else:
                        sOrder = Fin_Estimate.objects.filter(Company=cmp)
                else:
                    if status == 'invoice':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = False, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True)
                    elif status == 'recurring_invoice':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = False,converted_to_sales_order__isnull = True)
                    elif status == 'sales_order':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp,estimate_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = False)
                    elif status == 'saved':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True, status = 'Saved')
                    elif status == 'draft':
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate], converted_to_invoice__isnull = True, converted_to_rec_invoice__isnull = True,converted_to_sales_order__isnull = True, status = 'Draft')
                    else:
                        sOrder = Fin_Estimate.objects.filter(Company=cmp, sales_order_date__range = [startDate, endDate])

                if sOrder:
                    for s in sOrder:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.estimate_date
                        ship_date = s.exp_date
                        ref = s.reference_no
                        est =s.estimate_no
                        invoice_no=0
                        total = s.grandtotal
                        totalSales += float(s.grandtotal)
                        if s.converted_to_invoice != None:
                            st = 'Converted to Invoice'
                            invoice_no = s.converted_to_invoice.invoice_no
                            print(invoice_no)
                        elif s.converted_to_rec_invoice != None:
                            st = 'Converted to Rec. Invoice'
                        elif s.converted_to_sales_order != None:
                            st = 'Converted to sales order'
                        else:
                            st = s.status

                        details = {
                            'date': date,
                            'name': partyName,
                            'invoice_no': invoice_no,
                            'sales_no':ref,
                            'est':est,
                            'ship_date':ship_date,
                            'total':total,
                            'status':st
                        }
                        reportData.append(details)
                        totcust=len(cust)
                
                context = {'cmp':cmp, 'reportData':reportData, 'totalSales':totalSales,'totcust':totcust, 'startDate':startDate, 'endDate':endDate}
                template_path = 'company/reports/Fin_estimate_report_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_estimate_Details'
                subject = f"Report_estimate_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Sales Order Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_estimate_report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_estimate_report)
            
#End
# ------------------------------------ rec invoice Report ------------------------------------
def Fin_recinvCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
        cust = Fin_Customers.objects.filter(Company=cmp)

        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
        status = request.GET.get('status')
        print(startDate)
        print(endDate)
        print(status)



        currentDate = datetime.today()

        reportData = []
        totalSales = 0
        totcust = len(cust)
        totalbalance = 0

        Recinv = Fin_Recurring_Invoice.objects.filter(Company=cmp)
        
        if startDate and endDate:
            Recinv = Recinv.filter(start_date__range=[startDate, endDate])
            print("1")

        if status:
            if status == 'Draft':
                Recinv = Recinv.filter(status = 'Draft')
                print("2")
            elif status == 'fully paid':
                Recinv = Recinv.filter(paid_off=F('grandtotal'),status='saved')
                print("2")

            elif status == 'overdue':
                Recinv = Recinv.filter(Q(end_date__lt=currentDate) & Q(paid_off__lt=F('grandtotal')),status='saved')
                print("3")

            elif status == 'Not paid':
                Recinv = Recinv.filter(paid_off=0, status='saved')
                print("4")

            elif status == 'partially paid':
                Recinv = Recinv.filter(Q(paid_off__gt=0)  & Q(paid_off__lt=F('grandtotal')),status='saved')
                print(Recinv)
                print("5")

        for s in Recinv:
            partyName = s.Customer.first_name + " " + s.Customer.last_name
            date = s.start_date
            ship_date = s.end_date
            end_date = datetime.combine(s.end_date, datetime.min.time())

            ref = s.reference_no
            rinv = s.rec_invoice_no
            total = s.grandtotal
            salesno = s.salesOrder_no
            paid = s.paid_off
            balance = s.balance
            sta = s.status
            invoice_no = 0
            totalSales += float(s.grandtotal)
            totalbalance += float(s.balance)
            if s.status == 'Draft':
                st = 'Draft'
            elif s.paid_off == 0 and end_date>currentDate:
                st = 'Not paid'
            elif s.paid_off == s.grandtotal:
                st = 'fully paid'
            elif s.paid_off > 0 and s.paid_off < s.grandtotal and end_date>currentDate:
                st = 'partially paid'
            elif end_date < currentDate and s.paid_off <= s.grandtotal:
                st = 'overdue'
            else:
                st = s.status

            details = {
                'date': date,
                'name': partyName,
                'sales_no': salesno,
                'ship_date': ship_date,
                'rinv': rinv,
                'invoice_no': invoice_no,
                'total': total,
                'status': st,
                'balance': balance,
            }
            reportData.append(details)

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,'totalbalance':totalbalance,
            'totalSales': totalSales, 'totcust': totcust, 'startDate': startDate, 'endDate': endDate, 'status': status
        }
        return render(request, 'company/reports/Fin_rec_invoice_report.html', context)
    else:
        return redirect('/')


def Fin_shareREC_INVOICEDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                cust = Fin_Customers.objects.filter(Company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                
                print(startDate)
                print(endDate)
                print(status)



                currentDate = datetime.today()

                reportData = []
                totalSales = 0
                totcust = len(cust)
                totalbalance = 0

                Recinv = Fin_Recurring_Invoice.objects.filter(Company=cmp)
                
                if startDate and endDate:
                    Recinv = Recinv.filter(start_date__range=[startDate, endDate])
                    print("1")

                if status:
                    if status == 'Draft':
                        Recinv = Recinv.filter(status = 'Draft')
                        print("2")
                    elif status == 'fully paid':
                        Recinv = Recinv.filter(paid_off=F('grandtotal'),status='saved')
                        print("2")

                    elif status == 'overdue':
                        Recinv = Recinv.filter(Q(end_date__lt=currentDate) & Q(paid_off__lt=F('grandtotal')),status='saved')
                        print("3")

                    elif status == 'Not paid':
                        Recinv = Recinv.filter(paid_off=0, status='saved')
                        print("4")

                    elif status == 'partially paid':
                        Recinv = Recinv.filter(Q(paid_off__gt=0) & Q(paid_off__lt=F('grandtotal')),status='saved')
                        print("5")

                for s in Recinv:
                    partyName = s.Customer.first_name + " " + s.Customer.last_name
                    date = s.start_date
                    ship_date = s.end_date
                    end_date = datetime.combine(s.end_date, datetime.min.time())

                    ref = s.reference_no
                    rinv = s.rec_invoice_no
                    total = s.grandtotal
                    salesno = s.salesOrder_no
                    paid = s.paid_off
                    balance = s.balance
                    sta = s.status
                    invoice_no = 0
                    totalSales += float(s.grandtotal)
                    totalbalance += float(s.balance)
                    if s.status == 'Draft':
                        st = 'Draft'
                    elif s.paid_off == 0 and end_date>currentDate:
                        st = 'Not paid'
                    elif s.paid_off == s.grandtotal:
                        st = 'fully paid'
                    elif s.paid_off > 0 and s.paid_off < s.grandtotal and end_date>currentDate:
                        st = 'partially paid'
                    elif end_date < currentDate and s.paid_off <= s.grandtotal:
                        st = 'overdue'
                    else:
                        st = s.status

                    details = {
                        'date': date,
                        'name': partyName,
                        'sales_no': salesno,
                        'ship_date': ship_date,
                        'rinv': rinv,
                        'invoice_no': invoice_no,
                        'total': total,
                        'status': st,
                        'balance': balance,
                    }
                    reportData.append(details)

                    totcust=len(cust)
                
                context = {'cmp':cmp, 'reportData':reportData, 'totalSales':totalSales,'totcust':totcust, 'startDate':startDate,'totalbalance':totalbalance, 'endDate':endDate}
                template_path = 'company/reports/Fin_rec_invoice_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_rec_invoice_Details'
                subject = f"Report_rec_invoice_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Sales Order Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_recInvoice_report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_recInvoice_report)

def Fin_recInvoice_report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        reportData = []
        totalSales = 0
        totcust=0
        totalbalance=0

        Recinv = Fin_Recurring_Invoice.objects.filter(Company=cmp)
        cust = Fin_Customers.objects.filter(Company=cmp)
       
        if Recinv:
            for s in Recinv:
                partyName = s.Customer.first_name +" "+s.Customer.last_name
                date = s.start_date
                ship_date = s.end_date
                end_date = datetime.combine(s.end_date, datetime.min.time())

                ref = s.reference_no
                rinv =s.rec_invoice_no
                total = s.grandtotal
                salesno=s.salesOrder_no
                paid=s.paid_off
                balance=s.balance
                sta=s.status
                invoice_no=0
                totalSales += float(s.grandtotal)
                totalbalance += float(s.balance)
                if s.status == 'Draft':
                    st = 'Draft'
                elif s.paid_off == 0 :
                    st = 'Not paid'
                    
                elif s.paid_off == s.grandtotal:
                    st = 'fully paid'
                
                elif s.paid_off > 0 and s.paid_off<s.grandtotal and end_date>currentDate:
                    st = 'partially paid'
                elif end_date<currentDate and s.paid_off<=s.grandtotal:
                    st = 'overdue'
                
                else:
                    st = s.status

                details = {
                    'date': date,
                    'name': partyName,
                    'sales_no':salesno,
                    'ship_date':ship_date,
                    'rinv':rinv,
                    'invoice_no': invoice_no,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totcust=len(cust)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'totalbalance':totalbalance, 'totalSales':totalSales,'totcust':totcust,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_rec_invoice_report.html', context)
    else:
        return redirect('/')            
#End

# ------------------------------------ Aging Summary ------------------------------------
def Fin_aging_summary(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        age_interval = 4
        day_interval = 15

        first_interval = 1
        last_interval = day_interval
        interval_data = []
        day_count = []
        for i in range(age_interval):
            if i == age_interval -1 :
                interval_data.append(f'> {first_interval - 1} Days')
            else:
                interval_data.append(f'{first_interval} - {last_interval} Days')
            first_interval = last_interval + 1
            last_interval += day_interval
            day_count.append(first_interval)
        
        cust = Fin_Customers.objects.filter(Company = cmp)
        reportData = []
        total_matrix = []
        total_matrix += [0] * age_interval
        total_current = 0
        final_balance = 0
        cust_no = 0

        for c in cust:
            current = 0
            custemail = c.email
            custfname = c.first_name
            custlname = c.last_name
            custphno = c.mobile
            day_matrix = []
            day_matrix += [0] * age_interval
            invo = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
            rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')
            for i in invo:
                if float(i.balance) > 0: 
                    days = int((i.duedate - date.today()).days)
                    if days <= 0:
                        days = days*-1
                        if days == 0:
                            current += float(i.balance)
                        else:
                            for index in range(age_interval):
                                if days < day_count[index]:
                                    day_matrix[index] += i.balance
                                    break
                            else:
                                day_matrix[-1] += i.balance
            
            for i in rinvo:
                if float(i.balance) > 0: 
                    days = int((i.end_date - date.today()).days)
                    if days <= 0:
                        days = days*-1
                        if days == 0:
                            current += float(i.balance)
                        else:
                            for index in range(age_interval):
                                if days < day_count[index]:
                                    day_matrix[index] += i.balance
                                    break
                            else:
                                day_matrix[-1] += i.balance
            
            total_balance = current + sum(day_matrix)
            final_balance += total_balance
            total_current += current
            total_matrix = [x + y for x, y in zip(total_matrix, day_matrix)]
            if total_balance != 0:
                details = {
                    'current': current,
                    'custemail':custemail,
                    'custfname': custfname,
                    'custlname': custlname,
                    'custphno': custphno,
                    'day_matrix': day_matrix,
                    'total_balance':total_balance
                }
                reportData.append(details)
                cust_no += 1

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'interval_data':interval_data, 'reportData':reportData, 'cust_no':cust_no, 'total_current':total_current,
            'final_balance':final_balance, "total_matrix":total_matrix, 'startDate':None, 'endDate':None, 'aging_by':'inv_due_date', 'age_interval':age_interval, 
            'day_interval':day_interval, 'show_by':'inv_amt', 'cemail':None, 'cfname':'on', 'clname':'on', 'cphno':None
        }
        return render(request,'company/Fin_AgingSummary.html', context)

def Fin_customize_aging_summary(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        startDate = request.GET['from_date']
        endDate = request.GET['to_date']
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None

        aging_by = request.GET.get('aging_by')
        if aging_by == '' or aging_by == None:
            aging_by = 'inv_due_date'

        age_interval = int(request.GET['age_interval'])

        if age_interval == 0:
            age_interval = 4

        try:
            day_interval = int(request.GET['day_interval'])
        except:
            day_interval = 15

        try:
            show_by = request.GET['show_by']
        except:
            show_by = 'inv_amt'

        if 'cust_email_show' in request.GET:
            cemail = request.GET['cust_email_show']
        else:
            cemail = None

        if 'cust_fname_show' in request.GET:
            cfname = request.GET['cust_fname_show']
        else:
            cfname = None

        if 'cust_lname_show' in request.GET:
            clname = request.GET['cust_lname_show']
        else:
            clname = None

        if 'cust_phone_show' in request.GET:
            cphno = request.GET['cust_phone_show']
        else:
            cphno = None

        first_interval = 1
        last_interval = day_interval
        interval_data = []
        day_count = []
        for i in range(age_interval):
            if i == age_interval -1 :
                interval_data.append(f'> {first_interval - 1} Days')
            else:
                interval_data.append(f'{first_interval} - {last_interval} Days')
            first_interval = last_interval + 1
            last_interval += day_interval
            day_count.append(first_interval)
        
        cust = Fin_Customers.objects.filter(Company = cmp)
        reportData = []
        total_matrix = []
        total_matrix += [0] * age_interval
        total_current = 0
        final_balance = 0
        cust_no = 0

        for c in cust:
            current = 0
            custemail = c.email
            custfname = c.first_name
            custlname = c.last_name
            custphno = c.mobile
            day_matrix = []
            day_matrix += [0] * age_interval
            if startDate and endDate:
                if aging_by == 'inv_due_date':
                    invo = Fin_Invoice.objects.filter(Customer=c, duedate__range = [startDate, endDate], status = 'Saved')
                    rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, end_date__range = [startDate, endDate], status = 'Saved')
                else:
                    invo = Fin_Invoice.objects.filter(Customer=c, invoice_date__range = [startDate, endDate], status = 'Saved')
                    rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, start_date__range = [startDate, endDate], status = 'Saved')
            else:
                invo = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
                rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')
            for i in invo:
                if float(i.balance) > 0: 
                    if aging_by == 'inv_due_date':
                        days = int((i.duedate - date.today()).days)
                        if days <= 0:
                            days = days*-1
                            if days == 0:
                                if show_by == 'inv_amt':
                                    current += float(i.balance)
                                else:
                                    current += 1
                            else:
                                for index in range(age_interval):
                                    if days < day_count[index]:
                                        if show_by == 'inv_amt':
                                            day_matrix[index] += i.balance
                                        else:
                                            day_matrix[index] += 1
                                        break
                                else:
                                    if show_by == 'inv_amt':
                                        day_matrix[-1] += i.balance
                                    else:
                                        day_matrix[-1] += 1

                    elif aging_by == 'inv_date':
                        days = int((date.today() - i.invoice_date).days)
                        if days <= 0:
                            days = days*-1
                        if days == 0:
                            if show_by == 'inv_amt':
                                current += float(i.balance)
                            else:
                                current += 1
                        else:
                            for index in range(age_interval):
                                if days < day_count[index]:
                                    if show_by == 'inv_amt':
                                        day_matrix[index] += i.balance
                                    else:
                                        day_matrix[index] += 1
                                    break
                            else:
                                if show_by == 'inv_amt':
                                    day_matrix[-1] += i.balance
                                else:
                                    day_matrix[-1] += 1

            for i in rinvo:
                if float(i.balance) > 0: 
                    if aging_by == 'inv_due_date':
                        days = int((i.end_date - date.today()).days)
                        if days <= 0:
                            days = days*-1
                            if days == 0:
                                if show_by == 'inv_amt':
                                    current += float(i.balance)
                                else:
                                    current += 1
                            else:
                                for index in range(age_interval):
                                    if days < day_count[index]:
                                        if show_by == 'inv_amt':
                                            day_matrix[index] += i.balance
                                        else:
                                            day_matrix[index] += 1
                                        break
                                else:
                                    if show_by == 'inv_amt':
                                        day_matrix[-1] += i.balance
                                    else:
                                        day_matrix[-1] += 1

                    elif aging_by == 'inv_date':
                        days = int((i.start_date - date.today()).days)
                        if days <= 0:
                            days = days*-1
                        if days == 0:
                            if show_by == 'inv_amt':
                                current += float(i.balance)
                            else:
                                current += 1
                        else:
                            for index in range(age_interval):
                                if days < day_count[index]:
                                    if show_by == 'inv_amt':
                                        day_matrix[index] += i.balance
                                    else:
                                        day_matrix[index] += 1
                                    break
                            else:
                                if show_by == 'inv_amt':
                                    day_matrix[-1] += i.balance
                                else:
                                    day_matrix[-1] += 1

            total_balance = current + sum(day_matrix)
            final_balance += total_balance
            total_current += current
            total_matrix = [x + y for x, y in zip(total_matrix, day_matrix)]

            if total_balance != 0:
                details = {
                    'custemail':custemail,
                    'custfname': custfname,
                    'custlname': custlname,
                    'custphno': custphno,
                    'current': current,
                    'day_matrix': day_matrix,
                    'total_balance':total_balance
                }
                reportData.append(details)
                cust_no += 1

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'interval_data':interval_data, 'reportData':reportData, 'cust_no':cust_no, 'total_current':total_current,
            'final_balance':final_balance, 'total_matrix':total_matrix, 'startDate': startDate, 'endDate':endDate, 'aging_by':aging_by, 'age_interval':age_interval, 
            'day_interval':day_interval, 'show_by':show_by, 'cemail':cemail, 'cfname':cfname, 'clname':clname, 'cphno':cphno
        }
        return render(request, 'company/Fin_AgingSummary.html', context)

def Fin_Share_Aging_Summary(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'GET':
                emails_string = request.GET.get('email_ids')

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.GET.get('email_message')
                # print(emails_list)
            
                startDate = request.GET.get('from_date')
                endDate = request.GET.get('to_date')
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                aging_by = request.GET.get('aging_by')
                if aging_by == '' or aging_by == None:
                    aging_by = 'inv_due_date'

                age_interval = int(request.GET.get('age_interval'))

                if age_interval == 0:
                    age_interval = 4

                try:
                    day_interval = int(request.GET.get('day_interval'))
                except:
                    day_interval = 15

                try:
                    show_by = request.GET.get('show_by')
                except:
                    show_by = 'inv_amt'

                first_interval = 1
                last_interval = day_interval
                interval_data = []
                day_count = []
                for i in range(age_interval):
                    if i == age_interval - 1 :
                        interval_data.append(f'> {first_interval - 1} Days')
                    else:
                        interval_data.append(f'{first_interval} - {last_interval} Days')
                    first_interval = last_interval + 1
                    last_interval += day_interval
                    day_count.append(first_interval)

                cust = Fin_Customers.objects.filter(Company = com)
                reportData = []
                total_matrix = []
                total_matrix += [0] * age_interval
                total_current = 0
                final_balance = 0
                cust_no = 0

                for c in cust:
                    current = 0
                    custfname = c.first_name
                    custlname = c.last_name
                    day_matrix = []
                    day_matrix += [0] * age_interval
                    if startDate and endDate:
                        if aging_by == 'inv_due_date':
                            invo = Fin_Invoice.objects.filter(Customer=c, duedate__range = [startDate, endDate], status = 'Saved')
                            rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, end_date__range = [startDate, endDate], status = 'Saved')
                        else:
                            invo = Fin_Invoice.objects.filter(Customer=c, invoice_date__range = [startDate, endDate], status = 'Saved')
                            rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                    else:
                        invo = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
                        rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')

                    for i in invo:
                        if float(i.balance) > 0: 
                            if aging_by == 'inv_due_date':
                                days = int((i.duedate - date.today()).days)
                                if days <= 0:
                                    days = days*-1
                                    if days == 0:
                                        if show_by == 'inv_amt':
                                            current += float(i.balance)
                                        else:
                                            current += 1
                                    else:
                                        for index in range(age_interval):
                                            if days < day_count[index]:
                                                if show_by == 'inv_amt':
                                                    day_matrix[index] += i.balance
                                                else:
                                                    day_matrix[index] += 1
                                                break
                                        else:
                                            if show_by == 'inv_amt':
                                                day_matrix[-1] += i.balance
                                            else:
                                                day_matrix[-1] += 1

                            elif aging_by == 'inv_date':
                                days = int((date.today() - i.invoice_date).days)
                                if days <= 0:
                                    days = days*-1
                                if days == 0:
                                    if show_by == 'inv_amt':
                                        current += float(i.balance)
                                    else:
                                        current += 1
                                else:
                                    for index in range(age_interval):
                                        if days < day_count[index]:
                                            if show_by == 'inv_amt':
                                                day_matrix[index] += i.balance
                                            else:
                                                day_matrix[index] += 1
                                            break
                                    else:
                                        if show_by == 'inv_amt':
                                            day_matrix[-1] += i.balance
                                        else:
                                            day_matrix[-1] += 1

                    for i in rinvo:
                        if float(i.balance) > 0: 
                            if aging_by == 'inv_due_date':
                                days = int((i.end_date - date.today()).days)
                                if days <= 0:
                                    days = days*-1
                                    if days == 0:
                                        if show_by == 'inv_amt':
                                            current += float(i.balance)
                                        else:
                                            current += 1
                                    else:
                                        for index in range(age_interval):
                                            if days < day_count[index]:
                                                if show_by == 'inv_amt':
                                                    day_matrix[index] += i.balance
                                                else:
                                                    day_matrix[index] += 1
                                                break
                                        else:
                                            if show_by == 'inv_amt':
                                                day_matrix[-1] += i.balance
                                            else:
                                                day_matrix[-1] += 1
                            elif aging_by == 'inv_date':
                                days = int((date.today() - i.start_date).days)
                                if days <= 0:
                                    days = days*-1
                                if days == 0:
                                    if show_by == 'inv_amt':
                                        current += float(i.balance)
                                    else:
                                        current += 1
                                else:
                                    for index in range(age_interval):
                                        if days < day_count[index]:
                                            if show_by == 'inv_amt':
                                                day_matrix[index] += i.balance
                                            else:
                                                day_matrix[index] += 1
                                            break
                                    else:
                                        if show_by == 'inv_amt':
                                            day_matrix[-1] += i.balance
                                        else:
                                            day_matrix[-1] += 1

                    total_balance = current + sum(day_matrix)
                    final_balance += total_balance
                    total_current += current
                    total_matrix = [x + y for x, y in zip(total_matrix, day_matrix)]

                    if total_balance != 0:
                        details = {
                            'custfname': custfname,
                            'custlname': custlname,
                            'current': current,
                            'day_matrix': day_matrix,
                            'total_balance':total_balance
                        }
                        reportData.append(details)
                        cust_no += 1

                context = {
                    'com':com, 'cmp':com, 'interval_data':interval_data, 'reportData':reportData, 'cust_no':cust_no, 'total_current':total_current,
                    'final_balance':final_balance, 'total_matrix':total_matrix, 'startDate': startDate, 'endDate':endDate, 'aging_by':aging_by, 'age_interval':age_interval, 
                    'day_interval':day_interval, 'show_by':show_by
                }
            
                template_path = 'company/Fin_AgingSummary_PDF.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                filename = f'Aging Summary.pdf'
                subject = f"Sharing Aging Summary"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Aging Summary. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                message = 'Report has been shared via email successfully..!'
                return JsonResponse({'message':message})
        except Exception as e:
            message = 'Report cannot be send'
            return JsonResponse({'message':message})
            
#End
# invoice report #haripriya
def Fin_Invoice_Report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        reportData = []
        totalinv = 0
        totcust=0
        totalbalance=0

        inv = Fin_Invoice.objects.filter(Company=cmp)
        cust = Fin_Customers.objects.filter(Company=cmp)
       
        if inv:
            for s in inv:
                custName = s.Customer.first_name +" "+s.Customer.last_name
                invdate = s.invoice_date
                ship_date = s.duedate
                end_date = datetime.combine(s.duedate, datetime.min.time())

                invno = s.invoice_no
                salesinv =s.salesOrder_no
                total = s.grandtotal
                paid=s.paid_off
                balance=s.balance
                sta=s.status
                
                totalinv += float(s.grandtotal)
                totalbalance += float(s.balance)
                if s.status == 'Draft':
                    st = 'Draft'
                elif s.paid_off == 0 :
                    st = 'Not paid'
                    
                elif s.paid_off == s.grandtotal:
                    st = 'fully paid'
                
                elif s.paid_off > 0 and s.paid_off<s.grandtotal and end_date>currentDate:
                    st = 'partially paid'
                elif end_date<currentDate and s.paid_off<=s.grandtotal:
                    st = 'overdue'
                
                else:
                    st = s.status

                details = {
                    'date': invdate,
                    'name': custName,
                    'sales_no':salesinv,
                    'ship_date':ship_date,
                  
                    'invno': invno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totcust=len(cust)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'totalbalance':totalbalance, 'totalinv':totalinv,'totcust':totcust,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_invoice_report.html', context)
    else:
        return redirect('/')    


def Fin_InvoiceReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
        cust = Fin_Customers.objects.filter(Company=cmp)

        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
        report= request.GET.get('report')
        status = request.GET.get('status')
        print(startDate)
        print(endDate)
        print(status)



        currentDate = datetime.today()

        reportData = []
        totalinv = 0
        totcust = len(cust)
        totalbalance = 0

        inv = Fin_Invoice.objects.filter(Company=cmp)
        
        if startDate and endDate:
            inv = inv.filter(invoice_date__range=[startDate, endDate])
     
        if report:
            if report == 'invdate':
                inv= inv.filter(invoice_date__range=[startDate, endDate])
            
            elif report == 'duedate': 
                inv= inv.filter(duedate__range=[startDate, endDate])



        if status:
            if status == 'Draft':
                inv = inv.filter(status = 'Draft')
               
            elif status == 'fully paid':
                inv = inv.filter(paid_off=F('grandtotal'),status='saved')
              

            elif status == 'overdue':
                inv = inv.filter(Q(duedate__lt=currentDate) & Q(paid_off__lt=F('grandtotal')),status='saved')
            

            elif status == 'Not paid':
                inv = inv.filter(paid_off=0, status='saved')
             

            elif status == 'partially paid':
                inv = inv.filter(Q(paid_off__gt=0)  & Q(paid_off__lt=F('grandtotal')),status='saved')
                

        for s in inv:
                custName = s.Customer.first_name +" "+s.Customer.last_name
                invdate = s.invoice_date
                ship_date = s.duedate
                end_date = datetime.combine(s.duedate, datetime.min.time())

                invno = s.invoice_no
                salesinv =s.salesOrder_no
                total = s.grandtotal
                paid=s.paid_off
                balance=s.balance
                sta=s.status
                
                totalinv += float(s.grandtotal)
                totalbalance += float(s.balance)
                if s.status == 'Draft':
                    st = 'Draft'
                elif s.paid_off == 0 :
                    st = 'Not paid'
                    
                elif s.paid_off == s.grandtotal:
                    st = 'fully paid'
                
                elif s.paid_off > 0 and s.paid_off<s.grandtotal and end_date>currentDate:
                    st = 'partially paid'
                elif end_date<currentDate and s.paid_off<=s.grandtotal:
                    st = 'overdue'
                
                else:
                    st = s.status

                details = {
                    'date': invdate,
                    'name': custName,
                    'sales_no':salesinv,
                    'ship_date':ship_date,
                  
                    'invno': invno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totcust=len(cust)

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,'totalbalance':totalbalance,
            'totalinv': totalinv, 'totcust': totcust, 'startDate': startDate, 'endDate': endDate, 'status': status
        }
        return render(request, 'company/reports/Fin_invoice_report.html', context)
    else:
        return redirect('/')


def Fin_share_invoiceDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                cust = Fin_Customers.objects.filter(Company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                report = request.POST['report']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                
                print(startDate)
                print(endDate)
                print(status)
                print(report)



                currentDate = datetime.today()

                reportData = []
                totalinv = 0
                totcust = len(cust)
                totalbalance = 0

                inv = Fin_Invoice.objects.filter(Company=cmp)
                
                if startDate and endDate:
                    inv = inv.filter(invoice_date__range=[startDate, endDate])
                

                if report:
                    if report == 'invdate':
                        inv= inv.filter(invoice_date__range=[startDate, endDate])
                    
                    elif report == 'duedate': 
                        inv= inv.filter(duedate__range=[startDate, endDate])

                if status:
                    if status == 'Draft':
                        inv = inv.filter(status = 'Draft')
                     
                    elif status == 'fully paid':
                        inv = inv.filter(paid_off=F('grandtotal'),status='saved')
                    

                    elif status == 'overdue':
                        inv = inv.filter(Q(duedate__lt=currentDate) & Q(paid_off__lt=F('grandtotal')),status='saved')
                 

                    elif status == 'Not paid':
                        inv = inv.filter(paid_off=0, status='saved')
                        print("4")

                    elif status == 'partially paid':
                        inv = inv.filter(Q(paid_off__gt=0) & Q(paid_off__lt=F('grandtotal')),status='saved')
                        print("5")

                for s in inv:
                    custName = s.Customer.first_name +" "+s.Customer.last_name
                    invdate = s.invoice_date
                    ship_date = s.duedate
                    end_date = datetime.combine(s.duedate, datetime.min.time())

                    invno = s.invoice_no
                    salesinv =s.salesOrder_no
                    total = s.grandtotal
                    paid=s.paid_off
                    balance=s.balance
                    sta=s.status
                    totalinv += float(s.grandtotal)
                    totalbalance += float(s.balance)
                    if s.status == 'Draft':
                        st = 'Draft'
                    elif s.paid_off == 0 and end_date>currentDate:
                        st = 'Not paid'
                    elif s.paid_off == s.grandtotal:
                        st = 'fully paid'
                    elif s.paid_off > 0 and s.paid_off < s.grandtotal and end_date>currentDate:
                        st = 'partially paid'
                    elif end_date < currentDate and s.paid_off <= s.grandtotal:
                        st = 'overdue'
                    else:
                        st = s.status

                    details = {
                        'date': invdate,
                    'name': custName,
                    'sales_no':salesinv,
                    'ship_date':ship_date,
                  
                    'invno': invno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    }
                    reportData.append(details)

                    totcust=len(cust)
                
                context = {'cmp':cmp, 'reportData':reportData, 'totalinv':totalinv,'totcust':totcust, 'startDate':startDate,'totalbalance':totalbalance, 'endDate':endDate}
                template_path = 'company/reports/Fin_invoice_report_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_invoice_Details'
                subject = f"Report_invoice_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Invvoice Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_Invoice_Report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_Invoice_Report)
            
#End
# ------------------------------------ journal Report ------------------------------------
def Fin_journel_report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        reportData = []
        totaldebit = 0
        totalcredit=0

        Jrn = Fin_Manual_Journal.objects.filter(Company=cmp)
        JrnAcc = Fin_Manual_Journal_Accounts.objects.filter(Company=cmp)
       
        if JrnAcc:
            for s in JrnAcc:
                date = s.Journal.journal_date 

                accname = s.Account.account_name
                debit = s.Journal.total_debit
                credit = s.Journal.total_credit

                ref = s.Journal.reference_no
                jounal =s.Journal.journal_no
                st=s.Journal.status
                totaldebit += float(s.Journal.total_debit)
                totalcredit += float(s.Journal.total_credit)

                
                    

                details = {
                    'date': date,
                    'name': accname,
                    'sales_no':ref,
                    'jounal':jounal,
                    'debit':debit,
                    'credit': credit,
                    'status': st,

                    
                }
                reportData.append(details)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totaldebit':totaldebit,'totalcredit':totalcredit,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_journal_report.html', context)
    else:
        return redirect('/')

def Fin_journalDetailsCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
        cust = Fin_Customers.objects.filter(Company=cmp)
        

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            status = request.GET['status']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            currentDate = datetime.today()

            reportData = []
            totaldebit = 0
            totalcredit=0

            Jrn = Fin_Manual_Journal.objects.filter(Company=cmp)
            JrnAcc = Fin_Manual_Journal_Accounts.objects.filter(Company=cmp)
        
            
            if startDate and endDate:
                JrnAcc = JrnAcc.filter(Journal__journal_date__range=[startDate, endDate])
            if status:
                if status == 'Draft':
                    JrnAcc = JrnAcc.filter(Journal__status = 'Draft')
                
                elif status == 'Saved':
                    JrnAcc = JrnAcc.filter(Journal__status = 'Saved')
              

            for s in JrnAcc:
                    date = s.Journal.journal_date 

                    accname = s.Account.account_name
                    debit = s.Journal.total_debit
                    credit = s.Journal.total_credit

                    ref = s.Journal.reference_no
                    jounal =s.Journal.journal_no
                    st=s.Journal.status
                    totaldebit += float(s.Journal.total_debit)
                    totalcredit += float(s.Journal.total_credit)

                
                    

                    details = {
                        'date': date,
                        'name': accname,
                        'sales_no':ref,
                        'jounal':jounal,
                        'debit':debit,
                        'credit': credit,
                        'status': st,

                        
                    }
                    reportData.append(details)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totaldebit':totaldebit,'totalcredit':totalcredit,
            'startDate':startDate, 'endDate':endDate,'status':status
        }
        print(status)
        return render(request,'company/reports/Fin_journal_report.html', context)
    else:
        return redirect('/')
    
def Fin_share_journalDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']

                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                currentDate = datetime.today()

                reportData = []
                totaldebit = 0
                totalcredit=0

                Jrn = Fin_Manual_Journal.objects.filter(Company=cmp)
                JrnAcc = Fin_Manual_Journal_Accounts.objects.filter(Company=cmp)
            
                
                if startDate and endDate:
                    JrnAcc = JrnAcc.filter(Journal__journal_date__range=[startDate, endDate])

                if status:
                    if status == 'Draft':
                        JrnAcc = JrnAcc.filter(Journal__status = 'Draft')
                    
                    elif status == 'Saved':
                        JrnAcc = JrnAcc.filter(Journal__status = 'Saved')
                    

                for s in JrnAcc:
                        date = s.Journal.journal_date 

                        accname = s.Account.account_name
                        debit = s.Journal.total_debit
                        credit = s.Journal.total_credit

                        ref = s.Journal.reference_no
                        jounal =s.Journal.journal_no
                        st=s.Journal.status
                        totaldebit += float(s.Journal.total_debit)
                        totalcredit += float(s.Journal.total_credit)

                
                    

                        details = {
                            'date': date,
                            'name': accname,
                            'sales_no':ref,
                            'jounal':jounal,
                            'debit':debit,
                            'credit': credit,
                            'status': st,

                            
                        }
                        reportData.append(details)


                context = { 'cmp':cmp, 'data':data, 'reportData':reportData, 'totaldebit':totaldebit,'totalcredit':totalcredit,
                    'startDate':startDate, 'endDate':endDate,'status':status
                }
                       
                template_path = 'company/reports/Fin_journal_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_journal_Details'
                subject = f"Report_journal_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - journal Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_journel_report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_journel_report)
            
#End
#--------Arya E.R---Credit note details------#

def Fin_creditnoteReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totInv = 0
        totRecInv = 0
        totCrdNote = 0
        subTot = 0
        subTotWOCrd = 0

        cred = Fin_CreditNote.objects.filter(Company = cmp)

        cust = Fin_Customers.objects.filter(Company=cmp)
        
        for c in cust:
            customerName = c.first_name +" "+c.last_name
            count = 0
            sales = 0

            inv = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
            recInv = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')
            crd = Fin_CreditNote.objects.filter(Customer=c, status = 'Saved')

            for i in inv:
                sales += float(i.grandtotal)
                totInv += float(i.grandtotal)
                subTot += float(i.subtotal)
                subTotWOCrd += float(i.subtotal)

            for r in recInv:
                sales += float(r.grandtotal)
                totRecInv += float(r.grandtotal)
                subTot += float(r.subtotal)
                subTotWOCrd += float(r.subtotal)

            for n in crd:
                sales -= float(n.grandtotal)
                totCrdNote += float(n.grandtotal)
                subTot -= float(n.subtotal)

            count = len(inv) + len(recInv) + len(crd)

            details = {
                'name': customerName,
                'count':count,
                'sales':sales
            }

            reportData.append(details)

        totCust = len(cust)
        totSale = totInv + totRecInv - totCrdNote
        totSaleWOCrdNote = totInv + totRecInv

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'creditNotes':cred,
            'totalCustomers':totCust, 'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'totalCreditNote': totCrdNote,
            'subtotal':subTot, 'subtotalWOCredit':subTotWOCrd, 'totalSale':totSale, 'totalSaleWOCredit':totSaleWOCrdNote,
            'startDate':None, 'endDate':None 
        }
        return render(request,'company/reports/Fin_creditnotereport.html', context)
    else:
        return redirect('/')


def Fin_creditnoteReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
        cred = Fin_CreditNote.objects.filter(Company=cmp)



        if request.method == 'GET':
            trans = request.GET['transactions']
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            

            reportData = []
            totInv = 0
            totRecInv = 0
            totCrdNote = 0
            count = 0
            subTot = 0
            subTotWOCrd = 0
            cust = Fin_Customers.objects.filter(Company=cmp)


           

            if startDate == None or endDate == None:
                    if trans == "all":
                       
                        cred = Fin_CreditNote.objects.filter(Company=cmp)
                    elif trans == 'Saved':
                        cred = Fin_CreditNote.objects.filter(status = 'Saved')

                        
                    elif trans == 'Draft':
                        cred = Fin_CreditNote.objects.filter(status = 'Draft')
                  

                        
            else:
                     
                    if trans == 'all':
                        cred = Fin_CreditNote.objects.filter(Company=cmp, creditnote_date__range = [startDate, endDate])
                    elif trans == 'Saved':
                        cred = Fin_CreditNote.objects.filter(Company=cmp, creditnote_date__range = [startDate, endDate], status = 'Saved')

                       
                    elif trans == 'Draft':
                        cred = Fin_CreditNote.objects.filter(Company=cmp, creditnote_date__range = [startDate, endDate], status = 'Draft')

            if cred:
                    count += len(cred)
                    for n in cred:
                        totCrdNote += float(n.grandtotal)

            details = {
                    'count':count,
            }

            reportData.append(details)

            totCust = len(cust)
           

           

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'creditNotes':cred,'totalCustomers':totCust,
               
                'startDate':startDate, 'endDate':endDate, 'transaction':trans,'totalCreditNote': totCrdNote,'reportData':reportData,
                
            }

      
            return render(request, 'company/reports/Fin_creditnotereport.html', context)
    else:
        return redirect('/')        


def Fin_sharecreditnoteReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
            cmp = com.company_id

        
        try:
            if request.method == 'POST':
                cred = Fin_CreditNote.objects.filter(Company = cmp)

                emails_string = request.POST['email_ids']

                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
            
                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                  

                reportData = []
                totInv = 0
                totRecInv = 0
                totCrdNote = 0
                subTot = 0
                subTotWOCrd = 0

                cust = Fin_Customers.objects.filter(Company=com)

                for c in cust:
                    customerName = c.first_name +" "+c.last_name
                    count = 0
                    sales = 0

                    if startDate == None or endDate == None:
                        if trans == "all":
                           
                            cred = Fin_CreditNote.objects.filter(Company=cmp)
                        elif trans == 'Saved':
                            cred = Fin_CreditNote.objects.filter(status = 'Saved')

                            
                        elif trans == 'Draft':
                            cred = Fin_CreditNote.objects.filter(status = 'Draft')

                          
                       
                    else:
                        if trans == 'all':
                            cred = Fin_CreditNote.objects.filter(Company=cmp, creditnote_date__range = [startDate, endDate])
                        elif trans == 'Saved':
                            cred = Fin_CreditNote.objects.filter(Company=cmp, creditnote_date__range = [startDate, endDate], status = 'Saved')

                           
                        elif trans == 'Draft':
                            cred = Fin_CreditNote.objects.filter(Company=cmp, creditnote_date__range = [startDate, endDate], status = 'Draft')

                                                                 
                    
                    if cred:
                        count += len(cred)
                        for n in cred:
                            totCrdNote += float(n.grandtotal)

                    details = {
                        'name': customerName,
                        'count':count,
                        'sales':sales
                    }

                    reportData.append(details)

                totCust = len(cust)
                totSale = totInv + totRecInv - totCrdNote
                totSaleWOCrdNote = totInv + totRecInv
              

                
            
                context = {'creditNotes':cred,'cmp':com, 'startDate':startDate,'endDate':endDate,'totalCreditNote': totCrdNote,
                'reportData': reportData,'totalCustomers': totCust, 'transaction': trans,}
                template_path = 'company/reports/Fin_creditnotereport_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_Creditnote'
                subject = f"Report_Creditnote"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Creditnote. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_creditnoteReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_creditnoteReport)  

#------End---------------#
# ------------------------------------ rec bill Report ------------------------------------
def Fin_recBill_report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        Recbill = Fin_Recurring_Bills.objects.filter(company=cmp)
        vendr = Fin_Vendors.objects.filter(Company=cmp)
       
        if Recbill:
            for s in Recbill:
                partyName = s.vendor.first_name +" "+s.vendor.last_name
                date = s.date
                ship_date = s.expected_shipment_date
                end_date = datetime.combine(s.expected_shipment_date, datetime.min.time())

                rbill =s.recurring_bill_number
                ordrno =s.purchase_order_number
                total = s.grand_total
                paid=s.advanceAmount_paid
                balance=s.balance
                st=s.status
                totalSales += float(s.grand_total)
                totalbalance += float(s.balance)
                if s.status == 'Draft':
                    st = 'Draft'
                elif s.advanceAmount_paid == 0 and end_date>currentDate:
                    st = 'Not paid'
                    
                elif s.advanceAmount_paid == s.grand_total:
                    st = 'fully paid'
                
                elif s.advanceAmount_paid > 0 and s.advanceAmount_paid<s.grand_total and end_date>currentDate:
                    st = 'partially paid'
                elif end_date<currentDate and s.advanceAmount_paid<=s.grand_total:
                    st = 'overdue'
                
                else:
                    st = s.status

                details = {
                    'date': date,
                    'name': partyName,
                    'ship_date':ship_date,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totvendr=len(vendr)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'totalbalance':totalbalance, 'totalSales':totalSales,'totcust':totvendr,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_rec_bill_report.html', context)
    else:
        return redirect('/')

def Fin_recbillCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
        status = request.GET.get('status')
        report = request.GET.get('billdate',None)



        currentDate = datetime.today()
        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        Recbill = Fin_Recurring_Bills.objects.filter(company=cmp)
        vendr = Fin_Vendors.objects.filter(Company=cmp)
       
        
        if startDate and endDate:
            Recbill = Recbill.filter(date__range=[startDate, endDate])
            
        if report:
            if report=='billdate':
                Recbill = Recbill.filter(date__range=[startDate, endDate])
            if report=='shipdate':
                Recbill = Recbill.filter(expected_shipment_date__range=[startDate, endDate])
              

        if status:
            if status == 'Draft':
                Recbill = Recbill.filter(status = 'Draft')
            elif status == 'fully paid':
                Recbill = Recbill.filter(advanceAmount_paid=F('grand_total'),status='Save')
                

            elif status == 'Not paid':
                Recbill = Recbill.filter(Q(advanceAmount_paid=0)  & Q(expected_shipment_date__gt=currentDate),status='Save')

            elif status == 'partially paid':
                Recbill = Recbill.filter(Q(advanceAmount_paid__gt=0)  & Q(advanceAmount_paid__lt=F('grand_total')) & Q(expected_shipment_date__gt=currentDate),status='Save')
                print(Recbill)
                print("5")
            elif status == 'overdue':
                Recbill = Recbill.filter((Q(expected_shipment_date__lte=currentDate) & Q(advanceAmount_paid__lt=F('grand_total')) ), status='Save')
                print("3")
                print(Recbill)

        for s in Recbill:
            partyName = s.vendor.first_name +" "+s.vendor.last_name
            date = s.date
            ship_date = s.expected_shipment_date
            end_date = datetime.combine(s.expected_shipment_date, datetime.min.time())

            rbill =s.recurring_bill_number
            ordrno =s.purchase_order_number
            total = s.grand_total
            paid=s.advanceAmount_paid
            balance=s.balance
            st=s.status
            totalSales += float(s.grand_total)
            totalbalance += float(s.balance)
            if s.status == 'Draft':
                st = 'Draft'
            elif s.advanceAmount_paid == 0 and end_date>currentDate:
                st = 'Not paid'
                
            elif s.advanceAmount_paid == s.grand_total:
                st = 'fully paid'
            
            elif s.advanceAmount_paid > 0 and s.advanceAmount_paid<s.grand_total and end_date>currentDate:
                st = 'partially paid'
            elif end_date<currentDate and s.advanceAmount_paid<=s.grand_total:
                st = 'overdue'
            
            else:
                st = s.status

            details = {
                'date': date,
                'name': partyName,
                'ship_date':ship_date,
                'rbill':rbill,
                'ordrno': ordrno,
                'total':total,
                'status':st,
                'balance':balance,
                
                
                
            }
            reportData.append(details)
            totvendr=len(vendr)

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,'totalbalance':totalbalance,
            'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status,'billdate':report
        }
        return render(request, 'company/reports/Fin_rec_bill_report.html', context)
    else:
        return redirect('/')

def Fin_shareREC_billDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                cust = Fin_Customers.objects.filter(Company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
             
                currentDate = datetime.today()


                reportData = []
                totalSales = 0
                totvendr=0
                totalbalance=0

                Recbill = Fin_Recurring_Bills.objects.filter(company=cmp)
                vendr = Fin_Vendors.objects.filter(Company=cmp)
       
        
                if startDate and endDate:
                    Recbill = Recbill.filter(date__range=[startDate, endDate])
                    print(Recbill)
                    print("1")
                

                if status:
                    if status == 'Draft':
                        Recbill = Recbill.filter(status = 'Draft')
                    elif status == 'fully paid':
                        Recbill = Recbill.filter(advanceAmount_paid=F('grand_total'),status='Save')
                      
                    elif status == 'Not paid':
                        Recbill = Recbill.filter(Q(advanceAmount_paid=0)  & Q(expected_shipment_date__gt=currentDate),status='Save')

                    elif status == 'partially paid':
                        Recbill = Recbill.filter(Q(advanceAmount_paid__gt=0)  & Q(advanceAmount_paid__lt=F('grand_total')) & Q(expected_shipment_date__gt=currentDate),status='Save')
                    
                    elif status == 'overdue':
                        Recbill = Recbill.filter((Q(expected_shipment_date__lte=currentDate) & Q(advanceAmount_paid__lt=F('grand_total')) ), status='Save')
                       

                for s in Recbill:
                    partyName = s.vendor.first_name +" "+s.vendor.last_name
                    date = s.date
                    ship_date = s.expected_shipment_date
                    end_date = datetime.combine(s.expected_shipment_date, datetime.min.time())

                    rbill =s.recurring_bill_number
                    ordrno =s.purchase_order_number
                    total = s.grand_total
                    paid=s.advanceAmount_paid
                    balance=s.balance
                    st=s.status
                    totalSales += float(s.grand_total)
                    totalbalance += float(s.balance)
                    if s.status == 'Draft':
                        st = 'Draft'
                    elif s.advanceAmount_paid == 0 and end_date>currentDate:
                        st = 'Not paid'
                        
                    elif s.advanceAmount_paid == s.grand_total:
                        st = 'fully paid'
                
                    elif s.advanceAmount_paid > 0 and s.advanceAmount_paid<s.grand_total and end_date>currentDate:
                        st = 'partially paid'
                    elif end_date<currentDate and s.advanceAmount_paid<=s.grand_total:
                        st = 'overdue'
                    
                    else:
                        st = s.status

                    details = {
                        'date': date,
                        'name': partyName,
                        'ship_date':ship_date,
                        'rbill':rbill,
                        'ordrno': ordrno,
                        'total':total,
                        'status':st,
                        'balance':balance,
                        
                        
                        
                    }
                    reportData.append(details)
                    totvendr=len(vendr)

                context = {'cmp': cmp, 'reportData': reportData,'totalbalance':totalbalance,'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status}
                template_path = 'company/reports/Fin_rec_bill_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_rec_bill_Details'
                subject = f"Report_rec_bill_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - recbill Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_recBill_report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_recBill_report)
            
#End
# sruthy-------#

def Fin_debitnotereport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totInv = 0
        totRecInv = 0
        totCrdNote = 0
        subTot = 0
        subTotWOCrd = 0
        totdebNote = 0 

        
        vendor = Fin_Vendors.objects.filter(Company=cmp)
        
        for v in vendor:
            vendorName = v.first_name +" "+v.last_name
            debit_note = Fin_Debit_Note.objects.filter(Company = cmp)
            debit_notes = Fin_Debit_Note.objects.filter(Company = cmp).values('Vendor').distinct().count()
            
            count = 0  # Initialize count variable
            if debit_note:
                count += len(debit_note)
                for n in debit_note:
                    totdebNote += float(n.grandtotal)

            details = {
                    'count':count,
                }
            reportData.append(details)


            totVendor = debit_notes

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
                'totalVendors': totVendor, 'DEBIT_NOTE': debit_note,
                'totalInvoice':totInv, 'totalRecInvoice':totRecInv, 'startDate':None, 'endDate':None,
                'subtotal':subTot, 'totdebitNote': totdebNote, 
                'subtotalWOCredit':subTotWOCrd, 'totalCreditNote': totCrdNote,
            
                
            }
            return render(request,'company/reports/Fin_debitnotereport.html', context)
    else:
        return redirect('/')


def Fin_Debitnotereport_Customized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        debit_note = Fin_Debit_Note.objects.filter(Company = cmp)

        
        if request.method == 'GET':
            custom = request.GET['transactions']
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            reportData = []
           
            totdebNote = 0
            

            vendor = Fin_Vendors.objects.filter(Company=cmp)


            if startDate == None or endDate == None:
                if custom == 'all':
                    debit_note = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__gte=startDate, debit_note_date__lte=endDate)
                elif custom == 'Saved':
                    debit_note = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__gte=startDate, debit_note_date__lte=endDate, status = 'Saved')
                elif custom == 'Draft':
                    debit_note = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__gte=startDate, debit_note_date__lte=endDate, status = 'Draft')
            else:
                    if custom == 'all':
                        debit_note = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__gte=startDate, debit_note_date__lte=endDate,)
                        debit_notes = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__gte=startDate, debit_note_date__lte=endDate,).values('Vendor').distinct()
                    elif custom == 'Saved':
                        debit_note = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__gte=startDate, debit_note_date__lte=endDate, status = 'Saved')
                        debit_notes = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__gte=startDate, debit_note_date__lte=endDate,status = 'Saved').values('Vendor').distinct()
                    elif custom == 'Draft':
                        debit_note = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__gte=startDate, debit_note_date__lte=endDate, status = 'Draft')
                        debit_notes = Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__gte=startDate, debit_note_date__lte=endDate,status = 'Draft').values('Vendor').distinct()

            
            count = 0  # Initialize count variable
            if debit_note:
                count += len(debit_note)
                for n in debit_note:
                    totdebNote += float(n.grandtotal)

            details = {
                    'count':count,
            }

            reportData.append(details)

            totVendor =len(debit_notes)

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
                'totdebitNote': totdebNote, 'DEBIT_NOTE': debit_note,
                'startDate':startDate, 'endDate':endDate, 'transaction':custom,'totalVendors':totVendor,
              
            }
            return render(request,'company/reports/Fin_debitnotereport.html', context)
    else:
        return redirect('/')



def Fin_sharedebitdetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com

        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        try:
            if request.method == 'POST':
                debit_note = Fin_CreditNote.objects.filter(Company = cmp)

                emails_string = request.POST['email_ids']

                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                
                custom = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
            
                totdebNote = 0
                    

                vendor = Fin_Vendors.objects.filter(Company=cmp)


                if startDate == None or endDate == None:
                    if custom == 'all':
                        debit_note = Fin_Debit_Note.objects.filter(Company = cmp)
                        debit_notes = Fin_Debit_Note.objects.filter(Company = cmp, ).values('Vendor').distinct().count()
                    elif custom == 'Saved':
                        debit_note = Fin_Debit_Note.objects.filter(Company = cmp,status = 'Saved')
                        debit_notes = Fin_Debit_Note.objects.filter(Company = cmp,status = 'Saved').values('Vendor').distinct().count()
                    elif custom == 'Draft':
                        debit_note = Fin_Debit_Note.objects.filter(Company = cmp,  status = 'Draft')
                        debit_notes = Fin_Debit_Note.objects.filter(Company = cmp, status = 'Draft').values('Vendor').distinct().count()
                else:
                        if custom == 'all':
                            debit_note = Fin_Debit_Note.objects.filter(Company = cmp, )
                            debit_notes = Fin_Debit_Note.objects.filter(Company = cmp, ).values('Vendor').distinct().count()
                        elif custom == 'Saved':
                            debit_note = Fin_Debit_Note.objects.filter(Company = cmp,  status = 'Saved')
                            debit_notes = Fin_Debit_Note.objects.filter(Company = cmp,status = 'Saved').values('Vendor').distinct().count()
                        elif custom == 'Draft':
                            debit_note = Fin_Debit_Note.objects.filter(Company = cmp,  status = 'Draft')
                            debit_notes = Fin_Debit_Note.objects.filter(Company = cmp, status = 'Draft').values('Vendor').distinct().count()

                    
                count = 0  # Initialize count variable
                if debit_note:
                    count += len(debit_note)
                    for n in debit_note:
                        totdebNote += float(n.grandtotal)

                details = {
                            'count':count,
                    }

                reportData.append(details)
                if debit_notes:
                    counts =  debit_notes
                    totVendor =counts
                else:
                    totVendor = 0

            context = {
                        'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
                        'totdebitNote': totdebNote, 'DEBIT_NOTE': debit_note,
                        'startDate':startDate, 'endDate':endDate, 'transaction':custom,'totalVendors':totVendor,
                    
                    }
            template_path = 'company/reports/Fin_Debitnotereport_Pdf.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Report_Debitnote'
            subject = f"Report_Debitnote"
            email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Debitnote. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)
                    
            messages.success(request, 'Report has been shared via email successfully..!')
            return redirect(Fin_debitnotereport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_debitnotereport)   
    
# end--------------
# ashikh--------------------------------------------------
def Fin_report_bill_details(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        bill = Fin_Purchase_Bill.objects.filter(company=cmp)
        vendr = Fin_Vendors.objects.filter(Company=cmp)
        
        if bill:
            for s in bill:
                partyName = s.vendor.first_name +" "+s.vendor.last_name
                date = s.bill_date
                ship_date = s.due_date
                end_date = datetime.combine(s.due_date, datetime.min.time())

                rbill =s.bill_no
                ordrno =s.porder_no
                total = s.grandtotal
                paid=s.paid
                balance=s.balance
                st=s.status
                totalSales += float(s.grandtotal)
                totalbalance += float(s.balance)
                if s.status == 'Draft':
                    st = 'Draft'
                elif int(s.paid) == 0 and end_date>currentDate:
                    st = 'Not paid'
                    
                elif int(s.paid) == int(s.grandtotal):
                    st = 'fully paid'
                
                elif int(s.paid) > 0 and int(s.paid)<int(s.grandtotal) and end_date>currentDate:
                    st = 'partially paid'
                elif end_date<currentDate and int(s.paid)<=int(s.grandtotal):
                    st = 'overdue'
                
                else:
                    st = s.status

                details = {
                    'date': date,
                    'name': partyName,
                    'ship_date':ship_date,
                    'rbill':rbill,
                    'ordrno': ordrno,
                    'total':total,
                    'status':st,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)
                totvendr=len(vendr)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'totalbalance':totalbalance, 'totalSales':totalSales,'totcust':totvendr,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_report_bill_details.html', context)
    else:
        return redirect('/')

def Fin_billCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
        status = request.GET.get('status')
        report = request.GET.get('billdate',None)

        currentDate = datetime.today()
        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        bill = Fin_Purchase_Bill.objects.filter(company=cmp)
        vendr = Fin_Vendors.objects.filter(Company=cmp)
       
        
        if startDate and endDate:
            bill = bill.filter(bill_date__range=[startDate, endDate])
 
        if report:
            if report=='billdate':
                bill = bill.filter(bill_date__range=[startDate, endDate])
    
            if report=='shipdate':
                bill = bill.filter(due_date__range=[startDate, endDate])
         

        if status:
            if status == 'Draft':
                bill = bill.filter(status = 'Draft')
            elif status == 'fully paid':
                bill = bill.filter(paid=F('grandtotal'),status='Save')
                
            elif status == 'Not paid':
                bill = bill.filter(Q(paid=0)  & Q(due_date__gt=currentDate),status='Save')

            elif status == 'partially paid':
                bill = bill.filter(Q(paid__gt=0)  & Q(paid__lt=F('grandtotal')) & Q(due_date__gt=currentDate),status='Save')
        
            elif status == 'overdue':
                bill = bill.filter((Q(due_date__lte=currentDate) | Q(paid__lt=F('grandtotal')) | Q(paid=0)), status='Save')
        

        for s in bill:
            partyName = s.vendor.first_name +" "+s.vendor.last_name
            date = s.bill_date
            ship_date = s.due_date
            end_date = datetime.combine(s.due_date, datetime.min.time())

            rbill =s.bill_no
            ordrno =s.porder_no
            total = s.grandtotal
            paid=s.paid
            balance=s.balance
            st=s.status
            totalSales += float(s.grandtotal)
            totalbalance += float(s.balance)
            if s.status == 'Draft':
                st = 'Draft'
            elif int(s.paid) == 0 and end_date>currentDate:
                st = 'Not paid'
                
            elif int(s.paid) == int(s.grandtotal):
                st = 'fully paid'
            
            elif int(s.paid) > 0 and int(s.paid)<int(s.grandtotal) and end_date>currentDate:
                st = 'partially paid'
            elif end_date<currentDate and int(s.paid)<=int(s.grandtotal):
                st = 'overdue'
            
            else:
                st = s.status

            details = {
                'date': date,
                'name': partyName,
                'ship_date':ship_date,
                'rbill':rbill,
                'ordrno': ordrno,
                'total':total,
                'status':st,
                'balance':balance,
                
                
                
            }
            reportData.append(details)
            totvendr=len(vendr)

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,'totalbalance':totalbalance,
            'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status,'billdate':report
        }
        return render(request, 'company/reports/Fin_report_bill_details.html', context)
    else:
        return redirect('/')
            
def Fin_share_billDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                cust = Fin_Customers.objects.filter(Company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                

                currentDate = datetime.today()


                reportData = []
                totalSales = 0
                totvendr=0
                totalbalance=0

                bill = Fin_Purchase_Bill.objects.filter(company=cmp)
                vendr = Fin_Vendors.objects.filter(Company=cmp)
       
        
                if startDate and endDate:
                    bill = bill.filter(bill_date__range=[startDate, endDate])

                

                if status:
                    if status == 'Draft':
                        bill = bill.filter(status = 'Draft')
                        print("d")
                    elif status == 'fully paid':
                        bill = bill.filter(paid=F('grandtotal'),status='Save')
                    elif status == 'Not paid':
                        bill = bill.filter(Q(paid=0)  & Q(due_date__gt=currentDate),status='Save')

                    elif status == 'partially paid':
                        bill = bill.filter(Q(paid__gt=0)  & Q(paid__lt=F('grand_total')) & Q(due_date__gt=currentDate),status='Save')
                       
                    elif status == 'overdue':
                        bill = bill.filter((Q(due_date__lte=currentDate) | Q(paid__lt=F('grand_total')) | Q(paid=0)), status='Save')
                        

                for s in bill:
                    partyName = s.vendor.first_name +" "+s.vendor.last_name
                    date = s.bill_date
                    ship_date = s.due_date
                    end_date = datetime.combine(s.due_date, datetime.min.time())

                    rbill =s.bill_no
                    ordrno =s.porder_no
                    total = s.grandtotal
                    paid_amt=s.paid
                    balance=s.balance
                    st=s.status
                    totalSales += float(s.grandtotal)
                    totalbalance += float(s.balance)
                    if s.status == 'Draft':
                        st = 'Draft'
                    elif int(s.paid) == 0 and end_date>currentDate:
                        st = 'Not paid'
                        
                    elif int(s.paid) == int(s.grandtotal):
                        st = 'fully paid'
                
                    elif int(s.paid) > 0 and int(s.paid)<int(s.grandtotal) and end_date>currentDate:
                        st = 'partially paid'
                    elif end_date<currentDate and int(s.paid)<=int(s.grandtotal):
                        st = 'overdue'
                    
                    else:
                        st = s.status

                    details = {
                        'date': date,
                        'name': partyName,
                        'ship_date':ship_date,
                        'rbill':rbill,
                        'ordrno': ordrno,
                        'total':total,
                        'status':st,
                        'balance':balance,
                        
                        
                        
                    }
                    reportData.append(details)
                    totvendr=len(vendr)

                context = {'cmp': cmp, 'reportData': reportData,'totalbalance':totalbalance,'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 'status': status}
                template_path = 'company/reports/Fin_bill_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_bill_Details'
                subject = f"Report_bill_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - bill Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_report_bill_details)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_report_bill_details)
#End
# ------------------------------------ vender balance Report ------------------------------------
def Fin_venderbalance(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        vend = Fin_Vendors.objects.filter(Company=cmp)
        
        venders_data = []
        total_balance1 = 0 
        invoice_balance1=0
        recurring_invoice_balance1=0
        available_credits1=0
        total_invoice_balance1=0
        totCust = 0

        # Initialize total balance outside the loop
        for vendr in vend:
            vendrName = vendr.first_name +" "+vendr.last_name

            PurchaseBill = Fin_Purchase_Bill.objects.filter(vendor=vendr, status='Save')
            Recurring_Bills = Fin_Recurring_Bills.objects.filter(vendor=vendr, status='Save')
            Debit_Note = Fin_Debit_Note.objects.filter(Vendor=vendr, status='Saved')
            print(Debit_Note)
            
            bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
            print(bill_balance)

            recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
            print(recurring_bill_balance)
            total_bill_balance = bill_balance + recurring_bill_balance
            print(total_bill_balance)

            available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)
            print(available_debits)
            
            total_balance = total_bill_balance - available_debits            
            # Update the total balance
            total_balance1 += total_balance
            totCust = len(vend)
            invoice_balance1 += bill_balance
            recurring_invoice_balance1 += recurring_bill_balance
            available_credits1 += available_debits
            total_invoice_balance1+=total_bill_balance
            print(available_credits1)



            venders_data.append({
                'name': vendrName,                
                'invoice_balance': total_bill_balance,
                'available_credits': available_debits,
                'total_balance': total_balance,
            })
        
        context = {
            'cust':vend,
            'customers': venders_data,
            'total_balance1': total_balance1,
            'cmp':cmp,
            'allmodules':allmodules,
            'com':com,
            'data':data,
            'totalCustomers':totCust,
            'totalInvoice':invoice_balance1,
            'totalRecInvoice':recurring_invoice_balance1, 
            'totalCreditNote': available_credits1,
            'invoice_balance':total_bill_balance,
            'available_credits': available_debits,
            'total_invoice_balance':total_invoice_balance1,
            'invoice_c_present': True,
            'cnote_c_present': True,

        }
        
        return render(request, 'company/reports/Fin_vender_balance.html', context)
    else:
        return redirect('/')

def Fin_share_vendor_BalenceReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                vend = Fin_Vendors.objects.filter(Company=com)
        
                venders_data = []
                total_balance1 = 0 
                invoice_balance1=0
                recurring_invoice_balance1=0
                available_credits1=0
                total_invoice_balance1=0
                totCust = 0

                # Initialize total balance outside the loop
                for vendr in vend:
                    vendrName = vendr.first_name +" "+vendr.last_name

                    PurchaseBill = Fin_Purchase_Bill.objects.filter(vendor=vendr, status='Save')
                    Recurring_Bills = Fin_Recurring_Bills.objects.filter(vendor=vendr, status='Save')
                    Debit_Note = Fin_Debit_Note.objects.filter(Vendor=vendr, status='Saved')
                    print(Debit_Note)
                    
                    bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
                    print(bill_balance)

                    recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
                    print(recurring_bill_balance)
                    total_bill_balance = bill_balance + recurring_bill_balance
                    print(total_bill_balance)

                    available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)
                    print(available_debits)
                    
                    total_balance = total_bill_balance - available_debits            
                    # Update the total balance
                    total_balance1 += total_balance
                    totCust = len(vend)
                    invoice_balance1 += bill_balance
                    recurring_invoice_balance1 += recurring_bill_balance
                    available_credits1 += available_debits
                    total_invoice_balance1+=total_bill_balance
                    print(available_credits1)



                    venders_data.append({
                        'name': vendrName,                
                        'invoice_balance': total_bill_balance,
                        'available_credits': available_debits,
                        'total_balance': total_balance,
                    })
                
                context = {
                        'cust':vend,
                        'customers': venders_data,
                        'total_balance1': total_balance1,
                        'cmp':com,
                        'data':data,
                        'totalCustomers':totCust,
                        'totalInvoice':invoice_balance1,
                        'totalRecInvoice':recurring_invoice_balance1, 
                        'totalCreditNote': available_credits1,
                        'invoice_balance':total_bill_balance,
                        'available_credits': available_debits,
                        'total_invoice_balance':total_invoice_balance1,
                        'invoice_c_present': True,
                        'cnote_c_present': True,

                    }
            

                template_path = 'company/reports/Fin_vender_balence_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_VendorBalance'
                subject = f"Report_VendorBalance"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Report VendorBalance. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_venderbalance)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_venderbalance)


def Fin_vendorbalence_report_customized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        vend = Fin_Vendors.objects.filter(Company=cmp)
        
        venders_data = []
        total_balance1 = 0 
        invoice_balance1=0
        recurring_invoice_balance1=0
        available_credits1=0
        total_invoice_balance1=0
        totCust = 0
        recurring_bill_balance = 0
        total_bill_balance = 0
        available_debits = 0

        # Get the start date from POST data with a default value of None
     
        if 'from_date' in request.POST:
            start_date_str = request.POST['from_date']
        else:
            start_date_str = None
        print(start_date_str)
        if 'to_date' in request.POST:
            end_date_str = request.POST['to_date']
        else:
            end_date_str = None
        
        print(end_date_str)
        

        # Check if 'bills' is present in POST data
        if 'bills' in request.POST:
            invoice_c = request.POST['bills']
        else:
            invoice_c = ''

        # Check if 'dnote' is present in POST data
        if 'dnote' in request.POST:
            cnote_c = request.POST['dnote']
        else:
            cnote_c = ''

        # Check if 'transactions' is present in POST data
        if 'transactions' in request.POST:
            name = request.POST['transactions']
        else:
            name = None
        print(name)

        # Convert start_date and end_date strings to datetime objects
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d') if start_date_str else None
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d') if end_date_str else None
        print(start_date)
        print(end_date)
        if name == 'all':
            for vendr in vend:
                vendrName = vendr.first_name +" "+vendr.last_name

                PurchaseBill = Fin_Purchase_Bill.objects.filter(vendor=vendr, status='Save')
                Recurring_Bills = Fin_Recurring_Bills.objects.filter(vendor=vendr, status='Save')
                Debit_Note = Fin_Debit_Note.objects.filter(Vendor=vendr, status='Saved')

                # Filter invoices based on start_date and end_date if provided
                if start_date and end_date:
                    print("ok")
                    PurchaseBill = PurchaseBill.filter( bill_date__range=[start_date, end_date])
                    Recurring_Bills = Recurring_Bills.filter(date__range=[start_date, end_date])
                    Debit_Note = Debit_Note.filter( debit_note_date__range=[start_date, end_date])

                # Calculate invoice balance only if 'invoice_c_present' is true
                if invoice_c:
                    bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
                    
                    recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
                    total_bill_balance = bill_balance + recurring_bill_balance
                    available_debits = 0 
                    total_balance = total_bill_balance - available_debits

                if cnote_c:
                    available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)
                    bill_balance = 0  # Set invoice balance to 0
                    recurring_bill_balance = 0
                    total_bill_balance = 0
                    total_balance = total_bill_balance - available_debits

                if  invoice_c and cnote_c:
                    print("cnote_c andinv2")
                    bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
                    
                    recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
                    available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)
                    total_bill_balance = bill_balance + recurring_bill_balance

                    total_balance = total_bill_balance - available_debits

                    # Update the total balance
                total_balance1 += total_balance
                totCust = len(vend)
                invoice_balance1 += bill_balance
                recurring_invoice_balance1 += recurring_bill_balance
                available_credits1 += available_debits
                total_invoice_balance1 += total_bill_balance

                

                venders_data.append({
                        'name': vendrName,
                        'invoice_balance': total_bill_balance,
                        'available_credits': available_debits,
                        'total_balance': total_balance,
                    })

        else:
            for vendr in vend:
                vendrName = vendr.first_name +" "+vendr.last_name

                print(vendrName)

                # Check if the name matches the filter, if provided
                if name and name != vendrName:
                    print(name)
                    continue


                # Initialize total balance outside the loop
                for vendr in vend:
                    vendrName = vendr.first_name +" "+vendr.last_name

                    # Check if the name matches the filter, if provided
                    if name and name != vendrName:
                        continue

                    PurchaseBill = Fin_Purchase_Bill.objects.filter(vendor=vendr, status='Save')
                    Recurring_Bills = Fin_Recurring_Bills.objects.filter(vendor=vendr, status='Save')
                    Debit_Note = Fin_Debit_Note.objects.filter(Vendor=vendr, status='Saved')
                    print(Debit_Note)

                    # Filter invoices based on start_date and end_date if provided
                    if start_date and end_date:
                        print("ok")
                        PurchaseBill = PurchaseBill.filter( bill_date__range=[start_date, end_date])
                        Recurring_Bills = Recurring_Bills.filter(date__range=[start_date, end_date])
                        Debit_Note = Debit_Note.filter( debit_note_date__range=[start_date, end_date])

                    # Calculate invoice balance only if 'bills' is true
                    if invoice_c:
                        print("invc")
                        bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
                        recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
                        total_bill_balance = bill_balance + recurring_bill_balance
                        available_debits = 0  # Set credit note balance to 0
                    if cnote_c:
                        print("cnote_c")
                        available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)
                        bill_balance = 0  # Set invoice balance to 0
                        recurring_bill_balance = 0
                        total_bill_balance = 0
                    if cnote_c and invoice_c:
                        print("cnote_c andinv")
                        bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
                        recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
                        total_bill_balance = bill_balance + recurring_bill_balance

                        available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)

                    total_balance = total_bill_balance - available_debits

                    # Update the total balance
                    total_balance1 += total_balance
                    totCust = len(vend)
                    invoice_balance1 += bill_balance
                    recurring_invoice_balance1 += recurring_bill_balance
                    available_credits1 += available_debits
                    total_invoice_balance1 += total_bill_balance

                    venders_data.append({
                        'name': vendrName,
                        'invoice_balance': total_bill_balance,
                        'available_credits': available_debits,
                        'total_balance': total_balance,
                    })

        context = {
            'cust':vend,
            'customers': venders_data,
            'total_balance1': total_balance1,
            'cmp': cmp,
            'allmodules': allmodules,
            'com': com,
            'data': data,
            'totalCustomers': totCust,
            'totalInvoice': invoice_balance1,
            'totalRecInvoice': recurring_invoice_balance1,
            'totalCreditNote': available_credits1,
            'invoice_balance': total_bill_balance,
            'available_credits': available_debits,
            'total_invoice_balance': total_invoice_balance1,
            'start_date': start_date_str,  # Pass start_date to the template
            'end_date': end_date_str,  # Pass end_date to the template
            'name': name,  # Pass name to the template
            'invoice_c_present': bool(invoice_c),
            'cnote_c_present': bool(cnote_c),
        }

        return render(request, 'company/reports/Fin_vender_balance.html', context)
    else:
        return redirect('/')
        
#End
# ------------------------------------ alltransactions Report ------------------------------------
def alltransactions(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

     

        reportData = []
        totMoneybal = 0
        totMoney = 0
        bill = Fin_Purchase_Bill.objects.filter(company=cmp)
        if bill:
            for s in bill:
                partyName = s.vendor.first_name +" "+s.vendor.last_name
                date = s.bill_date
                ref = s.bill_no
                type = 'Bill'
                total = s.grandtotal
                balance = s.balance
                paid = s.paid
                totMoney += float(s.grandtotal)
                totMoneybal+=float(s.balance)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        po = Fin_Purchase_Order.objects.filter(Company=cmp)
        if po:
            for s in po:
                partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                date = s.purchase_order_date
                ref = s.purchase_order_no
                type = 'Purchase Order'
                total = s.grandtotal
                balance = s.balance
                paid = s.paid_off
                totMoney += float(s.grandtotal)
                totMoneybal+=float(s.balance)                

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        recbill = Fin_Recurring_Bills.objects.filter(company=cmp)
        if recbill:
            for s in recbill:
                partyName = s.vendor.first_name +" "+s.vendor.last_name
                date = s.date
                ref = s.recurring_bill_number
                type = 'Recurring Bills'
                total = s.grand_total
                balance = s.balance
                paid = s.advanceAmount_paid
                totMoney += float(s.grand_total)
                totMoneybal+=float(s.balance)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        dbNote = Fin_Debit_Note.objects.filter(Company = cmp)
        if dbNote:
            for d in dbNote:
                partyName = d.Vendor.first_name +" "+d.Vendor.last_name
                date = d.debit_note_date
                ref = d.debit_note_number
                type = 'Debit Note'
                total = d.grandtotal
                paid =d.paid
                balance=d.balance
                totMoney += float(d.grandtotal)
                totMoneybal+=float(d.balance)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        inv = Fin_Invoice.objects.filter(Company = cmp)
        if inv:
            for i in inv:
                partyName = i.Customer.first_name +" "+i.Customer.last_name
                date = i.invoice_date
                ref = i.invoice_no
                type = 'Invoice'
                total = i.grandtotal
                paid =i.paid_off
                balance=i.balance
                totMoney += float(i.grandtotal)
                totMoneybal+=float(i.balance)
                
                

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)

        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)
        if recInv:
            for r in recInv:
                partyName = r.Customer.first_name +" "+r.Customer.last_name
                date = r.start_date
                ref = r.rec_invoice_no
                type = 'Recurring Invoice'
                total = r.grandtotal
                paid =r.paid_off
                balance=r.balance
                totMoney += float(r.grandtotal)
                totMoneybal+=float(r.balance)


                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)

        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp)
        if rtInv:
            for rt in rtInv:
                partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                date = rt.Retainer_Invoice_date
                ref = rt.Retainer_Invoice_number
                type = 'Retainer Invoice'
                total = rt.Grand_total
                paid =rt.Paid_amount
                balance=rt.Balance
                totMoney += float(rt.Grand_total)
                totMoneybal+=float(rt.Balance)
                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)

        est = Fin_Estimate.objects.filter(Company=cmp)
        if est:
            for s in est:
                partyName = s.Customer.first_name +" "+s.Customer.last_name
                date = s.estimate_date
                ref = s.estimate_no
                type = 'Estimate'
                total = s.grandtotal
                balance = s.balance
                paid = 0
                totMoney += float(s.grandtotal)
                totMoneybal+=float(s.balance)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        cNote = Fin_CreditNote.objects.filter(Company = cmp)
        if cNote:
            for note in cNote:
                partyName = note.Customer.first_name +" "+note.Customer.last_name
                date = note.creditnote_date
                ref = note.creditnote_number
                type = 'Credit Note'
                total = note.grandtotal
                balance = note.balance
                paid = note.paid
                totMoney += float(note.grandtotal)
                totMoneybal+=float(note.balance)
                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                    
                }
                reportData.append(details)
        sOrder = Fin_Sales_Order.objects.filter(Company=cmp)
        if sOrder:
            for s in sOrder:
                partyName = s.Customer.first_name +" "+s.Customer.last_name
                date = s.sales_order_date
                ref = s.sales_order_no
                type = 'Sales Order'
                total = s.grandtotal
                paid =s.paid_off
                balance=s.balance
                totMoney += float(s.grandtotal)
                totMoneybal+=float(s.balance)
                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        pmade = Fin_PaymentMade.objects.filter(Company=cmp)
        if pmade:
            for s in pmade:
                partyName = s.vendor.first_name +" "+s.vendor.last_name
                date = s.payment_date
                ref = s.payment_number
                type = 'Payment Made'
                total = 0
                paid =s.total_payment
                balance=s.total_balance
                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        prec = Fin_Payment_Received.objects.filter(company=cmp)
        if prec:
            for s in prec:
                partyName = s.customer.first_name +" "+s.customer.last_name
                date = s.payment_date
                ref = s.payment_no
                type = 'Payment Received'
                total = s.total_amount
                paid =s.total_payment
                balance=s.total_balance
              
                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        exp = Fin_Expense.objects.filter(Company=cmp)
        if exp:
            for s in exp:
                partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                date = s.expense_date
                ref = s.expense_no
                type = 'Expense'
                total = s.amount
                balance = 0
                paid = 0
                totMoney += float(s.amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        dcn = Fin_Delivery_Challan.objects.filter(Company=cmp)
        if dcn:
            for s in dcn:
                partyName = s.Customer.first_name +" "+s.Customer.last_name
                date = s.challan_date
                ref = s.challan_no
                type = 'Delivery Challan'
                total = s.grandtotal
                balance = s.balance



                paid = 0
                totMoney += float(s.grandtotal)
                totMoneybal+=float(s.balance)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance
                }
                reportData.append(details)
        

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'startDate':None, 'endDate':None, 'totMoney':totMoney, 'totMoneybal':totMoneybal,}
        return render(request,'company/reports/Fin_alltransactions.html', context)
    else:
        return redirect('/')

def Fin_AlltransactionsCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            type = request.GET['status']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            reportData = []
            totMoneybal = 0
            totMoney = 0
            if type == 'all':
                bill = Fin_Purchase_Bill.objects.filter(company=cmp,bill_date__range = [startDate, endDate])
                if bill:
                    for s in bill:
                        partyName = s.vendor.first_name +" "+s.vendor.last_name
                        date = s.bill_date
                        ref = s.bill_no
                        type = 'Bill'
                        total = s.grandtotal
                        balance = s.balance
                        paid = s.paid
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                po = Fin_Purchase_Order.objects.filter(Company=cmp,purchase_order_date__range = [startDate, endDate])
                if po:
                    for s in po:
                        partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                        date = s.purchase_order_date
                        ref = s.purchase_order_no
                        type = 'Purchase Order'
                        total = s.grandtotal
                        balance = s.balance
                        paid = s.paid_off
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)                

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                recbill = Fin_Recurring_Bills.objects.filter(company=cmp,date__range = [startDate, endDate])
                if recbill:
                    for s in recbill:
                        partyName = s.vendor.first_name +" "+s.vendor.last_name
                        date = s.date
                        ref = s.recurring_bill_number
                        type = 'Recurring Bills'
                        total = s.grand_total
                        balance = s.balance
                        paid = s.advanceAmount_paid
                        totMoney += float(s.grand_total)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                dbNote = Fin_Debit_Note.objects.filter(Company = cmp,debit_note_date__range = [startDate, endDate])
                if dbNote:
                    for d in dbNote:
                        partyName = d.Vendor.first_name +" "+d.Vendor.last_name
                        date = d.debit_note_date
                        ref = d.debit_note_number
                        type = 'Debit Note'
                        total = d.grandtotal
                        paid =d.paid
                        balance=d.balance
                        totMoney += float(d.grandtotal)
                        totMoneybal+=float(d.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                inv = Fin_Invoice.objects.filter(Company = cmp,invoice_date__range = [startDate, endDate])
                if inv:
                    for i in inv:
                        partyName = i.Customer.first_name +" "+i.Customer.last_name
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'Invoice'
                        total = i.grandtotal
                        paid =i.paid_off
                        balance=i.balance
                        totMoney += float(i.grandtotal)
                        totMoneybal+=float(i.balance)
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)

                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp,start_date__range = [startDate, endDate])
                if recInv:
                    for r in recInv:
                        partyName = r.Customer.first_name +" "+r.Customer.last_name
                        date = r.start_date
                        ref = r.rec_invoice_no
                        type = 'Recurring Invoice'
                        total = r.grandtotal
                        paid =r.paid_off
                        balance=r.balance
                        totMoney += float(r.grandtotal)
                        totMoneybal+=float(r.balance)


                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)

                rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp,Retainer_Invoice_date__range = [startDate, endDate])
                if rtInv:
                    for rt in rtInv:
                        partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'Retainer Invoice'
                        total = rt.Grand_total
                        paid =rt.Paid_amount
                        balance=rt.Balance
                        totMoney += float(rt.Grand_total)
                        totMoneybal+=float(rt.Balance)
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)

                est = Fin_Estimate.objects.filter(Company=cmp,estimate_date__range = [startDate, endDate])
                if est:
                    for s in est:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.estimate_date
                        ref = s.estimate_no
                        type = 'Estimate'
                        total = s.grandtotal
                        balance = s.balance
                        paid = 0
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                cNote = Fin_CreditNote.objects.filter(Company = cmp,creditnote_date__range = [startDate, endDate])
                if cNote:
                    for note in cNote:
                        partyName = note.Customer.first_name +" "+note.Customer.last_name
                        date = note.creditnote_date
                        ref = note.creditnote_number
                        type = 'Credit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        totMoney += float(note.grandtotal)
                        totMoneybal+=float(note.balance)
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                            
                        }
                        reportData.append(details)
                sOrder = Fin_Sales_Order.objects.filter(Company=cmp,sales_order_date__range = [startDate, endDate])
                if sOrder:
                    for s in sOrder:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.sales_order_date
                        ref = s.sales_order_no
                        type = 'Sales Order'
                        total = s.grandtotal
                        paid =s.paid_off
                        balance=s.balance
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                pmade = Fin_PaymentMade.objects.filter(Company=cmp,payment_date__range = [startDate, endDate])
                if pmade:
                    for s in pmade:
                        partyName = s.vendor.first_name +" "+s.vendor.last_name
                        date = s.payment_date
                        ref = s.payment_number
                        type = 'Payment Made'
                        total = 0
                        paid =s.total_payment
                        balance=s.total_balance
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                prec = Fin_Payment_Received.objects.filter(company=cmp,payment_date__range = [startDate, endDate])
                if prec:
                    for s in prec:
                        partyName = s.customer.first_name +" "+s.customer.last_name
                        date = s.payment_date
                        ref = s.payment_no
                        type = 'Payment Received'
                        total = s.total_amount
                        paid =s.total_payment
                        balance=s.total_balance
                    
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                exp = Fin_Expense.objects.filter(Company=cmp,expense_date__range = [startDate, endDate])
                if exp:
                    for s in exp:
                        partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                        date = s.expense_date
                        ref = s.expense_no
                        type = 'Expense'
                        total = s.amount
                        balance = 0
                        paid = 0
                        totMoney += float(s.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                dcn = Fin_Delivery_Challan.objects.filter(Company=cmp,challan_date__range = [startDate, endDate])
                if dcn:
                    for s in dcn:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.challan_date
                        ref = s.challan_no
                        type = 'Delivery Challan'
                        total = s.grandtotal
                        balance = s.balance



                        paid = 0
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            
            bill = Fin_Purchase_Bill.objects.filter(company=cmp,bill_date__range = [startDate, endDate])
            
            if type == 'Bill':

                if bill:
                    for s in bill:
                        partyName = s.vendor.first_name +" "+s.vendor.last_name
                        date = s.bill_date
                        ref = s.bill_no
                        type = 'Bill'
                        total = s.grandtotal
                        balance = s.balance
                        paid = s.paid
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            po = Fin_Purchase_Order.objects.filter(Company=cmp,purchase_order_date__range = [startDate, endDate])
            
            if type == 'Purchase':
                if po:
                    for s in po:
                        partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                        date = s.purchase_order_date
                        ref = s.purchase_order_no
                        type = 'Purchase Order'
                        total = s.grandtotal
                        balance = s.balance
                        paid = s.paid_off
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            recbill = Fin_Recurring_Bills.objects.filter(company=cmp,date__range = [startDate, endDate])
            
            if type == 'Recurring Bill':
                if recbill:
                    for s in recbill:
                        partyName = s.vendor.first_name +" "+s.vendor.last_name
                        date = s.date
                        ref = s.recurring_bill_number
                        type = 'Recurring Bills'
                        total = s.grand_total
                        balance = s.balance
                        paid = s.advanceAmount_paid
                        totMoney += float(s.grand_total)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            dbNote = Fin_Debit_Note.objects.filter(Company = cmp,debit_note_date__range = [startDate, endDate])
            
            if type == 'Debit Note':
                if dbNote:
                    for d in dbNote:
                        partyName = d.Vendor.first_name +" "+d.Vendor.last_name
                        date = d.debit_note_date
                        ref = d.debit_note_number
                        type = 'Debit Note'
                        total = d.grandtotal
                        paid =d.paid
                        balance=d.balance
                        totMoney += float(d.grandtotal)
                        totMoneybal+=float(d.balance)


                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            inv = Fin_Invoice.objects.filter(Company = cmp,invoice_date__range = [startDate, endDate])
            
            if type == 'Invoice':
                if inv:
                    for i in inv:
                        partyName = i.Customer.first_name +" "+i.Customer.last_name
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'Invoice'
                        total = i.grandtotal
                        paid =i.paid_off
                        balance=i.balance
                        totMoney += float(i.grandtotal)
                        totMoneybal+=float(i.balance)

                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)

            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp,start_date__range = [startDate, endDate])
            
            if type == 'Recurring Invoices':
                if recInv:
                    for r in recInv:
                        partyName = r.Customer.first_name +" "+r.Customer.last_name
                        date = r.start_date
                        ref = r.rec_invoice_no
                        type = 'Recurring Invoice'
                        total = r.grandtotal
                        paid =r.paid_off
                        balance=r.balance
                        totMoney += float(r.grandtotal)
                        totMoneybal+=float(r.balance)



                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)

            rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp,Retainer_Invoice_date__range = [startDate, endDate])
           
            if type == 'Retainer Invoices':
                if rtInv:
                    for rt in rtInv:
                        partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'Retainer Invoice'
                        total = rt.Grand_total
                        paid =rt.Paid_amount
                        balance=rt.Balance
                        totMoney += float(rt.Grand_total)
                        totMoneybal+=float(rt.Balance)


                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)

            est = Fin_Estimate.objects.filter(Company=cmp,estimate_date__range = [startDate, endDate])
            
            if type == 'Estimate':

                if est:
                    for s in est:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.estimate_date
                        ref = s.estimate_no
                        type = 'Estimate'
                        total = s.grandtotal
                        balance = s.balance
                        paid = 0
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            cNote = Fin_CreditNote.objects.filter(Company = cmp,creditnote_date__range = [startDate, endDate])
            
            if type == 'Credit Note':
                if cNote:
                    for note in cNote:
                        partyName = note.Customer.first_name +" "+note.Customer.last_name
                        date = note.creditnote_date
                        ref = note.creditnote_number
                        type = 'Credit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        totMoney += float(note.grandtotal)
                        totMoneybal+=float(note.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)
            sOrder = Fin_Sales_Order.objects.filter(Company=cmp,sales_order_date__range = [startDate, endDate])
            
            if type == 'Sales Order':

                if sOrder:
                    for s in sOrder:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.sales_order_date
                        ref = s.sales_order_no
                        type = 'Sales Order'
                        total = s.grandtotal
                        paid =s.paid_off
                        balance=s.balance
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)
                        
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            pmade = Fin_PaymentMade.objects.filter(Company=cmp,payment_date__range = [startDate, endDate])
            if type == 'Payment Made':
                if pmade:
                    for s in pmade:
                        partyName = s.vendor.first_name +" "+s.vendor.last_name
                        date = s.payment_date
                        ref = s.payment_number
                        type = 'Payment Made'
                        total = 0
                        paid =s.total_payment
                        balance=s.total_balance
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            prec = Fin_Payment_Received.objects.filter(company=cmp,payment_date__range = [startDate, endDate])
            if type == 'Payment Received':
                if prec:
                    for s in prec:
                        partyName = s.customer.first_name +" "+s.customer.last_name
                        date = s.payment_date
                        ref = s.payment_no
                        type = 'Payment Received'
                        total = s.total_amount
                        paid =s.total_payment
                        balance=s.total_balance
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            exp = Fin_Expense.objects.filter(Company=cmp,expense_date__range = [startDate, endDate])
            if type == 'Expense':

                if exp:
                    for s in exp:
                        partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                        date = s.expense_date
                        ref = s.expense_no
                        type = 'Expense'
                        total = s.amount
                        balance = 0
                        paid = 0
                        totMoney += float(s.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
            dcn = Fin_Delivery_Challan.objects.filter(Company=cmp,challan_date__range = [startDate, endDate])
            if type == 'Delivery Challan':
                if dcn:
                    for s in dcn:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.challan_date
                        ref = s.challan_no
                        type = 'Delivery Challan'
                        total = s.grandtotal
                        balance = s.balance

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
        

            


            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totMoney':totMoney, 'totMoneybal':totMoneybal,
                'startDate':startDate, 'endDate':endDate, 'currentDate':None,'status':type
            }
            return render(request,'company/reports/Fin_alltransactions.html', context)
    else:
        return redirect('/')

def Fin_alltransactionReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                type = request.POST['status']

                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None



                reportData = []
                totMoneybal = 0
                totMoney = 0
                bill = Fin_Purchase_Bill.objects.filter(company=cmp)
                if bill:
                    for s in bill:
                        partyName = s.vendor.first_name +" "+s.vendor.last_name
                        date = s.bill_date
                        ref = s.bill_no
                        type = 'Bill'
                        total = s.grandtotal
                        balance = s.balance
                        paid = s.paid
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                po = Fin_Purchase_Order.objects.filter(Company=cmp)
                if po:
                    for s in po:
                        partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                        date = s.purchase_order_date
                        ref = s.purchase_order_no
                        type = 'Purchase Order'
                        total = s.grandtotal
                        balance = s.balance
                        paid = s.paid_off
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)                

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                recbill = Fin_Recurring_Bills.objects.filter(company=cmp)
                if recbill:
                    for s in recbill:
                        partyName = s.vendor.first_name +" "+s.vendor.last_name
                        date = s.date
                        ref = s.recurring_bill_number
                        type = 'Recurring Bills'
                        total = s.grand_total
                        balance = s.balance
                        paid = s.advanceAmount_paid
                        totMoney += float(s.grand_total)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                dbNote = Fin_Debit_Note.objects.filter(Company = cmp)
                if dbNote:
                    for d in dbNote:
                        partyName = d.Vendor.first_name +" "+d.Vendor.last_name
                        date = d.debit_note_date
                        ref = d.debit_note_number
                        type = 'Debit Note'
                        total = d.grandtotal
                        paid =d.paid
                        balance=d.balance
                        totMoney += float(d.grandtotal)
                        totMoneybal+=float(d.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                inv = Fin_Invoice.objects.filter(Company = cmp)
                if inv:
                    for i in inv:
                        partyName = i.Customer.first_name +" "+i.Customer.last_name
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'Invoice'
                        total = i.grandtotal
                        paid =i.paid_off
                        balance=i.balance
                        totMoney += float(i.grandtotal)
                        totMoneybal+=float(i.balance)
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)

                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)
                if recInv:
                    for r in recInv:
                        partyName = r.Customer.first_name +" "+r.Customer.last_name
                        date = r.start_date
                        ref = r.rec_invoice_no
                        type = 'Recurring Invoice'
                        total = r.grandtotal
                        paid =r.paid_off
                        balance=r.balance
                        totMoney += float(r.grandtotal)
                        totMoneybal+=float(r.balance)


                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)

                rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp)
                if rtInv:
                    for rt in rtInv:
                        partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'Retainer Invoice'
                        total = rt.Grand_total
                        paid =rt.Paid_amount
                        balance=rt.Balance
                        totMoney += float(rt.Grand_total)
                        totMoneybal+=float(rt.Balance)
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)

                est = Fin_Estimate.objects.filter(Company=cmp)
                if est:
                    for s in est:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.estimate_date
                        ref = s.estimate_no
                        type = 'Estimate'
                        total = s.grandtotal
                        balance = s.balance
                        paid = 0
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                cNote = Fin_CreditNote.objects.filter(Company = cmp)
                if cNote:
                    for note in cNote:
                        partyName = note.Customer.first_name +" "+note.Customer.last_name
                        date = note.creditnote_date
                        ref = note.creditnote_number
                        type = 'Credit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        totMoney += float(note.grandtotal)
                        totMoneybal+=float(note.balance)
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                            
                        }
                        reportData.append(details)
                sOrder = Fin_Sales_Order.objects.filter(Company=cmp)
                if sOrder:
                    for s in sOrder:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.sales_order_date
                        ref = s.sales_order_no
                        type = 'Sales Order'
                        total = s.grandtotal
                        paid =s.paid_off
                        balance=s.balance
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                pmade = Fin_PaymentMade.objects.filter(Company=cmp)
                if pmade:
                    for s in pmade:
                        partyName = s.vendor.first_name +" "+s.vendor.last_name
                        date = s.payment_date
                        ref = s.payment_number
                        type = 'Payment Made'
                        total = 0
                        paid =s.total_payment
                        balance=s.total_balance
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                prec = Fin_Payment_Received.objects.filter(company=cmp)
                if prec:
                    for s in prec:
                        partyName = s.customer.first_name +" "+s.customer.last_name
                        date = s.payment_date
                        ref = s.payment_no
                        type = 'Payment Received'
                        total = s.total_amount
                        paid =s.total_payment
                        balance=s.total_balance
                    
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                exp = Fin_Expense.objects.filter(Company=cmp)
                if exp:
                    for s in exp:
                        partyName = s.Vendor.first_name +" "+s.Vendor.last_name
                        date = s.expense_date
                        ref = s.expense_no
                        type = 'Expense'
                        total = s.amount
                        balance = 0
                        paid = 0
                        totMoney += float(s.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)
                dcn = Fin_Delivery_Challan.objects.filter(Company=cmp)
                if dcn:
                    for s in dcn:
                        partyName = s.Customer.first_name +" "+s.Customer.last_name
                        date = s.challan_date
                        ref = s.challan_no
                        type = 'Delivery Challan'
                        total = s.grandtotal
                        balance = s.balance



                        paid = 0
                        totMoney += float(s.grandtotal)
                        totMoneybal+=float(s.balance)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance
                        }
                        reportData.append(details)


           

                
                context = {'cmp':cmp, 'reportData':reportData, 'totMoney':totMoney, 'totMoneybal':totMoneybal}
                template_path = 'company/reports/Fin_alltransactions_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_alltransactions'
                subject = f"Report_alltransactions"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - alltransactions. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(alltransactions)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(alltransactions)
            
#End            
#---Updates ----shemeem--------------------------------------------------------

def Fin_convertPurchaseOrderToRecBill(request,id):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        cmp = com.company_id

    allmodules = Fin_Modules_List.objects.get(company_id = cmp, status = 'New')

    vendors = Fin_Vendors.objects.filter(Company_id=cmp,status='Active')
    payment_terms = Fin_Company_Payment_Terms.objects.filter(Company_id=cmp)
    customers = Fin_Customers.objects.filter(Company_id=cmp,status='Active')
    items = Fin_Items.objects.filter(Company_id=cmp)
    units = Fin_Units.objects.filter(Company_id = cmp)
    acc = Fin_Chart_Of_Account.objects.filter(Q(account_type='Expense') | Q(account_type='Other Expense') | Q(account_type='Cost Of Goods Sold'), Company_id=cmp).order_by('account_name')
    repeat = Fin_CompanyRepeatEvery.objects.filter(company_id=cmp)
    pricelist_p = Fin_Price_List.objects.filter(Company_id=cmp,type='Purchase')
    bank = Fin_Banking.objects.filter(company_id=cmp,bank_status = 'Active')
    pricelist_s = Fin_Price_List.objects.filter(Company_id=cmp,type='Sales')

    nxtRb = ""
    lastRb = Fin_Recurring_Bills.objects.filter(company_id = cmp).last()
    if lastRb:
        rb_no = str(lastRb.recurring_bill_number)
        prefix = ''.join(filter(str.isalpha, rb_no))  # Extract prefix letters
        num_part = ''.join(filter(str.isdigit, rb_no))  # Extract numeric part
        rb_num = int(num_part) + 1 
        padded_rb_num = str(rb_num).zfill(len(num_part))
        nxtRb = prefix + padded_rb_num
        
    else:
        nxtRb = 'RB01'

    recurringBill = Fin_Recurring_Bill_Reference.objects.filter(company_id = cmp)
    if recurringBill:
        recurringBillLatest = recurringBill.latest('id')
        ref = recurringBillLatest.reference_number + 1
    else:
        ref = 1

    pbill = Fin_Purchase_Order.objects.get(id = id)
    pitm = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = pbill)
    todayDate = date.today().strftime("%Y-%m-%d")
    context = {
        'todayDate':todayDate,'cmp':cmp,'allmodules':allmodules,'vendors':vendors,'pTerms':payment_terms,'items':items,'customers':customers,'refData':ref,'accounts':acc,'units':units,'RepeatEvery':repeat,'list':pricelist_p,'list_s':pricelist_s,'nxtRB':nxtRb,'bank':bank,'com':com,'data':data, 'purchase':pbill, 'purchaseItems':pitm
    }
    return render(request,'company/Fin_Convert_PurchaseOrder_toRecBill.html',context)

def Fin_purchaseOrderConvertRecBill(request, id):
    s_id = request.session['s_id']
    data = Fin_Login_Details.objects.get(id = s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id = s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id = s_id)
        cmp = com.company_id
    
    purchaseOrder = Fin_Purchase_Order.objects.get(id = id)
    if request.method == 'POST':
        vendor = request.POST['select_vendor']
        vendor_name = request.POST['vendorName']
        vendor_email = request.POST['vendorEmail']
        vendor_billing_address = request.POST['venaddress']
        vendor_gst_type = request.POST['vendorGstType']
        vendor_gst_number = request.POST['vendorGstNumber']
        vendor_place_of_supply = request.POST['sourceOfSupply']
        recurring_bill_number = request.POST['RecurringBillNo'].upper()
        profile_namee = request.POST['ProfileName']
        reference_number = request.POST['ReferenceNo']
        startdate = request.POST['startDate']
        company_payment_terms = request.POST['payment_terms']
        expected_shipment_date = request.POST['endDate']
        purchase_order_number = request.POST['PurchaseOrderNo']
        payment_method = request.POST['paymentType']

        if len(request.POST['Cheque']) > 0:
            cheque_number = request.POST['Cheque'] 
        else:
            cheque_number = ''

        if len(request.POST['UPI']) > 0:
            upi_id = request.POST['UPI'] 
        else:
            upi_id = ''

        if request.POST['bankAccount'] != '':
            bank_account = request.POST['bankAccount'] 
        else:
            bank_account = ''

        if request.POST.get('priceListCheckbox') == 'on':
            pricelist = Fin_Price_List.objects.get(id = request.POST['priceListRB']) 
        else:
            pricelist = None
        
        
        customer = request.POST['Customer'] 
        customer_name = request.POST['customerName']
        customer_email = request.POST['customerEmail']
        customer_billing_address = request.POST['cusaddress']
        customer_gst_type = request.POST['GSTType']
        customer_gst_number = request.POST['customerGstNumber']
        customer_place_of_supply = request.POST['placeOfSupply']
        description = request.POST['Note']
        
        # if request.FILES['Document'] != '':
        #     RBDocument = request.FILES['recurringBillDocument']
        # else: 
        #     RBDocument = ''
        

        source = request.POST['sourceOfSupply']
        place = request.POST['companyPlace']  
        if source == cmp.State:
            cgst = request.POST['cgst']  
            sgst = request.POST['sgst']
            taxAmount_igst = request.POST['taxAmount']
        else:
            cgst = 0
            sgst = 0
            taxAmount_igst = request.POST['taxAmount']

        
        sub_total = request.POST['subTotal'] 

        if request.POST['shippingCharge'] :
            shipping_charge = request.POST['shippingCharge'] 
        else:
            shipping_charge = 0
        
        if request.POST['adjustment'] :
            adjustment = request.POST['adjustment'] 
        else:
            adjustment = 0

        grand_total = request.POST['grandTotal'] 
        
        if request.POST['paidAmount'] :
            advanceAmount_paid = request.POST['paidAmount'] 
        else:
            advanceAmount_paid = 0

        balance = request.POST['balanceDue']
        status = 'Save'
        repeat_every = request.POST['RepeatEvery']

        if Fin_Recurring_Bills.objects.filter(company=cmp,recurring_bill_number=recurring_bill_number,purchase_order_number=purchase_order_number).exists():
            res = f'<script>alert("Rec. Bill exists!");window.history.back();</script>'
            return HttpResponse(res)
        
        if Fin_Recurring_Bills.objects.filter(company=cmp,recurring_bill_number=recurring_bill_number).exists():
            res = f'<script>alert("Rec. Bill Number `{recurring_bill_number}` already exists, try another!");window.history.back();</script>'
            return HttpResponse(res)

        newBill = Fin_Recurring_Bills(vendor_id = vendor,recurring_bill_number = recurring_bill_number,reference_number = reference_number,
            purchase_order_number =purchase_order_number,payment_method = payment_method,
            description = description,sub_total = sub_total,cgst = cgst,bank_account=bank_account,cheque_number=cheque_number,upi_id=upi_id,
            sgst = sgst,taxAmount_igst = taxAmount_igst,shipping_charge = shipping_charge,adjustment = adjustment,
            status = status,grand_total = grand_total,advanceAmount_paid = advanceAmount_paid,balance = balance,customer_id = customer,
            company=cmp,profile_name=profile_namee,date = startdate,company_payment_terms_id = company_payment_terms,
            repeat_every_id=repeat_every,pricelist_id=pricelist,vendor_name=vendor_name,vendor_email=vendor_email,vendor_billing_address=vendor_billing_address,
            vendor_gst_type=vendor_gst_type,vendor_gst_number=vendor_gst_number,vendor_place_of_supply=vendor_place_of_supply,customer_name=customer_name,
            customer_email=customer_email,customer_billing_address=customer_billing_address,customer_gst_type=customer_gst_type,
            customer_gst_number=customer_gst_number,customer_place_of_supply=customer_place_of_supply,expected_shipment_date=expected_shipment_date
        )

               
        newBill.save()
        if len(request.FILES) != 0:
            newBill.attachment = request.FILES['Document']
            newBill.save()

        # Save rec Bill details to corresponding purchase order
        purchaseOrder.converted_to_rec_bill = newBill
        purchaseOrder.save()

        history = Fin_Recurring_Bill_History(date=date.today(),action='Created',company=cmp,login_details = data,recurring_bill =newBill)
        history.save()
        ref = Fin_Recurring_Bill_Reference(reference_number = reference_number ,company = cmp,login_details = cmp.Login_Id)
        ref.save()

        product = tuple(request.POST.getlist("Item[]"))
        qty = tuple(request.POST.getlist("qty[]"))
        total_texts = tuple(request.POST.getlist("total[]"))
        total = [float(value) for value in total_texts]
        discount = tuple(request.POST.getlist("discount[]"))
        hsn = request.POST.getlist("hsn[]")
        sac = request.POST.getlist("sac[]")
        price = request.POST.getlist("price[]")

        if source == cmp.State:
            tax = request.POST.getlist("gsttaxrate[]")
        else:
            tax = request.POST.getlist("igsttaxrate[]")

        if len(product) == len(qty) == len(discount) == len(total) == len(hsn)== len(sac) == len(tax) == len(price):
            group = zip(product, qty, discount, total, hsn, tax, price,sac)
            mapped=list(group)
            for itemsNew in mapped:

                if itemsNew[4] == '' or itemsNew[4] == 'None' :
                    hsn = None
                else:
                    hsn = int(itemsNew[4])
                if itemsNew[7] == '' or itemsNew[7] == 'None':
                    sac = None
                else:
                    sac = int(itemsNew[7])

                itemsTable = Fin_Recurring_Bill_Items(items_id = int(itemsNew[0]),quantity=int(itemsNew[1]),discount=float(itemsNew[2]),total=float(itemsNew[3]),hsn=hsn,sac=sac,tax_rate=int(itemsNew[5]),price=float(itemsNew[6]),recurring_bill_id=newBill.id,company=cmp)
                itemsTable.save()

        
        return redirect(Fin_purchaseOrder)
    else:
        return redirect(Fin_purchaseOrder)

def Fin_deliveryChallanTransactionHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        chl = Fin_Delivery_Challan.objects.get(id = id)
        his = Fin_Delivery_Challan_History.objects.filter(delivery_challan = chl)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_Delivery_Challan_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'challan':chl})
    else:
       return redirect('/')

def Fin_debitNoteTransactionHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        dbNote = Fin_Debit_Note.objects.get(id = id)
        his = Fin_Debite_Note_History.objects.filter(debit_note = dbNote)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_Debit_Note_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'debit':dbNote})
    else:
       return redirect('/')

def Fin_employeeLoanHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        loan = Fin_Loan.objects.get(id=id)

        his = Fin_Employee_Loan_History.objects.filter(employee_loan=loan)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_Employee_Loan_History.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'loan':loan})
    else:
       return redirect('/')

def Fin_LoanAccountTransactionHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        trans = loan_transaction.objects.get(id = id)

        his = Fin_LoanTransactionHistory.objects.filter(transaction = trans)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/loan_account/loan_account_trans_history.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'loan':trans.loan})
    else:
       return redirect('/')

def Fin_employeeLoanTransHistory(request,id):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        trans = Fin_Employee_Loan_Transactions.objects.get(id = id)

        his = Fin_Employee_Loan_Transactions_History.objects.filter(transaction = trans)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(Login_Id = s_id,status = 'New')
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            allmodules = Fin_Modules_List.objects.get(company_id = com.company_id,status = 'New')
        
        return render(request,'company/Fin_Employee_Loan_Trans_history.html',{'allmodules':allmodules,'com':com,'data':data,'history':his, 'loan':trans.employee_loan})
    else:
       return redirect('/')

#End
# Credit Note updations ----- Shemeem ------

def Fin_getBillNumbers(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        vend = request.GET['vendId']
        billType = request.GET['billType']

        bills = {}
        vendor = Fin_Vendors.objects.get(id = vend)
        if not vendor:
            return JsonResponse({'message':'Vendor Not Found, Try again..'})

        if billType == 'Bill':
            bls = Fin_Purchase_Bill.objects.filter(company = com, vendor = vendor)

            for option in bls:
                if not Fin_Debit_Note.objects.filter(Company = com, bill_number__iexact = option.bill_no).exists():
                    bills[option.id] = [option.id, option.bill_no]
                else:
                    continue
        
        if billType == 'Recurring Bill':
            bls = Fin_Recurring_Bills.objects.filter(company = com, vendor = vendor)

            for option in bls:
                if not Fin_Debit_Note.objects.filter(Company = com, bill_number__iexact = option.recurring_bill_number).exists():
                    bills[option.id] = [option.id, option.recurring_bill_number]
                else:
                    continue

        return JsonResponse(bills)
    else:
        return redirect('/')

def Fin_getBillNumbersEdit(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        vend = request.GET['vendId']
        billType = request.GET['billType']
        billNo = request.GET['billNum']

        bills = {}
        vendor = Fin_Vendors.objects.get(id = vend)
        if not vendor:
            return JsonResponse({'message':'Vendor Not Found, Try again..'})

        if billType == 'Bill':
            bls = Fin_Purchase_Bill.objects.filter(company = com, vendor = vendor)

            for option in bls:
                if option.bill_no == billNo:
                    bills[option.id] = [option.id, option.bill_no]

                if not Fin_Debit_Note.objects.filter(Company = com, bill_number__iexact = option.bill_no).exists():
                    bills[option.id] = [option.id, option.bill_no]
                else:
                    continue
        
        if billType == 'Recurring Bill':
            bls = Fin_Recurring_Bills.objects.filter(company = com, vendor = vendor)

            for option in bls:
                if option.recurring_bill_number == billNo:
                    bills[option.id] = [option.id, option.recurring_bill_number]
                if not Fin_Debit_Note.objects.filter(Company = com, bill_number__iexact = option.recurring_bill_number).exists():
                    bills[option.id] = [option.id, option.recurring_bill_number]
                else:
                    continue

        return JsonResponse(bills)
    else:
        return redirect('/')

def Fin_getBillDet(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        billId = request.GET['id']
        billType = request.GET['type']

        items = {}
        if billType == 'Bill':
            bill = Fin_Purchase_Bill.objects.get(id = billId)
            itms = Fin_Purchase_Bill_Item.objects.filter(pbill = bill)
            
            if not itms:
                return JsonResponse({'message':'Items Not Found for the selected number,\nAdd Items or Try again..'})

            for item in itms:
                items[item.id] = [item.id, item.item.name, item.item.id, item.item.hsn, item.item.sac, item.qty, item.item.current_stock, item.price, item.item.purchase_price, item.tax, item.discount, item.total]

        if billType == 'Recurring Bill':
            bill = Fin_Recurring_Bills.objects.get(id = billId)
            itms = Fin_Recurring_Bill_Items.objects.filter(recurring_bill = bill)
            if not itms:
                return JsonResponse({'message':'Items Not Found for the selected number,\nAdd Items or Try again..'})

            for item in itms:
                items[item.id] = [item.id, item.items.name, item.items.id, item.hsn, item.sac, item.quantity, item.items.current_stock, item.price, item.items.purchase_price, item.tax_rate, item.discount, item.total]

        return JsonResponse(items)
    else:
        return redirect('/')

def Fin_getBillPaidAmount(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id

        billId = request.GET['id']
        billType = request.GET['billType']

        paid = 0
        if billType == 'Bill':
            bill = Fin_Purchase_Bill.objects.get(id = billId)
            paid = bill.paid

        if billType == 'Recurring Bill':
            bill = Fin_Recurring_Bills.objects.get(id = billId)
            paid = bill.advanceAmount_paid

        return JsonResponse({'status':True, 'paid':paid})
    else:
        return redirect('/')


def Fin_adminTermExtensionRequests(request):
    noti = Fin_ANotification.objects.filter(status = 'New').order_by('-id','-Noti_date')
    req = Fin_ANotification.objects.filter(status = 'New', Title = 'Change Payment Terms').order_by('-id','-Noti_date')
    n = len(noti)
    context = {
        'noti':noti,
        'req':req,
        'n':n
    }
    return render(request,'Admin/Fin_AdminTermUpdateReq.html',context) 


def Fin_TermUpdate_Modules_Action(request): 
    if 's_id' in request.session:
        s_id = request.session['s_id']
        
        if request.method == 'POST':
            data = Fin_Login_Details.objects.get(id = s_id)
        
            com = Fin_Company_Details.objects.get(Login_Id = s_id)

            # -----ITEMS----

            Items = request.POST.get('c1')
            Price_List = request.POST.get('c2')
            Stock_Adjustment = request.POST.get('c3')


            # --------- CASH & BANK-----
            Cash_in_hand = request.POST.get('c4')
            Offline_Banking = request.POST.get('c5')
            Bank_Reconciliation = request.POST.get('c6')
            UPI = request.POST.get('c7')
            Bank_Holders = request.POST.get('c8')
            Cheque = request.POST.get('c9')
            Loan_Account = request.POST.get('c10')

            #  ------SALES MODULE -------
            Customers = request.POST.get('c11')
            Invoice  = request.POST.get('c12')
            Estimate = request.POST.get('c13')
            Sales_Order = request.POST.get('c14')
            Recurring_Invoice = request.POST.get('c15')
            Retainer_Invoice = request.POST.get('c16')
            Credit_Note = request.POST.get('c17')
            Payment_Received = request.POST.get('c18')
            Delivery_Challan = request.POST.get('c19')

            #  ---------PURCHASE MODULE--------- 
            Vendors = request.POST.get('c20') 
            Bills  = request.POST.get('c21')
            Recurring_Bills = request.POST.get('c22')
            Debit_Note = request.POST.get('c23')
            Purchase_Order = request.POST.get('c24')
            Expenses = request.POST.get('c25')
            Recurring_Expenses = request.POST.get('c26')
            Payment_Made = request.POST.get('c27')
            EWay_Bill = request.POST.get('c28')

            #  -------ACCOUNTS--------- 
            Chart_of_Accounts = request.POST.get('c29') 
            Manual_Journal = request.POST.get('c30')
            Reconcile  = request.POST.get('c36')


            # -------PAYROLL------- 
            Employees = request.POST.get('c31')
            Employees_Loan = request.POST.get('c32')
            Holiday = request.POST.get('c33') 
            Attendance = request.POST.get('c34')
            Salary_Details = request.POST.get('c35')

            modules = Fin_Modules_List(Items = Items,Price_List = Price_List,Stock_Adjustment = Stock_Adjustment,
                Cash_in_hand = Cash_in_hand,Offline_Banking = Offline_Banking,Bank_Reconciliation = Bank_Reconciliation ,
                UPI = UPI,Bank_Holders = Bank_Holders,Cheque = Cheque,Loan_Account = Loan_Account,
                Customers = Customers,Invoice = Invoice,Estimate = Estimate,Sales_Order = Sales_Order,
                Recurring_Invoice = Recurring_Invoice,Retainer_Invoice = Retainer_Invoice,Credit_Note = Credit_Note,
                Payment_Received = Payment_Received,Delivery_Challan = Delivery_Challan,
                Vendors = Vendors,Bills = Bills,Recurring_Bills = Recurring_Bills,Debit_Note = Debit_Note,
                Purchase_Order = Purchase_Order,Expenses = Expenses,Recurring_Expenses = Recurring_Expenses,
                Payment_Made = Payment_Made,EWay_Bill = EWay_Bill,
                Chart_of_Accounts = Chart_of_Accounts,Manual_Journal = Manual_Journal,Reconcile = Reconcile ,
                Employees = Employees,Employees_Loan = Employees_Loan,Holiday = Holiday,
                Attendance = Attendance,Salary_Details = Salary_Details,
                Login_Id = data,company_id = com,status = 'pending')
            
            modules.save()
            data1=Fin_Modules_List.objects.filter(company_id = com).update(update_action=1)

            if com.Registration_Type == 'self':
                noti = Fin_ANotification(Login_Id = data,Modules_List = modules,Title = "Module Updation",Discription = com.Company_name + " wants to update current Modules")
                noti.save()
            else:
                noti = Fin_DNotification(Distributor_id = com.Distributor_id,Login_Id = data,Modules_List = modules,Title = "Module Updation",Discription = com.Company_name + " wants to update current Modules")
                noti.save()   

            return redirect('Fin_CompanyReg')
        return redirect('Fin_Edit_Modules')
       
    else:
       return redirect('/')
       
#End
# ------------------------------------ gstr1 Report ------------------------------------
def gstr1(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        reportData = []
        cNotedata = []


        inv = Fin_Invoice.objects.filter(Company = cmp)
        if inv:
            for i in inv:
                partyName = i.Customer.first_name +" "+i.Customer.last_name
                date = i.invoice_date
                ref = i.invoice_no
                type = 'Invoice'
                total = i.grandtotal
                paid =i.paid_off
                balance=i.balance
                gstin=i.gstin
                invoice_no=i.invoice_no
                igst=i.igst
                sgst=i.sgst
                cgst=i.cgst
                place_of_supply=i.place_of_supply
                subtotal=i.subtotal
                tax_amount=i.tax_amount

                
                
                

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'invoice_no':invoice_no,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    
                }
                reportData.append(details)

        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)
        if recInv:
            for r in recInv:
                partyName = r.Customer.first_name +" "+r.Customer.last_name
                date = r.start_date
                ref = r.rec_invoice_no
                type = 'Recurring Invoice'
                total = r.grandtotal
                paid =r.paid_off
                balance=r.balance
                gstin=r.gstin
                igst=r.igst
                sgst=r.sgst
                cgst=r.cgst
                place_of_supply=r.place_of_supply
                subtotal=r.subtotal
                tax_amount=r.tax_amount

                
                
                

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    
                }
                reportData.append(details)
        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp)
        if rtInv:
            for rt in rtInv:
                partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                date = rt.Retainer_Invoice_date
                ref = rt.Retainer_Invoice_number
                type = 'Retainer Invoice'
                total = rt.Grand_total
                paid =rt.Paid_amount
                balance=rt.Balance
                gstin=rt.Customer_gstin
                igst=0
                sgst=0
                cgst=0
                place_of_supply=rt.Customer_place_of_supply
                subtotal=rt.Sub_total
                tax_amount=0

                
                
                

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount
                    
                }
                reportData.append(details)
        cNote = Fin_CreditNote.objects.filter(Company = cmp)
        if cNote:
            for note in cNote:
                partyName = note.Customer.first_name +" "+note.Customer.last_name
                date = note.creditnote_date
                ref = note.creditnote_number
                type = 'Credit Note'
                total = note.grandtotal
                balance = note.balance
                paid = note.paid
                gstin=note.gstin
                igst=note.igst
                sgst=note.sgst
                cgst=note.cgst
                place_of_supply=note.place_of_supply
                subtotal=note.subtotal
                tax_amount=note.tax_amount
                invoice_number=note.invoice_number
                invoice_type=note.invoice_type
                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    'invoice_number':invoice_number,
                    'invoice_type':invoice_type
                    
                }
                cNotedata.append(details)
                        
                        
        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'reportData':reportData,'cNotedata':cNotedata}
        return render(request,'company/reports/Fin_gstr1.html', context)
    else:
        return redirect('/')



def Fin_gstr1Customized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            type = request.GET['status']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            reportData = []
            cNotedata = []

            
            if type == 'all':


                inv = Fin_Invoice.objects.filter(Company = cmp,invoice_date__range = [startDate, endDate])
                if inv:
                    for i in inv:
                        partyName = i.Customer.first_name +" "+i.Customer.last_name
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'Invoice'
                        total = i.grandtotal
                        paid =i.paid_off
                        balance=i.balance
                        gstin=i.gstin
                        invoice_no=i.invoice_no
                        igst=i.igst
                        sgst=i.sgst
                        cgst=i.cgst
                        place_of_supply=i.place_of_supply
                        subtotal=i.subtotal
                        tax_amount=i.tax_amount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'invoice_no':invoice_no,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)

                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp,start_date__range = [startDate, endDate])
                if recInv:
                    for r in recInv:
                        partyName = r.Customer.first_name +" "+r.Customer.last_name
                        date = r.start_date
                        ref = r.rec_invoice_no
                        type = 'Recurring Invoice'
                        total = r.grandtotal
                        paid =r.paid_off
                        balance=r.balance
                        gstin=r.gstin
                        igst=r.igst
                        sgst=r.sgst
                        cgst=r.cgst
                        place_of_supply=r.place_of_supply
                        subtotal=r.subtotal
                        tax_amount=r.tax_amount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp,Retainer_Invoice_date__range = [startDate, endDate])
                if rtInv:
                    for rt in rtInv:
                        partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'Retainer Invoice'
                        total = rt.Grand_total
                        paid =rt.Paid_amount
                        balance=rt.Balance
                        gstin=rt.Customer_gstin
                        igst=0
                        sgst=0
                        cgst=0
                        place_of_supply=rt.Customer_place_of_supply
                        subtotal=rt.Sub_total
                        tax_amount=0

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount
                            
                        }
                        reportData.append(details)
                cNote = Fin_CreditNote.objects.filter(Company = cmp,creditnote_date__range = [startDate, endDate])
                if cNote:
                    for note in cNote:
                        partyName = note.Customer.first_name +" "+note.Customer.last_name
                        date = note.creditnote_date
                        ref = note.creditnote_number
                        type = 'Credit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        gstin=note.gstin
                        igst=note.igst
                        sgst=note.sgst
                        cgst=note.cgst
                        place_of_supply=note.place_of_supply
                        subtotal=note.subtotal
                        tax_amount=note.tax_amount
                        invoice_number=note.invoice_number
                        invoice_type=note.invoice_type
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            'invoice_number':invoice_number,
                            'invoice_type':invoice_type
                            
                        }
                        cNotedata.append(details)
                        
            if type == 'with GSTIN':


                inv = Fin_Invoice.objects.filter(Company = cmp,invoice_date__range = [startDate, endDate]).exclude(gstin='')
                

                if inv:
                    for i in inv:
                        partyName = i.Customer.first_name +" "+i.Customer.last_name
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'Invoice'
                        total = i.grandtotal
                        paid =i.paid_off
                        balance=i.balance
                        gstin=i.gstin
                        invoice_no=i.invoice_no
                        igst=i.igst
                        sgst=i.sgst
                        cgst=i.cgst
                        place_of_supply=i.place_of_supply
                        subtotal=i.subtotal
                        tax_amount=i.tax_amount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'invoice_no':invoice_no,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)

                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp,start_date__range = [startDate, endDate]).exclude(gstin='')

                if recInv:
                    for r in recInv:
                        partyName = r.Customer.first_name +" "+r.Customer.last_name
                        date = r.start_date
                        ref = r.rec_invoice_no
                        type = 'Recurring Invoice'
                        total = r.grandtotal
                        paid =r.paid_off
                        balance=r.balance
                        gstin=r.gstin
                        igst=r.igst
                        sgst=r.sgst
                        cgst=r.cgst
                        place_of_supply=r.place_of_supply
                        subtotal=r.subtotal
                        tax_amount=r.tax_amount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp,Retainer_Invoice_date__range = [startDate, endDate]).exclude(Customer_gstin='')

                if rtInv:
                    for rt in rtInv:
                        partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'Retainer Invoice'
                        total = rt.Grand_total
                        paid =rt.Paid_amount
                        balance=rt.Balance
                        gstin=rt.Customer_gstin
                        igst=0
                        sgst=0
                        cgst=0
                        place_of_supply=rt.Customer_place_of_supply
                        subtotal=rt.Sub_total
                        tax_amount=0

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount
                            
                        }
                        reportData.append(details)
                cNote = Fin_CreditNote.objects.filter(Company=cmp, creditnote_date__range=[startDate, endDate]).exclude(gstin='')
                if cNote:
                    for note in cNote:
                        partyName = note.Customer.first_name +" "+note.Customer.last_name
                        date = note.creditnote_date
                        ref = note.creditnote_number
                        type = 'Credit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        gstin=note.gstin
                        igst=note.igst
                        sgst=note.sgst
                        cgst=note.cgst
                        place_of_supply=note.place_of_supply
                        subtotal=note.subtotal
                        tax_amount=note.tax_amount
                        invoice_number=note.invoice_number
                        invoice_type=note.invoice_type
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            'invoice_number':invoice_number,
                            'invoice_type':invoice_type
                            
                        }
                        cNotedata.append(details)
            if type == 'without GSTIN':
                inv = Fin_Invoice.objects.filter(Company=cmp, invoice_date__range=[startDate, endDate], gstin__exact='')
                print(inv)
                print("ok")

                if inv:
                    for i in inv:
                        partyName = i.Customer.first_name +" "+i.Customer.last_name
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'Invoice'
                        total = i.grandtotal
                        paid =i.paid_off
                        balance=i.balance
                        gstin=i.gstin
                        invoice_no=i.invoice_no
                        igst=i.igst
                        sgst=i.sgst
                        cgst=i.cgst
                        place_of_supply=i.place_of_supply
                        subtotal=i.subtotal
                        tax_amount=i.tax_amount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'invoice_no':invoice_no,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)

                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp,start_date__range = [startDate, endDate], gstin__exact='')
                for r in recInv:
                        partyName = r.Customer.first_name +" "+r.Customer.last_name
                        date = r.start_date
                        ref = r.rec_invoice_no
                        type = 'Recurring Invoice'
                        total = r.grandtotal
                        paid =r.paid_off
                        balance=r.balance
                        gstin=r.gstin
                        igst=r.igst
                        sgst=r.sgst
                        cgst=r.cgst
                        place_of_supply=r.place_of_supply
                        subtotal=r.subtotal
                        tax_amount=r.tax_amount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp,Retainer_Invoice_date__range = [startDate, endDate], Customer_gstin__exact='')

                if rtInv:
                    for rt in rtInv:
                        partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'Retainer Invoice'
                        total = rt.Grand_total
                        paid =rt.Paid_amount
                        balance=rt.Balance
                        gstin=rt.Customer_gstin
                        igst=0
                        sgst=0
                        cgst=0
                        place_of_supply=rt.Customer_place_of_supply
                        subtotal=rt.Sub_total
                        tax_amount=0

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount
                            
                        }
                        reportData.append(details)
                cNote = Fin_CreditNote.objects.filter(Company=cmp, creditnote_date__range=[startDate, endDate], gstin__exact='')


                if cNote:
                    for note in cNote:
                        partyName = note.Customer.first_name +" "+note.Customer.last_name
                        date = note.creditnote_date
                        ref = note.creditnote_number
                        type = 'Credit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        gstin=note.gstin
                        igst=note.igst
                        sgst=note.sgst
                        cgst=note.cgst
                        place_of_supply=note.place_of_supply
                        subtotal=note.subtotal
                        tax_amount=note.tax_amount
                        invoice_number=note.invoice_number
                        invoice_type=note.invoice_type
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            'invoice_number':invoice_number,
                            'invoice_type':invoice_type
                            
                        }
                        cNotedata.append(details)
                
            
            

            


            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'cNotedata':cNotedata ,
                'startDate':startDate, 'endDate':endDate, 'currentDate':None,'status':type
            }
            return render(request,'company/reports/Fin_gstr1.html', context)
    else:
        return redirect('/')
     
def Fin_shareGSTR1ReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
            


                reportData = []
                cNotedata=[]
               

                
       
        
             
                

                inv = Fin_Invoice.objects.filter(Company = cmp)
                if inv:
                    for i in inv:
                        partyName = i.Customer.first_name +" "+i.Customer.last_name
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'Invoice'
                        total = i.grandtotal
                        paid =i.paid_off
                        balance=i.balance
                        gstin=i.gstin
                        invoice_no=i.invoice_no
                        igst=i.igst
                        sgst=i.sgst
                        cgst=i.cgst
                        place_of_supply=i.place_of_supply
                        subtotal=i.subtotal
                        tax_amount=i.tax_amount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'invoice_no':invoice_no,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)

                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)
                if recInv:
                    for r in recInv:
                        partyName = r.Customer.first_name +" "+r.Customer.last_name
                        date = r.start_date
                        ref = r.rec_invoice_no
                        type = 'Recurring Invoice'
                        total = r.grandtotal
                        paid =r.paid_off
                        balance=r.balance
                        gstin=r.gstin
                        igst=r.igst
                        sgst=r.sgst
                        cgst=r.cgst
                        place_of_supply=r.place_of_supply
                        subtotal=r.subtotal
                        tax_amount=r.tax_amount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp)
                if rtInv:
                    for rt in rtInv:
                        partyName = rt.Customer.first_name +" "+rt.Customer.last_name
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'Retainer Invoice'
                        total = rt.Grand_total
                        paid =rt.Paid_amount
                        balance=rt.Balance
                        gstin=rt.Customer_gstin
                        igst=0
                        sgst=0
                        cgst=0
                        place_of_supply=rt.Customer_place_of_supply
                        subtotal=rt.Sub_total
                        tax_amount=0

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount
                            
                        }
                        reportData.append(details)
                cNote = Fin_CreditNote.objects.filter(Company = cmp)
                if cNote:
                    for note in cNote:
                        partyName = note.Customer.first_name +" "+note.Customer.last_name
                        date = note.creditnote_date
                        ref = note.creditnote_number
                        type = 'Credit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        gstin=note.gstin
                        igst=note.igst
                        sgst=note.sgst
                        cgst=note.cgst
                        place_of_supply=note.place_of_supply
                        subtotal=note.subtotal
                        tax_amount=note.tax_amount
                        invoice_number=note.invoice_number
                        invoice_type=note.invoice_type
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            'invoice_number':invoice_number,
                            'invoice_type':invoice_type
                            
                        }
                        cNotedata.append(details)
                            
                
                

                


                context = {
                   'cmp':cmp, 'data':data, 'reportData':reportData,'cNotedata':cNotedata , 'startDate':startDate, 'endDate':endDate }

                template_path = 'company/reports/Fin_GSTR1_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_GSTR1'
                subject = f"Report_GSTR1"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - GSTR1. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(gstr1)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(gstr1)
            
#End
# ------------------------------------ gstr2 Report ------------------------------------
def gstr2(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        reportData = []
        cNotedata = []


        inv = Fin_Purchase_Bill.objects.filter(company = cmp)
        if inv:
            for i in inv:
                partyName = i.vendor.first_name +" "+i.vendor.last_name
                date = i.bill_date
                ref = i.bill_no
                type = 'Purchase Bill'
                total = i.grandtotal
                paid =i.paid
                balance=i.balance
                gstin=i.vendor.gstin
                igst=i.igst
                sgst=i.sgst
                cgst=i.cgst
                place_of_supply=i.ven_psupply
                subtotal=i.subtotal
                tax_amount=i.taxamount

                
                
                

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    
                }
                reportData.append(details)

        recInv = Fin_Recurring_Bills.objects.filter(company = cmp)
        if recInv:
            for r in recInv:
                partyName = r.vendor.first_name +" "+r.vendor.last_name
                date = r.date
                ref = r.recurring_bill_number
                type = 'Recurring Bills'
                total = r.grand_total
                paid =r.advanceAmount_paid
                balance=r.balance
                gstin=r.vendor_gst_number
                igst=r.taxAmount_igst
                sgst=r.sgst
                cgst=r.cgst
                place_of_supply=r.vendor_place_of_supply
                subtotal=r.sub_total
                tax_amount=r.taxAmount_igst

                
                
                

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    
                }
                reportData.append(details)
        
        cNote = Fin_Debit_Note.objects.filter(Company = cmp)
        if cNote:
            for note in cNote:
                partyName = note.Vendor.first_name +" "+note.Vendor.last_name
                date = note.debit_note_date
                ref = note.debit_note_number
                type = 'Debit Note'
                total = note.grandtotal
                balance = note.balance
                paid = note.paid
                gstin=note.gstin
                igst=note.igst
                sgst=note.sgst
                cgst=note.cgst
                place_of_supply=note.place_of_supply
                subtotal=note.subtotal
                tax_amount=note.tax_amount
                invoice_number=note.bill_number
                invoice_type=note.bill_type
                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'paid':paid,
                    'balance':balance,
                    'gstin':gstin,
                    'igst':igst,
                    'sgst':sgst,
                    'cgst':cgst,
                    'place_of_supply':place_of_supply,
                    'subtotal':subtotal,
                    'tax_amount':tax_amount,
                    'invoice_number':invoice_number,
                    'invoice_type':invoice_type
                    
                }
                cNotedata.append(details)
                        
                        
        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'reportData':reportData,'cNotedata':cNotedata}
        return render(request,'company/reports/Fin_gstr2.html', context)
    else:
        return redirect('/')
    

def Fin_gstr2Customized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            type = request.GET['status']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            reportData = []
            cNotedata = []

            vend1 = Fin_Vendors.objects.filter(Company=cmp).filter(Q(gstin__exact='') | Q(gstin=None))
            vend2 = Fin_Vendors.objects.filter(Company=cmp).exclude(Q(gstin__exact='') | Q(gstin=None))



            
            if type == 'all':


                inv = Fin_Purchase_Bill.objects.filter(company = cmp,bill_date__range = [startDate, endDate])
                if inv:
                    for i in inv:
                        partyName = i.vendor.first_name +" "+i.vendor.last_name
                        date = i.bill_date
                        ref = i.bill_no
                        type = 'Purchase Bill'
                        total = i.grandtotal
                        paid =i.paid
                        balance=i.balance
                        gstin=i.vendor.gstin
                        igst=i.igst
                        sgst=i.sgst
                        cgst=i.cgst
                        place_of_supply=i.ven_psupply
                        subtotal=i.subtotal
                        tax_amount=i.taxamount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                recInv = Fin_Recurring_Bills.objects.filter(company = cmp,date__range = [startDate, endDate])
                if recInv:
                    for r in recInv:
                        partyName = r.vendor.first_name +" "+r.vendor.last_name
                        date = r.date
                        ref = r.recurring_bill_number
                        type = 'Recurring Bills'
                        total = r.grand_total
                        paid =r.advanceAmount_paid
                        balance=r.balance
                        gstin=r.vendor_gst_number
                        igst=r.taxAmount_igst
                        sgst=r.sgst
                        cgst=r.cgst
                        place_of_supply=r.vendor_place_of_supply
                        subtotal=r.sub_total
                        tax_amount=r.taxAmount_igst

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                        reportData.append(details)
                cNote = Fin_Debit_Note.objects.filter(Company = cmp,debit_note_date__range = [startDate, endDate])
                if cNote:
                    for note in cNote:
                        partyName = note.Vendor.first_name +" "+note.Vendor.last_name
                        date = note.debit_note_date
                        ref = note.debit_note_number
                        type = 'Debit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        gstin=note.gstin
                        igst=note.igst
                        sgst=note.sgst
                        cgst=note.cgst
                        place_of_supply=note.place_of_supply
                        subtotal=note.subtotal
                        tax_amount=note.tax_amount
                        invoice_number=note.bill_number
                        invoice_type=note.bill_type
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            'invoice_number':invoice_number,
                            'invoice_type':invoice_type
                            
                        }
                        cNotedata.append(details)
                        
            if type == 'with GSTIN':


                for vendor in vend2:
    # Apply the filter for the current vendor
                    inv = Fin_Purchase_Bill.objects.filter(company=cmp, bill_date__range=[startDate, endDate], vendor=vendor)
                    for i in inv:
                        partyName = i.vendor.first_name +" "+i.vendor.last_name
                        date = i.bill_date
                        ref = i.bill_no
                        type = 'Purchase Bill'
                        total = i.grandtotal
                        paid =i.paid
                        balance=i.balance
                        gstin=i.vendor.gstin
                        igst=i.igst
                        sgst=i.sgst
                        cgst=i.cgst
                        place_of_supply=i.ven_psupply
                        subtotal=i.subtotal
                        tax_amount=i.taxamount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                recInv = Fin_Recurring_Bills.objects.filter(company=cmp, date__range=[startDate, endDate]).exclude(Q(vendor_gst_number__exact='') | Q(vendor_gst_number=None))

                if recInv:
                    for r in recInv:
                        partyName = r.vendor.first_name +" "+r.vendor.last_name
                        date = r.date
                        ref = r.recurring_bill_number
                        type = 'Recurring Bills'
                        total = r.grand_total
                        paid =r.advanceAmount_paid
                        balance=r.balance
                        gstin=r.vendor_gst_number
                        igst=r.taxAmount_igst
                        sgst=r.sgst
                        cgst=r.cgst
                        place_of_supply=r.vendor_place_of_supply
                        subtotal=r.sub_total
                        tax_amount=r.taxAmount_igst

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                
                cNote = Fin_Debit_Note.objects.filter(Company=cmp, debit_note_date__range=[startDate, endDate]).exclude(Q(gstin__exact='') | Q(gstin=None))
                if cNote:
                    for note in cNote:
                        partyName = note.Vendor.first_name +" "+note.Vendor.last_name
                        date = note.debit_note_date
                        ref = note.debit_note_number
                        type = 'Debit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        gstin=note.gstin
                        igst=note.igst
                        sgst=note.sgst
                        cgst=note.cgst
                        place_of_supply=note.place_of_supply
                        subtotal=note.subtotal
                        tax_amount=note.tax_amount
                        invoice_number=note.bill_number
                        invoice_type=note.bill_type
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            'invoice_number':invoice_number,
                            'invoice_type':invoice_type
                            
                        }
                        cNotedata.append(details)
            if type == 'without GSTIN':
                for vendor in vend1:
    # Apply the filter for the current vendor
                    inv = Fin_Purchase_Bill.objects.filter(company=cmp, bill_date__range=[startDate, endDate], vendor=vendor)
                #

                    for i in inv:
                        partyName = i.vendor.first_name +" "+i.vendor.last_name
                        date = i.bill_date
                        ref = i.bill_no
                        type = 'Purchase Bill'
                        total = i.grandtotal
                        paid =i.paid
                        balance=i.balance
                        gstin=i.vendor.gstin
                        igst=i.igst
                        sgst=i.sgst
                        cgst=i.cgst
                        place_of_supply=i.ven_psupply
                        subtotal=i.subtotal
                        tax_amount=i.taxamount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)

                recInv = Fin_Recurring_Bills.objects.filter(company=cmp, date__range=[startDate, endDate]).filter(Q(vendor_gst_number__exact='') | Q(vendor_gst_number=None))
                if recInv:
                    for r in recInv:
                        partyName = r.vendor.first_name +" "+r.vendor.last_name
                        date = r.date
                        ref = r.recurring_bill_number
                        type = 'Recurring Bills'
                        total = r.grand_total
                        paid =r.advanceAmount_paid
                        balance=r.balance
                        gstin=r.vendor_gst_number
                        igst=r.taxAmount_igst
                        sgst=r.sgst
                        cgst=r.cgst
                        place_of_supply=r.vendor_place_of_supply
                        subtotal=r.sub_total
                        tax_amount=r.taxAmount_igst

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                cNote = Fin_Debit_Note.objects.filter(Company=cmp, debit_note_date__range=[startDate, endDate]).filter(Q(gstin__exact='') | Q(gstin=None))


                if cNote:
                    for note in cNote:
                        partyName = note.Vendor.first_name +" "+note.Vendor.last_name
                        date = note.debit_note_date
                        ref = note.debit_note_number
                        type = 'Debit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        gstin=note.gstin
                        igst=note.igst
                        sgst=note.sgst
                        cgst=note.cgst
                        place_of_supply=note.place_of_supply
                        subtotal=note.subtotal
                        tax_amount=note.tax_amount
                        invoice_number=note.bill_number
                        invoice_type=note.bill_type
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            'invoice_number':invoice_number,
                            'invoice_type':invoice_type
                            
                        }
                        cNotedata.append(details)
                
            
            

            


            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'cNotedata':cNotedata ,
                'startDate':startDate, 'endDate':endDate, 'currentDate':None,'status':type
            }
            return render(request,'company/reports/Fin_gstr2.html', context)
    else:
        return redirect('/')
    
    
def Fin_shareGSTR2ReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
            


                reportData = []
                cNotedata=[]
               

                
       
        
             
                

                inv = Fin_Purchase_Bill.objects.filter(company = cmp)
                if inv:
                    for i in inv:
                        partyName = i.vendor.first_name +" "+i.vendor.last_name
                        date = i.bill_date
                        ref = i.bill_no
                        type = 'Purchase Bill'
                        total = i.grandtotal
                        paid =i.paid
                        balance=i.balance
                        gstin=i.vendor.gstin
                        igst=i.igst
                        sgst=i.sgst
                        cgst=i.cgst
                        place_of_supply=i.ven_psupply
                        subtotal=i.subtotal
                        tax_amount=i.taxamount

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)

                recInv = Fin_Recurring_Bills.objects.filter(company = cmp)
                if recInv:
                    for r in recInv:
                        partyName = r.vendor.first_name +" "+r.vendor.last_name
                        date = r.date
                        ref = r.recurring_bill_number
                        type = 'Recurring Bills'
                        total = r.grand_total
                        paid =r.advanceAmount_paid
                        balance=r.balance
                        gstin=r.vendor_gst_number
                        igst=r.taxAmount_igst
                        sgst=r.sgst
                        cgst=r.cgst
                        place_of_supply=r.vendor_place_of_supply
                        subtotal=r.sub_total
                        tax_amount=r.taxAmount_igst

                        
                        
                        

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            
                        }
                        reportData.append(details)
                
                cNote = Fin_Debit_Note.objects.filter(Company = cmp)
                if cNote:
                    for note in cNote:
                        partyName = note.Vendor.first_name +" "+note.Vendor.last_name
                        date = note.debit_note_date
                        ref = note.debit_note_number
                        type = 'Debit Note'
                        total = note.grandtotal
                        balance = note.balance
                        paid = note.paid
                        gstin=note.gstin
                        igst=note.igst
                        sgst=note.sgst
                        cgst=note.cgst
                        place_of_supply=note.place_of_supply
                        subtotal=note.subtotal
                        tax_amount=note.tax_amount
                        invoice_number=note.bill_number
                        invoice_type=note.bill_type
                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'paid':paid,
                            'balance':balance,
                            'gstin':gstin,
                            'igst':igst,
                            'sgst':sgst,
                            'cgst':cgst,
                            'place_of_supply':place_of_supply,
                            'subtotal':subtotal,
                            'tax_amount':tax_amount,
                            'invoice_number':invoice_number,
                            'invoice_type':invoice_type
                            
                        }
                        cNotedata.append(details)
                                    
                
                

                


                context = {
                   'cmp':cmp, 'data':data, 'reportData':reportData,'cNotedata':cNotedata , 'startDate':startDate, 'endDate':endDate }

                template_path = 'company/reports/Fin_gstr2_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_GSTR2'
                subject = f"Report_GSTR2"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - GSTR2. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(gstr2)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(gstr2)
            
#End
# < ------------- Shemeem -------- > Reports - Cash FLow < ------------------------------- >
def Fin_cashFlowReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totCashIn = 0
        totCashOut = 0
        bal = 0

        cash = Fin_CashInHand.objects.filter(Company = cmp)
        bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
        inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cash', paid__gt = 0)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
        rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cash', Paid_amount__gt = 0)

        bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cash', paid__gt = 0.0)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cash', advanceAmount_paid__gt = 0)
        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cash', paid__gt = 0)
        
        empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
        empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
        lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cash', principle_amount__gt = 0)
        slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cash')

        loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'cash', loan_amount__gt = 0)
        lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'cash', loan_amount__gt = 0)
        lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'cash', loan_amount__gt = 0)
        
        if cash:
            for cs in cash:
                if cs.adjustment == 'ADD CASH':
                    partyName = ""
                    date = cs.adjust_date
                    ref = ""
                    type = 'ADD CASH'
                    mIn = cs.amount
                    mOut = 0
                    totCashIn += float(cs.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)
                else:
                    partyName = ""
                    date = cs.adjust_date
                    ref = ""
                    type = 'REDUCE CASH'
                    mIn = 0
                    mOut = cs.amount
                    totCashOut += float(cs.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

        if bnk:
            for bn in bnk:
                if bn.transaction_type == 'Cash Deposit':
                    partyName = ""
                    date = bn.adjustment_date
                    ref = ""
                    type = 'CASH DEPOSIT'
                    mIn = bn.amount
                    mOut = 0
                    totCashIn += float(bn.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)
                else:
                    partyName = ""
                    date = bn.adjustment_date
                    ref = ""
                    type = 'CASH WITHDRAW'
                    mIn = 0
                    mOut = bn.amount
                    totCashOut += float(bn.amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

        if inv:
            for i in inv:
                partyName = i.Customer.first_name + i.Customer.last_name
                date = i.invoice_date
                ref = i.invoice_no
                type = 'INVOICE'
                mIn = i.paid_off
                mOut = 0
                totCashIn += float(i.paid_off)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if crdNt:
            for cr in crdNt:
                partyName = cr.Customer.first_name + cr.Customer.last_name
                date = cr.creditnote_date
                ref = cr.creditnote_number
                type = 'CREDIT NOTE'
                mOut = cr.paid
                mIn = 0
                totCashOut += float(cr.paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if recInv:
            for rc in recInv:
                partyName = rc.Customer.first_name + rc.Customer.last_name
                date = rc.start_date
                ref = rc.rec_invoice_no
                type = 'RECURRING INVOICE'
                mIn = rc.paid_off
                mOut = 0
                totCashIn += float(rc.paid_off)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if sordr:
            for so in sordr:
                partyName = so.Customer.first_name + so.Customer.last_name
                date = so.sales_order_date
                ref = so.sales_order_no
                type = 'SALES ORDER'
                mIn = so.paid_off
                mOut = 0
                totCashIn += float(so.paid_off)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if rtInv:
            for rt in rtInv:
                partyName = rt.Customer.first_name + rt.Customer.last_name
                date = rt.Retainer_Invoice_date
                ref = rt.Retainer_Invoice_number
                type = 'RETAINER INVOICE'
                mIn = rt.Paid_amount
                mOut = 0
                totCashIn += float(rt.Paid_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if bill:
            for bl in bill:
                partyName = bl.vendor.first_name + bl.vendor.last_name
                date = bl.bill_date
                ref = bl.bill_no
                type = 'BILL'
                mOut = bl.paid
                mIn = 0
                totCashOut += float(bl.paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if rcrbl:
            for rb in rcrbl:
                partyName = rb.vendor.first_name + rb.vendor.last_name
                date = rb.date
                ref = rb.recurring_bill_number
                type = 'RECURRING BILL'
                mOut = rb.advanceAmount_paid
                mIn = 0
                totCashOut += float(rb.advanceAmount_paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if pordr:
            for po in pordr:
                partyName = po.Vendor.first_name + po.Vendor.last_name
                date = po.purchase_order_date
                ref = po.purchase_order_no
                type = 'PURCHASE ORDER'
                mOut = po.paid_off
                mIn = 0
                totCashOut += float(po.paid_off)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if dbtnt:
            for db in dbtnt:
                partyName = db.Vendor.first_name + db.Vendor.last_name
                date = db.debit_note_date
                ref = db.debit_note_number
                type = 'DEBIT NOTE'
                mIn = db.paid
                mOut = 0
                totCashIn += float(db.paid)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if empLoan:
            for ln in empLoan:
                partyName = ln.employee.first_name + ln.employee.last_name
                date = ln.loan_date
                ref = ""
                type = 'EMPLOYEE LOAN'
                mOut = ln.loan_amount
                mIn = 0
                totCashOut += float(ln.loan_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if empAddLoan:
            for al in empAddLoan:
                partyName = al.employee_loan.employee.first_name + al.employee_loan.employee.last_name
                date = al.new_date
                ref = ""
                type = 'EMPLOYEE ADDITIONAL LOAN'
                mOut = al.new_loan
                mIn = 0
                totCashOut += float(al.new_loan)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if lnRpy:
            for lr in lnRpy:
                partyName = lr.employee.first_name + lr.employee.last_name
                date = lr.payment_date
                ref = ""
                type = 'EMI PAID'
                mIn = lr.principle_amount
                mOut = 0
                totCashIn += float(lr.principle_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if slry:
            for sl in slry:
                partyName = sl.employee.first_name + sl.employee.last_name
                date = sl.salary_date
                ref = ""
                type = 'EMPLOYEE SALARY'
                mOut = sl.total_salary
                mIn = 0
                totCashOut += float(sl.total_salary)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if loanAcc:
            for la in loanAcc:
                partyName = la.loan.account_name
                date = la.loan_date
                ref = ""
                type = 'LOAN'
                mOut = la.loan_amount
                mIn = 0
                totCashOut += float(la.loan_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if lonAddAcc:
            for l in lonAddAcc:
                partyName = l.loan.account_name
                date = l.loan_date
                ref = ""
                type = 'ADDITIONAL LOAN'
                mOut = l.loan_amount
                mIn = 0
                totCashOut += float(l.loan_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        if lonAccEmi:
            for le in lonAccEmi:
                partyName = le.loan.account_name
                date = le.loan_date
                ref = ""
                type = 'EMI PAID'
                mIn = le.loan_amount
                mOut = 0
                totCashIn += float(le.loan_amount)

                details = {
                    'date': date,
                    'partyName': partyName,
                    'ref':ref,
                    'type':type,
                    'moneyIn':mIn,
                    'moneyOut':mOut
                }
                reportData.append(details)

        bal = totCashIn - totCashOut

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalCashIn':totCashIn, 'totalCashOut':totCashOut, 'BALANCE':bal,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_CashFlow.html', context)
    else:
        return redirect('/')

def Fin_cashFlowReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None

            if startDate is None or endDate is None:
                cash = Fin_CashInHand.objects.filter(Company = cmp)
                bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
                inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
                crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cash', paid__gt = 0)
                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
                sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
                rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cash', Paid_amount__gt = 0)

                bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cash', paid__gt = 0.0)
                rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cash', advanceAmount_paid__gt = 0)
                pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
                dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cash', paid__gt = 0)
                
                empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
                empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
                lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cash', principle_amount__gt = 0)
                slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cash')

                loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'cash', loan_amount__gt = 0)
                lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'cash', loan_amount__gt = 0)
                lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'cash', loan_amount__gt = 0)
            else:
                cash = Fin_CashInHand.objects.filter(Company = cmp, adjust_date__range = [startDate, endDate])
                bnk = Fin_BankTransactions.objects.filter(company=cmp, adjustment_date__range = [startDate, endDate]).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
                inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate], payment_method__iexact = 'cash', paid_off__gt = 0)
                crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate], payment_type__iexact = 'cash', paid__gt = 0)
                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate], payment_method__iexact = 'cash', paid_off__gt = 0)
                sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate], payment_method__iexact='cash', paid_off__gt = 0)
                rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate], Payment_Method__iexact='cash', Paid_amount__gt = 0)

                bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], pay_type__iexact='cash', paid__gt = 0.0)
                rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], payment_method__iexact='cash', advanceAmount_paid__gt = 0)
                pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], payment_method__iexact='cash', paid_off__gt = 0)
                dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], payment_type__iexact='cash', paid__gt = 0)
                
                empLoan = Fin_Loan.objects.filter(company = cmp, loan_date__range = [startDate, endDate], payment_method__iexact = 'cash')
                empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, new_date__range = [startDate, endDate], payment_method__iexact = 'cash')
                lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_date__range = [startDate, endDate], payment_method__iexact = 'cash', principle_amount__gt = 0)
                slry = Fin_SalaryDetails.objects.filter(company=cmp, salary_date__range = [startDate, endDate], employee__pay_head__iexact='cash')

                loanAcc = loan_transaction.objects.filter(company=cmp, loan_date__range = [startDate, endDate], bank_type = 'OPENING BAL', to_trans__iexact = 'cash', loan_amount__gt = 0)
                lonAddAcc = loan_transaction.objects.filter(company=cmp, loan_date__range = [startDate, endDate], bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'cash', loan_amount__gt = 0)
                lonAccEmi = loan_transaction.objects.filter(company=cmp, loan_date__range = [startDate, endDate], bank_type = 'EMI PAID', recieved_bank__iexact = 'cash', loan_amount__gt = 0)

            reportData = []
            totCashIn = 0
            totCashOut = 0
            bal = 0

            if cash:
                for cs in cash:
                    if cs.adjustment == 'ADD CASH':
                        partyName = ""
                        date = cs.adjust_date
                        ref = ""
                        type = 'ADD CASH'
                        mIn = cs.amount
                        mOut = 0
                        totCashIn += float(cs.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)
                    else:
                        partyName = ""
                        date = cs.adjust_date
                        ref = ""
                        type = 'REDUCE CASH'
                        mIn = 0
                        mOut = cs.amount
                        totCashOut += float(cs.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

            if bnk:
                for bn in bnk:
                    if bn.transaction_type == 'Cash Deposit':
                        partyName = ""
                        date = bn.adjustment_date
                        ref = ""
                        type = 'CASH DEPOSIT'
                        mIn = bn.amount
                        mOut = 0
                        totCashIn += float(bn.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)
                    else:
                        partyName = ""
                        date = bn.adjustment_date
                        ref = ""
                        type = 'CASH WITHDRAW'
                        mIn = 0
                        mOut = bn.amount
                        totCashOut += float(bn.amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

            if inv:
                for i in inv:
                    partyName = i.Customer.first_name + i.Customer.last_name
                    date = i.invoice_date
                    ref = i.invoice_no
                    type = 'INVOICE'
                    mIn = i.paid_off
                    mOut = 0
                    totCashIn += float(i.paid_off)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if crdNt:
                for cr in crdNt:
                    partyName = cr.Customer.first_name + cr.Customer.last_name
                    date = cr.creditnote_date
                    ref = cr.creditnote_number
                    type = 'CREDIT NOTE'
                    mOut = cr.paid
                    mIn = 0
                    totCashOut += float(cr.paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if recInv:
                for rc in recInv:
                    partyName = rc.Customer.first_name + rc.Customer.last_name
                    date = rc.start_date
                    ref = rc.rec_invoice_no
                    type = 'RECURRING INVOICE'
                    mIn = rc.paid_off
                    mOut = 0
                    totCashIn += float(rc.paid_off)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if sordr:
                for so in sordr:
                    partyName = so.Customer.first_name + so.Customer.last_name
                    date = so.sales_order_date
                    ref = so.sales_order_no
                    type = 'SALES ORDER'
                    mIn = so.paid_off
                    mOut = 0
                    totCashIn += float(so.paid_off)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if rtInv:
                for rt in rtInv:
                    partyName = rt.Customer.first_name + rt.Customer.last_name
                    date = rt.Retainer_Invoice_date
                    ref = rt.Retainer_Invoice_number
                    type = 'RETAINER INVOICE'
                    mIn = rt.Paid_amount
                    mOut = 0
                    totCashIn += float(rt.Paid_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if bill:
                for bl in bill:
                    partyName = bl.vendor.first_name + bl.vendor.last_name
                    date = bl.bill_date
                    ref = bl.bill_no
                    type = 'BILL'
                    mOut = bl.paid
                    mIn = 0
                    totCashOut += float(bl.paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if rcrbl:
                for rb in rcrbl:
                    partyName = rb.vendor.first_name + rb.vendor.last_name
                    date = rb.date
                    ref = rb.recurring_bill_number
                    type = 'RECURRING BILL'
                    mOut = rb.advanceAmount_paid
                    mIn = 0
                    totCashOut += float(rb.advanceAmount_paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if pordr:
                for po in pordr:
                    partyName = po.Vendor.first_name + po.Vendor.last_name
                    date = po.purchase_order_date
                    ref = po.purchase_order_no
                    type = 'PURCHASE ORDER'
                    mOut = po.paid_off
                    mIn = 0
                    totCashOut += float(po.paid_off)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if dbtnt:
                for db in dbtnt:
                    partyName = db.Vendor.first_name + db.Vendor.last_name
                    date = db.debit_note_date
                    ref = db.debit_note_number
                    type = 'DEBIT NOTE'
                    mIn = db.paid
                    mOut = 0
                    totCashIn += float(db.paid)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if empLoan:
                for ln in empLoan:
                    partyName = ln.employee.first_name + ln.employee.last_name
                    date = ln.loan_date
                    ref = ""
                    type = 'EMPLOYEE LOAN'
                    mOut = ln.loan_amount
                    mIn = 0
                    totCashOut += float(ln.loan_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if empAddLoan:
                for al in empAddLoan:
                    partyName = al.employee_loan.employee.first_name + al.employee_loan.employee.last_name
                    date = al.new_date
                    ref = ""
                    type = 'EMPLOYEE ADDITIONAL LOAN'
                    mOut = al.new_loan
                    mIn = 0
                    totCashOut += float(al.new_loan)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if lnRpy:
                for lr in lnRpy:
                    partyName = lr.employee.first_name + lr.employee.last_name
                    date = lr.payment_date
                    ref = ""
                    type = 'EMI PAID'
                    mIn = lr.principle_amount
                    mOut = 0
                    totCashIn += float(lr.principle_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if slry:
                for sl in slry:
                    partyName = sl.employee.first_name + sl.employee.last_name
                    date = sl.salary_date
                    ref = ""
                    type = 'EMPLOYEE SALARY'
                    mOut = sl.total_salary
                    mIn = 0
                    totCashOut += float(sl.total_salary)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if loanAcc:
                for la in loanAcc:
                    partyName = la.loan.account_name
                    date = la.loan_date
                    ref = ""
                    type = 'LOAN'
                    mOut = la.loan_amount
                    mIn = 0
                    totCashOut += float(la.loan_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if lonAddAcc:
                for l in lonAddAcc:
                    partyName = l.loan.account_name
                    date = l.loan_date
                    ref = ""
                    type = 'ADDITIONAL LOAN'
                    mOut = l.loan_amount
                    mIn = 0
                    totCashOut += float(l.loan_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            if lonAccEmi:
                for le in lonAccEmi:
                    partyName = le.loan.account_name
                    date = le.loan_date
                    ref = ""
                    type = 'EMI PAID'
                    mIn = le.loan_amount
                    mOut = 0
                    totCashIn += float(le.loan_amount)

                    details = {
                        'date': date,
                        'partyName': partyName,
                        'ref':ref,
                        'type':type,
                        'moneyIn':mIn,
                        'moneyOut':mOut
                    }
                    reportData.append(details)

            bal = totCashIn - totCashOut

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalCashIn':totCashIn, 'totalCashOut':totCashOut, 'BALANCE':bal,
                'startDate':startDate, 'endDate':endDate
            }
            return render(request,'company/reports/Fin_CashFlow.html', context)
    else:
        return redirect('/')

def Fin_shareCashFlowReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                if startDate is None or endDate is None:
                    cash = Fin_CashInHand.objects.filter(Company = cmp)
                    bnk = Fin_BankTransactions.objects.filter(company=cmp).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
                    inv = Fin_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, payment_type__iexact = 'cash', paid__gt = 0)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, payment_method__iexact = 'cash', paid_off__gt = 0)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
                    rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Payment_Method__iexact='cash', Paid_amount__gt = 0)

                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, pay_type__iexact='cash', paid__gt = 0.0)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, payment_method__iexact='cash', advanceAmount_paid__gt = 0)
                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, payment_method__iexact='cash', paid_off__gt = 0)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, payment_type__iexact='cash', paid__gt = 0)
                    
                    empLoan = Fin_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
                    empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, payment_method__iexact = 'cash')
                    lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_method__iexact = 'cash', principle_amount__gt = 0)
                    slry = Fin_SalaryDetails.objects.filter(company=cmp, employee__pay_head__iexact='cash')

                    loanAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'OPENING BAL', to_trans__iexact = 'cash', loan_amount__gt = 0)
                    lonAddAcc = loan_transaction.objects.filter(company=cmp, bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'cash', loan_amount__gt = 0)
                    lonAccEmi = loan_transaction.objects.filter(company=cmp, bank_type = 'EMI PAID', recieved_bank__iexact = 'cash', loan_amount__gt = 0)
                else:
                    cash = Fin_CashInHand.objects.filter(Company = cmp, adjust_date__range = [startDate, endDate])
                    bnk = Fin_BankTransactions.objects.filter(company=cmp, adjustment_date__range = [startDate, endDate]).filter(Q(transaction_type__iexact='cash withdraw') | Q(transaction_type__iexact='cash deposit'))
                    inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate], payment_method__iexact = 'cash', paid_off__gt = 0)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate], payment_type__iexact = 'cash', paid__gt = 0)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate], payment_method__iexact = 'cash', paid_off__gt = 0)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate], payment_method__iexact='cash', paid_off__gt = 0)
                    rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate], Payment_Method__iexact='cash', Paid_amount__gt = 0)

                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], pay_type__iexact='cash', paid__gt = 0.0)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], payment_method__iexact='cash', advanceAmount_paid__gt = 0)
                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], payment_method__iexact='cash', paid_off__gt = 0)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], payment_type__iexact='cash', paid__gt = 0)
                    
                    empLoan = Fin_Loan.objects.filter(company = cmp, loan_date__range = [startDate, endDate], payment_method__iexact = 'cash')
                    empAddLoan = Fin_Employee_Additional_Loan.objects.filter(company = cmp, new_date__range = [startDate, endDate], payment_method__iexact = 'cash')
                    lnRpy = Fin_Employee_Loan_Repayment.objects.filter(company = cmp, payment_date__range = [startDate, endDate], payment_method__iexact = 'cash', principle_amount__gt = 0)
                    slry = Fin_SalaryDetails.objects.filter(company=cmp, salary_date__range = [startDate, endDate], employee__pay_head__iexact='cash')

                    loanAcc = loan_transaction.objects.filter(company=cmp, loan_date__range = [startDate, endDate], bank_type = 'OPENING BAL', to_trans__iexact = 'cash', loan_amount__gt = 0)
                    lonAddAcc = loan_transaction.objects.filter(company=cmp, loan_date__range = [startDate, endDate], bank_type = 'ADDITIONAL LOAN ISSUED', recieved_bank__iexact = 'cash', loan_amount__gt = 0)
                    lonAccEmi = loan_transaction.objects.filter(company=cmp, loan_date__range = [startDate, endDate], bank_type = 'EMI PAID', recieved_bank__iexact = 'cash', loan_amount__gt = 0)

                reportData = []
                totCashIn = 0
                totCashOut = 0
                bal = 0

                if cash:
                    for cs in cash:
                        if cs.adjustment == 'ADD CASH':
                            partyName = ""
                            date = cs.adjust_date
                            ref = ""
                            type = 'ADD CASH'
                            mIn = cs.amount
                            mOut = 0
                            totCashIn += float(cs.amount)

                            details = {
                                'date': date,
                                'partyName': partyName,
                                'ref':ref,
                                'type':type,
                                'moneyIn':mIn,
                                'moneyOut':mOut
                            }
                            reportData.append(details)
                        else:
                            partyName = ""
                            date = cs.adjust_date
                            ref = ""
                            type = 'REDUCE CASH'
                            mIn = 0
                            mOut = cs.amount
                            totCashOut += float(cs.amount)

                            details = {
                                'date': date,
                                'partyName': partyName,
                                'ref':ref,
                                'type':type,
                                'moneyIn':mIn,
                                'moneyOut':mOut
                            }
                            reportData.append(details)

                if bnk:
                    for bn in bnk:
                        if bn.transaction_type == 'Cash Deposit':
                            partyName = ""
                            date = bn.adjustment_date
                            ref = ""
                            type = 'CASH DEPOSIT'
                            mIn = bn.amount
                            mOut = 0
                            totCashIn += float(bn.amount)

                            details = {
                                'date': date,
                                'partyName': partyName,
                                'ref':ref,
                                'type':type,
                                'moneyIn':mIn,
                                'moneyOut':mOut
                            }
                            reportData.append(details)
                        else:
                            partyName = ""
                            date = bn.adjustment_date
                            ref = ""
                            type = 'CASH WITHDRAW'
                            mIn = 0
                            mOut = bn.amount
                            totCashOut += float(bn.amount)

                            details = {
                                'date': date,
                                'partyName': partyName,
                                'ref':ref,
                                'type':type,
                                'moneyIn':mIn,
                                'moneyOut':mOut
                            }
                            reportData.append(details)

                if inv:
                    for i in inv:
                        partyName = i.Customer.first_name + i.Customer.last_name
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'INVOICE'
                        mIn = i.paid_off
                        mOut = 0
                        totCashIn += float(i.paid_off)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if crdNt:
                    for cr in crdNt:
                        partyName = cr.Customer.first_name + cr.Customer.last_name
                        date = cr.creditnote_date
                        ref = cr.creditnote_number
                        type = 'CREDIT NOTE'
                        mOut = cr.paid
                        mIn = 0
                        totCashOut += float(cr.paid)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if recInv:
                    for rc in recInv:
                        partyName = rc.Customer.first_name + rc.Customer.last_name
                        date = rc.start_date
                        ref = rc.rec_invoice_no
                        type = 'RECURRING INVOICE'
                        mIn = rc.paid_off
                        mOut = 0
                        totCashIn += float(rc.paid_off)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if sordr:
                    for so in sordr:
                        partyName = so.Customer.first_name + so.Customer.last_name
                        date = so.sales_order_date
                        ref = so.sales_order_no
                        type = 'SALES ORDER'
                        mIn = so.paid_off
                        mOut = 0
                        totCashIn += float(so.paid_off)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if rtInv:
                    for rt in rtInv:
                        partyName = rt.Customer.first_name + rt.Customer.last_name
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'RETAINER INVOICE'
                        mIn = rt.Paid_amount
                        mOut = 0
                        totCashIn += float(rt.Paid_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if bill:
                    for bl in bill:
                        partyName = bl.vendor.first_name + bl.vendor.last_name
                        date = bl.bill_date
                        ref = bl.bill_no
                        type = 'BILL'
                        mOut = bl.paid
                        mIn = 0
                        totCashOut += float(bl.paid)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if rcrbl:
                    for rb in rcrbl:
                        partyName = rb.vendor.first_name + rb.vendor.last_name
                        date = rb.date
                        ref = rb.recurring_bill_number
                        type = 'RECURRING BILL'
                        mOut = rb.advanceAmount_paid
                        mIn = 0
                        totCashOut += float(rb.advanceAmount_paid)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if pordr:
                    for po in pordr:
                        partyName = po.Vendor.first_name + po.Vendor.last_name
                        date = po.purchase_order_date
                        ref = po.purchase_order_no
                        type = 'PURCHASE ORDER'
                        mOut = po.paid_off
                        mIn = 0
                        totCashOut += float(po.paid_off)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if dbtnt:
                    for db in dbtnt:
                        partyName = db.Vendor.first_name + db.Vendor.last_name
                        date = db.debit_note_date
                        ref = db.debit_note_number
                        type = 'DEBIT NOTE'
                        mIn = db.paid
                        mOut = 0
                        totCashIn += float(db.paid)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if empLoan:
                    for ln in empLoan:
                        partyName = ln.employee.first_name + ln.employee.last_name
                        date = ln.loan_date
                        ref = ""
                        type = 'EMPLOYEE LOAN'
                        mOut = ln.loan_amount
                        mIn = 0
                        totCashOut += float(ln.loan_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if empAddLoan:
                    for al in empAddLoan:
                        partyName = al.employee_loan.employee.first_name + al.employee_loan.employee.last_name
                        date = al.new_date
                        ref = ""
                        type = 'EMPLOYEE ADDITIONAL LOAN'
                        mOut = al.new_loan
                        mIn = 0
                        totCashOut += float(al.new_loan)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if lnRpy:
                    for lr in lnRpy:
                        partyName = lr.employee.first_name + lr.employee.last_name
                        date = lr.payment_date
                        ref = ""
                        type = 'EMI PAID'
                        mIn = lr.principle_amount
                        mOut = 0
                        totCashIn += float(lr.principle_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if slry:
                    for sl in slry:
                        partyName = sl.employee.first_name + sl.employee.last_name
                        date = sl.salary_date
                        ref = ""
                        type = 'EMPLOYEE SALARY'
                        mOut = sl.total_salary
                        mIn = 0
                        totCashOut += float(sl.total_salary)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if loanAcc:
                    for la in loanAcc:
                        partyName = la.loan.account_name
                        date = la.loan_date
                        ref = ""
                        type = 'LOAN'
                        mOut = la.loan_amount
                        mIn = 0
                        totCashOut += float(la.loan_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if lonAddAcc:
                    for l in lonAddAcc:
                        partyName = l.loan.account_name
                        date = l.loan_date
                        ref = ""
                        type = 'ADDITIONAL LOAN'
                        mOut = l.loan_amount
                        mIn = 0
                        totCashOut += float(l.loan_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                if lonAccEmi:
                    for le in lonAccEmi:
                        partyName = le.loan.account_name
                        date = le.loan_date
                        ref = ""
                        type = 'EMI PAID'
                        mIn = le.loan_amount
                        mOut = 0
                        totCashIn += float(le.loan_amount)

                        details = {
                            'date': date,
                            'partyName': partyName,
                            'ref':ref,
                            'type':type,
                            'moneyIn':mIn,
                            'moneyOut':mOut
                        }
                        reportData.append(details)

                bal = totCashIn - totCashOut

                context = {'cmp':cmp, 'reportData':reportData, 'totalCashIn':totCashIn, 'totalCashOut':totCashOut, 'startDate':startDate, 'endDate':endDate, 'BALANCE':bal}
                template_path = 'company/reports/Fin_CashFlow_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_CashFlow'
                subject = f"Report_CashFlow"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Cash Flow. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_cashFlowReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_cashFlowReport)
# End
# < ------------- Shemeem -------- > Reports - Party Statements < ------------------------------- >
def Fin_partyStatementReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        cust = Fin_Customers.objects.filter(Company = cmp)
        vend = Fin_Vendors.objects.filter(Company = cmp)

        reportData = []
        totMoneyIn = 0
        totMoneyOut = 0
        totSales = 0
        totPurchase = 0
        totExpense = 0
        BAL = 0

        
        est = Fin_Estimate.objects.filter(Company = cmp)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp)
        inv = Fin_Invoice.objects.filter(Company = cmp)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp)
        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp)
        chl = Fin_Delivery_Challan.objects.filter(Company = cmp)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)

        pordr= Fin_Purchase_Order.objects.filter(Company = cmp)
        bill= Fin_Purchase_Bill.objects.filter(company = cmp)
        exp = Fin_Expense.objects.filter(Company = cmp)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp)

        journal = Fin_Manual_Journal.objects.filter(Company = cmp)


        if est:
            for e in est:
                date = e.estimate_date
                ref = e.estimate_no
                type = 'ESTIMATE'
                payment = ""
                total = e.grandtotal
                bal = e.balance
                totMoneyIn += float(e.grandtotal)
                totSales += float(e.grandtotal)

                details = {
                    'date': date,
                    'ref':ref,
                    'type':type,
                    'payment':payment,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if inv:
            for i in inv:
                date = i.invoice_date
                ref = i.invoice_no
                type = 'INVOICE'
                total = i.grandtotal
                payment = i.payment_method
                bal = i.balance
                totMoneyIn += float(i.grandtotal)
                totSales += float(i.grandtotal)
                BAL += float(i.balance)

                details = {
                    'date': date,
                    'ref':ref,
                    'type':type,
                    'payment':payment,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if crdNt:
            for cr in crdNt:
                date = cr.creditnote_date
                ref = cr.creditnote_number
                payment = cr.payment_type
                type = 'CREDIT NOTE'
                total = cr.grandtotal
                bal = cr.balance
                totMoneyOut += float(cr.grandtotal)
                totSales -= float(cr.grandtotal)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if recInv:
            for rc in recInv:
                date = rc.start_date
                ref = rc.rec_invoice_no
                payment = rc.payment_method
                type = 'RECURRING INVOICE'
                total = rc.grandtotal
                bal = rc.balance
                totMoneyIn += float(rc.grandtotal)
                totSales += float(rc.grandtotal)
                BAL += float(rc.balance)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if sordr:
            for so in sordr:
                date = so.sales_order_date
                ref = so.sales_order_no
                payment = so.payment_method
                type = 'SALES ORDER'
                total = so.grandtotal
                bal = so.balance
                totMoneyIn += float(so.grandtotal)
                totSales += float(so.grandtotal)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if chl:
            for ch in chl:
                date = ch.challan_date
                ref = ch.challan_no
                type = 'DELIVERY CHALLAN'
                payment = ""
                total = ch.grandtotal
                bal = ch.balance
                totMoneyIn += float(ch.grandtotal)
                totSales += float(ch.grandtotal)

                details = {
                    'date': date,
                    'ref':ref,
                    'type':type,
                    'payment':payment,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if rtInv:
            for rt in rtInv:
                date = rt.Retainer_Invoice_date
                ref = rt.Retainer_Invoice_number
                type = 'RETAINER INVOICE'
                payment = rt.Payment_Method
                total = rt.Grand_total
                bal = rt.Balance
                totMoneyIn += float(rt.Grand_total)
                totSales += float(rt.Grand_total)
                BAL += float(rt.Balance)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if bill:
            for bl in bill:
                date = bl.bill_date
                ref = bl.bill_no
                payment = bl.pay_type
                type = 'BILL'
                total = bl.grandtotal
                bal = bl.balance
                totMoneyOut += float(bl.grandtotal)
                totPurchase += float(bl.grandtotal)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if exp:
            for ex in exp:
                payment = ex.payment_method
                date = ex.expense_date
                ref = ex.expense_no
                type = 'EXPENSE'
                total = ex.amount
                bal = 0
                # totMoneyOut += float(ex.amount)
                totExpense += float(ex.amount)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)


        if journal:
            for j in journal:
                payment = ""
                date = j.journal_date
                ref = j.journal_no
                type = 'MANUAL JOURNAL'
                total = j.total_debit
                bal = j.balance_debit
                totExpense += float(j.total_debit)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)


        if rcrbl:
            for rb in rcrbl:
                payment = rb.payment_method
                date = rb.date
                ref = rb.recurring_bill_number
                type = 'RECURRING BILL'
                total = rb.grand_total
                bal = rb.balance
                totMoneyOut += float(rb.grand_total)
                totPurchase += float(rb.grand_total)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if pordr:
            for po in pordr:
                payment = po.payment_method
                date = po.purchase_order_date
                ref = po.purchase_order_no
                type = 'PURCHASE ORDER'
                total = po.grandtotal
                bal = po.balance
                totMoneyOut += float(po.grandtotal)
                totPurchase += float(po.grandtotal)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        if dbtnt:
            for db in dbtnt:
                payment = db.payment_type
                date = db.debit_note_date
                ref = db.debit_note_number
                type = 'DEBIT NOTE'
                total = db.grandtotal
                bal = db.balance
                totMoneyIn += float(db.grandtotal)
                totPurchase -= float(db.grandtotal)

                details = {
                    'date': date,
                    'payment': payment,
                    'ref':ref,
                    'type':type,
                    'total':total,
                    'balance':bal
                }
                reportData.append(details)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'vendors':vend, 'reportData':reportData, 'totalMoneyIn':totMoneyIn, 'totalMoneyOut':totMoneyOut, 'totalSales':totSales, 'totalPurchase':totPurchase, 'totalExpense': totExpense,'BALANCE':BAL,
            'startDate':None, 'endDate':None, 'partyName':None
        }
        return render(request,'company/reports/Fin_Party_Statement.html', context)
    else:
        return redirect('/')

def Fin_partyStatementReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            prty = request.GET['party_details']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            if prty != "":
                prt = prty.split(':')
                partyId = prt[0]
                partyType = prt[1]
            else:
                partyId = None
                partyType = None

            if partyId and partyType and partyId != "" and partyType != "":
                if partyType == 'customer':
                    party = Fin_Customers.objects.get(id = partyId)
                    pName = party.title+" "+party.first_name+" "+party.last_name
                    pDetails = str(party.id) +":"+'customer'
                elif partyType == 'vendor':
                    party = Fin_Vendors.objects.get(id = partyId)
                    pName = party.title+" "+party.first_name+" "+party.last_name
                    pDetails = str(party.id) +":"+'vendor'
                else:
                    party = None
                    pName = None
                    pDetails = ""

            else:
                party = None
                pName = None
                pDetails = ""

            cust = Fin_Customers.objects.filter(Company = cmp)
            vend = Fin_Vendors.objects.filter(Company = cmp)

            if startDate is None or endDate is None:
                if party:
                    if partyType == 'customer':
                        est = Fin_Estimate.objects.filter(Company = cmp, Customer = party)
                        sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = party)
                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = party)
                        crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = party)
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = party)
                        chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = party)
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = party)

                        pordr= None
                        bill= None
                        exp = None
                        dbtnt= None
                        rcrbl= None

                        journal = None
                    
                    if partyType == 'vendor':
                        est = None
                        sordr= None
                        inv = None
                        crdNt = None
                        rtInv = None
                        chl = None
                        recInv = None

                        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, Vendor = party)
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = party)
                        exp = Fin_Expense.objects.filter(Company = cmp, Vendor = party)
                        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, Vendor = party)
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = party)

                        journal = None
                else:
                    est = Fin_Estimate.objects.filter(Company = cmp)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp)
                    inv = Fin_Invoice.objects.filter(Company = cmp)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp)
                    rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp)
                    chl = Fin_Delivery_Challan.objects.filter(Company = cmp)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)

                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp)
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp)
                    exp = Fin_Expense.objects.filter(Company = cmp)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp)

                    journal = Fin_Manual_Journal.objects.filter(Company = cmp)
            else:
                if party:
                    if partyType == 'customer':
                        est = Fin_Estimate.objects.filter(Company = cmp, Customer = party, estimate_date__range = [startDate, endDate])
                        sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = party, sales_order_date__range = [startDate, endDate])
                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = party, invoice_date__range = [startDate, endDate])
                        crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = party, creditnote_date__range = [startDate, endDate])
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = party, Retainer_Invoice_date__range = [startDate, endDate])
                        chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = party, challan_date__range = [startDate, endDate])
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = party, start_date__range = [startDate, endDate])

                        pordr= None
                        bill= None
                        exp = None
                        dbtnt= None
                        rcrbl= None

                        journal = None
                    
                    if partyType == 'vendor':

                        est = None
                        sordr= None
                        inv = None
                        crdNt = None
                        rtInv = None
                        chl = None
                        recInv = None

                        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], Vendor = party)
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], vendor = party)
                        exp = Fin_Expense.objects.filter(Company = cmp, expense_date__range = [startDate, endDate], Vendor = party)
                        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], Vendor = party)
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], vendor = party)

                        journal = None
                else:
                    est = Fin_Estimate.objects.filter(Company = cmp, estimate_date__range = [startDate, endDate])
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate])
                    inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate])
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate])
                    rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate])
                    chl = Fin_Delivery_Challan.objects.filter(Company = cmp, challan_date__range = [startDate, endDate])
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate])

                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate])
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate])
                    exp = Fin_Expense.objects.filter(Company = cmp, expense_date__range = [startDate, endDate])
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate])
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate])

                    journal = Fin_Manual_Journal.objects.filter(Company = cmp, journal_date__range = [startDate, endDate])

            reportData = []
            totMoneyIn = 0
            totMoneyOut = 0
            totSales = 0
            totPurchase = 0
            totExpense = 0
            BAL = 0

            if est:
                for e in est:
                    date = e.estimate_date
                    ref = e.estimate_no
                    type = 'ESTIMATE'
                    payment = ""
                    total = e.grandtotal
                    bal = e.balance
                    totMoneyIn += float(e.grandtotal)
                    totSales += float(e.grandtotal)

                    details = {
                        'date': date,
                        'ref':ref,
                        'type':type,
                        'payment':payment,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if inv:
                for i in inv:
                    date = i.invoice_date
                    ref = i.invoice_no
                    type = 'INVOICE'
                    total = i.grandtotal
                    payment = i.payment_method
                    bal = i.balance
                    totMoneyIn += float(i.grandtotal)
                    totSales += float(i.grandtotal)
                    BAL += float(i.balance)

                    details = {
                        'date': date,
                        'ref':ref,
                        'type':type,
                        'payment':payment,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if crdNt:
                for cr in crdNt:
                    date = cr.creditnote_date
                    ref = cr.creditnote_number
                    payment = cr.payment_type
                    type = 'CREDIT NOTE'
                    total = cr.grandtotal
                    bal = cr.balance
                    totMoneyOut += float(cr.grandtotal)
                    totSales -= float(cr.grandtotal)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if recInv:
                for rc in recInv:
                    date = rc.start_date
                    ref = rc.rec_invoice_no
                    payment = rc.payment_method
                    type = 'RECURRING INVOICE'
                    total = rc.grandtotal
                    bal = rc.balance
                    totMoneyIn += float(rc.grandtotal)
                    totSales += float(rc.grandtotal)
                    BAL += float(rc.balance)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if sordr:
                for so in sordr:
                    date = so.sales_order_date
                    ref = so.sales_order_no
                    payment = so.payment_method
                    type = 'SALES ORDER'
                    total = so.grandtotal
                    bal = so.balance
                    totMoneyIn += float(so.grandtotal)
                    totSales += float(so.grandtotal)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if chl:
                for ch in chl:
                    date = ch.challan_date
                    ref = ch.challan_no
                    type = 'DELIVERY CHALLAN'
                    payment = ""
                    total = ch.grandtotal
                    bal = ch.balance
                    totMoneyIn += float(ch.grandtotal)
                    totSales += float(ch.grandtotal)

                    details = {
                        'date': date,
                        'ref':ref,
                        'type':type,
                        'payment':payment,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if rtInv:
                for rt in rtInv:
                    date = rt.Retainer_Invoice_date
                    ref = rt.Retainer_Invoice_number
                    type = 'RETAINER INVOICE'
                    payment = rt.Payment_Method
                    total = rt.Grand_total
                    bal = rt.Balance
                    totMoneyIn += float(rt.Grand_total)
                    totSales += float(rt.Grand_total)
                    BAL += float(rt.Balance)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if bill:
                for bl in bill:
                    date = bl.bill_date
                    ref = bl.bill_no
                    payment = bl.pay_type
                    type = 'BILL'
                    total = bl.grandtotal
                    bal = bl.balance
                    totMoneyOut += float(bl.grandtotal)
                    totPurchase += float(bl.grandtotal)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if exp:
                for ex in exp:
                    payment = ex.payment_method
                    date = ex.expense_date
                    ref = ex.expense_no
                    type = 'EXPENSE'
                    total = ex.amount
                    bal = 0
                    # totMoneyOut += float(ex.amount)
                    totExpense += float(ex.amount)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)


            if journal:
                for j in journal:
                    payment = ""
                    date = j.journal_date
                    ref = j.journal_no
                    type = 'MANUAL JOURNAL'
                    total = j.total_debit
                    bal = j.balance_debit
                    totExpense += float(j.total_debit)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)


            if rcrbl:
                for rb in rcrbl:
                    payment = rb.payment_method
                    date = rb.date
                    ref = rb.recurring_bill_number
                    type = 'RECURRING BILL'
                    total = rb.grand_total
                    bal = rb.balance
                    totMoneyOut += float(rb.grand_total)
                    totPurchase += float(rb.grand_total)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if pordr:
                for po in pordr:
                    payment = po.payment_method
                    date = po.purchase_order_date
                    ref = po.purchase_order_no
                    type = 'PURCHASE ORDER'
                    total = po.grandtotal
                    bal = po.balance
                    totMoneyOut += float(po.grandtotal)
                    totPurchase += float(po.grandtotal)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            if dbtnt:
                for db in dbtnt:
                    payment = db.payment_type
                    date = db.debit_note_date
                    ref = db.debit_note_number
                    type = 'DEBIT NOTE'
                    total = db.grandtotal
                    bal = db.balance
                    totMoneyIn += float(db.grandtotal)
                    totPurchase -= float(db.grandtotal)

                    details = {
                        'date': date,
                        'payment': payment,
                        'ref':ref,
                        'type':type,
                        'total':total,
                        'balance':bal
                    }
                    reportData.append(details)

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'vendors':vend, 'reportData':reportData, 'totalMoneyIn':totMoneyIn, 'totalMoneyOut':totMoneyOut, 'totalSales':totSales, 'totalPurchase':totPurchase, 'totalExpense': totExpense,'BALANCE':BAL,
                'startDate':startDate, 'endDate':endDate, 'partyName': pName, 'partyDetails':pDetails
            }
            return render(request,'company/reports/Fin_Party_Statement.html', context)
    else:
        return redirect('/')

def Fin_sharePartyStatementReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                prty = request.POST['party_details']

                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                if prty != "":
                    prt = prty.split(':')
                    partyId = prt[0]
                    partyType = prt[1]
                else:
                    partyId = None
                    partyType = None

                if partyId and partyType and partyId != "" and partyType != "":
                    if partyType == 'customer':
                        party = Fin_Customers.objects.get(id = partyId)
                        pName = party.title+" "+party.first_name+" "+party.last_name
                    elif partyType == 'vendor':
                        party = Fin_Vendors.objects.get(id = partyId)
                        pName = party.title+" "+party.first_name+" "+party.last_name
                    else:
                        party = None
                        pName = None

                else:
                    party = None
                    pName = None

                if startDate is None or endDate is None:
                    if party:
                        if partyType == 'customer':
                            est = Fin_Estimate.objects.filter(Company = cmp, Customer = party)
                            sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = party)
                            inv = Fin_Invoice.objects.filter(Company = cmp, Customer = party)
                            crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = party)
                            rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = party)
                            chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = party)
                            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = party)

                            pordr= None
                            bill= None
                            exp = None
                            dbtnt= None
                            rcrbl= None

                            journal = None
                        
                        if partyType == 'vendor':
                            est = None
                            sordr= None
                            inv = None
                            crdNt = None
                            rtInv = None
                            chl = None
                            recInv = None

                            pordr= Fin_Purchase_Order.objects.filter(Company = cmp, Vendor = party)
                            bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = party)
                            exp = Fin_Expense.objects.filter(Company = cmp, Vendor = party)
                            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, Vendor = party)
                            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = party)

                            journal = None
                    else:
                        est = Fin_Estimate.objects.filter(Company = cmp)
                        sordr= Fin_Sales_Order.objects.filter(Company = cmp)
                        inv = Fin_Invoice.objects.filter(Company = cmp)
                        crdNt = Fin_CreditNote.objects.filter(Company = cmp)
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp)
                        chl = Fin_Delivery_Challan.objects.filter(Company = cmp)
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)

                        pordr= Fin_Purchase_Order.objects.filter(Company = cmp)
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp)
                        exp = Fin_Expense.objects.filter(Company = cmp)
                        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp)
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp)

                        journal = Fin_Manual_Journal.objects.filter(Company = cmp)
                else:
                    if party:
                        if partyType == 'customer':
                            est = Fin_Estimate.objects.filter(Company = cmp, Customer = party, estimate_date__range = [startDate, endDate])
                            sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = party, sales_order_date__range = [startDate, endDate])
                            inv = Fin_Invoice.objects.filter(Company = cmp, Customer = party, invoice_date__range = [startDate, endDate])
                            crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = party, creditnote_date__range = [startDate, endDate])
                            rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = party, Retainer_Invoice_date__range = [startDate, endDate])
                            chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = party, challan_date__range = [startDate, endDate])
                            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = party, start_date__range = [startDate, endDate])

                            pordr= None
                            bill= None
                            exp = None
                            dbtnt= None
                            rcrbl= None

                            journal = None
                        
                        if partyType == 'vendor':

                            est = None
                            sordr= None
                            inv = None
                            crdNt = None
                            rtInv = None
                            chl = None
                            recInv = None

                            pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], Vendor = party)
                            bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], vendor = party)
                            exp = Fin_Expense.objects.filter(Company = cmp, expense_date__range = [startDate, endDate], Vendor = party)
                            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], Vendor = party)
                            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], vendor = party)

                            journal = None
                    else:
                        est = Fin_Estimate.objects.filter(Company = cmp, estimate_date__range = [startDate, endDate])
                        sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate])
                        inv = Fin_Invoice.objects.filter(Company = cmp, invoice_date__range = [startDate, endDate])
                        crdNt = Fin_CreditNote.objects.filter(Company = cmp, creditnote_date__range = [startDate, endDate])
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate])
                        chl = Fin_Delivery_Challan.objects.filter(Company = cmp, challan_date__range = [startDate, endDate])
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, start_date__range = [startDate, endDate])

                        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate])
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate])
                        exp = Fin_Expense.objects.filter(Company = cmp, expense_date__range = [startDate, endDate])
                        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate])
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate])

                        journal = Fin_Manual_Journal.objects.filter(Company = cmp, journal_date__range = [startDate, endDate])

                reportData = []
                totMoneyIn = 0
                totMoneyOut = 0
                totSales = 0
                totPurchase = 0
                totExpense = 0
                BAL = 0

                if est:
                    for e in est:
                        date = e.estimate_date
                        ref = e.estimate_no
                        type = 'ESTIMATE'
                        payment = ""
                        total = e.grandtotal
                        bal = e.balance
                        totMoneyIn += float(e.grandtotal)
                        totSales += float(e.grandtotal)

                        details = {
                            'date': date,
                            'ref':ref,
                            'type':type,
                            'payment':payment,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if inv:
                    for i in inv:
                        date = i.invoice_date
                        ref = i.invoice_no
                        type = 'INVOICE'
                        total = i.grandtotal
                        payment = i.payment_method
                        bal = i.balance
                        totMoneyIn += float(i.grandtotal)
                        totSales += float(i.grandtotal)
                        BAL += float(i.balance)

                        details = {
                            'date': date,
                            'ref':ref,
                            'type':type,
                            'payment':payment,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if crdNt:
                    for cr in crdNt:
                        date = cr.creditnote_date
                        ref = cr.creditnote_number
                        payment = cr.payment_type
                        type = 'CREDIT NOTE'
                        total = cr.grandtotal
                        bal = cr.balance
                        totMoneyOut += float(cr.grandtotal)
                        totSales -= float(cr.grandtotal)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if recInv:
                    for rc in recInv:
                        date = rc.start_date
                        ref = rc.rec_invoice_no
                        payment = rc.payment_method
                        type = 'RECURRING INVOICE'
                        total = rc.grandtotal
                        bal = rc.balance
                        totMoneyIn += float(rc.grandtotal)
                        totSales += float(rc.grandtotal)
                        BAL += float(rc.balance)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if sordr:
                    for so in sordr:
                        date = so.sales_order_date
                        ref = so.sales_order_no
                        payment = so.payment_method
                        type = 'SALES ORDER'
                        total = so.grandtotal
                        bal = so.balance
                        totMoneyIn += float(so.grandtotal)
                        totSales += float(so.grandtotal)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if chl:
                    for ch in chl:
                        date = ch.challan_date
                        ref = ch.challan_no
                        type = 'DELIVERY CHALLAN'
                        payment = ""
                        total = ch.grandtotal
                        bal = ch.balance
                        totMoneyIn += float(ch.grandtotal)
                        totSales += float(ch.grandtotal)

                        details = {
                            'date': date,
                            'ref':ref,
                            'type':type,
                            'payment':payment,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if rtInv:
                    for rt in rtInv:
                        date = rt.Retainer_Invoice_date
                        ref = rt.Retainer_Invoice_number
                        type = 'RETAINER INVOICE'
                        payment = rt.Payment_Method
                        total = rt.Grand_total
                        bal = rt.Balance
                        totMoneyIn += float(rt.Grand_total)
                        totSales += float(rt.Grand_total)
                        BAL += float(rt.Balance)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if bill:
                    for bl in bill:
                        date = bl.bill_date
                        ref = bl.bill_no
                        payment = bl.pay_type
                        type = 'BILL'
                        total = bl.grandtotal
                        bal = bl.balance
                        totMoneyOut += float(bl.grandtotal)
                        totPurchase += float(bl.grandtotal)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if exp:
                    for ex in exp:
                        payment = ex.payment_method
                        date = ex.expense_date
                        ref = ex.expense_no
                        type = 'EXPENSE'
                        total = ex.amount
                        bal = 0
                        # totMoneyOut += float(ex.amount)
                        totExpense += float(ex.amount)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)


                if journal:
                    for j in journal:
                        payment = ""
                        date = j.journal_date
                        ref = j.journal_no
                        type = 'MANUAL JOURNAL'
                        total = j.total_debit
                        bal = j.balance_debit
                        totExpense += float(j.total_debit)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)


                if rcrbl:
                    for rb in rcrbl:
                        payment = rb.payment_method
                        date = rb.date
                        ref = rb.recurring_bill_number
                        type = 'RECURRING BILL'
                        total = rb.grand_total
                        bal = rb.balance
                        totMoneyOut += float(rb.grand_total)
                        totPurchase += float(rb.grand_total)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if pordr:
                    for po in pordr:
                        payment = po.payment_method
                        date = po.purchase_order_date
                        ref = po.purchase_order_no
                        type = 'PURCHASE ORDER'
                        total = po.grandtotal
                        bal = po.balance
                        totMoneyOut += float(po.grandtotal)
                        totPurchase += float(po.grandtotal)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                if dbtnt:
                    for db in dbtnt:
                        payment = db.payment_type
                        date = db.debit_note_date
                        ref = db.debit_note_number
                        type = 'DEBIT NOTE'
                        total = db.grandtotal
                        bal = db.balance
                        totMoneyIn += float(db.grandtotal)
                        totPurchase -= float(db.grandtotal)

                        details = {
                            'date': date,
                            'payment': payment,
                            'ref':ref,
                            'type':type,
                            'total':total,
                            'balance':bal
                        }
                        reportData.append(details)

                context = {'cmp':cmp, 'reportData':reportData, 'totalMoneyIn':totMoneyIn, 'totalMoneyOut':totMoneyOut, 'startDate':startDate, 'endDate':endDate,'totalSales':totSales, 'totalPurchase':totPurchase, 'totExpense':totExpense, 'BALANCE':BAL, 'partyName':pName}
                template_path = 'company/reports/Fin_Party_Statement_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_Party_Statement'
                subject = f"Report_Party_Statement"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Party Statement. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_partyStatementReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_partyStatementReport)
# End
# ------------------------------------ sale_summary_byHSN Report ------------------------------------
def sale_summary_byHSN(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
        items = Fin_Items.objects.filter(Company = cmp)


        reportData = []
        totitem=0

        invoice_items = Fin_Invoice_Items.objects.filter(Invoice__Company=cmp).values('hsn').annotate(
            total_sales=Sum('total'),
            total_igst=Sum('Invoice__igst'),
            total_sgst=Sum('Invoice__sgst'),
            
            total_cgst=Sum('Invoice__cgst'),
            total_subtotal=Sum('Invoice__subtotal'),
            
        )
        print(invoice_items)
        
        recurring_invoice_items = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice__Company=cmp).values('hsn').annotate(
            total_sales=Sum('total'),
            total_igst=Sum('RecInvoice__igst'),
            total_sgst=Sum('RecInvoice__sgst'),
            total_cgst=Sum('RecInvoice__cgst'),
            total_subtotal=Sum('RecInvoice__subtotal'),
        )
        print(recurring_invoice_items)


        merged_data = {}

        for item in invoice_items:
            hsn = item['hsn'] 
            if hsn not in merged_data:
                merged_data[hsn] = {
                    'total_sales': item.get('total_sales', 0),
                    'total_igst': item.get('total_igst', 0),
                    'total_sgst': item.get('total_sgst', 0),
                    'total_cgst': item.get('total_cgst', 0),
                    'total_subtotal': item.get('total_subtotal', 0),
                }
            else:
                merged_data[hsn]['total_sales'] += item.get('total_sales', 0)
                merged_data[hsn]['total_igst'] += item.get('total_igst', 0)
                merged_data[hsn]['total_sgst'] += item.get('total_sgst', 0)
                merged_data[hsn]['total_cgst'] += item.get('total_cgst', 0)
                merged_data[hsn]['total_subtotal'] += item.get('total_subtotal', 0)
       
        for item in recurring_invoice_items:
            hsn = item['hsn']
            if hsn not in merged_data:
                merged_data[hsn] = {
                    'total_sales': item.get('total_sales', 0),
                    'total_igst': item.get('total_igst', 0),
                    'total_sgst': item.get('total_sgst', 0),
                    'total_cgst': item.get('total_cgst', 0),
                    'total_subtotal': item.get('total_subtotal', 0),
                }
            else:
                merged_data[hsn]['total_sales'] += item.get('total_sales', 0)
                merged_data[hsn]['total_igst'] += item.get('total_igst', 0)
                merged_data[hsn]['total_sgst'] += item.get('total_sgst', 0)
                merged_data[hsn]['total_cgst'] += item.get('total_cgst', 0)
                merged_data[hsn]['total_subtotal'] += item.get('total_subtotal', 0)


       

        # Construct the aggregated report data
        for hsn, item in merged_data.items():
            total = item.get('total_sales', 0)
            igst = item.get('total_igst', 0)
            sgst = item.get('total_sgst', 0)
            cgst = item.get('total_cgst', 0)
            subtotal = item.get('total_subtotal', 0)

            details = {
                'type': hsn,
                'total': total,
                'igst': igst,
                'sgst': sgst,
                'cgst': cgst,
                'subtotal': subtotal,
            }
            reportData.append(details)

        tototal = sum(item['total_sales'] for item in merged_data.values())  # Calculate total sales
        totitem=len(items)


        context = {
            'allmodules': allmodules,
            'com': com,
            'cmp': cmp,
            'data': data,
            'reportData': reportData,
            'tototal': tototal,
            'totitem':totitem,
        }
        return render(request, 'company/reports/sale_summary_byHSN.html', context)
    

def Fin_saleshsnCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
        status = request.GET.get('status')
       
        items = Fin_Items.objects.filter(Company = cmp)


        reportData = []
        totitem=0
        
        if status == 'all':

            invoice_items = Fin_Invoice_Items.objects.filter(Invoice__Company=cmp,Invoice__invoice_date__range=[startDate, endDate]).values('hsn').annotate(
                total_sales=Sum('total'),
                total_igst=Sum('Invoice__igst'),
                total_sgst=Sum('Invoice__sgst'),
                
                total_cgst=Sum('Invoice__cgst'),
                total_subtotal=Sum('Invoice__subtotal'),
                
            )
            
            recurring_invoice_items = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice__Company=cmp,RecInvoice__start_date__range=[startDate, endDate]).values('hsn').annotate(
                total_sales=Sum('total'),
                total_igst=Sum('RecInvoice__igst'),
                total_sgst=Sum('RecInvoice__sgst'),
                total_cgst=Sum('RecInvoice__cgst'),
                total_subtotal=Sum('RecInvoice__subtotal'),
            )

            merged_data = {}

            for item in invoice_items:
                hsn = item['hsn'] 
                if hsn not in merged_data:
                    merged_data[hsn] = {
                        'total_sales': item.get('total_sales', 0),
                        'total_igst': item.get('total_igst', 0),
                        'total_sgst': item.get('total_sgst', 0),
                        'total_cgst': item.get('total_cgst', 0),
                        'total_subtotal': item.get('total_subtotal', 0),
                    }
                else:
                    merged_data[hsn]['total_sales'] += item.get('total_sales', 0)
                    merged_data[hsn]['total_igst'] += item.get('total_igst', 0)
                    merged_data[hsn]['total_sgst'] += item.get('total_sgst', 0)
                    merged_data[hsn]['total_cgst'] += item.get('total_cgst', 0)
                    merged_data[hsn]['total_subtotal'] += item.get('total_subtotal', 0)
        
            for item in recurring_invoice_items:
                hsn = item['hsn']
                if hsn not in merged_data:
                    merged_data[hsn] = {
                        'total_sales': item.get('total_sales', 0),
                        'total_igst': item.get('total_igst', 0),
                        'total_sgst': item.get('total_sgst', 0),
                        'total_cgst': item.get('total_cgst', 0),
                        'total_subtotal': item.get('total_subtotal', 0),
                    }
                else:
                    merged_data[hsn]['total_sales'] += item.get('total_sales', 0)
                    merged_data[hsn]['total_igst'] += item.get('total_igst', 0)
                    merged_data[hsn]['total_sgst'] += item.get('total_sgst', 0)
                    merged_data[hsn]['total_cgst'] += item.get('total_cgst', 0)
                    merged_data[hsn]['total_subtotal'] += item.get('total_subtotal', 0)


        

            # Construct the aggregated report data
            for hsn, item in merged_data.items():
                total = item.get('total_sales', 0)
                igst = item.get('total_igst', 0)
                sgst = item.get('total_sgst', 0)
                cgst = item.get('total_cgst', 0)
                subtotal = item.get('total_subtotal', 0)

                details = {
                    'type': hsn,
                    'total': total,
                    'igst': igst,
                    'sgst': sgst,
                    'cgst': cgst,
                    'subtotal': subtotal,
                }
                reportData.append(details)

            tototal = sum(item['total_sales'] for item in merged_data.values())  # Calculate total sales
            totitem=len(items)
        if status == 'Invoice':

            invoice_items = Fin_Invoice_Items.objects.filter(Invoice__Company=cmp,Invoice__invoice_date__range=[startDate, endDate]).values('hsn').annotate(
                total_sales=Sum('total'),
                total_igst=Sum('Invoice__igst'),
                total_sgst=Sum('Invoice__sgst'),
                
                total_cgst=Sum('Invoice__cgst'),
                total_subtotal=Sum('Invoice__subtotal'),
                
            )
            merged_data = {}

            for item in invoice_items:
                hsn = item['hsn'] 
                if hsn not in merged_data:
                    merged_data[hsn] = {
                        'total_sales': item.get('total_sales', 0),
                        'total_igst': item.get('total_igst', 0),
                        'total_sgst': item.get('total_sgst', 0),
                        'total_cgst': item.get('total_cgst', 0),
                        'total_subtotal': item.get('total_subtotal', 0),
                    }
                else:
                    merged_data[hsn]['total_sales'] += item.get('total_sales', 0)
                    merged_data[hsn]['total_igst'] += item.get('total_igst', 0)
                    merged_data[hsn]['total_sgst'] += item.get('total_sgst', 0)
                    merged_data[hsn]['total_cgst'] += item.get('total_cgst', 0)
                    merged_data[hsn]['total_subtotal'] += item.get('total_subtotal', 0)
        

            # Construct the aggregated report data
            for hsn, item in merged_data.items():
                total = item.get('total_sales', 0)
                igst = item.get('total_igst', 0)
                sgst = item.get('total_sgst', 0)
                cgst = item.get('total_cgst', 0)
                subtotal = item.get('total_subtotal', 0)

                details = {
                    'type': hsn,
                    'total': total,
                    'igst': igst,
                    'sgst': sgst,
                    'cgst': cgst,
                    'subtotal': subtotal,
                }
                reportData.append(details)

            tototal = sum(item['total_sales'] for item in merged_data.values())  # Calculate total sales
            totitem=len(items)
        if status == 'Recurring':

            
            
            recurring_invoice_items = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice__Company=cmp,RecInvoice__start_date__range=[startDate, endDate]).values('hsn').annotate(
                total_sales=Sum('total'),
                total_igst=Sum('RecInvoice__igst'),
                total_sgst=Sum('RecInvoice__sgst'),
                total_cgst=Sum('RecInvoice__cgst'),
                total_subtotal=Sum('RecInvoice__subtotal'),
            )
            merged_data = {}
        
            for item in recurring_invoice_items:
                hsn = item['hsn']
                if hsn not in merged_data:
                    merged_data[hsn] = {
                        'total_sales': item.get('total_sales', 0),
                        'total_igst': item.get('total_igst', 0),
                        'total_sgst': item.get('total_sgst', 0),
                        'total_cgst': item.get('total_cgst', 0),
                        'total_subtotal': item.get('total_subtotal', 0),
                    }
                else:
                    merged_data[hsn]['total_sales'] += item.get('total_sales', 0)
                    merged_data[hsn]['total_igst'] += item.get('total_igst', 0)
                    merged_data[hsn]['total_sgst'] += item.get('total_sgst', 0)
                    merged_data[hsn]['total_cgst'] += item.get('total_cgst', 0)
                    merged_data[hsn]['total_subtotal'] += item.get('total_subtotal', 0)


        

            # Construct the aggregated report data
            for hsn, item in merged_data.items():
                total = item.get('total_sales', 0)
                igst = item.get('total_igst', 0)
                sgst = item.get('total_sgst', 0)
                cgst = item.get('total_cgst', 0)
                subtotal = item.get('total_subtotal', 0)

                details = {
                    'type': hsn,
                    'total': total,
                    'igst': igst,
                    'sgst': sgst,
                    'cgst': cgst,
                    'subtotal': subtotal,
                }
                reportData.append(details)

            tototal = sum(item['total_sales'] for item in merged_data.values())  # Calculate total sales
            totitem=len(items)



        

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData, 'tototal': tototal,
            'totitem':totitem, 'startDate': startDate, 'endDate': endDate, 'status': status
        }
        return render(request, 'company/reports/sale_summary_byHSN.html', context)
    else:
        return redirect('/')


def Fin_sharesalesHSNDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                cust = Fin_Customers.objects.filter(Company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                items = Fin_Items.objects.filter(Company = cmp)


                reportData = []
                totitem=0

                invoice_items = Fin_Invoice_Items.objects.filter(Invoice__Company=cmp).values('hsn').annotate(
                    total_sales=Sum('total'),
                    total_igst=Sum('Invoice__igst'),
                    total_sgst=Sum('Invoice__sgst'),
                    
                    total_cgst=Sum('Invoice__cgst'),
                    total_subtotal=Sum('Invoice__subtotal'),
                    
                )
                print(invoice_items)
                
                recurring_invoice_items = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice__Company=cmp).values('hsn').annotate(
                    total_sales=Sum('total'),
                    total_igst=Sum('RecInvoice__igst'),
                    total_sgst=Sum('RecInvoice__sgst'),
                    total_cgst=Sum('RecInvoice__cgst'),
                    total_subtotal=Sum('RecInvoice__subtotal'),
                )
                print(recurring_invoice_items)


                merged_data = {}

                for item in invoice_items:
                    hsn = item['hsn'] 
                    if hsn not in merged_data:
                        merged_data[hsn] = {
                            'total_sales': item.get('total_sales', 0),
                            'total_igst': item.get('total_igst', 0),
                            'total_sgst': item.get('total_sgst', 0),
                            'total_cgst': item.get('total_cgst', 0),
                            'total_subtotal': item.get('total_subtotal', 0),
                        }
                    else:
                        merged_data[hsn]['total_sales'] += item.get('total_sales', 0)
                        merged_data[hsn]['total_igst'] += item.get('total_igst', 0)
                        merged_data[hsn]['total_sgst'] += item.get('total_sgst', 0)
                        merged_data[hsn]['total_cgst'] += item.get('total_cgst', 0)
                        merged_data[hsn]['total_subtotal'] += item.get('total_subtotal', 0)
            
                for item in recurring_invoice_items:
                    hsn = item['hsn']
                    if hsn not in merged_data:
                        merged_data[hsn] = {
                            'total_sales': item.get('total_sales', 0),
                            'total_igst': item.get('total_igst', 0),
                            'total_sgst': item.get('total_sgst', 0),
                            'total_cgst': item.get('total_cgst', 0),
                            'total_subtotal': item.get('total_subtotal', 0),
                        }
                    else:
                        merged_data[hsn]['total_sales'] += item.get('total_sales', 0)
                        merged_data[hsn]['total_igst'] += item.get('total_igst', 0)
                        merged_data[hsn]['total_sgst'] += item.get('total_sgst', 0)
                        merged_data[hsn]['total_cgst'] += item.get('total_cgst', 0)
                        merged_data[hsn]['total_subtotal'] += item.get('total_subtotal', 0)


            

                # Construct the aggregated report data
                for hsn, item in merged_data.items():
                    total = item.get('total_sales', 0)
                    igst = item.get('total_igst', 0)
                    sgst = item.get('total_sgst', 0)
                    cgst = item.get('total_cgst', 0)
                    subtotal = item.get('total_subtotal', 0)

                    details = {
                        'type': hsn,
                        'total': total,
                        'igst': igst,
                        'sgst': sgst,
                        'cgst': cgst,
                        'subtotal': subtotal,
                    }
                    reportData.append(details)

                tototal = sum(item['total_sales'] for item in merged_data.values())  # Calculate total sales
                totitem=len(items)


    

                   
                
                context = {'cmp':cmp, 'reportData':reportData, 'tototal': tototal,'totitem':totitem,  'startDate':startDate,'endDate':endDate}
                template_path = 'company/reports/sales_summarypdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_sales_summary_by_HSN'
                subject = f"Report_sales_summary_by_HSN"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - sales_summary_by_HSN. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(sale_summary_byHSN)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(sale_summary_byHSN)
            
#End
# < ------------- Shemeem -------- > Reports - Stock Details < ------------------------------- >
def Fin_stockDetailsReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        items = Fin_Items.objects.filter(Company = cmp)

        reportData = []

        for i in items:
            qIn = 0
            qOut = 0
            name = i.name
            bQty = int(i.opening_stock)
            pAmt = i.purchase_price
            sAmt = i.selling_price

            invItems = Fin_Invoice_Items.objects.filter(Item = i)
            recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item = i)
            retInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = i)

            if invItems:
                for itm in invItems:
                    qOut += int(itm.quantity)

            if recInvItems:
                for itm in recInvItems:
                    qOut += int(itm.quantity)

            if retInvItems:
                for itm in retInvItems:
                    qOut += int(itm.Quantity)

            billItems = Fin_Purchase_Bill_Item.objects.filter(item = i)
            recBillItems = Fin_Recurring_Bill_Items.objects.filter(items = i)

            if billItems:
                for itm in billItems:
                    qIn += int(itm.qty)

            if recBillItems:
                for itm in recBillItems:
                    qIn += int(itm.quantity)

            closingQty = bQty - qOut + qIn

            det = {
                'name':name,
                'pAmount': pAmt,
                'sAmount':sAmt,
                'bQty':bQty,
                'qtyIn':qIn,
                'qtyOut':qOut,
                'cQty':closingQty
            }
            reportData.append(det)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_Stock_Details.html', context)
    else:
        return redirect('/')


def Fin_shareStockDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                items = Fin_Items.objects.filter(Company = cmp)
                reportData = []

                for i in items:
                    qIn = 0
                    qOut = 0
                    name = i.name
                    bQty = int(i.opening_stock)
                    pAmt = i.purchase_price
                    sAmt = i.selling_price

                    invItems = Fin_Invoice_Items.objects.filter(Item = i)
                    recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item = i)
                    retInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = i)

                    if invItems:
                        for itm in invItems:
                            qOut += int(itm.quantity)

                    if recInvItems:
                        for itm in recInvItems:
                            qOut += int(itm.quantity)

                    if retInvItems:
                        for itm in retInvItems:
                            qOut += int(itm.Quantity)

                    billItems = Fin_Purchase_Bill_Item.objects.filter(item = i)
                    recBillItems = Fin_Recurring_Bill_Items.objects.filter(items = i)

                    if billItems:
                        for itm in billItems:
                            qIn += int(itm.qty)

                    if recBillItems:
                        for itm in recBillItems:
                            qIn += int(itm.quantity)

                    closingQty = bQty - qOut + qIn

                    det = {
                        'name':name,
                        'pAmount': pAmt,
                        'sAmount':sAmt,
                        'bQty':bQty,
                        'qtyIn':qIn,
                        'qtyOut':qOut,
                        'cQty':closingQty
                    }
                    reportData.append(det)

                context = {'cmp':cmp, 'reportData':reportData}
                template_path = 'company/reports/Fin_Stock_Details_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_Stock_Details'
                subject = f"Report_Stock_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Stock Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_stockDetailsReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_stockDetailsReport)

#End
# < ------------- Shemeem -------- > Reports - All Parties < ------------------------------- >
def Fin_allPartiesReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        cust = Fin_Customers.objects.filter(Company = cmp)
        vend = Fin_Vendors.objects.filter(Company = cmp)

        reportData = []

        totReceivable = 0
        for c in cust:
            receivable = 0
            partyName = c.title+" "+c.first_name+" "+c.last_name
            email = c.email
            mob = c.mobile
            credit = c.credit_limit

            inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c)
            rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c)
            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c)

            if inv:
                for i in inv:
                    receivable += float(i.balance)
                    totReceivable += float(i.balance)

            if recInv:
                for rc in recInv:
                    receivable += float(rc.balance)
                    totReceivable += float(rc.balance)

            if rtInv:
                for rt in rtInv:
                    receivable += float(rt.Balance)
                    totReceivable += float(rt.Balance)

            details = {
                'name': partyName,
                'email': email,
                'credit':credit,
                'mobile':mob,
                'rec':receivable,
                'pay':0
            }
            reportData.append(details)

        totPayable = 0
        for v in vend:
            payable = 0
            partyName = v.title+" "+v.first_name+" "+v.last_name
            email = v.email
            mob = v.mobile
            credit = v.credit_limit

            bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v)
            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v)


            if bill:
                for bl in bill:
                    payable += float(bl.balance)
                    totPayable += float(bl.balance)

            if rcrbl:
                for rb in rcrbl:
                    payable += float(rb.balance)
                    totPayable += float(rb.balance)

            details = {
                'name': partyName,
                'email': email,
                'credit':credit,
                'mobile':mob,
                'rec': 0,
                'pay':payable
            }
            reportData.append(details)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'vendors':vend, 'reportData':reportData, 'totalReceivable':totReceivable, 'totalPayable':totPayable,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_All_Parties.html', context)
    else:
        return redirect('/')

def Fin_allPartiesReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            prty = request.GET['parties']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            
            reportData = []
            totPayable = 0
            totReceivable = 0
            cust = Fin_Customers.objects.filter(Company = cmp)
            vend = Fin_Vendors.objects.filter(Company = cmp)

            if startDate is None or endDate is None:
                if prty == 'payable':
                    for v in vend:
                        payable = 0
                        partyName = v.title+" "+v.first_name+" "+v.last_name
                        email = v.email
                        mob = v.mobile
                        credit = v.credit_limit
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v)
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v)
                        if bill:
                            for bl in bill:
                                payable += float(bl.balance)
                                totPayable += float(bl.balance)

                        if rcrbl:
                            for rb in rcrbl:
                                payable += float(rb.balance)
                                totPayable += float(rb.balance)

                        details = {
                            'name': partyName,
                            'email': email,
                            'credit':credit,
                            'mobile':mob,
                            'rec': 0,
                            'pay':payable
                        }
                        reportData.append(details)
                elif prty == 'receivable':
                    for c in cust:
                        receivable = 0
                        partyName = c.title+" "+c.first_name+" "+c.last_name
                        email = c.email
                        mob = c.mobile
                        credit = c.credit_limit

                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c)
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c)
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c)

                        if inv:
                            for i in inv:
                                receivable += float(i.balance)
                                totReceivable += float(i.balance)

                        if recInv:
                            for rc in recInv:
                                receivable += float(rc.balance)
                                totReceivable += float(rc.balance)

                        if rtInv:
                            for rt in rtInv:
                                receivable += float(rt.Balance)
                                totReceivable += float(rt.Balance)

                        details = {
                            'name': partyName,
                            'email': email,
                            'credit':credit,
                            'mobile':mob,
                            'rec':receivable,
                            'pay':0
                        }
                        reportData.append(details)
                else:
                    for c in cust:
                        receivable = 0
                        partyName = c.title+" "+c.first_name+" "+c.last_name
                        email = c.email
                        mob = c.mobile
                        credit = c.credit_limit

                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c)
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c)
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c)

                        if inv:
                            for i in inv:
                                receivable += float(i.balance)
                                totReceivable += float(i.balance)

                        if recInv:
                            for rc in recInv:
                                receivable += float(rc.balance)
                                totReceivable += float(rc.balance)

                        if rtInv:
                            for rt in rtInv:
                                receivable += float(rt.Balance)
                                totReceivable += float(rt.Balance)

                        details = {
                            'name': partyName,
                            'email': email,
                            'credit':credit,
                            'mobile':mob,
                            'rec':receivable,
                            'pay':0
                        }
                        reportData.append(details)

                    for v in vend:
                        payable = 0
                        partyName = v.title+" "+v.first_name+" "+v.last_name
                        email = v.email
                        mob = v.mobile
                        credit = v.credit_limit

                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v)
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v)


                        if bill:
                            for bl in bill:
                                payable += float(bl.balance)
                                totPayable += float(bl.balance)

                        if rcrbl:
                            for rb in rcrbl:
                                payable += float(rb.balance)
                                totPayable += float(rb.balance)

                        details = {
                            'name': partyName,
                            'email': email,
                            'credit':credit,
                            'mobile':mob,
                            'rec': 0,
                            'pay':payable
                        }
                        reportData.append(details)
            else:
                if prty == 'payable':
                    for v in vend:
                        payable = 0
                        partyName = v.title+" "+v.first_name+" "+v.last_name
                        email = v.email
                        mob = v.mobile
                        credit = v.credit_limit
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v, bill_date__range = [startDate, endDate])
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v, date__range = [startDate, endDate])
                        if bill:
                            for bl in bill:
                                payable += float(bl.balance)
                                totPayable += float(bl.balance)

                        if rcrbl:
                            for rb in rcrbl:
                                payable += float(rb.balance)
                                totPayable += float(rb.balance)

                        details = {
                            'name': partyName,
                            'email': email,
                            'credit':credit,
                            'mobile':mob,
                            'rec': 0,
                            'pay':payable
                        }
                        reportData.append(details)
                elif prty == 'receivable':
                    for c in cust:
                        receivable = 0
                        partyName = c.title+" "+c.first_name+" "+c.last_name
                        email = c.email
                        mob = c.mobile
                        credit = c.credit_limit

                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c, invoice_date__range = [startDate, endDate])
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c, Retainer_Invoice_date__range = [startDate, endDate])
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c, start_date__range = [startDate, endDate])

                        if inv:
                            for i in inv:
                                receivable += float(i.balance)
                                totReceivable += float(i.balance)

                        if recInv:
                            for rc in recInv:
                                receivable += float(rc.balance)
                                totReceivable += float(rc.balance)

                        if rtInv:
                            for rt in rtInv:
                                receivable += float(rt.Balance)
                                totReceivable += float(rt.Balance)

                        details = {
                            'name': partyName,
                            'email': email,
                            'credit':credit,
                            'mobile':mob,
                            'rec':receivable,
                            'pay':0
                        }
                        reportData.append(details)
                else:
                    for c in cust:
                        receivable = 0
                        partyName = c.title+" "+c.first_name+" "+c.last_name
                        email = c.email
                        mob = c.mobile
                        credit = c.credit_limit

                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c, invoice_date__range = [startDate, endDate])
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c, Retainer_Invoice_date__range = [startDate, endDate])
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c, start_date__range = [startDate, endDate])

                        if inv:
                            for i in inv:
                                receivable += float(i.balance)
                                totReceivable += float(i.balance)

                        if recInv:
                            for rc in recInv:
                                receivable += float(rc.balance)
                                totReceivable += float(rc.balance)

                        if rtInv:
                            for rt in rtInv:
                                receivable += float(rt.Balance)
                                totReceivable += float(rt.Balance)

                        details = {
                            'name': partyName,
                            'email': email,
                            'credit':credit,
                            'mobile':mob,
                            'rec':receivable,
                            'pay':0
                        }
                        reportData.append(details)

                    for v in vend:
                        payable = 0
                        partyName = v.title+" "+v.first_name+" "+v.last_name
                        email = v.email
                        mob = v.mobile
                        credit = v.credit_limit

                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v, bill_date__range = [startDate, endDate])
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v, date__range = [startDate, endDate])


                        if bill:
                            for bl in bill:
                                payable += float(bl.balance)
                                totPayable += float(bl.balance)

                        if rcrbl:
                            for rb in rcrbl:
                                payable += float(rb.balance)
                                totPayable += float(rb.balance)

                        details = {
                            'name': partyName,
                            'email': email,
                            'credit':credit,
                            'mobile':mob,
                            'rec': 0,
                            'pay':payable
                        }
                        reportData.append(details)

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'vendors':vend, 'reportData':reportData, 'totalReceivable':totReceivable, 'totalPayable':totPayable,
                'startDate':startDate, 'endDate':endDate, 'parties':prty
            }
            return render(request,'company/reports/Fin_All_Parties.html', context)
    else:
        return redirect('/')

def Fin_shareAllPartiesReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                prty = request.POST['parties']

                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totPayable = 0
                totReceivable = 0
                cust = Fin_Customers.objects.filter(Company = cmp)
                vend = Fin_Vendors.objects.filter(Company = cmp)

                if startDate is None or endDate is None:
                    if prty == 'payable':
                        for v in vend:
                            payable = 0
                            partyName = v.title+" "+v.first_name+" "+v.last_name
                            email = v.email
                            mob = v.mobile
                            credit = v.credit_limit
                            bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v)
                            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v)
                            if bill:
                                for bl in bill:
                                    payable += float(bl.balance)
                                    totPayable += float(bl.balance)

                            if rcrbl:
                                for rb in rcrbl:
                                    payable += float(rb.balance)
                                    totPayable += float(rb.balance)

                            details = {
                                'name': partyName,
                                'email': email,
                                'credit':credit,
                                'mobile':mob,
                                'rec': 0,
                                'pay':payable
                            }
                            reportData.append(details)
                    elif prty == 'receivable':
                        for c in cust:
                            receivable = 0
                            partyName = c.title+" "+c.first_name+" "+c.last_name
                            email = c.email
                            mob = c.mobile
                            credit = c.credit_limit

                            inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c)
                            rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c)
                            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c)

                            if inv:
                                for i in inv:
                                    receivable += float(i.balance)
                                    totReceivable += float(i.balance)

                            if recInv:
                                for rc in recInv:
                                    receivable += float(rc.balance)
                                    totReceivable += float(rc.balance)

                            if rtInv:
                                for rt in rtInv:
                                    receivable += float(rt.Balance)
                                    totReceivable += float(rt.Balance)

                            details = {
                                'name': partyName,
                                'email': email,
                                'credit':credit,
                                'mobile':mob,
                                'rec':receivable,
                                'pay':0
                            }
                            reportData.append(details)
                    else:
                        for c in cust:
                            receivable = 0
                            partyName = c.title+" "+c.first_name+" "+c.last_name
                            email = c.email
                            mob = c.mobile
                            credit = c.credit_limit

                            inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c)
                            rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c)
                            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c)

                            if inv:
                                for i in inv:
                                    receivable += float(i.balance)
                                    totReceivable += float(i.balance)

                            if recInv:
                                for rc in recInv:
                                    receivable += float(rc.balance)
                                    totReceivable += float(rc.balance)

                            if rtInv:
                                for rt in rtInv:
                                    receivable += float(rt.Balance)
                                    totReceivable += float(rt.Balance)

                            details = {
                                'name': partyName,
                                'email': email,
                                'credit':credit,
                                'mobile':mob,
                                'rec':receivable,
                                'pay':0
                            }
                            reportData.append(details)

                        for v in vend:
                            payable = 0
                            partyName = v.title+" "+v.first_name+" "+v.last_name
                            email = v.email
                            mob = v.mobile
                            credit = v.credit_limit

                            bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v)
                            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v)


                            if bill:
                                for bl in bill:
                                    payable += float(bl.balance)
                                    totPayable += float(bl.balance)

                            if rcrbl:
                                for rb in rcrbl:
                                    payable += float(rb.balance)
                                    totPayable += float(rb.balance)

                            details = {
                                'name': partyName,
                                'email': email,
                                'credit':credit,
                                'mobile':mob,
                                'rec': 0,
                                'pay':payable
                            }
                            reportData.append(details)
                else:
                    if prty == 'payable':
                        for v in vend:
                            payable = 0
                            partyName = v.title+" "+v.first_name+" "+v.last_name
                            email = v.email
                            mob = v.mobile
                            credit = v.credit_limit
                            bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v, bill_date__range = [startDate, endDate])
                            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v, date__range = [startDate, endDate])
                            if bill:
                                for bl in bill:
                                    payable += float(bl.balance)
                                    totPayable += float(bl.balance)

                            if rcrbl:
                                for rb in rcrbl:
                                    payable += float(rb.balance)
                                    totPayable += float(rb.balance)

                            details = {
                                'name': partyName,
                                'email': email,
                                'credit':credit,
                                'mobile':mob,
                                'rec': 0,
                                'pay':payable
                            }
                            reportData.append(details)
                    elif prty == 'receivable':
                        for c in cust:
                            receivable = 0
                            partyName = c.title+" "+c.first_name+" "+c.last_name
                            email = c.email
                            mob = c.mobile
                            credit = c.credit_limit

                            inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c, invoice_date__range = [startDate, endDate])
                            rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c, Retainer_Invoice_date__range = [startDate, endDate])
                            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c, start_date__range = [startDate, endDate])

                            if inv:
                                for i in inv:
                                    receivable += float(i.balance)
                                    totReceivable += float(i.balance)

                            if recInv:
                                for rc in recInv:
                                    receivable += float(rc.balance)
                                    totReceivable += float(rc.balance)

                            if rtInv:
                                for rt in rtInv:
                                    receivable += float(rt.Balance)
                                    totReceivable += float(rt.Balance)

                            details = {
                                'name': partyName,
                                'email': email,
                                'credit':credit,
                                'mobile':mob,
                                'rec':receivable,
                                'pay':0
                            }
                            reportData.append(details)
                    else:
                        for c in cust:
                            receivable = 0
                            partyName = c.title+" "+c.first_name+" "+c.last_name
                            email = c.email
                            mob = c.mobile
                            credit = c.credit_limit

                            inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c, invoice_date__range = [startDate, endDate])
                            rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c, Retainer_Invoice_date__range = [startDate, endDate])
                            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c, start_date__range = [startDate, endDate])

                            if inv:
                                for i in inv:
                                    receivable += float(i.balance)
                                    totReceivable += float(i.balance)

                            if recInv:
                                for rc in recInv:
                                    receivable += float(rc.balance)
                                    totReceivable += float(rc.balance)

                            if rtInv:
                                for rt in rtInv:
                                    receivable += float(rt.Balance)
                                    totReceivable += float(rt.Balance)

                            details = {
                                'name': partyName,
                                'email': email,
                                'credit':credit,
                                'mobile':mob,
                                'rec':receivable,
                                'pay':0
                            }
                            reportData.append(details)

                        for v in vend:
                            payable = 0
                            partyName = v.title+" "+v.first_name+" "+v.last_name
                            email = v.email
                            mob = v.mobile
                            credit = v.credit_limit

                            bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v, bill_date__range = [startDate, endDate])
                            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v, date__range = [startDate, endDate])


                            if bill:
                                for bl in bill:
                                    payable += float(bl.balance)
                                    totPayable += float(bl.balance)

                            if rcrbl:
                                for rb in rcrbl:
                                    payable += float(rb.balance)
                                    totPayable += float(rb.balance)

                            details = {
                                'name': partyName,
                                'email': email,
                                'credit':credit,
                                'mobile':mob,
                                'rec': 0,
                                'pay':payable
                            }
                            reportData.append(details)

                context = {'cmp':cmp, 'reportData':reportData, 'totalReceivable':totReceivable, 'totalPayable':totPayable, 'startDate':startDate, 'endDate':endDate}
                template_path = 'company/reports/Fin_All_Parties_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_All_Parties'
                subject = f"Report_All_Parties"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - All Parties. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_allPartiesReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_allPartiesReport)
# End
# ------ low stock Report ------------discount Report ------------------------
def Fin_lowstockDetailsReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        items = Fin_Items.objects.filter(Company = cmp)

        reportData = []

        for i in items:
            qIn = 0
            qOut = 0
            name = i.name
            bQty = int(i.opening_stock)
            pAmt = i.purchase_price
            sAmt = i.selling_price
            minstock=i.min_stock
            stock_unit_rate=i.stock_unit_rate

            invItems = Fin_Invoice_Items.objects.filter(Item = i)
            recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item = i)
            retInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = i)

            if invItems:
                for itm in invItems:
                    qOut += int(itm.quantity)

            if recInvItems:
                for itm in recInvItems:
                    qOut += int(itm.quantity)

            if retInvItems:
                for itm in retInvItems:
                    qOut += int(itm.Quantity)

            billItems = Fin_Purchase_Bill_Item.objects.filter(item = i)
            recBillItems = Fin_Recurring_Bill_Items.objects.filter(items = i)

            if billItems:
                for itm in billItems:
                    qIn += int(itm.qty)

            if recBillItems:
                for itm in recBillItems:
                    qIn += int(itm.quantity)

            closingQty = bQty - qOut + qIn

            det = {
                'name':name,
                'minstock':minstock,
                'stock_unit_rate':stock_unit_rate,
              
                'bQty':bQty,
                
                'cQty':closingQty
            }
            reportData.append(det)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/lowstock_report.html', context)
    else:
        return redirect('/')


def Fin_sharelowStockDetailsReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                items = Fin_Items.objects.filter(Company = cmp)
                reportData = []

                for i in items:
                    qIn = 0
                    qOut = 0
                    name = i.name
                    bQty = int(i.opening_stock)
                    pAmt = i.purchase_price
                    sAmt = i.selling_price
                    minstock=i.min_stock
                    stock_unit_rate=i.stock_unit_rate


                    invItems = Fin_Invoice_Items.objects.filter(Item = i)
                    recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item = i)
                    retInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = i)

                    if invItems:
                        for itm in invItems:
                            qOut += int(itm.quantity)

                    if recInvItems:
                        for itm in recInvItems:
                            qOut += int(itm.quantity)

                    if retInvItems:
                        for itm in retInvItems:
                            qOut += int(itm.Quantity)

                    billItems = Fin_Purchase_Bill_Item.objects.filter(item = i)
                    recBillItems = Fin_Recurring_Bill_Items.objects.filter(items = i)

                    if billItems:
                        for itm in billItems:
                            qIn += int(itm.qty)

                    if recBillItems:
                        for itm in recBillItems:
                            qIn += int(itm.quantity)

                    closingQty = bQty - qOut + qIn

                    det = {
                        'name':name,
                        'pAmount': pAmt,
                        'sAmount':sAmt,
                        'minstock':minstock,
                        'stock_unit_rate':stock_unit_rate,
                        'bQty':bQty,
                        'qtyIn':qIn,
                        'qtyOut':qOut,
                        'cQty':closingQty
                    }
                    reportData.append(det)

                context = {'cmp':cmp, 'reportData':reportData}
                template_path = 'company/reports/Fin_LowStock_Details_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_lowStock_Details'
                subject = f"Report_lowStock_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - lowStock Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_lowstockDetailsReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_lowstockDetailsReport)
        
def Fin_sales_item_DiscountReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        items = Fin_Items.objects.filter(Company = cmp)

        reportData = []
        totamt=0
        totdiscount=0

        for i in items:
            qIn = 0
            qOut = 0
            discount=0
            amt =0

            name = i.name
            bQty = int(i.opening_stock)
            pAmt = i.purchase_price
            sAmt = i.selling_price
            minstock=i.min_stock
            stock_unit_rate=i.stock_unit_rate

            invItems = Fin_Invoice_Items.objects.filter(Item = i)
            recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item = i)
            retInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = i)

            if invItems:
                for itm in invItems:
                    qOut += int(itm.quantity)
                    discount +=itm.discount
                    amt +=itm.total


            if recInvItems:
                for itm in recInvItems:
                    qOut += int(itm.quantity)
                    discount +=itm.discount
                    amt +=itm.total

            if retInvItems:
                for itm in retInvItems:
                    qOut += int(itm.Quantity)
                    discount +=itm.discount
                    amt +=itm.Total
            totamt+=qOut
            totdiscount+=discount
            billItems = Fin_Purchase_Bill_Item.objects.filter(item = i)
            recBillItems = Fin_Recurring_Bill_Items.objects.filter(items = i)

            if billItems:
                for itm in billItems:
                    qIn += int(itm.qty)

            if recBillItems:
                for itm in recBillItems:
                    qIn += int(itm.quantity)

            closingQty = bQty - qOut + qIn
            

            det = {
                'name':name,
                'minstock':minstock,
                'stock_unit_rate':stock_unit_rate,
                'bQty':bQty,
                'qtyIn':qIn,
                'qtyOut':qOut,
                'cQty':closingQty,
                'discount':discount,
                'pAmount': pAmt,
                'sAmount':sAmt,
                'amt':amt,


            }
            reportData.append(det)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
            'startDate':None, 'endDate':None,'totamt':totamt,'totdiscount':totdiscount,
        }
        return render(request,'company/reports/Fin_sales_item_Discount.html', context)
    else:
        return redirect('/')
        

def Fin_sharesales_item_DiscountReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                items = Fin_Items.objects.filter(Company = cmp)
                reportData = []
                totamt=0
                totdiscount=0

                for i in items:
                    qIn = 0
                    qOut = 0
                    discount=0
                    amt =0

                    name = i.name
                    bQty = int(i.opening_stock)
                    pAmt = i.purchase_price
                    sAmt = i.selling_price
                    minstock=i.min_stock
                    stock_unit_rate=i.stock_unit_rate

                    invItems = Fin_Invoice_Items.objects.filter(Item = i)
                    recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item = i)
                    retInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = i)

                    if invItems:
                        for itm in invItems:
                            qOut += int(itm.quantity)
                            discount +=itm.discount
                            amt +=itm.total


                    if recInvItems:
                        for itm in recInvItems:
                            qOut += int(itm.quantity)
                            discount +=itm.discount
                            amt +=itm.total

                    if retInvItems:
                        for itm in retInvItems:
                            qOut += int(itm.Quantity)
                            discount +=itm.discount
                            amt +=itm.Total
                    totamt+=qOut
                    totdiscount+=discount
                    billItems = Fin_Purchase_Bill_Item.objects.filter(item = i)
                    recBillItems = Fin_Recurring_Bill_Items.objects.filter(items = i)

                    if billItems:
                        for itm in billItems:
                            qIn += int(itm.qty)

                    if recBillItems:
                        for itm in recBillItems:
                            qIn += int(itm.quantity)

                    closingQty = bQty - qOut + qIn
                    

                    det = {
                        'name':name,
                        'minstock':minstock,
                        'stock_unit_rate':stock_unit_rate,
                        'bQty':bQty,
                        'qtyIn':qIn,
                        'qtyOut':qOut,
                        'cQty':closingQty,
                        'discount':discount,
                        'pAmount': pAmt,
                        'sAmount':sAmt,
                        'amt':amt,


                    }
                    reportData.append(det)


                context = {'cmp':cmp, 'reportData':reportData,'totamt':totamt,'totdiscount':totdiscount}
                template_path = 'company/reports/Fin_sales_item_DiscountReport_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report__sales_item_Discount_Details'
                subject = f"Report_sales_item_DiscountR_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - sales item DiscountReport . \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_sales_item_DiscountReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_sales_item_DiscountReport)
            
#End

def Fin_sales_item_DiscountReportcutomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        startDate = request.GET.get('from_date', None)
        endDate = request.GET.get('to_date', None)
        print(startDate)
        print(endDate)

        items = Fin_Items.objects.filter(Company = cmp)

        reportData = []
        totamt=0
        totdiscount=0

        for i in items:
            qIn = 0
            qOut = 0
            discount=0
            amt =0

            name = i.name
            bQty = int(i.opening_stock)
            pAmt = i.purchase_price
            sAmt = i.selling_price
            minstock=i.min_stock
            stock_unit_rate=i.stock_unit_rate

            invItems = Fin_Invoice_Items.objects.filter(Item = i,Invoice__invoice_date__range=[startDate, endDate])
            recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item = i,RecInvoice__start_date__range=[startDate, endDate])
            retInvItems = Fin_Retainer_Invoice_Items.objects.filter(Item = i,Ret_Inv__Retainer_Invoice_date__range=[startDate, endDate])
            print(invItems)

            if invItems:
                for itm in invItems:
                    qOut += int(itm.quantity)
                    discount +=itm.discount
                    amt +=itm.total

            print(recInvItems)

            if recInvItems:
                for itm in recInvItems:
                    qOut += int(itm.quantity)
                    discount +=itm.discount
                    amt +=itm.total
            print(retInvItems)

            if retInvItems:
                for itm in retInvItems:
                    qOut += int(itm.Quantity)
                    discount +=itm.discount
                    amt +=itm.Total
            totamt+=qOut
            totdiscount+=discount
           

            det = {
                'name':name,
                'minstock':minstock,
                'stock_unit_rate':stock_unit_rate,
                'bQty':bQty,
                'qtyIn':qIn,
                'qtyOut':qOut,
                'discount':discount,
                'sAmount':sAmt,
                'amt':amt,


            }
            reportData.append(det)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
            'startDate':startDate, 'endDate':endDate,'totamt':totamt,'totdiscount':totdiscount,
        }
        return render(request,'company/reports/Fin_sales_item_Discount.html', context)
    else:
        return redirect('/')
        
# ------------------------------------ Aging Details ------------------------------------
def Fin_aging_details(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        age_interval = 4
        day_interval = 15

        first_interval = 1
        last_interval = day_interval
        interval_data = ['Current']
        day_count = [1]
        for i in range(age_interval):
            if i == age_interval -1 :
                interval_data.append(f'> {first_interval - 1} Days')
            else:
                interval_data.append(f'{first_interval} - {last_interval} Days')
            first_interval = last_interval + 1
            last_interval += day_interval
            day_count.append(first_interval)

        cust = Fin_Customers.objects.filter(Company = cmp)
        final_data_dict = {}

        for c in cust:
            invo = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
            rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')
            for i in invo:
                if float(i.balance) > 0: 
                    days = int((i.duedate - date.today()).days)
                    if days <= 0:
                        days = days*-1
                        for index in range(len(interval_data)):
                            if days < day_count[index]:
                                if interval_data[index] not in final_data_dict:
                                    final_data_dict[interval_data[index]] = [[i.duedate]]
                                    final_data_dict[interval_data[index]][0].append(i.invoice_no)
                                    final_data_dict[interval_data[index]][0].append('Overdue')
                                    final_data_dict[interval_data[index]][0].append([i.Customer.first_name + ' ' + i.Customer.last_name])
                                    final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[index]])
                                    final_data_dict[interval_data[index]].append([i.duedate])
                                    final_data_dict[interval_data[index]][index_count].append(i.invoice_no)
                                    final_data_dict[interval_data[index]][index_count].append('Overdue')
                                    final_data_dict[interval_data[index]][index_count].append([i.Customer.first_name + ' ' + i.Customer.last_name])
                                    final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][index_count].append(i.balance)
                                break
                        else:
                            if interval_data[-1] not in final_data_dict:
                                final_data_dict[interval_data[-1]] = [[i.duedate]]
                                final_data_dict[interval_data[-1]][0].append(i.invoice_no)
                                final_data_dict[interval_data[-1]][0].append('Overdue')
                                final_data_dict[interval_data[-1]][0].append([i.Customer.first_name + ' ' + i.Customer.last_name])
                                final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[-1]])
                                final_data_dict[interval_data[-1]].append([i.duedate])
                                final_data_dict[interval_data[-1]][index_count].append(i.invoice_no)
                                final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                final_data_dict[interval_data[-1]][index_count].append([i.Customer.first_name + ' ' + i.Customer.last_name])
                                final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][index_count].append(i.balance)

            for i in rinvo:
                if float(i.balance) > 0: 
                    days = int((i.end_date - date.today()).days)
                    if days <= 0:
                        days = days*-1
                        for index in range(len(interval_data)):
                            if days < day_count[index]:
                                if interval_data[index] not in final_data_dict:
                                    final_data_dict[interval_data[index]] = [[i.end_date]]
                                    final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                    final_data_dict[interval_data[index]][0].append('Overdue')
                                    final_data_dict[interval_data[index]][0].append([i.Customer.first_name + ' ' + i.Customer.last_name])
                                    final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[index]])
                                    final_data_dict[interval_data[index]].append([i.end_date])
                                    final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                    final_data_dict[interval_data[index]][index_count].append('Overdue')
                                    final_data_dict[interval_data[index]][index_count].append([i.Customer.first_name + ' ' + i.Customer.last_name])
                                    final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][index_count].append(i.balance)
                                break
                        else:
                            if interval_data[-1] not in final_data_dict:
                                final_data_dict[interval_data[-1]] = [[i.end_date]]
                                final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                                final_data_dict[interval_data[-1]][0].append('Overdue')
                                final_data_dict[interval_data[-1]][0].append([i.Customer.first_name + ' ' + i.Customer.last_name])
                                final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[-1]])
                                final_data_dict[interval_data[-1]].append([i.end_date])
                                final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                                final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                final_data_dict[interval_data[-1]][index_count].append([i.Customer.first_name + ' ' + i.Customer.last_name])
                                final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][index_count].append(i.balance)

        final_grandtotal = 0
        final_balance = 0
        final_total_dict = []
        for key,value in final_data_dict.items():
            total_grandtotal = 0
            total_balance = 0
            for item in value:
                total_grandtotal += float(item[5])
                final_grandtotal += float(item[5])
                total_balance += float(item[6])
                final_balance += float(item[6])
            final_total_dict.append([key, total_grandtotal, total_balance])
            
        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'final_balance':final_balance, 'startDate':None, 'endDate':None, 'aging_by':'inv_due_date', 'cust':cust,
            'age_interval':age_interval, 'final_data_dict':final_data_dict, 'day_interval':day_interval, 'cemail':None, 'cfname':'on', 'clname':'on', 'cphno':None, 
            'final_total_dict':final_total_dict, 'final_grandtotal':final_grandtotal, 'cust_name':'all'
        }
        return render(request,'company/Fin_AgingDetails.html', context)
    
def Fin_customize_aging_details(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        startDate = request.GET['from_date']
        endDate = request.GET['to_date']
        if startDate == "":
            startDate = None
        if endDate == "":
            endDate = None

        aging_by = request.GET.get('aging_by')
        if aging_by == '' or aging_by == None:
            aging_by = 'inv_due_date'

        age_interval = int(request.GET['age_interval'])

        if age_interval == 0:
            age_interval = 4

        try:
            day_interval = int(request.GET['day_interval'])
        except:
            day_interval = 15

        cust_name = request.GET['cust_name']

        if 'cust_email_show' in request.GET:
            cemail = request.GET['cust_email_show']
        else:
            cemail = None

        if 'cust_fname_show' in request.GET:
            cfname = request.GET['cust_fname_show']
        else:
            cfname = None

        if 'cust_lname_show' in request.GET:
            clname = request.GET['cust_lname_show']
        else:
            clname = None

        if 'cust_phone_show' in request.GET:
            cphno = request.GET['cust_phone_show']
        else:
            cphno = None

        first_interval = 1
        last_interval = day_interval
        interval_data = ['Current']
        day_count = [1]
        for i in range(age_interval):
            if i == age_interval -1 :
                interval_data.append(f'> {first_interval - 1} Days')
            else:
                interval_data.append(f'{first_interval} - {last_interval} Days')
            first_interval = last_interval + 1
            last_interval += day_interval
            day_count.append(first_interval)

        if cust_name == 'all':
            cust = Fin_Customers.objects.filter(Company = cmp)
        else:
            cust = Fin_Customers.objects.filter(Company = cmp, id=cust_name)
        final_data_dict = {}

        for c in cust:
            if startDate and endDate:
                if aging_by == 'inv_due_date':
                    invo = Fin_Invoice.objects.filter(Customer=c, duedate__range = [startDate, endDate], status = 'Saved')
                    rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, end_date__range = [startDate, endDate], status = 'Saved')
                else:
                    invo = Fin_Invoice.objects.filter(Customer=c, invoice_date__range = [startDate, endDate], status = 'Saved')
                    rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, start_date__range = [startDate, endDate], status = 'Saved')
            else:
                invo = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
                rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')

            for i in invo:
                if float(i.balance) > 0: 
                    days = int((i.duedate - date.today()).days)
                    if aging_by == 'inv_due_date':
                        if days <= 0:
                            days = days*-1
                            for index in range(len(interval_data)):
                                if days < day_count[index]:
                                    if interval_data[index] not in final_data_dict:
                                        final_data_dict[interval_data[index]] = [[i.duedate]]
                                        final_data_dict[interval_data[index]][0].append(i.invoice_no)
                                        final_data_dict[interval_data[index]][0].append('Overdue')
                                        final_data_dict[interval_data[index]][0].append([])
                                        if cfname and clname:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                        if cfname and not clname:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.first_name)
                                        if clname and not cfname:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.last_name)
                                        if cemail:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.email)
                                        if cphno:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.mobile)
                                        final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                        final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                        final_data_dict[interval_data[index]][0].append(i.balance)
                                    else:
                                        index_count = len(final_data_dict[interval_data[index]])
                                        final_data_dict[interval_data[index]].append([i.duedate])
                                        final_data_dict[interval_data[index]][index_count].append(i.invoice_no)
                                        final_data_dict[interval_data[index]][index_count].append('Overdue')
                                        final_data_dict[interval_data[index]][index_count].append([])
                                        if cfname and clname:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                        if cfname and not clname:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.first_name)
                                        if clname and not cfname:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.last_name)
                                        if cemail:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.email)
                                        if cphno:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.mobile)
                                        final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                        final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                        final_data_dict[interval_data[index]][index_count].append(i.balance)
                                    break
                            else:
                                if interval_data[-1] not in final_data_dict:
                                    final_data_dict[interval_data[-1]] = [[i.duedate]]
                                    final_data_dict[interval_data[-1]][0].append(i.invoice_no)
                                    final_data_dict[interval_data[-1]][0].append('Overdue')
                                    final_data_dict[interval_data[-1]][0].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.email)
                                    if cphno:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.mobile)
                                    final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                    final_data_dict[interval_data[-1]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[-1]])
                                    final_data_dict[interval_data[-1]].append([i.duedate])
                                    final_data_dict[interval_data[-1]][index_count].append(i.invoice_no)
                                    final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                    final_data_dict[interval_data[-1]][index_count].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.email)
                                    if cphno:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.mobile)
                                    final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                    final_data_dict[interval_data[-1]][index_count].append(i.balance)
                    elif aging_by == 'inv_date':
                        days = int((i.invoice_date - date.today()).days)
                        if days <= 0:
                            days = days*-1
                        for index in range(len(interval_data)):
                            if days < day_count[index]:
                                if interval_data[index] not in final_data_dict:
                                    final_data_dict[interval_data[index]] = [[i.invoice_date]]
                                    final_data_dict[interval_data[index]][0].append(i.invoice_no)
                                    if int((i.duedate - date.today()).days) > 0:
                                        final_data_dict[interval_data[index]][0].append('On Time')
                                    else:
                                        final_data_dict[interval_data[index]][0].append('Overdue')
                                    final_data_dict[interval_data[index]][0].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.email)
                                    if cphno:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.mobile)
                                    final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[index]])
                                    final_data_dict[interval_data[index]].append([i.invoice_date])
                                    final_data_dict[interval_data[index]][index_count].append(i.invoice_no)
                                    if int((i.duedate - date.today()).days) > 0:
                                        final_data_dict[interval_data[index]][index_count].append('On Time')
                                    else:
                                        final_data_dict[interval_data[index]][index_count].append('Overdue')
                                    final_data_dict[interval_data[index]][index_count].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.email)
                                    if cphno:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.mobile)
                                    final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][index_count].append(i.balance)
                                break
                        else:
                            if interval_data[-1] not in final_data_dict:
                                final_data_dict[interval_data[-1]] = [[i.invoice_date]]
                                final_data_dict[interval_data[-1]][0].append(i.invoice_no)
                                if int((i.duedate - date.today()).days) > 0:
                                    final_data_dict[interval_data[-1]][0].append('On Time')
                                else:
                                    final_data_dict[interval_data[-1]][0].append('Overdue')
                                final_data_dict[interval_data[-1]][0].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.email)
                                if cphno:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.mobile)
                                final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[-1]])
                                final_data_dict[interval_data[-1]].append([i.invoice_date])
                                final_data_dict[interval_data[-1]][index_count].append(i.invoice_no)
                                if int((i.duedate - date.today()).days) > 0:
                                    final_data_dict[interval_data[-1]][index_count].append('On Time')
                                else:
                                    final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                final_data_dict[interval_data[-1]][index_count].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.email)
                                if cphno:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.mobile)
                                final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][index_count].append(i.balance)

            for i in rinvo:
                if float(i.balance) > 0: 
                    days = int((i.end_date - date.today()).days)
                    if aging_by == 'inv_due_date':
                        if days <= 0:
                            days = days*-1
                            for index in range(len(interval_data)):
                                if days < day_count[index]:
                                    if interval_data[index] not in final_data_dict:
                                        final_data_dict[interval_data[index]] = [[i.end_date]]
                                        final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                        final_data_dict[interval_data[index]][0].append('Overdue')
                                        final_data_dict[interval_data[index]][0].append([])
                                        if cfname and clname:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                        if cfname and not clname:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.first_name)
                                        if clname and not cfname:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.last_name)
                                        if cemail:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.email)
                                        if cphno:
                                            final_data_dict[interval_data[index]][0][3].append(i.Customer.mobile)
                                        final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                        final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                        final_data_dict[interval_data[index]][0].append(i.balance)
                                    else:
                                        index_count = len(final_data_dict[interval_data[index]])
                                        final_data_dict[interval_data[index]].append([i.end_date])
                                        final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                        final_data_dict[interval_data[index]][index_count].append('Overdue')
                                        final_data_dict[interval_data[index]][index_count].append([])
                                        if cfname and clname:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                        if cfname and not clname:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.first_name)
                                        if clname and not cfname:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.last_name)
                                        if cemail:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.email)
                                        if cphno:
                                            final_data_dict[interval_data[index]][index_count][3].append(i.Customer.mobile)
                                        final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                        final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                        final_data_dict[interval_data[index]][index_count].append(i.balance)
                                    break
                            else:
                                if interval_data[-1] not in final_data_dict:
                                    final_data_dict[interval_data[-1]] = [[i.end_date]]
                                    final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                                    final_data_dict[interval_data[-1]][0].append('Overdue')
                                    final_data_dict[interval_data[-1]][0].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.email)
                                    if cphno:
                                        final_data_dict[interval_data[-1]][0][3].append(i.Customer.mobile)
                                    final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                    final_data_dict[interval_data[-1]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[-1]])
                                    final_data_dict[interval_data[-1]].append([i.end_date])
                                    final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                                    final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                    final_data_dict[interval_data[-1]][index_count].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.email)
                                    if cphno:
                                        final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.mobile)
                                    final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                    final_data_dict[interval_data[-1]][index_count].append(i.balance)
                    elif aging_by == 'inv_date':
                        days = int((i.start_date - date.today()).days)
                        if days <= 0:
                            days = days*-1
                        for index in range(len(interval_data)):
                            if days < day_count[index]:
                                if interval_data[index] not in final_data_dict:
                                    final_data_dict[interval_data[index]] = [[i.start_date]]
                                    final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                    if int((i.end_date - date.today()).days) > 0:
                                        final_data_dict[interval_data[index]][0].append('On Time')
                                    else:
                                        final_data_dict[interval_data[index]][0].append('Overdue')
                                    final_data_dict[interval_data[index]][0].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.email)
                                    if cphno:
                                        final_data_dict[interval_data[index]][0][3].append(i.Customer.mobile)
                                    final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][0].append(i.balance)
                                else:
                                    index_count = len(final_data_dict[interval_data[index]])
                                    final_data_dict[interval_data[index]].append([i.start_date])
                                    final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                    if int((i.end_date - date.today()).days) > 0:
                                        final_data_dict[interval_data[index]][index_count].append('On Time')
                                    else:
                                        final_data_dict[interval_data[index]][index_count].append('Overdue')
                                    final_data_dict[interval_data[index]][index_count].append([])
                                    if cfname and clname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                    if cfname and not clname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.first_name)
                                    if clname and not cfname:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.last_name)
                                    if cemail:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.email)
                                    if cphno:
                                        final_data_dict[interval_data[index]][index_count][3].append(i.Customer.mobile)
                                    final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                    final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                    final_data_dict[interval_data[index]][index_count].append(i.balance)
                                break
                        else:
                            if interval_data[-1] not in final_data_dict:
                                final_data_dict[interval_data[-1]] = [[i.start_date]]
                                final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                                if int((i.end_date - date.today()).days) > 0:
                                    final_data_dict[interval_data[-1]][0].append('On Time')
                                else:
                                    final_data_dict[interval_data[-1]][0].append('Overdue')
                                final_data_dict[interval_data[-1]][0].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.email)
                                if cphno:
                                    final_data_dict[interval_data[-1]][0][3].append(i.Customer.mobile)
                                final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][0].append(i.balance)
                            else:
                                index_count = len(final_data_dict[interval_data[-1]])
                                final_data_dict[interval_data[-1]].append([i.start_date])
                                final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                                if int((i.end_date - date.today()).days) > 0:
                                    final_data_dict[interval_data[-1]][index_count].append('On Time')
                                else:
                                    final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                final_data_dict[interval_data[-1]][index_count].append([])
                                if cfname and clname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                if cfname and not clname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.first_name)
                                if clname and not cfname:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.last_name)
                                if cemail:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.email)
                                if cphno:
                                    final_data_dict[interval_data[-1]][index_count][3].append(i.Customer.mobile)
                                final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                final_data_dict[interval_data[-1]][index_count].append(i.balance)

        final_grandtotal = 0
        final_balance = 0
        final_total_dict = []
        for key,value in final_data_dict.items():
            total_grandtotal = 0
            total_balance = 0
            for item in value:
                total_grandtotal += float(item[5])
                final_grandtotal += float(item[5])
                total_balance += float(item[6])
                final_balance += float(item[6])
            final_total_dict.append([key, total_grandtotal, total_balance])
        cust = Fin_Customers.objects.filter(Company = cmp)
        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'final_data_dict':final_data_dict, 'final_grandtotal':final_grandtotal, 'final_balance':final_balance, 'cust':cust,
            'final_balance':final_balance, 'startDate': startDate, 'endDate':endDate, 'aging_by':aging_by, 'age_interval':age_interval, 'final_total_dict':final_total_dict,
            'day_interval':day_interval, 'cemail':cemail, 'cfname':cfname, 'clname':clname, 'cphno':cphno, 'cust_name':cust_name
        }
        return render(request, 'company/Fin_AgingDetails.html', context)

def Fin_share_aging_details(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'GET':
                emails_string = request.GET.get('email_ids')

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.GET.get('email_message')
                # print(emails_list)
            
                startDate = request.GET.get('from_date')
                endDate = request.GET.get('to_date')
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                aging_by = request.GET.get('aging_by')
                if aging_by == '' or aging_by == None:
                    aging_by = 'inv_due_date'

                age_interval = int(request.GET.get('age_interval'))

                if age_interval == 0:
                    age_interval = 4

                try:
                    day_interval = int(request.GET.get('day_interval'))
                except:
                    day_interval = 15
                
                cust_name = request.GET.get('cust_name')

                first_interval = 1
                last_interval = day_interval
                interval_data = ['Current']
                day_count = [1]
                for i in range(age_interval):
                    if i == age_interval - 1 :
                        interval_data.append(f'> {first_interval - 1} Days')
                    else:
                        interval_data.append(f'{first_interval} - {last_interval} Days')
                    first_interval = last_interval + 1
                    last_interval += day_interval
                    day_count.append(first_interval)

                if cust_name == 'all':
                    cust = Fin_Customers.objects.filter(Company = com)
                else:
                    cust = Fin_Customers.objects.filter(Company = com, id=cust_name)
                final_data_dict = {}

                for c in cust:
                    if startDate and endDate:
                        if aging_by == 'inv_due_date':
                            invo = Fin_Invoice.objects.filter(Customer=c, duedate__range = [startDate, endDate], status = 'Saved')
                            rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, end_date__range = [startDate, endDate], status = 'Saved')
                        else:
                            invo = Fin_Invoice.objects.filter(Customer=c, invoice_date__range = [startDate, endDate], status = 'Saved')
                            rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, start_date__range = [startDate, endDate], status = 'Saved')
                    else:
                        invo = Fin_Invoice.objects.filter(Customer=c, status = 'Saved')
                        rinvo = Fin_Recurring_Invoice.objects.filter(Customer=c, status = 'Saved')

                    for i in invo:
                        if float(i.balance) > 0: 
                            days = int((i.duedate - date.today()).days)
                            if aging_by == 'inv_due_date':
                                if days <= 0:
                                    days = days*-1
                                    for index in range(len(interval_data)):
                                        if days < day_count[index]:
                                            if interval_data[index] not in final_data_dict:
                                                final_data_dict[interval_data[index]] = [[i.duedate]]
                                                final_data_dict[interval_data[index]][0].append(i.invoice_no)
                                                final_data_dict[interval_data[index]][0].append('Overdue')
                                                final_data_dict[interval_data[index]][0].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                                final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                                final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                                final_data_dict[interval_data[index]][0].append(i.balance)
                                            else:
                                                index_count = len(final_data_dict[interval_data[index]])
                                                final_data_dict[interval_data[index]].append([i.duedate])
                                                final_data_dict[interval_data[index]][index_count].append(i.invoice_no)
                                                final_data_dict[interval_data[index]][index_count].append('Overdue')
                                                final_data_dict[interval_data[index]][index_count].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                                final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                                final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                                final_data_dict[interval_data[index]][index_count].append(i.balance)
                                            break
                                    else:
                                        if interval_data[-1] not in final_data_dict:
                                            final_data_dict[interval_data[-1]] = [[i.duedate]]
                                            final_data_dict[interval_data[-1]][0].append(i.invoice_no)
                                            final_data_dict[interval_data[-1]][0].append('Overdue')
                                            final_data_dict[interval_data[-1]][0].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                            final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                            final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                            final_data_dict[interval_data[-1]][0].append(i.balance)
                                        else:
                                            index_count = len(final_data_dict[interval_data[-1]])
                                            final_data_dict[interval_data[-1]].append([i.duedate])
                                            final_data_dict[interval_data[-1]][index_count].append(i.invoice_no)
                                            final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                            final_data_dict[interval_data[-1]][index_count].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                            final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                            final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                            final_data_dict[interval_data[-1]][index_count].append(i.balance)
                            elif aging_by == 'inv_date':
                                days = int((i.invoice_date - date.today()).days)
                                if days <= 0:
                                    days = days*-1
                                for index in range(len(interval_data)):
                                    if days < day_count[index]:
                                        if interval_data[index] not in final_data_dict:
                                            final_data_dict[interval_data[index]] = [[i.invoice_date]]
                                            final_data_dict[interval_data[index]][0].append(i.invoice_no)
                                            if int((i.duedate - date.today()).days) > 0:
                                                final_data_dict[interval_data[index]][0].append('On Time')
                                            else:
                                                final_data_dict[interval_data[index]][0].append('Overdue')
                                            final_data_dict[interval_data[index]][0].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                            final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                            final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                            final_data_dict[interval_data[index]][0].append(i.balance)
                                        else:
                                            index_count = len(final_data_dict[interval_data[index]])
                                            final_data_dict[interval_data[index]].append([i.invoice_date])
                                            final_data_dict[interval_data[index]][index_count].append(i.invoice_no)
                                            if int((i.duedate - date.today()).days) > 0:
                                                final_data_dict[interval_data[index]][index_count].append('On Time')
                                            else:
                                                final_data_dict[interval_data[index]][index_count].append('Overdue')
                                            final_data_dict[interval_data[index]][index_count].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                            final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                            final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                            final_data_dict[interval_data[index]][index_count].append(i.balance)
                                        break
                                else:
                                    if interval_data[-1] not in final_data_dict:
                                        final_data_dict[interval_data[-1]] = [[i.invoice_date]]
                                        final_data_dict[interval_data[-1]][0].append(i.invoice_no)
                                        if int((i.duedate - date.today()).days) > 0:
                                            final_data_dict[interval_data[-1]][0].append('On Time')
                                        else:
                                            final_data_dict[interval_data[-1]][0].append('Overdue')
                                        final_data_dict[interval_data[-1]][0].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                        final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                        final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                        final_data_dict[interval_data[-1]][0].append(i.balance)
                                    else:
                                        index_count = len(final_data_dict[interval_data[-1]])
                                        final_data_dict[interval_data[-1]].append([i.invoice_date])
                                        final_data_dict[interval_data[-1]][index_count].append(i.invoice_no)
                                        if int((i.duedate - date.today()).days) > 0:
                                            final_data_dict[interval_data[-1]][index_count].append('On Time')
                                        else:
                                            final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                        final_data_dict[interval_data[-1]][index_count].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                        final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                        final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                        final_data_dict[interval_data[-1]][index_count].append(i.balance)

                    for i in rinvo:
                        if float(i.balance) > 0: 
                            days = int((i.end_date - date.today()).days)
                            if aging_by == 'inv_due_date':
                                if days <= 0:
                                    days = days*-1
                                    for index in range(len(interval_data)):
                                        if days < day_count[index]:
                                            if interval_data[index] not in final_data_dict:
                                                final_data_dict[interval_data[index]] = [[i.end_date]]
                                                final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                                final_data_dict[interval_data[index]][0].append('Overdue')
                                                final_data_dict[interval_data[index]][0].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                                final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                                final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                                final_data_dict[interval_data[index]][0].append(i.balance)
                                            else:
                                                index_count = len(final_data_dict[interval_data[index]])
                                                final_data_dict[interval_data[index]].append([i.end_date])
                                                final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                                final_data_dict[interval_data[index]][index_count].append('Overdue')
                                                final_data_dict[interval_data[index]][index_count].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                                final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                                final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                                final_data_dict[interval_data[index]][index_count].append(i.balance)
                                            break
                                    else:
                                        if interval_data[-1] not in final_data_dict:
                                            final_data_dict[interval_data[-1]] = [[i.end_date]]
                                            final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                                            final_data_dict[interval_data[-1]][0].append('Overdue')
                                            final_data_dict[interval_data[-1]][0].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                            final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                            final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                            final_data_dict[interval_data[-1]][0].append(i.balance)
                                        else:
                                            index_count = len(final_data_dict[interval_data[-1]])
                                            final_data_dict[interval_data[-1]].append([i.end_date])
                                            final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                                            final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                            final_data_dict[interval_data[-1]][index_count].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                            final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                            final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                            final_data_dict[interval_data[-1]][index_count].append(i.balance)
                            elif aging_by == 'inv_date':
                                days = int((i.start_date - date.today()).days)
                                if days <= 0:
                                    days = days*-1
                                for index in range(len(interval_data)):
                                    if days < day_count[index]:
                                        if interval_data[index] not in final_data_dict:
                                            final_data_dict[interval_data[index]] = [[i.start_date]]
                                            final_data_dict[interval_data[index]][0].append(i.rec_invoice_no)
                                            if int((i.end_date - date.today()).days) > 0:
                                                final_data_dict[interval_data[index]][0].append('On Time')
                                            else:
                                                final_data_dict[interval_data[index]][0].append('Overdue')
                                            final_data_dict[interval_data[index]][0].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                            final_data_dict[interval_data[index]][0].append(str(days) + ' Days')
                                            final_data_dict[interval_data[index]][0].append(i.grandtotal)
                                            final_data_dict[interval_data[index]][0].append(i.balance)
                                        else:
                                            index_count = len(final_data_dict[interval_data[index]])
                                            final_data_dict[interval_data[index]].append([i.start_date])
                                            final_data_dict[interval_data[index]][index_count].append(i.rec_invoice_no)
                                            if int((i.end_date - date.today()).days) > 0:
                                                final_data_dict[interval_data[index]][index_count].append('On Time')
                                            else:
                                                final_data_dict[interval_data[index]][index_count].append('Overdue')
                                            final_data_dict[interval_data[index]][index_count].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                            final_data_dict[interval_data[index]][index_count].append(str(days) + ' Days')
                                            final_data_dict[interval_data[index]][index_count].append(i.grandtotal)
                                            final_data_dict[interval_data[index]][index_count].append(i.balance)
                                        break
                                else:
                                    if interval_data[-1] not in final_data_dict:
                                        final_data_dict[interval_data[-1]] = [[i.start_date]]
                                        final_data_dict[interval_data[-1]][0].append(i.rec_invoice_no)
                                        if int((i.end_date - date.today()).days) > 0:
                                            final_data_dict[interval_data[-1]][0].append('On Time')
                                        else:
                                            final_data_dict[interval_data[-1]][0].append('Overdue')
                                        final_data_dict[interval_data[-1]][0].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                        final_data_dict[interval_data[-1]][0].append(str(days) + ' Days')
                                        final_data_dict[interval_data[-1]][0].append(i.grandtotal)
                                        final_data_dict[interval_data[-1]][0].append(i.balance)
                                    else:
                                        index_count = len(final_data_dict[interval_data[-1]])
                                        final_data_dict[interval_data[-1]].append([i.start_date])
                                        final_data_dict[interval_data[-1]][index_count].append(i.rec_invoice_no)
                                        if int((i.end_date - date.today()).days) > 0:
                                            final_data_dict[interval_data[-1]][index_count].append('On Time')
                                        else:
                                            final_data_dict[interval_data[-1]][index_count].append('Overdue')
                                        final_data_dict[interval_data[-1]][index_count].append(i.Customer.first_name + ' ' + i.Customer.last_name)
                                        final_data_dict[interval_data[-1]][index_count].append(str(days) + ' Days')
                                        final_data_dict[interval_data[-1]][index_count].append(i.grandtotal)
                                        final_data_dict[interval_data[-1]][index_count].append(i.balance)

                final_grandtotal = 0
                final_balance = 0
                final_total_dict = []
                for key,value in final_data_dict.items():
                    total_grandtotal = 0
                    total_balance = 0
                    for item in value:
                        total_grandtotal += float(item[5])
                        final_grandtotal += float(item[5])
                        total_balance += float(item[6])
                        final_balance += float(item[6])
                    final_total_dict.append([key, total_grandtotal, total_balance])
                cust = Fin_Customers.objects.filter(Company = com)

                context = {
                    'com':com, 'cmp':com, 'final_data_dict':final_data_dict, 'final_grandtotal':final_grandtotal, 'final_balance':final_balance, 'cust':cust,
                    'final_balance':final_balance, 'startDate': startDate, 'endDate':endDate, 'aging_by':aging_by, 'age_interval':age_interval, 'final_total_dict':final_total_dict,
                    'day_interval':day_interval, 
                }
            
                template_path = 'company/Fin_AgingDetails_PDF.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)#, link_callback=fetch_resources)
                pdf = result.getvalue()
                filename = f'Aging Details.pdf'
                subject = f"Sharing Aging Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Aging Details. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                message = 'Report has been shared via email successfully..!'
                return JsonResponse({'message':message})
        except Exception as e:
            message = 'Report cannot be send'
            return JsonResponse({'message':message})
            
#End

# < ------------- Shemeem -------- > Reports - Item Report By Party < ------------------------------- >

def Fin_itemReportByParty(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        cust = Fin_Customers.objects.filter(Company = cmp)
        vend = Fin_Vendors.objects.filter(Company = cmp)

        reportData = []

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'vendors':vend, 'reportData':reportData,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_ItemReportByParty.html', context)
    else:
        return redirect('/')

def Fin_itemReportByPartyCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            prty = request.GET['party_details']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            if prty != "0":
                prt = prty.split(':')
                partyId = prt[0]
                partyType = prt[1]
            else:
                partyId = None
                partyType = None

            if partyId and partyType and partyId != "" and partyType != "":
                if partyType == 'customer':
                    party = Fin_Customers.objects.get(id = partyId)
                    pName = party.title+" "+party.first_name+" "+party.last_name
                    pDetails = str(party.id) +":"+'customer'
                elif partyType == 'vendor':
                    party = Fin_Vendors.objects.get(id = partyId)
                    pName = party.title+" "+party.first_name+" "+party.last_name
                    pDetails = str(party.id) +":"+'vendor'
                else:
                    party = None
                    pName = None
                    pDetails = ""

            else:
                party = None
                pName = None
                pDetails = ""

            items = Fin_Items.objects.filter(Company = cmp)
            cust = Fin_Customers.objects.filter(Company = cmp)
            vend = Fin_Vendors.objects.filter(Company = cmp)

            if startDate is None or endDate is None:
                if partyType == 'customer':
                    est = Fin_Estimate.objects.filter(Company = cmp, Customer = party)
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = party)
                    inv = Fin_Invoice.objects.filter(Company = cmp, Customer = party)
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = party)
                    rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = party)
                    chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = party)
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = party)

                    pordr= None
                    bill= None
                    dbtnt= None
                    rcrbl= None
                
                if partyType == 'vendor':
                    est = None
                    sordr= None
                    inv = None
                    crdNt = None
                    rtInv = None
                    chl = None
                    recInv = None

                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, Vendor = party)
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = party)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, Vendor = party)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = party)
            else:
                if partyType == 'customer':
                    est = Fin_Estimate.objects.filter(Company = cmp, Customer = party, estimate_date__range = [startDate, endDate])
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = party, sales_order_date__range = [startDate, endDate])
                    inv = Fin_Invoice.objects.filter(Company = cmp, Customer = party, invoice_date__range = [startDate, endDate])
                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = party, creditnote_date__range = [startDate, endDate])
                    rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = party, Retainer_Invoice_date__range = [startDate, endDate])
                    chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = party, challan_date__range = [startDate, endDate])
                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = party, start_date__range = [startDate, endDate])

                    pordr= None
                    bill= None
                    dbtnt= None
                    rcrbl= None
                
                if partyType == 'vendor':

                    est = None
                    sordr= None
                    inv = None
                    crdNt = None
                    rtInv = None
                    chl = None
                    recInv = None

                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], Vendor = party)
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], vendor = party)
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], Vendor = party)
                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], vendor = party)

            reportData = []
            
            totSales = 0
            totPurchase = 0
            if partyType == 'customer':
                for i in items:
                    sales = 0
                    item = i.name
                    sAmt = i.selling_price
                    pAmt = i.purchase_price

                    for e in est:
                        estItems = Fin_Estimate_Items.objects.filter(Estimate = e, Item = i)
                        for it in estItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                    
                    for s in sordr:
                        soItems = Fin_Sales_Order_Items.objects.filter(SalesOrder = s, Item = i)
                        for it in soItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                    
                    for iv in inv:
                        invItems = Fin_Invoice_Items.objects.filter(Invoice = iv, Item = i)
                        for it in invItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    for cr in crdNt:
                        crItems = Fin_CreditNote_Items.objects.filter(creditnote = cr, items = i)
                        for it in crItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    for rt in rtInv:
                        rtItems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = rt, Item = i)
                        for it in rtItems:
                            sales += int(it.Quantity)
                            totSales += int(it.Quantity)

                    for ch in chl:
                        chlItems = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = ch, items = i)
                        for it in chlItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    for rec in recInv:
                        recItems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice= rec, Item = i)
                        for it in recItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    det = {
                        'name': item,
                        'salesQty':sales,
                        'sAmount':sAmt,
                        'pAmount':pAmt,
                        'purchaseQty': 0
                    }

                    reportData.append(det)

            if partyType == 'vendor':
                for i in items:
                    purchase = 0
                    item = i.name
                    sAmt = i.selling_price
                    pAmt = i.purchase_price

                    for p in pordr:
                        poItems = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = p, Item = i)
                        for it in poItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)
                    
                    for b in bill:
                        billItems = Fin_Purchase_Bill_Item.objects.filter(pbill = b, item = i)
                        for it in billItems:
                            purchase += int(it.qty)
                            totPurchase += int(it.qty)
                    
                    for db in dbtnt:
                        dbItems = Fin_Debit_Note_Items.objects.filter(debit_note = db, items = i)
                        for it in dbItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)

                    for rc in rcrbl:
                        rcItems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill = rc, items = i)
                        for it in rcItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)

                    det = {
                        'name': item,
                        'salesQty': 0,
                        'sAmount':sAmt,
                        'pAmount':pAmt,
                        'purchaseQty': purchase
                    }

                    reportData.append(det)

            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'customers':cust, 'vendors':vend, 'reportData':reportData, 'totalSales':totSales, 'totalPurchase':totPurchase,
                'startDate':startDate, 'endDate':endDate, 'partyName': pName, 'partyDetails':pDetails
            }
            return render(request,'company/reports/Fin_ItemReportByParty.html', context)
    else:
        return redirect('/')

def Fin_shareItemReportByPartyToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                prty = request.POST['party_details']

                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                if prty != "0":
                    prt = prty.split(':')
                    partyId = prt[0]
                    partyType = prt[1]
                else:
                    partyId = None
                    partyType = None
                    messages.warning(request, 'Select a party and share report.!')
                    return redirect(Fin_itemReportByParty)

                if partyId and partyType and partyId != "" and partyType != "":
                    if partyType == 'customer':
                        party = Fin_Customers.objects.get(id = partyId)
                        pName = party.title+" "+party.first_name+" "+party.last_name
                    elif partyType == 'vendor':
                        party = Fin_Vendors.objects.get(id = partyId)
                        pName = party.title+" "+party.first_name+" "+party.last_name
                    else:
                        party = None
                        pName = None

                else:
                    party = None
                    pName = None

                items = Fin_Items.objects.filter(Company = cmp)

                if startDate is None or endDate is None:
                    if partyType == 'customer':
                        est = Fin_Estimate.objects.filter(Company = cmp, Customer = party)
                        sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = party)
                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = party)
                        crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = party)
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = party)
                        chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = party)
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = party)

                        pordr= None
                        bill= None
                        dbtnt= None
                        rcrbl= None
                    
                    if partyType == 'vendor':
                        est = None
                        sordr= None
                        inv = None
                        crdNt = None
                        rtInv = None
                        chl = None
                        recInv = None

                        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, Vendor = party)
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = party)
                        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, Vendor = party)
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = party)
                else:
                    if partyType == 'customer':
                        est = Fin_Estimate.objects.filter(Company = cmp, Customer = party, estimate_date__range = [startDate, endDate])
                        sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = party, sales_order_date__range = [startDate, endDate])
                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = party, invoice_date__range = [startDate, endDate])
                        crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = party, creditnote_date__range = [startDate, endDate])
                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = party, Retainer_Invoice_date__range = [startDate, endDate])
                        chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = party, challan_date__range = [startDate, endDate])
                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = party, start_date__range = [startDate, endDate])

                        pordr= None
                        bill= None
                        dbtnt= None
                        rcrbl= None
                    
                    if partyType == 'vendor':

                        est = None
                        sordr= None
                        inv = None
                        crdNt = None
                        rtInv = None
                        chl = None
                        recInv = None

                        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, purchase_order_date__range = [startDate, endDate], Vendor = party)
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate], vendor = party)
                        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, debit_note_date__range = [startDate, endDate], Vendor = party)
                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, date__range = [startDate, endDate], vendor = party)

                reportData = []
                
                totSales = 0
                totPurchase = 0
                if partyType == 'customer':
                    for i in items:
                        sales = 0
                        item = i.name
                        sAmt = i.selling_price
                        pAmt = i.purchase_price

                        for e in est:
                            estItems = Fin_Estimate_Items.objects.filter(Estimate = e, Item = i)
                            for it in estItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)
                        
                        for s in sordr:
                            soItems = Fin_Sales_Order_Items.objects.filter(SalesOrder = s, Item = i)
                            for it in soItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)
                        
                        for iv in inv:
                            invItems = Fin_Invoice_Items.objects.filter(Invoice = iv, Item = i)
                            for it in invItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        for cr in crdNt:
                            crItems = Fin_CreditNote_Items.objects.filter(creditnote = cr, items = i)
                            for it in crItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        for rt in rtInv:
                            rtItems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = rt, Item = i)
                            for it in rtItems:
                                sales += int(it.Quantity)
                                totSales += int(it.Quantity)

                        for ch in chl:
                            chlItems = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = ch, items = i)
                            for it in chlItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        for rec in recInv:
                            recItems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice= rec, Item = i)
                            for it in recItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        det = {
                            'name': item,
                            'salesQty':sales,
                            'sAmount':sAmt,
                            'pAmount':pAmt,
                            'purchaseQty': 0
                        }

                        reportData.append(det)

                if partyType == 'vendor':
                    for i in items:
                        purchase = 0
                        item = i.name
                        sAmt = i.selling_price
                        pAmt = i.purchase_price

                        for p in pordr:
                            poItems = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = p, Item = i)
                            for it in poItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)
                        
                        for b in bill:
                            billItems = Fin_Purchase_Bill_Item.objects.filter(pbill = b, item = i)
                            for it in billItems:
                                purchase += int(it.qty)
                                totPurchase += int(it.qty)
                        
                        for db in dbtnt:
                            dbItems = Fin_Debit_Note_Items.objects.filter(debit_note = db, items = i)
                            for it in dbItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)

                        for rc in rcrbl:
                            rcItems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill = rc, items = i)
                            for it in rcItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)

                        det = {
                            'name': item,
                            'salesQty': 0,
                            'sAmount':sAmt,
                            'pAmount':pAmt,
                            'purchaseQty': purchase
                        }

                        reportData.append(det)

                context = {'cmp':cmp, 'reportData':reportData, 'totalSales':totSales, 'totalPurchase':totPurchase, 'startDate':startDate, 'endDate':endDate, 'partyName': pName}
                template_path = 'company/reports/Fin_ItemReportByPartyPdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_ItemReportByParty'
                subject = f"Report_ItemReportByParty"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Item Report By Party. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_itemReportByParty)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_itemReportByParty)

#End
# < ------------- Shemeem -------- > Reports - Party Report By Item < ------------------------------- >

def Fin_partyReportByItem(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        items = Fin_Items.objects.filter(Company = cmp)

        reportData = []

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'items':items, 'reportData':reportData,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_PartyReportByItem.html', context)
    else:
        return redirect('/')

def Fin_partyReportByItemCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            itm = request.GET['item_details']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None
            if itm != "0":
                item = Fin_Items.objects.get(id = itm)
            else:
                messages.warning(request, 'Select an item.!')
                return redirect(Fin_partyReportByItem)

            if item:
                itemId = item.id
                itemName = item.name
            else:
                itemName = None
                itemId = None

            items = Fin_Items.objects.filter(Company = cmp)
            cust = Fin_Customers.objects.filter(Company = cmp)
            vend = Fin_Vendors.objects.filter(Company = cmp)

            if startDate is None or endDate is None:
                reportData = []
                totSales = 0
                totPurchase = 0

                for c in cust:
                    sales = 0
                    name = c.title+' '+c.first_name+' '+c.last_name
                    sAmt = item.selling_price
                    pAmt = item.purchase_price

                    est = Fin_Estimate.objects.filter(Company = cmp, Customer = c)
                    for e in est:
                        estItems = Fin_Estimate_Items.objects.filter(Estimate = e, Item = item)
                        for it in estItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = c)
                    for s in sordr:
                        soItems = Fin_Sales_Order_Items.objects.filter(SalesOrder = s, Item = item)
                        for it in soItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                    
                    inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c)
                    for iv in inv:
                        invItems = Fin_Invoice_Items.objects.filter(Invoice = iv, Item = item)
                        for it in invItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = c)
                    for cr in crdNt:
                        crItems = Fin_CreditNote_Items.objects.filter(creditnote = cr, items = item)
                        for it in crItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c)
                    for rt in rtInv:
                        rtItems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = rt, Item = item)
                        for it in rtItems:
                            sales += int(it.Quantity)
                            totSales += int(it.Quantity)

                    chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = c)
                    for ch in chl:
                        chlItems = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = ch, items = item)
                        for it in chlItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c)
                    for rec in recInv:
                        recItems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice= rec, Item = item)
                        for it in recItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    det = {
                        'name': name,
                        'salesQty':sales,
                        'sAmount':sAmt,
                        'pAmount':pAmt,
                        'purchaseQty': 0
                    }

                    reportData.append(det)

                for v in vend:
                    purchase = 0
                    name = v.title+' '+v.first_name+' '+v.last_name
                    sAmt = item.selling_price
                    pAmt = item.purchase_price

                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, Vendor = v)
                    for p in pordr:
                        poItems = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = p, Item = item)
                        for it in poItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)
                    
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v)
                    for b in bill:
                        billItems = Fin_Purchase_Bill_Item.objects.filter(pbill = b, item = item)
                        for it in billItems:
                            purchase += int(it.qty)
                            totPurchase += int(it.qty)
                    
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, Vendor = v)
                    for db in dbtnt:
                        dbItems = Fin_Debit_Note_Items.objects.filter(debit_note = db, items = item)
                        for it in dbItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)

                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v)
                    for rc in rcrbl:
                        rcItems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill = rc, items = item)
                        for it in rcItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)

                    det = {
                        'name': name,
                        'salesQty': 0,
                        'sAmount':sAmt,
                        'pAmount':pAmt,
                        'purchaseQty': purchase
                    }

                    reportData.append(det)
            else:
                reportData = []
                totSales = 0
                totPurchase = 0

                for c in cust:
                    sales = 0
                    name = c.title+' '+c.first_name+' '+c.last_name
                    sAmt = item.selling_price
                    pAmt = item.purchase_price

                    est = Fin_Estimate.objects.filter(Company = cmp, Customer = c, estimate_date__range = [startDate, endDate])
                    for e in est:
                        estItems = Fin_Estimate_Items.objects.filter(Estimate = e, Item = item)
                        for it in estItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                    
                    sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = c, sales_order_date__range = [startDate, endDate])
                    for s in sordr:
                        soItems = Fin_Sales_Order_Items.objects.filter(SalesOrder = s, Item = item)
                        for it in soItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)
                    
                    inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c, invoice_date__range = [startDate, endDate])
                    for iv in inv:
                        invItems = Fin_Invoice_Items.objects.filter(Invoice = iv, Item = item)
                        for it in invItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = c, creditnote_date__range = [startDate, endDate])
                    for cr in crdNt:
                        crItems = Fin_CreditNote_Items.objects.filter(creditnote = cr, items = item)
                        for it in crItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c, Retainer_Invoice_date__range = [startDate, endDate])
                    for rt in rtInv:
                        rtItems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = rt, Item = item)
                        for it in rtItems:
                            sales += int(it.Quantity)
                            totSales += int(it.Quantity)

                    chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = c, challan_date__range = [startDate, endDate])
                    for ch in chl:
                        chlItems = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = ch, items = item)
                        for it in chlItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c, start_date__range = [startDate, endDate])
                    for rec in recInv:
                        recItems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice= rec, Item = item)
                        for it in recItems:
                            sales += int(it.quantity)
                            totSales += int(it.quantity)

                    det = {
                        'name': name,
                        'salesQty':sales,
                        'sAmount':sAmt,
                        'pAmount':pAmt,
                        'purchaseQty': 0
                    }

                    reportData.append(det)

                for v in vend:
                    purchase = 0
                    name = v.title+' '+v.first_name+' '+v.last_name
                    sAmt = item.selling_price
                    pAmt = item.purchase_price

                    pordr= Fin_Purchase_Order.objects.filter(Company = cmp, Vendor = v, purchase_order_date__range = [startDate, endDate])
                    for p in pordr:
                        poItems = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = p, Item = item)
                        for it in poItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)
                    
                    bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v, bill_date__range = [startDate, endDate])
                    for b in bill:
                        billItems = Fin_Purchase_Bill_Item.objects.filter(pbill = b, item = item)
                        for it in billItems:
                            purchase += int(it.qty)
                            totPurchase += int(it.qty)
                    
                    dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, Vendor = v, debit_note_date__range = [startDate, endDate])
                    for db in dbtnt:
                        dbItems = Fin_Debit_Note_Items.objects.filter(debit_note = db, items = item)
                        for it in dbItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)

                    rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v, date__range = [startDate, endDate])
                    for rc in rcrbl:
                        rcItems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill = rc, items = item)
                        for it in rcItems:
                            purchase += int(it.quantity)
                            totPurchase += int(it.quantity)

                    det = {
                        'name': name,
                        'salesQty': 0,
                        'sAmount':sAmt,
                        'pAmount':pAmt,
                        'purchaseQty': purchase
                    }

                    reportData.append(det)



            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'items':items, 'reportData':reportData, 'totalSales':totSales, 'totalPurchase':totPurchase,
                'startDate':startDate, 'endDate':endDate, 'itemName': itemName, 'itemDetails':itemId
            }
            return render(request,'company/reports/Fin_PartyReportByItem.html', context)
    else:
        return redirect('/')

def Fin_sharePartyReportByItemToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                itm = request.POST['item_details']

                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                if itm != "0":
                    item = Fin_Items.objects.get(id = itm)
                else:
                    messages.warning(request, 'Select an item and share report.!')
                    return redirect(Fin_partyReportByItem)

                if item:
                    itemName = item.name
                else:
                    itemName = None

                cust = Fin_Customers.objects.filter(Company = cmp)
                vend = Fin_Vendors.objects.filter(Company = cmp)

                if startDate is None or endDate is None:
                    reportData = []
                    totSales = 0
                    totPurchase = 0

                    for c in cust:
                        sales = 0
                        name = c.title+' '+c.first_name+' '+c.last_name
                        sAmt = item.selling_price
                        pAmt = item.purchase_price

                        est = Fin_Estimate.objects.filter(Company = cmp, Customer = c)
                        for e in est:
                            estItems = Fin_Estimate_Items.objects.filter(Estimate = e, Item = item)
                            for it in estItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = c)
                        for s in sordr:
                            soItems = Fin_Sales_Order_Items.objects.filter(SalesOrder = s, Item = item)
                            for it in soItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)
                        
                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c)
                        for iv in inv:
                            invItems = Fin_Invoice_Items.objects.filter(Invoice = iv, Item = item)
                            for it in invItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = c)
                        for cr in crdNt:
                            crItems = Fin_CreditNote_Items.objects.filter(creditnote = cr, items = item)
                            for it in crItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c)
                        for rt in rtInv:
                            rtItems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = rt, Item = item)
                            for it in rtItems:
                                sales += int(it.Quantity)
                                totSales += int(it.Quantity)

                        chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = c)
                        for ch in chl:
                            chlItems = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = ch, items = item)
                            for it in chlItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c)
                        for rec in recInv:
                            recItems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice= rec, Item = item)
                            for it in recItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        det = {
                            'name': name,
                            'salesQty':sales,
                            'sAmount':sAmt,
                            'pAmount':pAmt,
                            'purchaseQty': 0
                        }

                        reportData.append(det)

                    for v in vend:
                        purchase = 0
                        name = v.title+' '+v.first_name+' '+v.last_name
                        sAmt = item.selling_price
                        pAmt = item.purchase_price

                        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, Vendor = v)
                        for p in pordr:
                            poItems = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = p, Item = item)
                            for it in poItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)
                        
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v)
                        for b in bill:
                            billItems = Fin_Purchase_Bill_Item.objects.filter(pbill = b, item = item)
                            for it in billItems:
                                purchase += int(it.qty)
                                totPurchase += int(it.qty)
                        
                        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, Vendor = v)
                        for db in dbtnt:
                            dbItems = Fin_Debit_Note_Items.objects.filter(debit_note = db, items = item)
                            for it in dbItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)

                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v)
                        for rc in rcrbl:
                            rcItems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill = rc, items = item)
                            for it in rcItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)

                        det = {
                            'name': name,
                            'salesQty': 0,
                            'sAmount':sAmt,
                            'pAmount':pAmt,
                            'purchaseQty': purchase
                        }

                        reportData.append(det)
                else:
                    reportData = []
                    totSales = 0
                    totPurchase = 0

                    for c in cust:
                        sales = 0
                        name = c.title+' '+c.first_name+' '+c.last_name
                        sAmt = item.selling_price
                        pAmt = item.purchase_price

                        est = Fin_Estimate.objects.filter(Company = cmp, Customer = c, estimate_date__range = [startDate, endDate])
                        for e in est:
                            estItems = Fin_Estimate_Items.objects.filter(Estimate = e, Item = item)
                            for it in estItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)
                        
                        sordr= Fin_Sales_Order.objects.filter(Company = cmp, Customer = c, sales_order_date__range = [startDate, endDate])
                        for s in sordr:
                            soItems = Fin_Sales_Order_Items.objects.filter(SalesOrder = s, Item = item)
                            for it in soItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)
                        
                        inv = Fin_Invoice.objects.filter(Company = cmp, Customer = c, invoice_date__range = [startDate, endDate])
                        for iv in inv:
                            invItems = Fin_Invoice_Items.objects.filter(Invoice = iv, Item = item)
                            for it in invItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        crdNt = Fin_CreditNote.objects.filter(Company = cmp, Customer = c, creditnote_date__range = [startDate, endDate])
                        for cr in crdNt:
                            crItems = Fin_CreditNote_Items.objects.filter(creditnote = cr, items = item)
                            for it in crItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        rtInv = Fin_Retainer_Invoice.objects.filter(Company = cmp, Customer = c, Retainer_Invoice_date__range = [startDate, endDate])
                        for rt in rtInv:
                            rtItems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv = rt, Item = item)
                            for it in rtItems:
                                sales += int(it.Quantity)
                                totSales += int(it.Quantity)

                        chl = Fin_Delivery_Challan.objects.filter(Company = cmp, Customer = c, challan_date__range = [startDate, endDate])
                        for ch in chl:
                            chlItems = Fin_Delivery_Challan_Items.objects.filter(delivery_challan = ch, items = item)
                            for it in chlItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp, Customer = c, start_date__range = [startDate, endDate])
                        for rec in recInv:
                            recItems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice= rec, Item = item)
                            for it in recItems:
                                sales += int(it.quantity)
                                totSales += int(it.quantity)

                        det = {
                            'name': name,
                            'salesQty':sales,
                            'sAmount':sAmt,
                            'pAmount':pAmt,
                            'purchaseQty': 0
                        }

                        reportData.append(det)

                    for v in vend:
                        purchase = 0
                        name = v.title+' '+v.first_name+' '+v.last_name
                        sAmt = item.selling_price
                        pAmt = item.purchase_price

                        pordr= Fin_Purchase_Order.objects.filter(Company = cmp, Vendor = v, purchase_order_date__range = [startDate, endDate])
                        for p in pordr:
                            poItems = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder = p, Item = item)
                            for it in poItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)
                        
                        bill= Fin_Purchase_Bill.objects.filter(company = cmp, vendor = v, bill_date__range = [startDate, endDate])
                        for b in bill:
                            billItems = Fin_Purchase_Bill_Item.objects.filter(pbill = b, item = item)
                            for it in billItems:
                                purchase += int(it.qty)
                                totPurchase += int(it.qty)
                        
                        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp, Vendor = v, debit_note_date__range = [startDate, endDate])
                        for db in dbtnt:
                            dbItems = Fin_Debit_Note_Items.objects.filter(debit_note = db, items = item)
                            for it in dbItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)

                        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp, vendor = v, date__range = [startDate, endDate])
                        for rc in rcrbl:
                            rcItems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill = rc, items = item)
                            for it in rcItems:
                                purchase += int(it.quantity)
                                totPurchase += int(it.quantity)

                        det = {
                            'name': name,
                            'salesQty': 0,
                            'sAmount':sAmt,
                            'pAmount':pAmt,
                            'purchaseQty': purchase
                        }

                        reportData.append(det)

                context = {'cmp':cmp, 'reportData':reportData, 'totalSales':totSales, 'totalPurchase':totPurchase, 'startDate':startDate, 'endDate':endDate, 'itemName': itemName}
                template_path = 'company/reports/Fin_PartyReportByItemPdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_PartyReportByItem'
                subject = f"Report_PartyReportByItem"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Party Report By Item. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_partyReportByItem)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_partyReportByItem)
# End
      
# ------------------------------------ Payment Received Report ------------------------------------
def Fin_PaymentReceived_report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        payRec = Fin_Payment_Invoice.objects.filter(company=cmp)
       
        if payRec:
            for s in payRec:
                partyName = s.payment.customer.first_name +" "+s.payment.customer.last_name
                date = s.pdate
                method=s.payment.payment_method
                payno=s.payment.payment_no
                
                invno =s.pinvoice_no
                total = s.pinvoice_amount
                balance=s.p_invoice_balance
                totalSales += float(s.pinvoice_amount)
                totalbalance += float(s.p_invoice_balance)

                details = {
                    'date': date,
                    'name': partyName,
                    'payno':payno,
                    'invno':invno,
                    'method':method,
                    'total':total,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'totalbalance':totalbalance, 'totalSales':totalSales,'totcust':totvendr,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_payments_received.html', context)
    else:
        return redirect('/')
    

def Fin_payments_receivedCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
       

        print(startDate)
        print(endDate)
        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        payRec = Fin_Payment_Invoice.objects.filter(company=cmp)
        vendr = Fin_Vendors.objects.filter(Company=cmp)
       
        
        if startDate and endDate:
            payRec = payRec.filter(pdate__range=[startDate, endDate])
            print("1")
        

        if payRec:
            for s in payRec:
                partyName = s.payment.customer.first_name +" "+s.payment.customer.last_name
                date = s.pdate
                method=s.payment.payment_method
                payno=s.payment.payment_no
                
                invno =s.pinvoice_no
                total = s.pinvoice_amount
                balance=s.p_invoice_balance
                totalSales += float(s.pinvoice_amount)
                totalbalance += float(s.p_invoice_balance)

                details = {
                    'date': date,
                    'name': partyName,
                    'payno':payno,
                    'invno':invno,
                    'method':method,
                    'total':total,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,'totalbalance':totalbalance,
            'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 
        }
        return render(request, 'company/reports/Fin_payments_received.html', context)
    else:
        return redirect('/')

def Fin_sharePaymentsReceivedReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                cust = Fin_Customers.objects.filter(Company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                
                reportData = []
                totalSales = 0
                totvendr=0
                totalbalance=0

                payRec = Fin_Payment_Invoice.objects.filter(company=cmp)
            
                if payRec:
                    for s in payRec:
                        partyName = s.payment.customer.first_name +" "+s.payment.customer.last_name
                        date = s.pdate
                        method=s.payment.payment_method
                        payno=s.payment.payment_no
                        
                        invno =s.pinvoice_no
                        total = s.pinvoice_amount
                        balance=s.p_invoice_balance
                        totalSales += float(s.pinvoice_amount)
                        totalbalance += float(s.p_invoice_balance)

                        details = {
                            'date': date,
                            'name': partyName,
                            'payno':payno,
                            'invno':invno,
                            'method':method,
                            'total':total,
                            'balance':balance,
                            
                            
                            
                        }
                        reportData.append(details)

                context = {'cmp': cmp, 'reportData': reportData,'totalbalance':totalbalance,'totalSales': totalSales,'startDate': startDate, 'endDate': endDate, 'status': status}
                template_path = 'company/reports/Fin_paymentsReceivedPdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_paymentsReceived_Details'
                subject = f"Report_paymentsReceived_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - payments Received Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_PaymentReceived_report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_PaymentReceived_report)
            
#End

# ------------------------------------ Payment made Report ------------------------------------
def Fin_Paymentmade_report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        payRec = Fin_PaymentMadeDetails.objects.filter(Company=cmp)
       
        if payRec:
            for s in payRec:
                partyName = s.paymentmade.vendor.first_name +" "+s.paymentmade.vendor.last_name
                date = s.date
                method=s.paymentmade.payment_method
                payno=s.paymentmade.payment_number
                
                invno =s.bill_number
                total = s.payment
                balance=s.balance_amount
                totalSales += float(s.payment)
                totalbalance += float(s.balance_amount)

                details = {
                    'date': date,
                    'name': partyName,
                    'payno':payno,
                    'invno':invno,
                    'method': method,
                    'total':total,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'totalbalance':totalbalance, 'totalSales':totalSales,'totcust':totvendr,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_payments_made.html', context)
    else:
        return redirect('/')


def Fin_payments_madeCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        startDate = request.GET.get('start_date', None)
        endDate = request.GET.get('end_date', None)
       

        print(startDate)
        print(endDate)
        reportData = []
        totalSales = 0
        totvendr=0
        totalbalance=0

        payRec = Fin_PaymentMadeDetails.objects.filter(Company=cmp)

        vendr = Fin_Vendors.objects.filter(Company=cmp)
       
        
        if startDate and endDate:
            payRec = payRec.filter(date__range=[startDate, endDate])
            print("1")
        

        if payRec:
            for s in payRec:
                partyName = s.paymentmade.vendor.first_name +" "+s.paymentmade.vendor.last_name
                date = s.date
                method=s.paymentmade.payment_method
                payno=s.paymentmade.payment_number
                
                invno =s.bill_number
                total = s.payment
                balance=s.balance_amount
                totalSales += float(s.payment)
                totalbalance += float(s.balance_amount)

                details = {
                    'date': date,
                    'name': partyName,
                    'payno':payno,
                    'invno':invno,
                    'method': method,
                    'total':total,
                    'balance':balance,
                    
                    
                    
                }
                reportData.append(details)

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,'totalbalance':totalbalance,
            'totalSales': totalSales, 'totcust': totvendr, 'startDate': startDate, 'endDate': endDate, 
        }
        return render(request, 'company/reports/Fin_payments_made.html', context)
    else:
        return redirect('/')
    

def Fin_sharePaymentsmadeReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                cust = Fin_Customers.objects.filter(Company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                
                reportData = []
                totalSales = 0
                totvendr=0
                totalbalance=0

                payRec = Fin_PaymentMadeDetails.objects.filter(Company=cmp)
       
                if payRec:
                    for s in payRec:
                        partyName = s.paymentmade.vendor.first_name +" "+s.paymentmade.vendor.last_name
                        date = s.date
                        method=s.paymentmade.payment_method
                        payno=s.paymentmade.payment_number
                        
                        invno =s.bill_number
                        total = s.payment
                        balance=s.balance_amount
                        totalSales += float(s.payment)
                        totalbalance += float(s.balance_amount)

                        details = {
                            'date': date,
                            'name': partyName,
                            'payno':payno,
                            'invno':invno,
                            'method': method,
                            'total':total,
                            'balance':balance,
                            
                            
                            
                        }
                        reportData.append(details)

                context = {'cmp': cmp, 'reportData': reportData,'totalbalance':totalbalance,'totalSales': totalSales,'startDate': startDate, 'endDate': endDate, 'status': status}
                template_path = 'company/reports/Fin_paymentsMadePdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_paymentsMade_Details'
                subject = f"Report_paymentsMade_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - payments Made Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_Paymentmade_report)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_Paymentmade_report)
            
#End

# < ------------- Shemeem -------- > Reports - EWay Bills Reports < ------------------------------- >

def Fin_ewayBillReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totalAmount = 0

        eway = Fin_Ewaybills.objects.filter(Company=cmp)
        if eway:
            for e in eway:
                totalAmount += float(e.GrandTotal)

                details = {
                    'date': e.BillDate,
                    'name':e.Customer.first_name+" "+e.Customer.last_name,
                    'number':e.Ewaybill_No,
                    'amount':e.GrandTotal,
                    'status':e.Status
                }
                reportData.append(details)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalAmount':totalAmount,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_EwayBill_Report.html', context)
    else:
        return redirect('/')

def Fin_ewayBillReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            status = request.GET['status']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None


            reportData = []
            totalAmount = 0

            if startDate is None or endDate is None:
                if status != 'all':
                    eway = Fin_Ewaybills.objects.filter(Company=cmp, Status__iexact = status)
                else:
                    eway = Fin_Ewaybills.objects.filter(Company=cmp)
            else:
                if status != 'all':
                    eway = Fin_Ewaybills.objects.filter(Company=cmp, BillDate__range = [startDate, endDate], Status__iexact = status)
                else:
                    eway = Fin_Ewaybills.objects.filter(Company=cmp, BillDate__range = [startDate, endDate])


            if eway:
                for e in eway:
                    totalAmount += float(e.GrandTotal)

                    details = {
                        'date': e.BillDate,
                        'name':e.Customer.first_name+" "+e.Customer.last_name,
                        'number':e.Ewaybill_No,
                        'amount':e.GrandTotal,
                        'status':e.Status
                    }
                    reportData.append(details)


            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalAmount':totalAmount,
                'startDate':startDate, 'endDate':endDate, 'status':status
            }
            return render(request,'company/reports/Fin_EwayBill_Report.html', context)
    else:
        return redirect('/')

def Fin_shareEwayBillReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totalAmount = 0

                if startDate is None or endDate is None:
                    if status != 'all':
                        eway = Fin_Ewaybills.objects.filter(Company=cmp, Status__iexact = status)
                    else:
                        eway = Fin_Ewaybills.objects.filter(Company=cmp)
                else:
                    if status != 'all':
                        eway = Fin_Ewaybills.objects.filter(Company=cmp, BillDate__range = [startDate, endDate], Status__iexact = status)
                    else:
                        eway = Fin_Ewaybills.objects.filter(Company=cmp, BillDate__range = [startDate, endDate])


                if eway:
                    for e in eway:
                        totalAmount += float(e.GrandTotal)

                        details = {
                            'date': e.BillDate,
                            'name':e.Customer.first_name+" "+e.Customer.last_name,
                            'number':e.Ewaybill_No,
                            'amount':e.GrandTotal,
                            'status':e.Status
                        }
                        reportData.append(details)
                
                context = {'cmp':cmp, 'reportData':reportData, 'totalAmount':totalAmount, 'startDate':startDate, 'endDate':endDate}
                template_path = 'company/reports/Fin_EwayBill_Report_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_EWayBillReport'
                subject = f"Report_EWayBillReport"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Eway Bill Reports. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_ewayBillReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_ewayBillReport)

#End
# < ------------- Shemeem -------- > Reports - Expense Reports < ------------------------------- >

def Fin_expenseReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totalExpense = 0

        exp = Fin_Expense.objects.filter(Company=cmp)
        if exp:
            for ex in exp:
                totalExpense += float(ex.amount)

                details = {
                    'date': ex.expense_date,
                    'number':ex.expense_no,
                    'account':ex.Account.account_name,
                    'type':ex.expense_type,
                    'amount':ex.amount,
                    'status':ex.status,
                    'payment':ex.payment_method
                }
                reportData.append(details)

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalExpense':totalExpense,
            'startDate':None, 'endDate':None
        }
        return render(request,'company/reports/Fin_Expense_Report.html', context)
    else:
        return redirect('/')

def Fin_expenseReportCustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        if request.method == 'GET':
            startDate = request.GET['from_date']
            endDate = request.GET['to_date']
            status = request.GET['status']

            if startDate == "":
                startDate = None
            if endDate == "":
                endDate = None


            reportData = []
            totalExpense = 0

            if startDate is None or endDate is None:
                if status != 'all':
                    exp = Fin_Expense.objects.filter(Company=cmp, status__iexact = status)
                else:
                    exp = Fin_Expense.objects.filter(Company=cmp)
            else:
                if status != 'all':
                    exp = Fin_Expense.objects.filter(Company=cmp, expense_date__range = [startDate, endDate], status__iexact = status)
                else:
                    exp = Fin_Expense.objects.filter(Company=cmp, expense_date__range = [startDate, endDate])


            if exp:
                for ex in exp:
                    totalExpense += float(ex.amount)

                    details = {
                        'date': ex.expense_date,
                        'number':ex.expense_no,
                        'account':ex.Account.account_name,
                        'type':ex.expense_type,
                        'amount':ex.amount,
                        'status':ex.status,
                        'payment':ex.payment_method
                    }
                    reportData.append(details)


            context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData, 'totalExpense':totalExpense,
                'startDate':startDate, 'endDate':endDate, 'status':status
            }
            return render(request,'company/reports/Fin_Expense_Report.html', context)
    else:
        return redirect('/')

def Fin_shareExpenseReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                status = request.POST['status']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totalExpense = 0

                if startDate is None or endDate is None:
                    if status != 'all':
                        exp = Fin_Expense.objects.filter(Company=cmp, status__iexact = status)
                    else:
                        exp = Fin_Expense.objects.filter(Company=cmp)
                else:
                    if status != 'all':
                        exp = Fin_Expense.objects.filter(Company=cmp, expense_date__range = [startDate, endDate], status__iexact = status)
                    else:
                        exp = Fin_Expense.objects.filter(Company=cmp, expense_date__range = [startDate, endDate])


                if exp:
                    for ex in exp:
                        totalExpense += float(ex.amount)

                        details = {
                            'date': ex.expense_date,
                            'number':ex.expense_no,
                            'account':ex.Account.account_name,
                            'type':ex.expense_type,
                            'amount':ex.amount,
                            'status':ex.status,
                            'payment':ex.payment_method
                        }
                        reportData.append(details)
                
                context = {'cmp':cmp, 'reportData':reportData, 'totalExpense':totalExpense, 'startDate':startDate, 'endDate':endDate}
                template_path = 'company/reports/Fin_Expense_Report_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_ExpenseReport'
                subject = f"Report_ExpenseReport"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Expense Reports. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_expenseReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_expenseReport)
            
#End
#---------------------------------------Loan Account & Bank Report--------------------
def Fin_loanAccountReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totInv = 0
        

        
            
        loans= loan_account.objects.filter(company=cmp)
        for l in loans:  
            totInv += float(l.loan_amount)
        
        linv = loan_transaction.objects.filter(company=cmp).last()
        

        inv = loan_transaction.objects.filter(company=cmp)
            
        for i in inv:

            
            dates= i.loan_date
            bank_type = i.bank_type
            amount = i.loan_amount
            balance = i.balance

            details = {
                    'date': dates,
                    'bank_type':bank_type,
                    'amount':amount,
                    'balance':balance

                
            }

            reportData.append(details)

        


        context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'inv':linv,
        
                'startDate':None, 'endDate':None,'totalLoan':totInv
            }
        return render(request,'company/reports/Fin_loanaccount_report.html', context)
    else:
        return redirect('/')

def Fin_shareloanaccountReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                print(startDate)
                print(endDate)
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totInv = 0
                
                loans= loan_account.objects.filter(company=com)
                for l in loans:  
                        totInv += float(l.loan_amount)
                
                linv = loan_transaction.objects.filter(company=com).last()
                
                
                

                if startDate == None or endDate == None:
                    
                        
                    inv = loan_transaction.objects.filter(company=com)
                    
                       
                else:
            
                    inv = loan_transaction.objects.filter(company=com, loan_date__range = [startDate, endDate])
                    
                       
                
             
                for i in inv:
                    dates= i.loan_date
                    bank_type = i.bank_type
                    amount = i.loan_amount
                    balance = i.balance

                    details = {
                    'date': dates,
                    'bank_type':bank_type,
                    'amount':amount,
                    'balance':balance

                 
                    }

                    reportData.append(details)

                    
                
                context = {'reportData':reportData,'cmp':com, 'startDate':startDate, 'endDate':endDate,'inv':linv,'totalLoan':totInv}
                template_path = 'company/reports/Fin_loanaccount_report_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_LoanAccount'
                subject = f"Report_LoanAccount"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Loan Account. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_loanAccountReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_loanAccountReport)

def Fin_BankReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totInv = 0
        


        inv = Fin_BankTransactions.objects.filter(company=cmp)
            
        for i in inv:

            
            dates= i.adjustment_date
            
            amount = i.amount
            balance = i.current_balance
            transaction_type =i.transaction_type
            totInv += float(i.current_balance)

            details = {
                    'date': dates,
                    
                    'amount':amount,
                    'balance':balance,
                    'transaction_type':transaction_type,

                
            }

            reportData.append(details)

        


        context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'totInv':totInv,
        
                'startDate':None, 'endDate':None,
            }
        return render(request,'company/reports/Fin_bank_report.html', context)
    else:
        return redirect('/')


def Fin_shareBankReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totInv = 0
                

                

                if startDate == None or endDate == None:
                    inv = Fin_BankTransactions.objects.filter(company=com)
                            
                else:
                    inv = Fin_BankTransactions.objects.filter(adjustment_date__range = [startDate, endDate])
                    

                if inv:
                    for i in inv:

                        dates= i.adjustment_date
                    
                        amount = i.amount
                        balance = i.current_balance
                        transaction_type =i.transaction_type
                        totInv += float(i.current_balance)

                        details = {
                            'date': dates,
                            
                            'amount':amount,
                            'balance':balance,
                            'transaction_type':transaction_type

                        
                        }

                        reportData.append(details)

                        
                    
                    context = {'reportData':reportData,'cmp':com, 'startDate':startDate, 'endDate':endDate, 'totInv':totInv, }
                    template_path = 'company/reports/Fin_Bankstatement_Pdf.html'
                    template = get_template(template_path)

                    html  = template.render(context)
                    result = BytesIO()
                    pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                    pdf = result.getvalue()
                    filename = f'Report_BankStatement'
                    subject = f"Report_BankStatement"
                    email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Bank Statement. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                    email.attach(filename, pdf, "application/pdf")
                    email.send(fail_silently=False)

                    messages.success(request, 'Report has been shared via email successfully..!')
                    return redirect(Fin_BankReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_BankReport)
            
#End

# harikrishnan ------- discount report -------------------------
def Fin_discount_report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        customer = Fin_Customers.objects.filter(Company=cmp)
        vendor = Fin_Vendors.objects.filter(Company=cmp)
        newArray = []

        for i in customer:
            fullname = i.first_name + ' ' + i.last_name
            invoice = Fin_Invoice.objects.filter(Company=cmp,Customer=i)
            
            if invoice:
                for inv in invoice:
                    invitems = Fin_Invoice_Items.objects.filter(Invoice=inv)
                    invdiscount = 0
                    for dis in invitems:
                        invdiscount += dis.discount
                    if invdiscount != 0:
                        newArray.append((inv.invoice_date,fullname,'Invoice',inv.invoice_no,invdiscount,0.00))
            
            rec_invoice = Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=i)
            
            if rec_invoice:
                for rec in rec_invoice:
                    recitems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice=rec)
                    recdiscount = 0
                    for dis in recitems:
                        recdiscount += dis.discount
                    if recdiscount != 0:
                        newArray.append((rec.start_date,fullname,'Recurring Invoice',rec.rec_invoice_no,recdiscount,0.00))

            ret_invoice = Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=i)
            
            if ret_invoice:
                for ret in ret_invoice:
                    retitems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv=ret)
                    retdiscount = 0
                    for dis in retitems:
                        retdiscount += dis.discount
                    if retdiscount != 0:
                        newArray.append((ret.Retainer_Invoice_date,fullname,'Retainer Invoice',ret.Retainer_Invoice_number,retdiscount,0.00))
            
        
        for i in vendor:
            fullname2 = i.first_name + ' ' + i.last_name
            bill = Fin_Purchase_Bill.objects.filter(company=cmp,vendor=i)
            
            if bill:
                for b in bill:
                    billitems = Fin_Purchase_Bill_Item.objects.filter(pbill=b)
                    billdiscount = 0
                    for dis in billitems:
                        billdiscount += int(dis.discount)
                    if billdiscount != 0:
                        newArray.append((b.bill_date,fullname2,'Bill',b.bill_no,0.00,billdiscount))

            recbill = Fin_Recurring_Bills.objects.filter(company=cmp,vendor=i)
            
            if recbill:
                for rb in recbill:
                    recbillitems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill=rb)
                    recbilldiscountf = 0
                    for dis in recbillitems:
                        recbilldiscountf += dis.discount
                    if recbilldiscountf != 0:
                        newArray.append((rb.date,fullname2,'Recurring Bill',rb.recurring_bill_number,0.00,recbilldiscountf))

        context = {
            'allmodules':allmodules, 'cmp':cmp,'newArray':newArray,
            'com':com, 'data':data,
        }
        return render(request,'company/reports/Fin_Discount_Report.html', context)
    else:
        return redirect('/')

def discount_report_date_filter(request):
    fromDate = request.GET.get('fromdate')
    toDate = request.GET.get('todate')
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        customer = Fin_Customers.objects.filter(Company=cmp)
        vendor = Fin_Vendors.objects.filter(Company=cmp)

        newArray = []

        for i in customer:
            fullname = i.first_name + ' ' + i.last_name
            invoice = Fin_Invoice.objects.filter(Company=cmp,Customer=i,invoice_date__gte=fromDate,invoice_date__lte=toDate)
            
            if invoice:
                for inv in invoice:
                    invitems = Fin_Invoice_Items.objects.filter(Invoice=inv)
                    invdiscount = 0
                    for dis in invitems:
                        invdiscount += dis.discount
                    if invdiscount != 0:
                        newArray.append((inv.invoice_date,fullname,'Invoice',inv.invoice_no,invdiscount,0.00))
            
            rec_invoice = Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=i,start_date__gte=fromDate,start_date__lte=toDate)
            
            if rec_invoice:
                for rec in rec_invoice:
                    recitems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice=rec)
                    recdiscount = 0
                    for dis in recitems:
                        recdiscount += dis.discount
                    if recdiscount != 0:
                        newArray.append((rec.start_date,fullname,'Recurring Invoice',rec.rec_invoice_no,recdiscount,0.00))

            ret_invoice = Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=i,Retainer_Invoice_date__gte=fromDate,Retainer_Invoice_date__lte=toDate)
            
            if ret_invoice:
                for ret in ret_invoice:
                    retitems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv=ret)
                    retdiscount = 0
                    for dis in retitems:
                        retdiscount += dis.discount
                    if retdiscount != 0:
                        newArray.append((ret.Retainer_Invoice_date,fullname,'Retainer Invoice',ret.Retainer_Invoice_number,retdiscount,0.00))

            
        for i in vendor:
            fullname2 = i.first_name + ' ' + i.last_name
            bill = Fin_Purchase_Bill.objects.filter(company=cmp,vendor=i,bill_date__gte=fromDate,bill_date__lte=toDate)
            
            if bill:
                for b in bill:
                    billitems = Fin_Purchase_Bill_Item.objects.filter(pbill=b)
                    billdiscount = 0
                    for dis in billitems:
                        billdiscount += int(dis.discount)
                    if billdiscount != 0:
                        newArray.append((b.bill_date,fullname2,'Bill',b.bill_no,0.00,billdiscount))

            recbill = Fin_Recurring_Bills.objects.filter(company=cmp,vendor=i,date__gte=fromDate,date__lte=toDate) 
            
            if recbill:
                for rb in recbill:
                    recbillitems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill=rb)
                    recbilldiscountf = 0
                    for dis in recbillitems:
                        recbilldiscountf += dis.discount
                    if recbilldiscountf != 0:
                        newArray.append((rb.date,fullname2,'Recurring Bill',rb.recurring_bill_number,0.00,recbilldiscountf))

        context={
        'stocklist':newArray,
        }
        return JsonResponse(context)

def sendEmail_discount_report(request):
        if 's_id' in request.session:
            s_id = request.session['s_id']
            data = Fin_Login_Details.objects.get(id = s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id = s_id)
                cmp = com
            else:
                com = Fin_Staff_Details.objects.get(Login_Id = s_id)
                cmp = com.company_id
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                
                fromDate = request.POST.get('start_date') or None
                toDate = request.POST.get('end_date') or None
                saleDis = request.POST.get('salediscount')
                purDis = request.POST.get('purdiscount')
                
                customer = Fin_Customers.objects.filter(Company=cmp)
                vendor = Fin_Vendors.objects.filter(Company=cmp)
                newArray = []

                if fromDate != None and toDate != None:
                    for i in customer:
                        fullname = i.first_name + ' ' + i.last_name
                        invoice = Fin_Invoice.objects.filter(Company=cmp,Customer=i,invoice_date__gte=fromDate,invoice_date__lte=toDate)
                        
                        if invoice:
                            for inv in invoice:
                                invitems = Fin_Invoice_Items.objects.filter(Invoice=inv)
                                invdiscount = 0
                                for dis in invitems:
                                    invdiscount += dis.discount
                                if invdiscount != 0:
                                    newArray.append((inv.invoice_date,fullname,'Invoice',inv.invoice_no,invdiscount,0.00))
                        
                        rec_invoice = Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=i,start_date__gte=fromDate,start_date__lte=toDate)
                        
                        if rec_invoice:
                            for rec in rec_invoice:
                                recitems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice=rec)
                                recdiscount = 0
                                for dis in recitems:
                                    recdiscount += dis.discount
                                if recdiscount != 0:
                                    newArray.append((rec.start_date,fullname,'Recurring Invoice',rec.rec_invoice_no,recdiscount,0.00))

                        ret_invoice = Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=i,Retainer_Invoice_date__gte=fromDate,Retainer_Invoice_date__lte=toDate)
                        
                        if ret_invoice:
                            for ret in ret_invoice:
                                retitems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv=ret)
                                retdiscount = 0
                                for dis in retitems:
                                    retdiscount += dis.discount
                                if retdiscount != 0:
                                    newArray.append((ret.Retainer_Invoice_date,fullname,'Retainer Invoice',ret.Retainer_Invoice_number,retdiscount,0.00))

                    for i in vendor:
                        fullname2 = i.first_name + ' ' + i.last_name
                        bill = Fin_Purchase_Bill.objects.filter(company=cmp,vendor=i,bill_date__gte=fromDate,bill_date__lte=toDate)
                        
                        if bill:
                            for b in bill:
                                billitems = Fin_Purchase_Bill_Item.objects.filter(pbill=b)
                                billdiscount = 0
                                for dis in billitems:
                                    billdiscount += int(dis.discount)
                                if billdiscount != 0:
                                    newArray.append((b.bill_date,fullname2,'Bill',b.bill_no,0.00,billdiscount))

                        recbill = Fin_Recurring_Bills.objects.filter(company=cmp,vendor=i,date__gte=fromDate,date__lte=toDate) 
                        
                        if recbill:
                            for rb in recbill:
                                recbillitems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill=rb)
                                recbilldiscountf = 0
                                for dis in recbillitems:
                                    recbilldiscountf += dis.discount
                                if recbilldiscountf != 0:
                                    newArray.append((rb.date,fullname2,'Recurring Bill',rb.recurring_bill_number,0.00,recbilldiscountf))
                else:
                    for i in customer:
                        fullname = i.first_name + ' ' + i.last_name
                        invoice = Fin_Invoice.objects.filter(Company=cmp,Customer=i)
                        
                        if invoice:
                            for inv in invoice:
                                invitems = Fin_Invoice_Items.objects.filter(Invoice=inv)
                                invdiscount = 0
                                for dis in invitems:
                                    invdiscount += dis.discount
                                if invdiscount != 0:
                                    newArray.append((inv.invoice_date,fullname,'Invoice',inv.invoice_no,invdiscount,0.00))
                        
                        rec_invoice = Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=i)
                        
                        if rec_invoice:
                            for rec in rec_invoice:
                                recitems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice=rec)
                                recdiscount = 0
                                for dis in recitems:
                                    recdiscount += dis.discount
                                if recdiscount != 0:
                                    newArray.append((rec.start_date,fullname,'Recurring Invoice',rec.rec_invoice_no,recdiscount,0.00))

                        ret_invoice = Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=i)
                        
                        if ret_invoice:
                            for ret in ret_invoice:
                                retitems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv=ret)
                                retdiscount = 0
                                for dis in retitems:
                                    retdiscount += dis.discount
                                if retdiscount != 0:
                                    newArray.append((ret.Retainer_Invoice_date,fullname,'Retainer Invoice',ret.Retainer_Invoice_number,retdiscount,0.00))

                    for i in vendor:
                        fullname2 = i.first_name + ' ' + i.last_name
                        bill = Fin_Purchase_Bill.objects.filter(company=cmp,vendor=i)
                        
                        if bill:
                            for b in bill:
                                billitems = Fin_Purchase_Bill_Item.objects.filter(pbill=b)
                                billdiscount = 0
                                for dis in billitems:
                                    billdiscount += int(dis.discount)
                                if billdiscount != 0:
                                    newArray.append((b.bill_date,fullname2,'Bill',b.bill_no,0.00,billdiscount))

                        recbill = Fin_Recurring_Bills.objects.filter(company=cmp,vendor=i)
                        
                        if recbill:
                            for rb in recbill:
                                recbillitems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill=rb)
                                recbilldiscountf = 0
                                for dis in recbillitems:
                                    recbilldiscountf += dis.discount
                                if recbilldiscountf != 0:
                                    newArray.append((rb.date,fullname2,'Recurring Bill',rb.recurring_bill_number,0.00,recbilldiscountf))

                
                context = {'newArray':newArray,'cmp':cmp,'companyName':cmp.Company_name,
                          'start_date':fromDate,'end_date':toDate,'purDis':purDis,
                          'saleDis':saleDis}
                
                template_path = 'company/reports/Fin_Discount_Report_pdf.html' 
                template = get_template(template_path)
                html  = template.render(context)
                result = BytesIO()
                # pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Discount report details'
                subject = f"Discount report details"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Discount report details for   \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                messages.success(request, 'Discount report details has been shared via email successfully..!') 
                return redirect(Fin_discount_report)
            
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_discount_report)
            
#End

def stocksummary(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        items = Fin_Items.objects.filter(Company=cmp)

        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST.get('reportperiod', 'default_value')

        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['from_date']
            todate = request.POST['to_date']
        elif filmeth == 'This month':
            input_dt = date.today()
            day_num = input_dt.strftime("%d")
            res = input_dt - timedelta(days=int(day_num) - 1)
            fromdate = str(res)
            any_day = date.today()
            next_month = any_day.replace(day=28) + timedelta(days=4)
            d = next_month - timedelta(days=next_month.day)
            todate = str(d)
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
        else:
            fromdate = cmp.Start_Date
            todate = date.today()

        # Corrected filtering using Django ORM syntax
        items = Fin_Items.objects.filter(item_created__gte=fromdate, item_created__lte=todate,Company=cmp)

        try:
            fromdates = datetime.datetime.strptime(fromdate, "%Y-%m-%d").date()
            todates = datetime.datetime.strptime(todate, "%Y-%m-%d").date()
        except:
            fromdates = cmp.Start_Date
            todates = date.today()

        reportData = []

        for i in items:
            qIn = 0
            qOut = 0
            name = i.name
            bQty = int(i.opening_stock)
            pAmt = i.purchase_price
            sAmt = i.selling_price
            itmdate = i.item_created

            invItems = Fin_Invoice_Items.objects.filter(Item=i)
            recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item=i)
            retInvItem = Fin_Retainer_Invoice_Items.objects.filter(Item=i)

            if invItems:
                for itm in invItems:
                    qOut += int(itm.quantity)

            if recInvItems:
                for itm in recInvItems:
                    qOut += int(itm.quantity)

            if retInvItem:
                for itm in retInvItem:
                    qOut += int(itm.Quantity)

            billItems = Fin_Purchase_Bill_Item.objects.filter(item=i)
            recBillItems = Fin_Recurring_Bill_Items.objects.filter(items=i)

            if billItems:
                for itm in billItems:
                    qIn += int(itm.qty)

            if recBillItems:
                for itm in recBillItems:
                    qIn += int(itm.quantity)

            qinQty = bQty + qIn
            closingQty = qinQty - qOut

            det = {
                'name': name,
                'pAmount': pAmt,
                'sAmount': sAmt,
                'bQty': bQty,
                'qtyIn': qIn,
                'qtyOut': qOut,
                'cQty': closingQty,
                'qinQty': qinQty
            }
            reportData.append(det)

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,
            'startDate': None, 'endDate': None, 'item': items, "fromdate": fromdates, "todate": todates
        }
        return render(request, 'company/reports/stocksummary.html', context)
    else:
        return redirect('/')
        
#---------------------------------------salesby purchase& inventory--------------------           
def Fin_salespurchasebypartyReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        
        cust = Fin_Customers.objects.filter(Company=cmp)
        vendor = Fin_Vendors.objects.filter(Company=cmp)
        for c in cust:
            customerName = c.first_name +" "+c.last_name
            if cust.exists():
               
                
                sale_invo = Fin_Invoice.objects.filter(Customer=c).aggregate(total=Sum('grandtotal'))['total'] or 0
                sale_recurring = Fin_Recurring_Invoice.objects.filter(Customer=c).aggregate(total=Sum('grandtotal'))['total'] or 0
                sales_retainer = Fin_Retainer_Invoice.objects.filter(Customer=c).aggregate(total=Sum('Grand_total'))['total'] or 0
                
                sale_amount = sale_invo + sale_recurring + sales_retainer
                reportData.append({
                'name': customerName,
                'sale_amount': sale_amount,
               


                
                            
                })
              
                
            else:
                reportData = [{'name': '', 'sale_amount': 0, 'purchase_amount': 0}]
        

        for v in vendor:

            vendorName = v.first_name +" "+v.last_name
            if vendor.exists():
                pur_bill = Fin_Purchase_Bill.objects.filter(vendor=v).aggregate(total=Sum('grandtotal'))['total'] or 0
                pur_recuuring = Fin_Recurring_Bills.objects.filter(vendor=v).aggregate(total=Sum('grand_total'))['total'] or 0
                
                purchase_amount = pur_bill + pur_recuuring 
                reportData.append({
                'name': vendorName,
                'purchase_amount': purchase_amount,
               
                            
                })
      
                
            else:
                reportData = [{'name': '', 'sale_amount': 0, 'purchase_amount': 0}]
        

        return render(request,'company/reports/Fin_purchasebysales_party_report.html',{'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'startDate':None, 'endDate':None,'reportData':reportData})


def Fin_sharePurchaseBySalesReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                total_sales_amount = request.POST['total_sales_amount']
                total_purchase_amount = request.POST['total_purchase_amount']

                print(total_sales_amount)
                print(total_purchase_amount)
            
                
                reportData = []
        
                cust = Fin_Customers.objects.filter(Company=com)
                vendor = Fin_Vendors.objects.filter(Company=com)
                for c in cust:
                    customerName = c.first_name +" "+c.last_name
                    if cust.exists():
                    
                        
                        sale_invo = Fin_Invoice.objects.filter(Customer=c).aggregate(total=Sum('grandtotal'))['total'] or 0
                        sale_recurring = Fin_Recurring_Invoice.objects.filter(Customer=c).aggregate(total=Sum('grandtotal'))['total'] or 0
                        sales_retainer = Fin_Retainer_Invoice.objects.filter(Customer=c).aggregate(total=Sum('Grand_total'))['total'] or 0
                        
                        sale_amount = sale_invo + sale_recurring + sales_retainer
                        reportData.append({
                        'name': customerName,
                        'sale_amount': sale_amount,
                    


                        
                                    
                        })
                    
                        
                    else:
                        reportData = [{'name': '', 'sale_amount': 0, 'purchase_amount': 0}]
                

                for v in vendor:

                    vendorName = v.first_name +" "+v.last_name
                    if vendor.exists():
                        pur_bill = Fin_Purchase_Bill.objects.filter(vendor=v).aggregate(total=Sum('grandtotal'))['total'] or 0
                        pur_recuuring = Fin_Recurring_Bills.objects.filter(vendor=v).aggregate(total=Sum('grand_total'))['total'] or 0
                        
                        purchase_amount = pur_bill + pur_recuuring 
                        reportData.append({
                        'name': vendorName,
                        'purchase_amount': purchase_amount,
                    
                                    
                        })
            
                        
                    else:
                        reportData = [{'name': '', 'sale_amount': 0, 'purchase_amount': 0}]
                        
            
                context = { 'com':com, 'cmp':com, 'data':data,'startDate':None, 'endDate':None,'reportData':reportData,'total_sales_amount': total_sales_amount, 'total_purchase_amount': total_purchase_amount}
                template_path = 'company/reports/Fin_purchase_by_sales_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_PurchaseBySalesParty'
                subject = f"Report_PurchaseBySalesParty"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Purchase By Sales Party. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_salespurchasebypartyReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_salespurchasebypartyReport)

def Fin_InventoryItemReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
   
        

        itms = Fin_Items.objects.filter(Company=cmp)

        for i in itms:
            itemName = i.name
            stock = i.current_stock
            rate =i.purchase_price
            hsn =i.hsn
            sac = i.sac

            stockvalue = stock * rate
 
            
            details = {
                'name': itemName,
                'hsn':hsn,
                'sac':sac,
                'stock':stock,
                'stockvalue':stockvalue
            }

            reportData.append(details)

        totItems = len(itms)
        
        


        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,
            'totalItems':totItems,'startDate':None, 'endDate':None,
        }
        return render(request,'company/reports/Fin_InventoryItemReport.html', context)
    else:
        return redirect('/')

def Fin_shareInventoryReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                total_Asset= request.POST['email_totalAsset']
                

                print(total_Asset)
                
            
                
                reportData = []
   
        

                itms = Fin_Items.objects.filter(Company=com)

                for i in itms:
                    itemName = i.name
                    stock = i.current_stock
                    rate =i.purchase_price
                    hsn =i.hsn
                    sac = i.sac

                    stockvalue = stock * rate
        
                    
                    details = {
                        'name': itemName,
                        'hsn':hsn,
                        'sac':sac,
                        'stock':stock,
                        'stockvalue':stockvalue
                    }

                    reportData.append(details)

                totItems = len(itms)
                
                


                context = {
                     'com':com, 'cmp':com, 'data':data, 'reportData':reportData,
                    'totalItems':totItems,'startDate':None, 'endDate':None,'total_Asset':total_Asset
                }
                template_path = 'company/reports/Fin_InventoryItem_report_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_InventoryValuationSummary'
                subject = f"Report_InventoryValuationSummary"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Report_InventoryValuationSummary. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_InventoryItemReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_InventoryItemReport)
            
#End
# ------------------------------------ trial balance Report ------------------------------------
def Fin_trial_balance(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
        totbankbal=0
        totalExpense=0
        totMoneybalLOAN = 0
        totMoneybalEMPLOAN=0
        TOTITEMAMT=0
        venders_data = []
        total_balance1 = 0 
        customers_data = []
        total_balance11 = 0
        Totpurchasediscount=0
        Totsalediscount=0
        totalSale=0
        loantransbal=0
        loanbankbal=0
        
        # trans = Fin_BankTransactions.objects.filter(company=cmp)
        loan = loan_account.objects.filter(company = cmp)
        EMPloan = Fin_Loan.objects.filter(company_id=cmp)
        # loantrans = loan_transaction.objects.filter(company=cmp)
        all_bankings = Fin_Banking.objects.filter(company = cmp)
        for i in all_bankings:

            balance = i.current_balance
            print(balance)
            loanbankbal +=float( i.current_balance)
            print(loanbankbal)
        # for i in loantrans:

        #     balance = i.balance
        #     loantransbal +=float( i.balance)
        # for i in trans:
        #     balance = i.current_balance
        #     totbankbal += float(i.current_balance)
        
        if loan:
            for s in loan:  
                balance = s.balance
                print(balance)
                totMoneybalLOAN += float(s.balance)
                print(totMoneybalLOAN)
        if EMPloan:
            for s in EMPloan:    
                balance = s.balance
                loan_amount=s.loan_amount
                totMoneybalEMPLOAN+=float(s.balance) 
            
        exp = Fin_Expense.objects.filter(Company=cmp)
        items = Fin_Items.objects.filter(Company = cmp)
        vend = Fin_Vendors.objects.filter(Company=cmp)
        cust = Fin_Customers.objects.filter(Company=cmp)
        customer = Fin_Customers.objects.filter(Company=cmp)
        vendor = Fin_Vendors.objects.filter(Company=cmp)
        if exp:
            for ex in exp:
                totalExpense += float(ex.amount)


        for i in customer:
            fullname = i.first_name + ' ' + i.last_name
            invoice = Fin_Invoice.objects.filter(Company=cmp,Customer=i)
            
            if invoice:
                for inv in invoice:
                    invitems = Fin_Invoice_Items.objects.filter(Invoice=inv)
                    invdiscount = 0
                    for dis in invitems:
                        Totsalediscount += float(dis.discount)
                   
            
            rec_invoice = Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=i)
            
            if rec_invoice:
                for rec in rec_invoice:
                    recitems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice=rec)
                    recdiscount = 0
                    for dis in recitems:
                        Totsalediscount +=float(dis.discount)
                    
            ret_invoice = Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=i)
            
            if ret_invoice:
                for ret in ret_invoice:
                    retitems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv=ret)
                    retdiscount = 0
                    for dis in retitems:
                        Totsalediscount += float(dis.discount)
        
            
        
        for i in vendor:
            fullname2 = i.first_name + ' ' + i.last_name
            bill = Fin_Purchase_Bill.objects.filter(company=cmp,vendor=i)
            
            if bill:
                for b in bill:
                    billitems = Fin_Purchase_Bill_Item.objects.filter(pbill=b)
                    billdiscount = 0
                    for dis in billitems:
                        Totpurchasediscount += float(dis.discount)
                        print(Totpurchasediscount)
                    

            recbill = Fin_Recurring_Bills.objects.filter(company=cmp,vendor=i)
            
            if recbill:
                for rb in recbill:
                    recbillitems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill=rb)
                    recbilldiscountf = 0
                    for dis in recbillitems:
                        Totpurchasediscount += float(dis.discount)
                        print(Totpurchasediscount)
                        
            
                   

        

 



            
        
        for i in items:   
            name = i.name
            bQty = int(i.opening_stock)   
            pAmt = i.purchase_price
            totamt=bQty*pAmt
            TOTITEMAMT+=totamt
  

        # Initialize total balance outside the loop
        for vendr in vend:
            vendrName = vendr.first_name +" "+vendr.last_name

            PurchaseBill = Fin_Purchase_Bill.objects.filter(vendor=vendr, status='Save')
            Recurring_Bills = Fin_Recurring_Bills.objects.filter(vendor=vendr, status='Save')
            Debit_Note = Fin_Debit_Note.objects.filter(Vendor=vendr, status='Saved')
            
            bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
            recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
            total_bill_balance = bill_balance + recurring_bill_balance
            available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)
            total_balance = total_bill_balance - available_debits            
            # Update the total balance
            total_balance1 += total_balance
            venders_data.append({
                'name': vendrName,                
                'total_balance': total_balance,
            })
        
        for customer in cust:
            customerName = customer.first_name +" "+customer.last_name

            invoices = Fin_Invoice.objects.filter(Customer=customer, status='Saved')
            recurring_invoices = Fin_Recurring_Invoice.objects.filter(Customer=customer, status='Saved')
            credit_notes = Fin_CreditNote.objects.filter(Customer=customer, status='Saved')
            
            invoice_balance = sum(float(inv.balance) for inv in invoices)
            recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
            total_invoice_balance = invoice_balance + recurring_invoice_balance
            
            available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
            
            total_balance = total_invoice_balance - available_credits
            
            # Update the total balance
            total_balance11 += total_balance

            customers_data.append({
                'name': customerName,                
                'total_balance': total_balance,
            })
        inv = Fin_Invoice.objects.filter(Company = cmp)
        crdNt = Fin_CreditNote.objects.filter(Company = cmp)
        recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)
        sordr= Fin_Sales_Order.objects.filter(Company = cmp)
        rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp)
        bill= Fin_Purchase_Bill.objects.filter(company = cmp)
        rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp)
        pordr= Fin_Purchase_Order.objects.filter(Company = cmp)
        dbtnt= Fin_Debit_Note.objects.filter(Company = cmp)
        totCashIn=0
        totCashOut=0
        totCashOutpr=0
        totCashIndbt=0
        if inv:
            for i in inv:
                balance=i.balance
                totCashIn += float(i.balance)  

        if crdNt:
            for cr in crdNt:
                balance = cr.balance
                totCashOut += float(cr.balance)


        if recInv:
            for rc in recInv:
                balance = rc.balance                
                totCashIn += float(rc.balance)
        if sordr:
            for so in sordr:
                balance = so.balance      
                totCashIn += float(so.balance)
        if rtInv:
            for rt in rtInv:
                totCashIn += float(rt.Balance)
        if bill:
            for bl in bill:
                balance = bl.balance
                totCashOutpr += float(bl.balance)

        if rcrbl:
            for rb in rcrbl:
                balance = rb.balance
                totCashOutpr += float(rb.balance)

        if pordr:
            for po in pordr:
                balance = po.balance
                totCashOutpr += float(po.balance)

        if dbtnt:
            for db in dbtnt:
                balance = db.balance
                totCashIndbt += float(db.balance)
                print(totCashIndbt)
                
                
        CURRENT_ASSETS=0
        CURRENT_ASSETS=TOTITEMAMT+totMoneybalEMPLOAN+total_balance11
        EXPENCE=0
        EXPENCE=totalExpense+Totsalediscount
        loanamt=0
        loanamt=loanbankbal+totMoneybalLOAN
        totcredit=loanamt+total_balance1+Totpurchasediscount+totbankbal+totCashIn+totCashIndbt
        totdebit=CURRENT_ASSETS+totCashOut+totCashOutpr+EXPENCE
        print(CURRENT_ASSETS)
        print(totCashOut)
        print(totCashOutpr)
        print(EXPENCE)
        print(Totsalediscount)
        balance=0
        balance2=0
        print(totcredit)
        print(totdebit)
        totamount=0
        totamount=totcredit+totdebit
        if totcredit > totdebit:
            balance = totcredit - totdebit
            print(balance)
            debit=balance+totdebit
            credit=totcredit
        else:
            balance2 = totdebit - totcredit
            debit=balance+totdebit
            credit=balance2+totcredit
            print(balance2)
                
        

        context = {
            'debit':debit,
            'credit':credit,
            'cust':cust,
            'totCashOutsale':totCashOut,
            'totCashInsale':totCashIn,
            'totCashOutpr':totCashOutpr,
            'totCashIndbt':totCashIndbt,
            'cust': customers_data,
            'customers': venders_data,
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,'startDate':None, 'endDate':None,
            'loan':totMoneybalLOAN,
            'Itemstock':TOTITEMAMT,
            'emploan':totMoneybalEMPLOAN,
            'total_CUSTbalance':total_balance11,
            'total_VENDORbalance':total_balance1,
            'totalExpense':totalExpense,
            'totbankbal':totbankbal,
            'Totpurchasediscount':Totpurchasediscount,
            'Totsalediscount':Totsalediscount,
            'totalSale':totalSale,
            'CURRENT_ASSETS':CURRENT_ASSETS,
            'EXPENCE':EXPENCE,
            'loantransbal':loantransbal,
            'loanamt':loanamt,
            'loanbankbal':loanbankbal,
            'totcredit':totcredit,
            'totdebit':totdebit,
            'balance2':balance2,
            'balance':balance,
            'totamount':totamount,

        
            }
        return render(request,'company/reports/trialbalance.html', context)
    else:
        return redirect('/')
    
def Fin_trial_balancecustomized(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        startDate = request.GET.get('from_date', None)
        endDate = request.GET.get('to_date', None)
        print(startDate)
        print(endDate)
        totbankbal=0
        totalExpense=0
        totMoneybalLOAN = 0
        totMoneybalEMPLOAN=0
        TOTITEMAMT=0
        venders_data = []
        total_balance1 = 0 
        customers_data = []
        total_balance11 = 0
        Totpurchasediscount=0
        Totsalediscount=0
        loantransbal=0
        loanbankbal=0

        if startDate is None or endDate is None:
            cash = Fin_CashInHand.objects.filter(Company = cmp)
            trans = Fin_BankTransactions.objects.filter(company=cmp)
            exp = Fin_Expense.objects.filter(Company=cmp)
            loan = loan_account.objects.filter(company = cmp)
            EMPloan = Fin_Loan.objects.filter(company_id=cmp)
            items = Fin_Items.objects.filter(Company = cmp)
            vend = Fin_Vendors.objects.filter(Company=cmp)
            cust = Fin_Customers.objects.filter(Company=cmp)
            customer = Fin_Customers.objects.filter(Company=cmp)
            vendor = Fin_Vendors.objects.filter(Company=cmp)
            loantrans = loan_transaction.objects.filter(company=cmp)
            all_bankings = Fin_Banking.objects.filter(company = cmp)
            for i in all_bankings:

                balance = i.current_balance
                print(balance)
                loanbankbal +=float( i.current_balance)
                print(loanbankbal)
            
            for i in loantrans:

                balance = i.balance
                loantransbal +=float( i.balance)
            

            for i in customer:
                fullname = i.first_name + ' ' + i.last_name
                invoice = Fin_Invoice.objects.filter(Company=cmp,Customer=i)
                
                if invoice:
                    for inv in invoice:
                        invitems = Fin_Invoice_Items.objects.filter(Invoice=inv)
                        for dis in invitems:
                            Totsalediscount += float(dis.discount)
                    
                
                rec_invoice = Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=i)
                
                if rec_invoice:
                    for rec in rec_invoice:
                        recitems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice=rec)
                        for dis in recitems:
                            Totsalediscount +=float(dis.discount)
                        
                ret_invoice = Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=i)
                
                if ret_invoice:
                    for ret in ret_invoice:
                        retitems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv=ret)
                        for dis in retitems:
                            Totsalediscount += float(dis.discount)
            
                
            
            for i in vendor:
                fullname2 = i.first_name + ' ' + i.last_name
                bill = Fin_Purchase_Bill.objects.filter(company=cmp,vendor=i)
                
                if bill:
                    for b in bill:
                        billitems = Fin_Purchase_Bill_Item.objects.filter(pbill=b)
                        for dis in billitems:
                            Totpurchasediscount += float(dis.discount)
                            print(Totpurchasediscount)
                        

                recbill = Fin_Recurring_Bills.objects.filter(company=cmp,vendor=i)
                
                if recbill:
                    for rb in recbill:
                        recbillitems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill=rb)
                        for dis in recbillitems:
                            Totpurchasediscount += float(dis.discount)
                            print(Totpurchasediscount)
                            
                


    



                
            for i in trans:
                balance = i.current_balance
                totbankbal += float(i.current_balance)
            if exp:
                for ex in exp:
                    totalExpense += float(ex.amount)
            if loan:
                for s in loan:  
                    balance = s.balance
                    totMoneybalLOAN+=float(s.balance)
            if EMPloan:
                for s in EMPloan:    
                    balance = s.balance
                    loan_amount=s.loan_amount
                    totMoneybalEMPLOAN+=float(s.balance) 
            for i in items:   
                name = i.name
                bQty = int(i.opening_stock)   
                pAmt = i.purchase_price
                totamt=bQty*pAmt
                TOTITEMAMT+=totamt
    

            # Initialize total balance outside the loop
            for vendr in vend:
                vendrName = vendr.first_name +" "+vendr.last_name

                PurchaseBill = Fin_Purchase_Bill.objects.filter(vendor=vendr, status='Save')
                Recurring_Bills = Fin_Recurring_Bills.objects.filter(vendor=vendr, status='Save')
                Debit_Note = Fin_Debit_Note.objects.filter(Vendor=vendr, status='Saved')
                
                bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
                recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
                total_bill_balance = bill_balance + recurring_bill_balance
                available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)
                total_balance = total_bill_balance - available_debits            
                # Update the total balance
                total_balance1 += total_balance
                venders_data.append({
                    'name': vendrName,                
                    'total_balance': total_balance,
                })
            
            for customer in cust:
                customerName = customer.first_name +" "+customer.last_name

                invoices = Fin_Invoice.objects.filter(Customer=customer, status='Saved')
                recurring_invoices = Fin_Recurring_Invoice.objects.filter(Customer=customer, status='Saved')
                credit_notes = Fin_CreditNote.objects.filter(Customer=customer, status='Saved')
                
                invoice_balance = sum(float(inv.balance) for inv in invoices)
                recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                total_invoice_balance = invoice_balance + recurring_invoice_balance
                
                available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                
                total_balance = total_invoice_balance - available_credits
                
                # Update the total balance
                total_balance11 += total_balance

                customers_data.append({
                    'name': customerName,                
                    'total_balance': total_balance,
                })
            inv = Fin_Invoice.objects.filter(Company = cmp)
            crdNt = Fin_CreditNote.objects.filter(Company = cmp)
            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)
            sordr= Fin_Sales_Order.objects.filter(Company = cmp)
            rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp)
            bill= Fin_Purchase_Bill.objects.filter(company = cmp)
            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp)
            pordr= Fin_Purchase_Order.objects.filter(Company = cmp)
            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp)
            totCashIn=0
            totCashOut=0
            totCashOutpr=0
            totCashIndbt=0
            if inv:
                for i in inv:
                    balance=i.balance
                    totCashIn += float(i.balance)  

            if crdNt:
                for cr in crdNt:
                    balance = cr.balance
                    totCashOut += float(cr.balance)


            if recInv:
                for rc in recInv:
                    balance = rc.balance                
                    totCashIn += float(rc.balance)
            if sordr:
                for so in sordr:
                    balance = so.balance      
                    totCashIn += float(so.balance)
            if rtInv:
                for rt in rtInv:
                    totCashIn += float(rt.Balance)
            if bill:
                for bl in bill:
                    balance = bl.balance
                    totCashOutpr += float(bl.balance)

            if rcrbl:
                for rb in rcrbl:
                    balance = rb.balance
                    totCashOutpr += float(rb.balance)

            if pordr:
                for po in pordr:
                    balance = po.balance
                    totCashOutpr += float(po.balance)

            if dbtnt:
                for db in dbtnt:
                    balance = db.balance
                    totCashIndbt += float(db.balance)
                    print(totCashIndbt)

        else:
            trans = Fin_BankTransactions.objects.filter(company=cmp,adjustment_date__range = [startDate, endDate])
            exp = Fin_Expense.objects.filter(Company=cmp,expense_date__range = [startDate, endDate])
            loan = loan_account.objects.filter(company = cmp,date__range = [startDate, endDate])
            EMPloan = Fin_Loan.objects.filter(company_id=cmp,loan_date__range = [startDate, endDate])
            items = Fin_Items.objects.filter(Company = cmp,item_created__range = [startDate, endDate])
            loantrans = loan_transaction.objects.filter(company=cmp, loan_date__range = [startDate, endDate])
            vend = Fin_Vendors.objects.filter(Company=cmp)
            cust = Fin_Customers.objects.filter(Company=cmp)
            customer = Fin_Customers.objects.filter(Company=cmp)
            vendor = Fin_Vendors.objects.filter(Company=cmp)
            
            for i in loantrans:

                balance = i.balance
                loantransbal +=float( i.balance)
            

            for i in customer:
                fullname = i.first_name + ' ' + i.last_name
                invoice = Fin_Invoice.objects.filter(Company=cmp,Customer=i,invoice_date__range=[startDate, endDate])
                
                if invoice:
                    for inv in invoice:
                        invitems = Fin_Invoice_Items.objects.filter(Invoice=inv)
                        for dis in invitems:
                            Totsalediscount += float(dis.discount)
                    
                
                rec_invoice = Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=i,start_date__range=[startDate, endDate])
                
                if rec_invoice:
                    for rec in rec_invoice:
                        recitems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice=rec)
                        for dis in recitems:
                            Totsalediscount +=float(dis.discount)
                        
                ret_invoice = Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=i,Retainer_Invoice_date__range=[startDate, endDate])
                
                if ret_invoice:
                    for ret in ret_invoice:
                        retitems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv=ret)
                        for dis in retitems:
                            Totsalediscount += float(dis.discount)
            
                
            
            for i in vendor:
                fullname2 = i.first_name + ' ' + i.last_name
                bill = Fin_Purchase_Bill.objects.filter(company=cmp,vendor=i,bill_date__range=[startDate, endDate])
                
                if bill:
                    for b in bill:
                        billitems = Fin_Purchase_Bill_Item.objects.filter(pbill=b)
                        for dis in billitems:
                            Totpurchasediscount += float(dis.discount)
                        

                recbill = Fin_Recurring_Bills.objects.filter(company=cmp,vendor=i,date__range=[startDate, endDate])
                
                if recbill:
                    for rb in recbill:
                        recbillitems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill=rb)
                        for dis in recbillitems:
                            Totpurchasediscount += float(dis.discount)

                
            for i in trans:
                balance = i.current_balance
                totbankbal += float(i.current_balance)
            if exp:
                for ex in exp:
                    totalExpense += float(ex.amount)
            if loan:
                for s in loan:  
                    balance = s.balance
                    totMoneybalLOAN+=float(s.balance)
            if EMPloan:
                for s in EMPloan:    
                    balance = s.balance
                    loan_amount=s.loan_amount
                    totMoneybalEMPLOAN+=float(s.balance) 
            for i in items:   
                name = i.name
                bQty = int(i.opening_stock)   
                pAmt = i.purchase_price
                totamt=bQty*pAmt
                TOTITEMAMT+=totamt
    

            # Initialize total balance outside the loop
            for vendr in vend:
                vendrName = vendr.first_name +" "+vendr.last_name

                PurchaseBill = Fin_Purchase_Bill.objects.filter(vendor=vendr, status='Save',bill_date__range=[startDate, endDate])
                Recurring_Bills = Fin_Recurring_Bills.objects.filter(vendor=vendr, status='Save',date__range=[startDate, endDate])
                Debit_Note = Fin_Debit_Note.objects.filter(Vendor=vendr, status='Saved',debit_note_date__range=[startDate, endDate])
            
                bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
                recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
                total_bill_balance = bill_balance + recurring_bill_balance
                available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)
                total_balance = total_bill_balance - available_debits            
                # Update the total balance
                total_balance1 += total_balance
                venders_data.append({
                    'name': vendrName,                
                    'total_balance': total_balance,
                })
            
            for customer in cust:
                customerName = customer.first_name +" "+customer.last_name
                invoices = Fin_Invoice.objects.filter(Customer=customer, status='Saved',invoice_date__range=[startDate, endDate])
                recurring_invoices = Fin_Recurring_Invoice.objects.filter(Customer=customer, status='Saved',start_date__range=[startDate, endDate])
                credit_notes = Fin_CreditNote.objects.filter(Customer=customer, status='Saved',creditnote_date__range=[startDate, endDate])
                
                invoice_balance = sum(float(inv.balance) for inv in invoices)
                recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                total_invoice_balance = invoice_balance + recurring_invoice_balance
                
                available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                
                total_balance = total_invoice_balance - available_credits
                
                # Update the total balance
                total_balance11 += total_balance

                customers_data.append({
                    'name': customerName,                
                    'total_balance': total_balance,
                })
            inv = Fin_Invoice.objects.filter(Company = cmp,invoice_date__range = [startDate, endDate])
            crdNt = Fin_CreditNote.objects.filter(Company = cmp,creditnote_date__range = [startDate, endDate])
            recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp,start_date__range = [startDate, endDate])
            sordr= Fin_Sales_Order.objects.filter(Company = cmp, sales_order_date__range = [startDate, endDate])
            rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp, Retainer_Invoice_date__range = [startDate, endDate])
            bill= Fin_Purchase_Bill.objects.filter(company = cmp, bill_date__range = [startDate, endDate])
            rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp,date__range = [startDate, endDate])
            pordr= Fin_Purchase_Order.objects.filter(Company = cmp,purchase_order_date__range = [startDate, endDate])
            dbtnt= Fin_Debit_Note.objects.filter(Company = cmp,debit_note_date__range = [startDate, endDate])
            totCashIn=0
            totCashOut=0
            totCashOutpr=0
            totCashIndbt=0
            if inv:
                for i in inv:
                    balance=i.balance
                    totCashIn += float(i.balance)  

            if crdNt:
                for cr in crdNt:
                    balance = cr.balance
                    totCashOut += float(cr.balance)


            if recInv:
                for rc in recInv:
                    balance = rc.balance                
                    totCashIn += float(rc.balance)
            if sordr:
                for so in sordr:
                    balance = so.balance      
                    totCashIn += float(so.balance)
            if rtInv:
                for rt in rtInv:
                    totCashIn += float(rt.Balance)
            if bill:
                for bl in bill:
                    balance = bl.balance
                    totCashOutpr += float(bl.balance)

            if rcrbl:
                for rb in rcrbl:
                    balance = rb.balance
                    totCashOutpr += float(rb.balance)

            if pordr:
                for po in pordr:
                    balance = po.balance
                    totCashOutpr += float(po.balance)

            if dbtnt:
                for db in dbtnt:
                    balance = db.balance
                    totCashIndbt += float(db.balance)
                    print(totCashIndbt)
            CURRENT_ASSETS=0
            CURRENT_ASSETS=TOTITEMAMT+totMoneybalEMPLOAN+total_balance11
            EXPENCE=0
            EXPENCE=totalExpense+Totsalediscount
            loanamt=0
            loanamt=loanbankbal+totMoneybalLOAN
            totcredit=loanamt+total_balance1+Totpurchasediscount+totbankbal+totCashIn+totCashIndbt
            totdebit=CURRENT_ASSETS+totCashOut+totCashOutpr+EXPENCE
            print(CURRENT_ASSETS)
            print(totCashOut)
            print(totCashOutpr)
            print(EXPENCE)
            print(Totsalediscount)
            balance=0
            balance2=0
            print(totcredit)
            print(totdebit)
            totamount=0
            totalSale=0
            totamount=totcredit+totdebit
            if totcredit > totdebit:
                balance = totcredit - totdebit
                print(balance)
                debit=balance+totdebit
                credit=totcredit
            else:
                balance2 = totdebit - totcredit
                debit=balance+totdebit
                credit=balance2+totcredit
                print(balance2)
                    
            

            context = {
                'debit':debit,
                'credit':credit,
                'cust':cust,
                'totCashOutsale':totCashOut,
                'totCashInsale':totCashIn,
                'totCashOutpr':totCashOutpr,
                'totCashIndbt':totCashIndbt,
                'cust': customers_data,
                'customers': venders_data,
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,
                'loan':totMoneybalLOAN,
                'Itemstock':TOTITEMAMT,
                'emploan':totMoneybalEMPLOAN,
                'total_CUSTbalance':total_balance11,
                'total_VENDORbalance':total_balance1,
                'totalExpense':totalExpense,
                'totbankbal':totbankbal,
                'Totpurchasediscount':Totpurchasediscount,
                'Totsalediscount':Totsalediscount,
                'totalSale':totalSale,
                'CURRENT_ASSETS':CURRENT_ASSETS,
                'EXPENCE':EXPENCE,
                'loantransbal':loantransbal,
                'loanamt':loanamt,
                'loanbankbal':loanbankbal,
                'totcredit':totcredit,
                'totdebit':totdebit,
                'balance2':balance2,
                'balance':balance,
                'totamount':totamount,

            
                
                'startDate': startDate, 
                'endDate': endDate,
                'loantransbal':loantransbal,
                'loanamt':loanamt,

            
                }
            
            return render(request,'company/reports/trialbalance.html', context)
    else:
        return redirect('/')
   

def Fin_shareFin_trial_balanceToEmail(request):
       
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                cust = Fin_Customers.objects.filter(Company=cmp)
            
                cust = Fin_Customers.objects.filter(Company=cmp)
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None
                
                totbankbal=0
                totalExpense=0
                totMoneybalLOAN = 0
                totMoneybalEMPLOAN=0
                TOTITEMAMT=0
                venders_data = []
                total_balance1 = 0 
                customers_data = []
                total_balance11 = 0
                Totpurchasediscount=0
                Totsalediscount=0
                totalSale=0
                loantransbal=0
                loanbankbal=0
                
                # trans = Fin_BankTransactions.objects.filter(company=cmp)
                loan = loan_account.objects.filter(company = cmp)
                EMPloan = Fin_Loan.objects.filter(company_id=cmp)
                # loantrans = loan_transaction.objects.filter(company=cmp)
                all_bankings = Fin_Banking.objects.filter(company = cmp)
                for i in all_bankings:

                    balance = i.current_balance
                    print(balance)
                    loanbankbal +=float( i.current_balance)
                    print(loanbankbal)
                # for i in loantrans:

                #     balance = i.balance
                #     loantransbal +=float( i.balance)
                # for i in trans:
                #     balance = i.current_balance
                #     totbankbal += float(i.current_balance)
                
                if loan:
                    for s in loan:  
                        balance = s.balance
                        print(balance)
                        totMoneybalLOAN += float(s.balance)
                        print(totMoneybalLOAN)
                if EMPloan:
                    for s in EMPloan:    
                        balance = s.balance
                        loan_amount=s.loan_amount
                        totMoneybalEMPLOAN+=float(s.balance) 
                    
                exp = Fin_Expense.objects.filter(Company=cmp)
                items = Fin_Items.objects.filter(Company = cmp)
                vend = Fin_Vendors.objects.filter(Company=cmp)
                cust = Fin_Customers.objects.filter(Company=cmp)
                customer = Fin_Customers.objects.filter(Company=cmp)
                vendor = Fin_Vendors.objects.filter(Company=cmp)
                if exp:
                    for ex in exp:
                        totalExpense += float(ex.amount)


                for i in customer:
                    fullname = i.first_name + ' ' + i.last_name
                    invoice = Fin_Invoice.objects.filter(Company=cmp,Customer=i)
                    
                    if invoice:
                        for inv in invoice:
                            invitems = Fin_Invoice_Items.objects.filter(Invoice=inv)
                            invdiscount = 0
                            for dis in invitems:
                                Totsalediscount += float(dis.discount)
                        
                    
                    rec_invoice = Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=i)
                    
                    if rec_invoice:
                        for rec in rec_invoice:
                            recitems = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice=rec)
                            recdiscount = 0
                            for dis in recitems:
                                Totsalediscount +=float(dis.discount)
                            
                    ret_invoice = Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=i)
                    
                    if ret_invoice:
                        for ret in ret_invoice:
                            retitems = Fin_Retainer_Invoice_Items.objects.filter(Ret_Inv=ret)
                            retdiscount = 0
                            for dis in retitems:
                                Totsalediscount += float(dis.discount)
                
                    
                
                for i in vendor:
                    fullname2 = i.first_name + ' ' + i.last_name
                    bill = Fin_Purchase_Bill.objects.filter(company=cmp,vendor=i)
                    
                    if bill:
                        for b in bill:
                            billitems = Fin_Purchase_Bill_Item.objects.filter(pbill=b)
                            billdiscount = 0
                            for dis in billitems:
                                Totpurchasediscount += float(dis.discount)
                                print(Totpurchasediscount)
                            

                    recbill = Fin_Recurring_Bills.objects.filter(company=cmp,vendor=i)
                    
                    if recbill:
                        for rb in recbill:
                            recbillitems = Fin_Recurring_Bill_Items.objects.filter(recurring_bill=rb)
                            recbilldiscountf = 0
                            for dis in recbillitems:
                                Totpurchasediscount += float(dis.discount)
                                print(Totpurchasediscount)
                                
                    
                        

                

        



                    
                
                for i in items:   
                    name = i.name
                    bQty = int(i.opening_stock)   
                    pAmt = i.purchase_price
                    totamt=bQty*pAmt
                    TOTITEMAMT+=totamt
        

                # Initialize total balance outside the loop
                for vendr in vend:
                    vendrName = vendr.first_name +" "+vendr.last_name

                    PurchaseBill = Fin_Purchase_Bill.objects.filter(vendor=vendr, status='Save')
                    Recurring_Bills = Fin_Recurring_Bills.objects.filter(vendor=vendr, status='Save')
                    Debit_Note = Fin_Debit_Note.objects.filter(Vendor=vendr, status='Saved')
                    
                    bill_balance = sum(float(inv.balance) for inv in PurchaseBill)
                    recurring_bill_balance = sum(float(rec_inv.balance) for rec_inv in Recurring_Bills)
                    total_bill_balance = bill_balance + recurring_bill_balance
                    available_debits = sum(float(credit_note.balance) for credit_note in Debit_Note)
                    total_balance = total_bill_balance - available_debits            
                    # Update the total balance
                    total_balance1 += total_balance
                    venders_data.append({
                        'name': vendrName,                
                        'total_balance': total_balance,
                    })
                
                for customer in cust:
                    customerName = customer.first_name +" "+customer.last_name

                    invoices = Fin_Invoice.objects.filter(Customer=customer, status='Saved')
                    recurring_invoices = Fin_Recurring_Invoice.objects.filter(Customer=customer, status='Saved')
                    credit_notes = Fin_CreditNote.objects.filter(Customer=customer, status='Saved')
                    
                    invoice_balance = sum(float(inv.balance) for inv in invoices)
                    recurring_invoice_balance = sum(float(rec_inv.balance) for rec_inv in recurring_invoices)
                    total_invoice_balance = invoice_balance + recurring_invoice_balance
                    
                    available_credits = sum(float(credit_note.balance) for credit_note in credit_notes)
                    
                    total_balance = total_invoice_balance - available_credits
                    
                    # Update the total balance
                    total_balance11 += total_balance

                    customers_data.append({
                        'name': customerName,                
                        'total_balance': total_balance,
                    })
                inv = Fin_Invoice.objects.filter(Company = cmp)
                crdNt = Fin_CreditNote.objects.filter(Company = cmp)
                recInv = Fin_Recurring_Invoice.objects.filter(Company = cmp)
                sordr= Fin_Sales_Order.objects.filter(Company = cmp)
                rtInv= Fin_Retainer_Invoice.objects.filter(Company = cmp)
                bill= Fin_Purchase_Bill.objects.filter(company = cmp)
                rcrbl= Fin_Recurring_Bills.objects.filter(company = cmp)
                pordr= Fin_Purchase_Order.objects.filter(Company = cmp)
                dbtnt= Fin_Debit_Note.objects.filter(Company = cmp)
                totCashIn=0
                totCashOut=0
                totCashOutpr=0
                totCashIndbt=0
                if inv:
                    for i in inv:
                        balance=i.balance
                        totCashIn += float(i.balance)  

                if crdNt:
                    for cr in crdNt:
                        balance = cr.balance
                        totCashOut += float(cr.balance)


                if recInv:
                    for rc in recInv:
                        balance = rc.balance                
                        totCashIn += float(rc.balance)
                if sordr:
                    for so in sordr:
                        balance = so.balance      
                        totCashIn += float(so.balance)
                if rtInv:
                    for rt in rtInv:
                        totCashIn += float(rt.Balance)
                if bill:
                    for bl in bill:
                        balance = bl.balance
                        totCashOutpr += float(bl.balance)

                if rcrbl:
                    for rb in rcrbl:
                        balance = rb.balance
                        totCashOutpr += float(rb.balance)

                if pordr:
                    for po in pordr:
                        balance = po.balance
                        totCashOutpr += float(po.balance)

                if dbtnt:
                    for db in dbtnt:
                        balance = db.balance
                        totCashIndbt += float(db.balance)
                        print(totCashIndbt)
                        
                        
                CURRENT_ASSETS=0
                CURRENT_ASSETS=TOTITEMAMT+totMoneybalEMPLOAN+total_balance11
                EXPENCE=0
                EXPENCE=totalExpense+Totsalediscount
                loanamt=0
                loanamt=loanbankbal+totMoneybalLOAN
                totcredit=loanamt+total_balance1+Totpurchasediscount+totbankbal+totCashIn+totCashIndbt
                totdebit=CURRENT_ASSETS+totCashOut+totCashOutpr+EXPENCE
                print(CURRENT_ASSETS)
                print(totCashOut)
                print(totCashOutpr)
                print(EXPENCE)
                print(Totsalediscount)
                balance=0
                balance2=0
                print(totcredit)
                print(totdebit)
                totamount=0
                totamount=totcredit+totdebit
                if totcredit > totdebit:
                    balance = totcredit - totdebit
                    print(balance)
                    debit=balance+totdebit
                    credit=totcredit
                else:
                    balance2 = totdebit - totcredit
                    debit=balance+totdebit
                    credit=balance2+totcredit
                    print(balance2)
                        
                

                context = {
                    'debit':debit,
                    'credit':credit,
                    'cust':cust,
                    'totCashOutsale':totCashOut,
                    'totCashInsale':totCashIn,
                    'totCashOutpr':totCashOutpr,
                    'totCashIndbt':totCashIndbt,
                    'cust': customers_data,
                    'customers': venders_data,
                    'cmp':cmp, 'data':data,'startDate':None, 'endDate':None,
                    'loan':totMoneybalLOAN,
                    'Itemstock':TOTITEMAMT,
                    'emploan':totMoneybalEMPLOAN,
                    'total_CUSTbalance':total_balance11,
                    'total_VENDORbalance':total_balance1,
                    'totalExpense':totalExpense,
                    'totbankbal':totbankbal,
                    'Totpurchasediscount':Totpurchasediscount,
                    'Totsalediscount':Totsalediscount,
                    'totalSale':totalSale,
                    'CURRENT_ASSETS':CURRENT_ASSETS,
                    'EXPENCE':EXPENCE,
                    'loantransbal':loantransbal,
                    'loanamt':loanamt,
                    'loanbankbal':loanbankbal,
                    'totcredit':totcredit,
                    'totdebit':totdebit,
                    'balance2':balance2,
                    'balance':balance,
                    'totamount':totamount,

                
                    }


                template_path = 'company/reports/trialbalancepdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_trialbalancepdf_Details'
                subject = f"Report_trialbalancepdf_Details"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - trialbalancepdf Details. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_trial_balance)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_trial_balance)
            
#End
# Employee loan details - harikrishnan --------------- 
def Fin_employee_loan_statement_report(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        
        employee = Employee.objects.filter(company=cmp,employee_status='Active')
        loan = Fin_Loan.objects.filter(company=cmp,employee__employee_status='Active') 
            

        context = {
            'allmodules':allmodules, 'cmp':cmp,'com':com, 'data':data,'loan':loan,'employee':employee
        }
        return render(request,'company/reports/Fin_Employee_Loan_Statement_Report.html', context)
    else:
        return redirect('/')

def employee_loan_statement_report_date_filter(request):
    employee = request.GET.get('employee', None)
    fromDate = request.GET.get('fromdate', None)
    toDate = request.GET.get('todate', None)
    print(employee)
    print(fromDate) 
    print(toDate)
    if 's_id' in request.session:
        s_id = request.session['s_id'] 
        data = Fin_Login_Details.objects.get(id = s_id) 
        if data.User_Type == "Company": 
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id 

        if employee != 'All' and fromDate != None and toDate != None:
            loan = Fin_Loan.objects.filter(company=cmp,employee__employee_status='Active',employee_id=employee,loan_date__gte=fromDate,loan_date__lte=toDate) 
        elif employee == 'All' and fromDate != None and toDate != None:
            loan = Fin_Loan.objects.filter(company=cmp,employee__employee_status='Active',loan_date__gte=fromDate,loan_date__lte=toDate)
        elif employee == 'All' and fromDate == None and toDate == None:
            loan = Fin_Loan.objects.filter(company=cmp,employee__employee_status='Active') 
        else:
            loan = Fin_Loan.objects.filter(company=cmp,employee__employee_status='Active',employee_id=employee) 
            
            
        newArray = []
        for i in loan:
            newArray.append((i.employee_name,i.employee.employee_number,i.loan_date,i.expiry_date,i.loan_amount,i.balance))
        context={
        'stocklist':newArray, 
        }
        return JsonResponse(context)

def sendEmail_employee_loan_statement_report(request):
        if 's_id' in request.session:
            s_id = request.session['s_id']
            data = Fin_Login_Details.objects.get(id = s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id = s_id)
                cmp = com
            else:
                com = Fin_Staff_Details.objects.get(Login_Id = s_id)
                cmp = com.company_id
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                
                fromDate = request.POST.get('start_date') or None
                toDate = request.POST.get('end_date') or None
                employee = request.POST.get('employeeValue2')
                totalloan = request.POST.get('loanTotal2')
                totalbal = request.POST.get('BalTotal2')
                
                
                if employee != 'All' and fromDate != None and toDate != None:
                    loan = Fin_Loan.objects.filter(company=cmp,employee__employee_status='Active',employee_id=employee,loan_date__gte=fromDate,loan_date__lte=toDate) 
                elif employee == 'All' and fromDate != None and toDate != None:
                    loan = Fin_Loan.objects.filter(company=cmp,employee__employee_status='Active',loan_date__gte=fromDate,loan_date__lte=toDate)
                elif employee == 'All' and fromDate == None and toDate == None:
                    loan = Fin_Loan.objects.filter(company=cmp,employee__employee_status='Active') 
                else:
                    loan = Fin_Loan.objects.filter(company=cmp,employee__employee_status='Active',employee_id=employee) 
                
                newArray = []
                for i in loan:
                    newArray.append((i.employee_name,i.employee.employee_number,i.loan_date,i.expiry_date,i.loan_amount,i.balance))
                
                context = {'newArray':newArray,'cmp':cmp,'companyName':cmp.Company_name,
                          'start_date':fromDate,'end_date':toDate,'totalbal':totalbal,'totalloan':totalloan}
                
                template_path = 'company/reports/Fin_Employee_Loan_Statement_Report_PDF.html' 
                template = get_template(template_path)
                html  = template.render(context)
                result = BytesIO()
                # pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Employee Loan Report'
                subject = f"Employee Loan Report"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Employee Loan Report for   \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                messages.success(request, 'Employee Loan Report has been shared via email successfully..!') 
                return redirect(Fin_employee_loan_statement_report)
            
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_employee_loan_statement_report)
            
#End
# ashikh------------------------------------------report outstanding payables-----------------------------------------
def Fin_report_account_outstanding_payables(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        start_date = request.POST.get('start_date')
        end_date = request.POST.get('end_date')

        all_data = []
        vendors = Fin_Vendors.objects.filter(Company=cmp)
         
        pending_inv = list()
        all_inv_data = list()
        grand_tot_balance =vendors_count=0
        for vend in vendors:

            if request.method == "POST" and start_date!='' and end_date!='':
                pending_inv = list(
                    Fin_Purchase_Bill.objects.filter(company=cmp,vendor=vend,bill_date__range=[start_date,end_date]).exclude(balance=0).annotate(object_cust_name=F("vendor__first_name"),object_count=Count('id'),object_module=F("bill_no"),object_module_id=F("id"),object_balance=F('balance'))
                )+list(
                    Fin_Recurring_Bills.objects.filter(company=cmp,vendor=vend,date__range=[start_date,end_date]).exclude(balance=0).annotate(object_cust_name=F("vendor__first_name"),object_count=Count('id'),object_module=F('recurring_bill_number'),object_module_id=F("id"),object_balance=F('balance'))
                )
            else:
                pending_inv = list(
                    Fin_Purchase_Bill.objects.filter(company=cmp,vendor=vend).exclude(balance=0).annotate(object_cust_name=F("vendor__first_name"),object_count=Count('id'),object_module=F("bill_no"),object_module_id=F("id"),object_balance=F('balance'))
                )+list(
                    Fin_Recurring_Bills.objects.filter(company=cmp,vendor=vend).exclude(balance=0).annotate(object_cust_name=F("vendor__first_name"),object_count=Count('id'),object_module=F('recurring_bill_number'),object_module_id=F("id"),object_balance=F('balance'))
                )

            all_inv_data += pending_inv

            tot_count = 0
            tot_balance =0
            for p_inv in pending_inv:
                tot_count += int(p_inv.object_count)
                tot_balance += float(p_inv.object_balance)
            grand_tot_balance += tot_balance
            if tot_count != 0:
                all_data.append({
                    "vendor_name":vend.first_name,
                    "tot_balance":tot_balance,
                    "total_count":tot_count,
                    "sub_module":pending_inv,
                })
                vendors_count += 1

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,
            'startDate':None, 'endDate':None,
            "pending_inv":pending_inv,
            "all_data":all_data,
            "all_inv_data":all_inv_data,
            'vendors_count':vendors_count,
            'grand_tot_balance':grand_tot_balance,
            "start_date":start_date,
            "end_date":end_date,
        }
        return render(request,'company/reports/Fin_report_account_outstanding_payables.html', context)
    else:
        return redirect('Fin_index')


def Fin_report_account_outstanding_payables_tomail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                currentDate = datetime.today()

                start_date = request.POST['start']
                end_date = request.POST['end']
                status = request.POST['status']
                report = request.POST['report']

                all_data = []
                vendors = Fin_Vendors.objects.filter(Company=cmp)
                
                pending_inv = list()
                all_inv_data = list()
                grand_tot_balance =vendors_count=0
                for vend in vendors:

                    if request.method == "POST" and start_date!='' and end_date!='':
                        pending_inv = list(
                            Fin_Purchase_Bill.objects.filter(company=cmp,vendor=vend,bill_date__range=[start_date,end_date]).exclude(balance=0).annotate(object_cust_name=F("vendor__first_name"),object_count=Count('id'),object_module=F("bill_no"),object_module_id=F("id"),object_balance=F('balance'))
                        )+list(
                            Fin_Recurring_Bills.objects.filter(company=cmp,vendor=vend,date__range=[start_date,end_date]).exclude(balance=0).annotate(object_cust_name=F("vendor__first_name"),object_count=Count('id'),object_module=F('recurring_bill_number'),object_module_id=F("id"),object_balance=F('balance'))
                        )
                    else:
                        pending_inv = list(
                            Fin_Purchase_Bill.objects.filter(company=cmp,vendor=vend).exclude(balance=0).annotate(object_cust_name=F("vendor__first_name"),object_count=Count('id'),object_module=F("bill_no"),object_module_id=F("id"),object_balance=F('balance'))
                        )+list(
                            Fin_Recurring_Bills.objects.filter(company=cmp,vendor=vend).exclude(balance=0).annotate(object_cust_name=F("vendor__first_name"),object_count=Count('id'),object_module=F('recurring_bill_number'),object_module_id=F("id"),object_balance=F('balance'))
                        )

                    all_inv_data += pending_inv

                    tot_count = 0
                    tot_balance =0
                    for p_inv in pending_inv:
                        tot_count += int(p_inv.object_count)
                        tot_balance += float(p_inv.object_balance)
                    grand_tot_balance += tot_balance
                    if tot_count != 0:
                        all_data.append({
                            "vendor_name":vend.first_name,
                            "tot_balance":tot_balance,
                            "total_count":tot_count,
                            "sub_module":pending_inv,
                        })
                        vendors_count += 1

                context = {
                    'cmp':cmp, 'data':data,
                    'startDate':None, 'endDate':None,
                    "pending_inv":pending_inv,
                    "all_data":all_data,
                    "all_inv_data":all_inv_data,
                    'vendors_count':vendors_count,
                    'grand_tot_balance':grand_tot_balance,
                    "start_date":start_date,
                    "end_date":end_date,
                }
                template_path = 'company/reports/Fin_report_account_outstanding_receivable_tomail_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_Outstanding_Payables'
                subject = f"Report_Outstanding_Payables"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Outstanding Payables. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect("Fin_report_account_outstanding_payables")
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect("Fin_report_account_outstanding_payables")

#End
# ashikh------------------------------------------report outstanding receivable-----------------------------------------
def Fin_report_account_outstanding_receivable(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        currentDate = datetime.today()

        start_date = request.POST.get('start_date')
        end_date = request.POST.get('end_date')

        all_data = []
        customers = Fin_Customers.objects.filter(Company=cmp)
         
        pending_inv = list()
        all_inv_data = list()
        grand_tot_balance =customers_count =0
        for cust in customers:

            if request.method == "POST" and start_date!='' and end_date!='':
                pending_inv = list(
                    Fin_Invoice.objects.filter(Company=cmp,Customer=cust,invoice_date__range=[start_date,end_date]).exclude(balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F("invoice_no"),object_module_id=F("id"),object_balance=F('balance'))
                )+list(
                    Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=cust,Retainer_Invoice_date__range=[start_date,end_date]).exclude(Balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F('Retainer_Invoice_number'),object_module_id=F("id"),object_balance=F('Balance'))
                )+list(
                    Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=cust,start_date__range=[start_date,end_date]).exclude(balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F('rec_invoice_no'),object_module_id=F("id"),object_balance=F('balance'))
                )
            else:
                pending_inv = list(
                    Fin_Invoice.objects.filter(Company=cmp,Customer=cust).exclude(balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F("invoice_no"),object_module_id=F("id"),object_balance=F('balance'))
                )+list(
                    Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=cust).exclude(Balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F('Retainer_Invoice_number'),object_module_id=F("id"),object_balance=F('Balance'))
                )+list(
                    Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=cust).exclude(balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F('rec_invoice_no'),object_module_id=F("id"),object_balance=F('balance'))
                )

            all_inv_data += pending_inv

            tot_count = 0
            tot_balance =0
            for p_inv in pending_inv:
                tot_count += int(p_inv.object_count)
                tot_balance += float(p_inv.object_balance)
            grand_tot_balance += tot_balance
            if tot_count != 0:
                all_data.append({
                    "customer_name":cust.first_name,
                    "tot_balance":tot_balance,
                    "total_count":tot_count,
                    "sub_module":pending_inv,
                })
                customers_count+=1

        context = {
            'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data,
            'startDate':None, 'endDate':None,
            "pending_inv":pending_inv,
            "all_data":all_data,
            "all_inv_data":all_inv_data,
            'customers_count':customers_count,
            'grand_tot_balance':grand_tot_balance,
            "start_date":start_date,
            "end_date":end_date,
        }
        return render(request,'company/reports/Fin_report_account_outstanding_receivable.html', context)
    else:
        return redirect('Fin_index')


def Fin_report_account_outstanding_receivable_tomail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            cmp = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            cmp = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                cust = Fin_Customers.objects.filter(Company=cmp)
                start_date = request.POST['start']
                end_date = request.POST['end']
                status = request.POST['status']
                report = request.POST['report']
                

                all_data = []
                customers = Fin_Customers.objects.filter(Company=cmp)
                
                pending_inv = list()
                all_inv_data = list()
                grand_tot_balance=customers_count=0
                for cust in customers:

                    if request.method == "POST" and start_date!='' and end_date!='':
                        pending_inv = list(
                            Fin_Invoice.objects.filter(Company=cmp,Customer=cust,invoice_date__range=[start_date,end_date]).exclude(balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F("invoice_no"),object_module_id=F("id"),object_balance=F('balance'))
                        )+list(
                            Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=cust,Retainer_Invoice_date__range=[start_date,end_date]).exclude(Balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F('Retainer_Invoice_number'),object_module_id=F("id"),object_balance=F('Balance'))
                        )+list(
                            Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=cust,start_date__range=[start_date,end_date]).exclude(balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F('rec_invoice_no'),object_module_id=F("id"),object_balance=F('balance'))
                        )
                    else:
                        pending_inv = list(
                            Fin_Invoice.objects.filter(Company=cmp,Customer=cust).exclude(balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F("invoice_no"),object_module_id=F("id"),object_balance=F('balance'))
                        )+list(
                            Fin_Retainer_Invoice.objects.filter(Company=cmp,Customer=cust).exclude(Balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F('Retainer_Invoice_number'),object_module_id=F("id"),object_balance=F('Balance'))
                        )+list(
                            Fin_Recurring_Invoice.objects.filter(Company=cmp,Customer=cust).exclude(balance=0).annotate(object_cust_name=F("Customer__first_name"),object_count=Count('id'),object_module=F('rec_invoice_no'),object_module_id=F("id"),object_balance=F('balance'))
                        )

                    all_inv_data += pending_inv

                    tot_count = 0
                    tot_balance =0
                    for p_inv in pending_inv:
                        tot_count += int(p_inv.object_count)
                        tot_balance += float(p_inv.object_balance)
                    grand_tot_balance += tot_balance
                    if tot_count != 0:
                        all_data.append({
                            "customer_name":cust.first_name,
                            "tot_balance":tot_balance,
                            "total_count":tot_count,
                            "sub_module":pending_inv,
                        })
                        customers_count+=1

                context = {
                    'cmp':cmp, 'cmp':cmp, 'data':data,
                    'startDate':None, 'endDate':None,
                    "pending_inv":pending_inv,
                    "all_data":all_data,
                    "all_inv_data":all_inv_data,
                    'customers_count':customers_count,
                    'grand_tot_balance':grand_tot_balance,
                    "start_date":start_date,
                    "end_date":end_date,
                }
                template_path = 'company/reports/Fin_report_account_outstanding_receivable_tomail_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_Outstanding_Payables'
                subject = f"Report_Outstanding_Payables"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Outstanding Payables. \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect("Fin_report_account_outstanding_receivable")
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect("Fin_report_account_outstanding_receivable")
            
#end

# sales and purchase order item details - harikrishnan ----------
def Fin_sales_order_item_details(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        itemslist = Fin_Sales_Order_Items.objects.filter(SalesOrder__Company=cmp).values('Item','Item__name').distinct()
        
        item = Fin_Items.objects.filter(Company=cmp)
        newArray = []
        for i in item:
            Item_Module = Fin_Sales_Order_Items.objects.filter(Item=i)
            itemName = i.name
            totalQuantity = Item_Module.aggregate(total_quantity=Sum('quantity'))['total_quantity']
            totalPrice = Item_Module.aggregate(total_price=Sum('price'))['total_price']
            totalAmount = Item_Module.aggregate(total_amount=Sum('total'))['total_amount']
            if totalQuantity != 0 and totalQuantity != None and Item_Module != None :
                newArray.append((itemName,totalQuantity,totalPrice,totalAmount))

        context = {
            'allmodules':allmodules, 'cmp':cmp,'com':com, 'data':data,'itemArray':newArray,
            'itemslist':itemslist,
        }
        return render(request,'company/reports/Fin_Sales_Order_Item_Details.html', context)
    else:
        return redirect('/')

def sales_order_item_details_date_filter(request):
    ItemID = request.GET.get('ItemID', None)
    fromDate = request.GET.get('fromdate', None)
    toDate = request.GET.get('todate', None)
    if 's_id' in request.session:
        s_id = request.session['s_id'] 
        data = Fin_Login_Details.objects.get(id = s_id) 
        if data.User_Type == "Company": 
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id 

        if ItemID != 'All':
            item = Fin_Items.objects.filter(id=ItemID)
        else:
            item = Fin_Items.objects.filter(Company=cmp)
        newArray = []
        
        for i in item:
            if ItemID != 'All' and fromDate != None and toDate != None:
                print('111')
                Item_Module = Fin_Sales_Order_Items.objects.filter(Item=ItemID,SalesOrder__sales_order_date__gte = fromDate,SalesOrder__sales_order_date__lte = toDate)
            elif ItemID == 'All' and fromDate != None and toDate != None:
                print('222')
                Item_Module = Fin_Sales_Order_Items.objects.filter(Item=i,SalesOrder__sales_order_date__gte = fromDate,SalesOrder__sales_order_date__lte = toDate)
            elif ItemID == 'All' and fromDate == None and toDate == None:
                print('333')
                Item_Module = Fin_Sales_Order_Items.objects.filter(Item=i)
            else:
                print('444')
                Item_Module = Fin_Sales_Order_Items.objects.filter(Item_id=ItemID)
                
            # Item_Module = Fin_Sales_Order_Items.objects.filter(Item=i,SalesOrder__sales_order_date__gte = fromDate,SalesOrder__sales_order_date__lte = toDate)
            itemName = i.name
            totalQuantity = Item_Module.aggregate(total_quantity=Sum('quantity'))['total_quantity']
            totalPrice = Item_Module.aggregate(total_price=Sum('price'))['total_price']
            totalAmount = Item_Module.aggregate(total_amount=Sum('total'))['total_amount']
            if totalQuantity != 0 and totalQuantity != None and Item_Module != None :
                newArray.append((itemName,totalQuantity,totalPrice,totalAmount))
        
        context={
        'stocklist':newArray, 
        }
        return JsonResponse(context)

def sendEmail_sales_order_item_details(request):
        if 's_id' in request.session:
            s_id = request.session['s_id']
            data = Fin_Login_Details.objects.get(id = s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id = s_id)
                cmp = com
            else:
                com = Fin_Staff_Details.objects.get(Login_Id = s_id)
                cmp = com.company_id
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                
                fromDate = request.POST.get('start_date') or None
                toDate = request.POST.get('end_date') or None
                ItemID = request.POST.get('ItemID2')
                totalAmount2 = request.POST.get('totalAmount2')
                
                
                if ItemID != 'All':
                    item = Fin_Items.objects.filter(id=ItemID)
                else:
                    item = Fin_Items.objects.filter(Company=cmp)
                newArray = []
                
                for i in item:
                    if ItemID != 'All' and fromDate != None and toDate != None:
                        print('111')
                        Item_Module = Fin_Sales_Order_Items.objects.filter(Item=ItemID,SalesOrder__sales_order_date__gte = fromDate,SalesOrder__sales_order_date__lte = toDate)
                    elif ItemID == 'All' and fromDate != None and toDate != None:
                        print('222')
                        Item_Module = Fin_Sales_Order_Items.objects.filter(Item=i,SalesOrder__sales_order_date__gte = fromDate,SalesOrder__sales_order_date__lte = toDate)
                    elif ItemID == 'All' and fromDate == None and toDate == None:
                        print('333')
                        Item_Module = Fin_Sales_Order_Items.objects.filter(Item=i)
                    else:
                        print('444')
                        Item_Module = Fin_Sales_Order_Items.objects.filter(Item_id=ItemID)
                        
                    # Item_Module = Fin_Sales_Order_Items.objects.filter(Item=i,SalesOrder__sales_order_date__gte = fromDate,SalesOrder__sales_order_date__lte = toDate)
                    itemName = i.name
                    totalQuantity = Item_Module.aggregate(total_quantity=Sum('quantity'))['total_quantity']
                    totalPrice = Item_Module.aggregate(total_price=Sum('price'))['total_price']
                    totalAmount = Item_Module.aggregate(total_amount=Sum('total'))['total_amount']
                    if totalQuantity != 0 and totalQuantity != None and Item_Module != None :
                        newArray.append((itemName,totalQuantity,totalPrice,totalAmount))
                
                context = {'newArray':newArray,'cmp':cmp,'companyName':cmp.Company_name,
                          'start_date':fromDate,'end_date':toDate,'totalAmount2':totalAmount2}
                
                template_path = 'company/reports/Fin_Sales_Order_Item_Details_PDF.html' 
                template = get_template(template_path)
                html  = template.render(context)
                result = BytesIO()
                # pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Sales Order Item Details'
                subject = f"Sales Order Item Details"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Sales Order Item Details for   \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                messages.success(request, 'Sales Order Item Details has been shared via email successfully..!') 
                return redirect(Fin_sales_order_item_details)
            
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_sales_order_item_details)


def Fin_purchase_order_item_details(request): 
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')
        itemslist = Fin_Purchase_Order_Items.objects.filter(PurchaseOrder__Company=cmp).values('Item','Item__name').distinct() 

        item = Fin_Items.objects.filter(Company=cmp)
        newArray = []
        for i in item:
            Item_Module = Fin_Purchase_Order_Items.objects.filter(Item=i)
            itemName = i.name
            totalQuantity = Item_Module.aggregate(total_quantity=Sum('quantity'))['total_quantity']
            totalPrice = Item_Module.aggregate(total_price=Sum('price'))['total_price']
            totalAmount = Item_Module.aggregate(total_amount=Sum('total'))['total_amount']
            print(itemName,totalQuantity,totalPrice,totalAmount,Item_Module,'0000')
            if totalQuantity != 0 and totalQuantity != None and Item_Module != None :
                print(itemName,totalQuantity,totalPrice,totalAmount,Item_Module)
                newArray.append((itemName,totalQuantity,totalPrice,totalAmount))

        context = {
            'allmodules':allmodules, 'cmp':cmp,'com':com, 'data':data,'itemArray':newArray,'itemslist':itemslist
        }
        return render(request,'company/reports/Fin_Purchase_Order_Item_Details.html', context)
    else:
        return redirect('/')

def purchase_order_item_details_date_filter(request):
    ItemID = request.GET.get('ItemID', None)
    fromDate = request.GET.get('fromdate', None)
    toDate = request.GET.get('todate', None)
    if 's_id' in request.session:
        s_id = request.session['s_id'] 
        data = Fin_Login_Details.objects.get(id = s_id) 
        if data.User_Type == "Company": 
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id 

        if ItemID != 'All':
            item = Fin_Items.objects.filter(id=ItemID)
        else:
            item = Fin_Items.objects.filter(Company=cmp)
        newArray = []
        
        for i in item:
            if ItemID != 'All' and fromDate != None and toDate != None:
                Item_Module = Fin_Purchase_Order_Items.objects.filter(Item=ItemID,PurchaseOrder__purchase_order_date__gte = fromDate,PurchaseOrder__purchase_order_date__lte = toDate)
            elif ItemID == 'All' and fromDate != None and toDate != None:
                Item_Module = Fin_Purchase_Order_Items.objects.filter(Item=i,PurchaseOrder__purchase_order_date__gte = fromDate,PurchaseOrder__purchase_order_date__lte = toDate)
            elif ItemID == 'All' and fromDate == None and toDate == None:
                Item_Module = Fin_Purchase_Order_Items.objects.filter(Item=i)
            else:
                Item_Module = Fin_Purchase_Order_Items.objects.filter(Item_id=ItemID)
                
            # Item_Module = Fin_Purchase_Order_Items.objects.filter(Item=i,PurchaseOrder__purchase_order_date__gte = fromDate,PurchaseOrder__purchase_order_date__lte = toDate)
            itemName = i.name
            totalQuantity = Item_Module.aggregate(total_quantity=Sum('quantity'))['total_quantity']
            totalPrice = Item_Module.aggregate(total_price=Sum('price'))['total_price']
            totalAmount = Item_Module.aggregate(total_amount=Sum('total'))['total_amount']
            if totalQuantity != 0 and totalQuantity != None and Item_Module != None :
                newArray.append((itemName,totalQuantity,totalPrice,totalAmount))
        
        context={
        'stocklist':newArray, 
        }
        return JsonResponse(context)

def sendEmail_purchase_order_item_details(request):
        if 's_id' in request.session:
            s_id = request.session['s_id']
            data = Fin_Login_Details.objects.get(id = s_id)
            if data.User_Type == "Company":
                com = Fin_Company_Details.objects.get(Login_Id = s_id)
                cmp = com
            else:
                com = Fin_Staff_Details.objects.get(Login_Id = s_id)
                cmp = com.company_id
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']
                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
                
                fromDate = request.POST.get('start_date') or None
                toDate = request.POST.get('end_date') or None
                ItemID = request.POST.get('ItemID2')
                totalAmount2 = request.POST.get('totalAmount2')
                
                
                if ItemID != 'All':
                    item = Fin_Items.objects.filter(id=ItemID)
                else:
                    item = Fin_Items.objects.filter(Company=cmp)
                newArray = []
                
                for i in item:
                    if ItemID != 'All' and fromDate != None and toDate != None:
                        Item_Module = Fin_Purchase_Order_Items.objects.filter(Item=ItemID,PurchaseOrder__purchase_order_date__gte = fromDate,PurchaseOrder__purchase_order_date__lte = toDate)
                    elif ItemID == 'All' and fromDate != None and toDate != None:
                        Item_Module = Fin_Purchase_Order_Items.objects.filter(Item=i,PurchaseOrder__purchase_order_date__gte = fromDate,PurchaseOrder__purchase_order_date__lte = toDate)
                    elif ItemID == 'All' and fromDate == None and toDate == None:
                        Item_Module = Fin_Purchase_Order_Items.objects.filter(Item=i)
                    else:
                        Item_Module = Fin_Purchase_Order_Items.objects.filter(Item_id=ItemID)
                        
                    # Item_Module = Fin_Purchase_Order_Items.objects.filter(Item=i,PurchaseOrder__purchase_order_date__gte = fromDate,PurchaseOrder__purchase_order_date__lte = toDate)
                    itemName = i.name
                    totalQuantity = Item_Module.aggregate(total_quantity=Sum('quantity'))['total_quantity']
                    totalPrice = Item_Module.aggregate(total_price=Sum('price'))['total_price']
                    totalAmount = Item_Module.aggregate(total_amount=Sum('total'))['total_amount']
                    if totalQuantity != 0 and totalQuantity != None and Item_Module != None :
                        newArray.append((itemName,totalQuantity,totalPrice,totalAmount))
                
                context = {'newArray':newArray,'cmp':cmp,'companyName':cmp.Company_name,
                          'start_date':fromDate,'end_date':toDate,'totalAmount2':totalAmount2}
                
                template_path = 'company/reports/Fin_Purchase_Order_Item_Details_PDF.html' 
                template = get_template(template_path)
                html  = template.render(context)
                result = BytesIO()
                # pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Purchase Order Item Details'
                subject = f"Purchase Order Item Details"
                from django.core.mail import EmailMessage as EmailMsg
                email = EmailMsg(subject, f"Hi,\nPlease find the attached Purchase Order Item Details for   \n{email_message}\n\n--\nRegards,\n{cmp.Company_name}\n{cmp.Address}\n{cmp.State} - {cmp.Country}\n{cmp.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)
                messages.success(request, 'Purchase Order Item Details has been shared via email successfully..!') 
                return redirect(Fin_purchase_order_item_details)
            
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_purchase_order_item_details)
            
#End
#---------------------------------------payment recived summary& payment made summary--------------------
def Fin_paymentRecivedReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totpamount = 0
        totpay = 0
        totbalance = 0
        

        cust = Fin_Customers.objects.filter(Company=cmp)
        
        for c in cust:
            customerName = c.first_name +" "+c.last_name
           
           

            inv = Fin_Payment_Received.objects.filter(customer=c,company=cmp)
            
            
            for i in inv:
                dates = i.payment_date
                payno = i.payment_no
                paymethod =i.payment_method
                totalamount =i.total_amount
                totalpayment = i.total_payment
                totalbalance = i.total_balance
                status =i.status
                totpamount += float(i.total_amount)
                totpay += float(i.total_payment)
                totbalance += float(i.total_balance)


                

            

                details = {
                    'name': customerName,
                    'date':dates,
                    'payno':payno,
                    'paymethod':paymethod,
                    'totalamount':totalamount,
                    'totalbalance':totalbalance,
                    'totalpayment':totalpayment,
                    'status':status,
                    
        

                }
                print(details)

                reportData.append(details)

            
         
        context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'startDate':None, 'endDate':None,'totpamount':totpamount, 'totpay':totpay, 'totbalance': totbalance, 
        }
        return render(request,'company/reports/Fin_payment_recived_summary_report.html', context)
    else:
        return redirect('/')


def Fin_sharePaymentrecivedReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totpamount = 0
                totpay = 0
                totbalance = 0

                cust = Fin_Customers.objects.filter(Company=com)
                

                for c in cust:
                    customerName = c.first_name +" "+c.last_name

                    if startDate == None or endDate == None:
                        if trans == "all":
                            inv = Fin_Payment_Received.objects.filter(customer=c,company=com)
                            
                        elif trans == 'Saved':
                            inv = Fin_Payment_Received.objects.filter(customer=c,company=com, status = 'Saved')
                            
                        elif trans == 'Draft':
                           
                            inv = Fin_Payment_Received.objects.filter(customer=c,company=com,status = 'Draft')
                            
                    else:
                        if trans == 'all':
                            inv = Fin_Payment_Received.objects.filter(customer=c,company=com, payment_date__range = [startDate, endDate])
                            
                        elif trans == 'Saved':
                            inv = Fin_Payment_Received.objects.filter(customer=c,company=com, payment_date__range = [startDate, endDate], status = 'Saved')
                            
                        elif trans == 'Draft':
                         
                            inv = Fin_Payment_Received.objects.filter(customer=c,company=com,payment_date__range = [startDate, endDate], status = 'Draft')
                        
                       
                    if inv:
                        for i in inv:
                            dates = i.payment_date
                            payno = i.payment_no
                            paymethod =i.payment_method
                            totalamount =i.total_amount
                            totalpayment = i.total_payment
                            totalbalance = i.total_balance
                            status =i.status
                            totpamount += float(i.total_amount)
                            totpay += float(i.total_payment)
                            totbalance += float(i.total_balance)

                        
                        details = {
                                'name': customerName,
                                'date':dates,
                                'payno':payno,
                                'paymethod':paymethod,
                                'totalamount':totalamount,
                                'totalbalance':totalbalance,
                                'totalpayment':totalpayment,
                                'status':status,
                               
                              


                                
                            
                        }

                        reportData.append(details)

                        print(details)

                
                totpamount = totpamount
                totpay=totpay
                totbalance=totbalance

            
                context = { 'cmp':com, 'data':data, 'reportData':reportData, 'startDate':startDate, 'endDate':endDate, 'totpamount':totpamount , 'totpay':totpay,'totbalance':totbalance}
                template_path = 'company/reports/Fin_payment_recived_report_Pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_paymentrecived_report'
                subject = f"Report_paymentrecived_report"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - paymentrecived. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_paymentRecivedReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_paymentRecivedReport)


def Fin_paymentMadeSummaryReport(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id = s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id)
            cmp = com.company_id
        
        allmodules = Fin_Modules_List.objects.get(company_id = cmp,status = 'New')

        reportData = []
        totpamount = 0
        totpay = 0
        totbalance = 0
        

        vnd = Fin_Vendors.objects.filter(Company=cmp)
        
        for c in vnd:
            vndName = c.first_name +" "+c.last_name
           
           

            inv = Fin_PaymentMade.objects.filter(vendor=c,Company=cmp)
            
            
            for i in inv:
                dates = i.payment_date
                payno = i.payment_number
                paymethod =i.payment_method
                totalamount =i.total_amount
                totalpayment = i.total_payment
                totalbalance = i.total_balance
                status =i.status
                totpamount += float(i.total_amount)
                totpay += float(i.total_payment)
                totbalance += float(i.total_balance)


                

            

                details = {
                    'name': vndName,
                    'date':dates,
                    'payno':payno,
                    'paymethod':paymethod,
                    'totalamount':totalamount,
                    'totalbalance':totalbalance,
                    'totalpayment':totalpayment,
                    'status':status,
                    
               
                    



                }
                print(details)

                reportData.append(details)

            
        
        context = {
                'allmodules':allmodules, 'com':com, 'cmp':cmp, 'data':data, 'reportData':reportData,'startDate':None, 'endDate':None,'totpamount':totpamount, 'totpay':totpay, 'totbalance': totbalance, 
        }
        return render(request,'company/reports/Fin_payment_made_summary_report.html', context)
    else:
        return redirect('/')


def Fin_sharePaymentmadeReportToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id = s_id)
        if data.User_Type == 'Company':
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
        else:
            com = Fin_Staff_Details.objects.get(Login_Id = s_id).company_id
        
        try:
            if request.method == 'POST':
                emails_string = request.POST['email_ids']

                # Split the string by commas and remove any leading or trailing whitespace
                emails_list = [email.strip() for email in emails_string.split(',')]
                email_message = request.POST['email_message']
                # print(emails_list)
            
                trans = request.POST['transaction']
                startDate = request.POST['start']
                endDate = request.POST['end']
                if startDate == "":
                    startDate = None
                if endDate == "":
                    endDate = None

                reportData = []
                totpamount = 0
                totpay = 0
                totbalance = 0

                cust = Fin_Vendors.objects.filter(Company=com)
                

                for c in cust:
                    vendorName = c.first_name +" "+c.last_name

                    if startDate == None or endDate == None:
                        if trans == "all":
                            inv = Fin_PaymentMade.objects.filter(vendor=c,Company=com)
                            
                        elif trans == 'Saved':
                            inv = Fin_PaymentMade.objects.filter(vendor=c,Company=com, status = 'Saved')
                            
                        elif trans == 'Draft':
                           
                            inv = Fin_PaymentMade.objects.filter(vendor=c,Company=com,status = 'Draft')
                            
                    else:
                        if trans == 'all':
                            inv = Fin_PaymentMade.objects.filter(vendor=c,Company=com, payment_date__range = [startDate, endDate])
                            
                        elif trans == 'Saved':
                            inv = Fin_PaymentMade.objects.filter(vendor=c,Company=com, payment_date__range = [startDate, endDate], status = 'Saved')
                            
                        elif trans == 'Draft':
                         
                            inv = Fin_PaymentMade.objects.filter(vendor=c,Company=com,payment_date__range = [startDate, endDate], status = 'Draft')
                        
                       
                    if inv:
                        for i in inv:
                            dates = i.payment_date
                            payno = i.payment_number
                            paymethod =i.payment_method
                            totalamount =i.total_amount
                            totalpayment = i.total_payment
                            totalbalance = i.total_balance
                            status =i.status
                            totpamount += float(i.total_amount)
                            totpay += float(i.total_payment)
                            totbalance += int(i.total_balance)

                        
                        details = {
                                'name': vendorName,
                                'date':dates,
                                'payno':payno,
                                'paymethod':paymethod,
                                'totalamount':totalamount,
                                'totalbalance':totalbalance,
                                'totalpayment':totalpayment,
                                'status':status,
                               
                              


                                
                            
                        }

                        reportData.append(details)

                        print(details)

                
                totpamount = totpamount
                totpay=totpay
                totbalance=totbalance

            
                context = { 'cmp':com, 'data':data, 'reportData':reportData, 'startDate':startDate, 'endDate':endDate, 'totpamount':totpamount , 'totpay':totpay,'totbalance':totbalance}
                template_path = 'company/reports/Fin_paymentmade_summary_pdf.html'
                template = get_template(template_path)

                html  = template.render(context)
                result = BytesIO()
                pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
                pdf = result.getvalue()
                filename = f'Report_paymentmade_report'
                subject = f"Report_paymentmade_report"
                email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - paymentmade. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
                email.attach(filename, pdf, "application/pdf")
                email.send(fail_silently=False)

                messages.success(request, 'Report has been shared via email successfully..!')
                return redirect(Fin_paymentMadeSummaryReport)
        except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(Fin_paymentMadeSummaryReport)
            
#End

def stocksummary1(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
        items = Fin_Items.objects.filter(Company=cmp)

        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST.get('reportperiod', 'default_value')

        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['from_date']
            todate = request.POST['to_date']
        elif filmeth == 'This month':
            input_dt = date.today()
            day_num = input_dt.strftime("%d")
            res = input_dt - timedelta(days=int(day_num) - 1)
            fromdate = str(res)
            any_day = date.today()
            next_month = any_day.replace(day=28) + timedelta(days=4)
            d = next_month - timedelta(days=next_month.day)
            todate = str(d)
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'

        else:
            fromdate = cmp.Start_Date
            todate = date.today()


        # Corrected filtering using Django ORM syntax
        items = Fin_Items.objects.filter(item_created__gte=fromdate, item_created__lte=todate,Company=cmp)

        try:
            fromdates = datetime.datetime.strptime(fromdate, "%Y-%m-%d").date()
            todates = datetime.datetime.strptime(todate, "%Y-%m-%d").date()
        except:
            fromdates = fromdate
            todates = todate
        reportData = []

        for i in items:
            qIn = 0
            qOut = 0
            name = i.name
            bQty = int(i.opening_stock)
            pAmt = i.purchase_price
            sAmt = i.selling_price
            itmdate = i.item_created

            invItems = Fin_Invoice_Items.objects.filter(Item=i)
            recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item=i)
            retInvItem = Fin_Retainer_Invoice_Items.objects.filter(Item=i)

            if invItems:
                for itm in invItems:
                    qOut += int(itm.quantity)

            if recInvItems:
                for itm in recInvItems:
                    qOut += int(itm.quantity)

            if retInvItem:
                for itm in retInvItem:
                    qOut += int(itm.Quantity)

            billItems = Fin_Purchase_Bill_Item.objects.filter(item=i)
            recBillItems = Fin_Recurring_Bill_Items.objects.filter(items=i)

            if billItems:
                for itm in billItems:
                    qIn += int(itm.qty)

            if recBillItems:
                for itm in recBillItems:
                    qIn += int(itm.quantity)

            qinQty = bQty + qIn
            closingQty = qinQty - qOut

            det = {
                'name': name,
                'pAmount': pAmt,
                'sAmount': sAmt,
                'bQty': bQty,
                'qtyIn': qIn,
                'qtyOut': qOut,
                'cQty': closingQty,
                'qinQty': qinQty
            }
            reportData.append(det)

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,
            'startDate': None, 'endDate': None,"fromdate":fromdates,"todate":todates,'filmeth':filmeth
        }
        return render(request, 'company/reports/stocksummary.html', context)
    else:
        return redirect('/')       

def stocksummary2(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
        items = Fin_Items.objects.filter(Company=cmp)



        reportData = []

        for i in items:
            qIn = 0
            qOut = 0
            name = i.name
            bQty = int(i.opening_stock)
            pAmt = i.purchase_price
            sAmt = i.selling_price
            itmdate = i.item_created

            invItems = Fin_Invoice_Items.objects.filter(Item=i)
            recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item=i)
            retInvItem = Fin_Retainer_Invoice_Items.objects.filter(Item=i)

            if invItems:
                for itm in invItems:
                    qOut += int(itm.quantity)

            if recInvItems:
                for itm in recInvItems:
                    qOut += int(itm.quantity)

            if retInvItem:
                for itm in retInvItem:
                    qOut += int(itm.Quantity)

            billItems = Fin_Purchase_Bill_Item.objects.filter(item=i)
            recBillItems = Fin_Recurring_Bill_Items.objects.filter(items=i)

            if billItems:
                for itm in billItems:
                    qIn += int(itm.qty)

            if recBillItems:
                for itm in recBillItems:
                    qIn += int(itm.quantity)

            qinQty = bQty + qIn
            closingQty = qinQty - qOut

            det = {
                'name': name,
                'pAmount': pAmt,
                'sAmount': sAmt,
                'bQty': bQty,
                'qtyIn': qIn,
                'qtyOut': qOut,
                'cQty': closingQty,
                'qinQty': qinQty
            }
            reportData.append(det)

        context = {
            'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,
            'startDate': None, 'endDate': None
        }
        return render(request, 'company/reports/stocksummary.html', context)
    else:
        return redirect('/')

def Fin_shareStockSummaryToEmail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
        if data.User_Type == "Company":
            com = Fin_Company_Details.objects.get(Login_Id=s_id)
            cmp = com
        else:
            com = Fin_Staff_Details.objects.get(Login_Id=s_id)
            cmp = com.company_id

        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        items = Fin_Items.objects.filter(Company=cmp)

        toda = date.today()
        tod = toda.strftime("%Y-%m-%d")
        filmeth = request.POST.get('reportperiod', 'default_value')

        if filmeth == 'Today':
            fromdate = tod
            todate = tod
        elif filmeth == 'Custom':
            fromdate = request.POST['from_date']
            todate = request.POST['to_date']
        elif filmeth == 'This month':
            input_dt = date.today()
            day_num = input_dt.strftime("%d")
            res = input_dt - timedelta(days=int(day_num) - 1)
            fromdate = str(res)
            any_day = date.today()
            next_month = any_day.replace(day=28) + timedelta(days=4)
            d = next_month - timedelta(days=next_month.day)
            todate = str(d)
        elif filmeth == 'This financial year':
            if int(toda.strftime("%m")) >= 1 and int(toda.strftime("%m")) <= 3:
                pyear = int(toda.strftime("%Y")) - 1
                fromdate = f'{pyear}-03-01'
                todate = f'{toda.strftime("%Y")}-03-31'
            else:
                pyear = int(toda.strftime("%Y")) + 1
                fromdate = f'{toda.strftime("%Y")}-03-01'
                todate = f'{pyear}-03-31'
        else:
            fromdate = cmp.Start_Date
            todate = date.today()

        # Corrected filtering using Django ORM syntax
        items = Fin_Items.objects.filter(item_created__gte=fromdate, item_created__lte=todate,Company=cmp)

        try:
            fromdates = datetime.datetime.strptime(fromdate, "%Y-%m-%d").date()
            todates = datetime.datetime.strptime(todate, "%Y-%m-%d").date()
        except:
            fromdates = cmp.Start_Date
            todates = date.today()

        reportData = []

        for i in items:
            qIn = 0
            qOut = 0
            name = i.name
            bQty = int(i.opening_stock)
            pAmt = i.purchase_price
            sAmt = i.selling_price
            itmdate = i.item_created

            invItems = Fin_Invoice_Items.objects.filter(Item=i)
            recInvItems = Fin_Recurring_Invoice_Items.objects.filter(Item=i)
            retInvItem = Fin_Retainer_Invoice_Items.objects.filter(Item=i)

            if invItems:
                for itm in invItems:
                    qOut += int(itm.quantity)

            if recInvItems:
                for itm in recInvItems:
                    qOut += int(itm.quantity)

            if retInvItem:
                for itm in retInvItem:
                    qOut += int(itm.Quantity)

            billItems = Fin_Purchase_Bill_Item.objects.filter(item=i)
            recBillItems = Fin_Recurring_Bill_Items.objects.filter(items=i)

            if billItems:
                for itm in billItems:
                    qIn += int(itm.qty)

            if recBillItems:
                for itm in recBillItems:
                    qIn += int(itm.quantity)

            qinQty = bQty + qIn
            closingQty = qinQty - qOut

            det = {
                'name': name,
                'pAmount': pAmt,
                'sAmount': sAmt,
                'bQty': bQty,
                'qtyIn': qIn,
                'qtyOut': qOut,
                'cQty': closingQty,
                'qinQty': qinQty
            }
            reportData.append(det)



    try:
        if request.method == 'POST':
            emails_string = request.POST['email_ids']

            emails_list = [email.strip() for email in emails_string.split(',')]
            email_message = request.POST['email_message']


            
        
            context = {
                    'allmodules': allmodules, 'com': com, 'cmp': cmp, 'data': data, 'reportData': reportData,
            'startDate': None, 'endDate': None, 'item': items, "fromdate": fromdates, "todate": todates  }


            template_path = 'company/reports/stockemail.html'
            template = get_template(template_path)

            html  = template.render(context)
            result = BytesIO()
            pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)
            pdf = result.getvalue()
            filename = f'Report_StockSummary'
            subject = f"Report_StockSummary"
            email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Sales By Customer. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
            email.attach(filename, pdf, "application/pdf")
            email.send(fail_silently=False)

            messages.success(request, 'Report has been shared via email successfully..!')
            return redirect(stocksummary2)
    except Exception as e:
            print(e)
            messages.error(request, f'{e}')
            return redirect(stocksummary2)
            
#---------------------------------------profit & loss A/C--------------------
def fin_profit_loss(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id=s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id=s_id)
        cmp = com.company_id

    if request.method == 'POST':
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

            opening_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date))
            total_opening_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date)).aggregate(total_opening_stock=Sum('opening_stock'))['total_opening_stock'] or 0

            purchase_account = Fin_Recurring_Bills.objects.filter(company_id=cmp,date__range=(start_date, end_date))
            total_recurring_bill = Fin_Recurring_Bills.objects.filter(company_id=cmp,date__range=(start_date, end_date)).aggregate(total_recurring_bill=Sum('grand_total'))['total_recurring_bill'] or 0
            purchase_bill_account = Fin_Purchase_Bill.objects.filter(company_id=cmp,bill_date__range=(start_date, end_date))
            total_bill = Fin_Purchase_Bill.objects.filter(company_id=cmp,bill_date__range=(start_date, end_date)).aggregate(total_bill=Sum('grandtotal'))['total_bill'] or 0
            total_purchase_account = int(total_recurring_bill) + int(total_bill)

            invoice = Fin_Invoice.objects.filter(Company_id=cmp,invoice_date__range=(start_date, end_date))

            if invoice == None:

                total_discount_invoice = 0
                
            else:

                total_discount_invoice = 0
                for i in invoice:
                    total_discount_invoices = Fin_Invoice_Items.objects.filter(Invoice_id=i.id).aggregate(total_discount_invoice=Sum('discount'))['total_discount_invoice'] or 0
                    total_discount_invoice += float(total_discount_invoices)

            recurr_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp,start_date__range=(start_date, end_date))

            if recurr_invoice == None:

                total_discount_recurringinvoice = 0  

            else:

                total_discount_recurringinvoice = 0
                
                for r in recurr_invoice:
                    total_discount_recurringinvoices = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice_id=r.id).aggregate(total_discount_recurringinvoice=Sum('discount'))['total_discount_recurringinvoice'] or 0
                    total_discount_recurringinvoice += float(total_discount_recurringinvoices)
            
            total_discount_paid = int(total_discount_invoice) + int(total_discount_recurringinvoice)

            indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp,expense_date__range=(start_date, end_date))
            total_indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp,expense_date__range=(start_date, end_date)).aggregate(total_indirect_expenses=Sum('amount'))['total_indirect_expenses'] or 0

            total_expenses = int(total_discount_paid) + int(total_indirect_expenses)

            total_invoice = Fin_Invoice.objects.filter(Company_id=cmp,invoice_date__range=(start_date, end_date)).aggregate(total_invoice=Sum('grandtotal'))['total_invoice'] or 0
            total_recurring_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp,start_date__range=(start_date, end_date)).aggregate(total_recurring_invoice=Sum('grandtotal'))['total_recurring_invoice'] or 0
            total_retainer_invoice = Fin_Retainer_Invoice.objects.filter(Company_id=cmp,Retainer_Invoice_date__range=(start_date, end_date)).aggregate(total_retainer_invoice=Sum('Grand_total'))['total_retainer_invoice'] or 0
            total_sales_account = int(total_invoice) + int(total_recurring_invoice) + int(total_retainer_invoice)

            total_bill_discount = Fin_Purchase_Bill_Item.objects.filter(company_id=cmp).aggregate(total_bill_discount=Sum('discount'))['total_bill_discount'] or 0
            total_indirect_income = int(total_bill_discount) + int(total_discount_recurringinvoice)

            closing_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date))
            total_closing_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date)).aggregate(total_closing_stock=Sum('current_stock'))['total_closing_stock'] or 0

            total_profit =  int(total_opening_stock) + int(total_purchase_account) + int(total_expenses)
            total_loss = int(total_sales_account) + int(total_indirect_income) + int(total_closing_stock)
            difference = int(total_profit) - int(total_loss)

            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_opening_stock':total_opening_stock,
                'opening_stock':opening_stock,
                'total_purchase_account':total_purchase_account,
                'total_discount_paid':total_discount_paid,
                'indirect_expenses':indirect_expenses,
                'total_expenses':total_expenses,
                'total_sales_account':total_sales_account,
                'total_indirect_income':total_indirect_income,
                'closing_stock':closing_stock,
                'total_closing_stock':total_closing_stock,
                'total_profit':total_profit,
                'total_loss':total_loss,
                'difference':difference,
                'start_date':start_date,
                'end_date':end_date,
            }

            return render(request,'company/reports/profit_loss.html',context)
        
    allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

    opening_stock = Fin_Items.objects.filter(Company_id=cmp)
    total_opening_stock = Fin_Items.objects.filter(Company_id=cmp).aggregate(total_opening_stock=Sum('opening_stock'))['total_opening_stock'] or 0

    purchase_account = Fin_Recurring_Bills.objects.filter(company_id=cmp)
    total_recurring_bill = Fin_Recurring_Bills.objects.filter(company_id=cmp).aggregate(total_recurring_bill=Sum('grand_total'))['total_recurring_bill'] or 0
    purchase_bill_account = Fin_Purchase_Bill.objects.filter(company_id=cmp)
    total_bill = Fin_Purchase_Bill.objects.filter(company_id=cmp).aggregate(total_bill=Sum('grandtotal'))['total_bill'] or 0
    total_purchase_account = int(total_recurring_bill) + int(total_bill)

    invoice = Fin_Invoice.objects.filter(Company_id=cmp)

    if invoice == None:

        total_discount_invoice = 0
        
    else:

        total_discount_invoice = 0
        for i in invoice:
            total_discount_invoices = Fin_Invoice_Items.objects.filter(Invoice_id=i.id).aggregate(total_discount_invoice=Sum('discount'))['total_discount_invoice'] or 0
            total_discount_invoice += float(total_discount_invoices)

    recurr_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp)

    if recurr_invoice == None:

        total_discount_recurringinvoice = 0  

    else:

        total_discount_recurringinvoice = 0
        
        for r in recurr_invoice:
            total_discount_recurringinvoices = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice_id=r.id).aggregate(total_discount_recurringinvoice=Sum('discount'))['total_discount_recurringinvoice'] or 0
            total_discount_recurringinvoice += float(total_discount_recurringinvoices)

    total_discount_paid = int(total_discount_invoice) + int(total_discount_recurringinvoice)
    print(total_discount_invoice,total_discount_recurringinvoice)

    indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp)
    total_indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp).aggregate(total_indirect_expenses=Sum('amount'))['total_indirect_expenses'] or 0

    total_expenses = int(total_discount_paid) + int(total_indirect_expenses)

    total_invoice = Fin_Invoice.objects.filter(Company_id=cmp).aggregate(total_invoice=Sum('grandtotal'))['total_invoice'] or 0
    total_recurring_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp).aggregate(total_recurring_invoice=Sum('grandtotal'))['total_recurring_invoice'] or 0
    total_retainer_invoice = Fin_Retainer_Invoice.objects.filter(Company_id=cmp).aggregate(total_retainer_invoice=Sum('Grand_total'))['total_retainer_invoice'] or 0
    total_sales_account = int(total_invoice) + int(total_recurring_invoice) + int(total_retainer_invoice)

    total_bill_discount = Fin_Purchase_Bill_Item.objects.filter(company_id=cmp).aggregate(total_bill_discount=Sum('discount'))['total_bill_discount'] or 0
    total_indirect_income = int(total_bill_discount) + int(total_discount_recurringinvoice)

    closing_stock = Fin_Items.objects.filter(Company_id=cmp)
    total_closing_stock = Fin_Items.objects.filter(Company_id=cmp).aggregate(total_closing_stock=Sum('current_stock'))['total_closing_stock'] or 0

    total_profit =  int(total_opening_stock) + int(total_purchase_account) + int(total_expenses)
    total_loss = int(total_sales_account) + int(total_indirect_income) + int(total_closing_stock)
    difference = int(total_profit) - int(total_loss)

    context = {
        'cmp':cmp,
        'allmodules':allmodules,
        'total_opening_stock':total_opening_stock,
        'opening_stock':opening_stock,
        'total_purchase_account':total_purchase_account,
        'total_discount_paid':total_discount_paid,
        'indirect_expenses':indirect_expenses,
        'total_expenses':total_expenses,
        'total_sales_account':total_sales_account,
        'total_indirect_income':total_indirect_income,
        'closing_stock':closing_stock,
        'total_closing_stock':total_closing_stock,
        'total_profit':total_profit,
        'total_loss':total_loss,
        'difference':difference,
    }

    return render(request,'company/reports/profit_loss.html',context)

def fin_profitloss_mail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id=s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id=s_id)
        cmp = com.company_id

    if request.method == 'POST':
        emails_string = request.POST['email_ids']

                
        emails_list = [email.strip() for email in emails_string.split(',')]
        email_message = request.POST['email_message']
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

            opening_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date))
            total_opening_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date)).aggregate(total_opening_stock=Sum('opening_stock'))['total_opening_stock'] or 0

            purchase_account = Fin_Recurring_Bills.objects.filter(company_id=cmp,date__range=(start_date, end_date))
            total_recurring_bill = Fin_Recurring_Bills.objects.filter(company_id=cmp,date__range=(start_date, end_date)).aggregate(total_recurring_bill=Sum('grand_total'))['total_recurring_bill'] or 0
            purchase_bill_account = Fin_Purchase_Bill.objects.filter(company_id=cmp,bill_date__range=(start_date, end_date))
            total_bill = Fin_Purchase_Bill.objects.filter(company_id=cmp,bill_date__range=(start_date, end_date)).aggregate(total_bill=Sum('grandtotal'))['total_bill'] or 0
            total_purchase_account = int(total_recurring_bill) + int(total_bill)

            invoice = Fin_Invoice.objects.filter(Company_id=cmp,invoice_date__range=(start_date, end_date))

            if invoice == None:

                total_discount_invoice = 0
                
            else:

                total_discount_invoice = 0
                for i in invoice:
                    total_discount_invoices = Fin_Invoice_Items.objects.filter(Invoice_id=i.id).aggregate(total_discount_invoice=Sum('discount'))['total_discount_invoice'] or 0
                    total_discount_invoice += float(total_discount_invoices)

            recurr_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp,start_date__range=(start_date, end_date))

            if recurr_invoice == None:

                total_discount_recurringinvoice = 0  

            else:

                total_discount_recurringinvoice = 0
                
                for r in recurr_invoice:
                    total_discount_recurringinvoices = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice_id=r.id).aggregate(total_discount_recurringinvoice=Sum('discount'))['total_discount_recurringinvoice'] or 0
                    total_discount_recurringinvoice += float(total_discount_recurringinvoices)    
            
            total_discount_paid = int(total_discount_invoice) + int(total_discount_recurringinvoice)

            indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp,expense_date__range=(start_date, end_date))
            total_indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp,expense_date__range=(start_date, end_date)).aggregate(total_indirect_expenses=Sum('amount'))['total_indirect_expenses'] or 0

            total_expenses = int(total_discount_paid) + int(total_indirect_expenses)

            total_invoice = Fin_Invoice.objects.filter(Company_id=cmp,invoice_date__range=(start_date, end_date)).aggregate(total_invoice=Sum('grandtotal'))['total_invoice'] or 0
            total_recurring_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp,start_date__range=(start_date, end_date)).aggregate(total_recurring_invoice=Sum('grandtotal'))['total_recurring_invoice'] or 0
            total_retainer_invoice = Fin_Retainer_Invoice.objects.filter(Company_id=cmp,Retainer_Invoice_date__range=(start_date, end_date)).aggregate(total_retainer_invoice=Sum('Grand_total'))['total_retainer_invoice'] or 0
            total_sales_account = int(total_invoice) + int(total_recurring_invoice) + int(total_retainer_invoice)

            total_bill_discount = Fin_Purchase_Bill_Item.objects.filter(company_id=cmp).aggregate(total_bill_discount=Sum('discount'))['total_bill_discount'] or 0
            total_indirect_income = int(total_bill_discount) + int(total_discount_recurringinvoice)

            closing_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date))
            total_closing_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date)).aggregate(total_closing_stock=Sum('current_stock'))['total_closing_stock'] or 0

            total_profit =  int(total_opening_stock) + int(total_purchase_account) + int(total_expenses)
            total_loss = int(total_sales_account) + int(total_indirect_income) + int(total_closing_stock)
            difference = int(total_profit) - int(total_loss)

            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_opening_stock':total_opening_stock,
                'opening_stock':opening_stock,
                'total_purchase_account':total_purchase_account,
                'total_discount_paid':total_discount_paid,
                'indirect_expenses':indirect_expenses,
                'total_expenses':total_expenses,
                'total_sales_account':total_sales_account,
                'total_indirect_income':total_indirect_income,
                'closing_stock':closing_stock,
                'total_closing_stock':total_closing_stock,
                'total_profit':total_profit,
                'total_loss':total_loss,
                'difference':difference,
                'start_date':start_date,
                'end_date':end_date,
            }
            

        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        opening_stock = Fin_Items.objects.filter(Company_id=cmp)
        total_opening_stock = Fin_Items.objects.filter(Company_id=cmp).aggregate(total_opening_stock=Sum('opening_stock'))['total_opening_stock'] or 0

        purchase_account = Fin_Recurring_Bills.objects.filter(company_id=cmp)
        total_recurring_bill = Fin_Recurring_Bills.objects.filter(company_id=cmp).aggregate(total_recurring_bill=Sum('grand_total'))['total_recurring_bill'] or 0
        purchase_bill_account = Fin_Purchase_Bill.objects.filter(company_id=cmp)
        total_bill = Fin_Purchase_Bill.objects.filter(company_id=cmp).aggregate(total_bill=Sum('grandtotal'))['total_bill'] or 0
        total_purchase_account = int(total_recurring_bill) + int(total_bill)

        invoice = Fin_Invoice.objects.filter(Company_id=cmp)

        if invoice == None:

            total_discount_invoice = 0
            
        else:

            total_discount_invoice = 0
            for i in invoice:
                total_discount_invoices = Fin_Invoice_Items.objects.filter(Invoice_id=i.id).aggregate(total_discount_invoice=Sum('discount'))['total_discount_invoice'] or 0
                total_discount_invoice += float(total_discount_invoices)

        recurr_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp)

        if recurr_invoice == None:

            total_discount_recurringinvoice = 0  

        else:

            total_discount_recurringinvoice = 0
            
            for r in recurr_invoice:
                total_discount_recurringinvoices = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice_id=r.id).aggregate(total_discount_recurringinvoice=Sum('discount'))['total_discount_recurringinvoice'] or 0
                total_discount_recurringinvoice += float(total_discount_recurringinvoices)    
        
        total_discount_paid = int(total_discount_invoice) + int(total_discount_recurringinvoice)

        indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp)
        total_indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp).aggregate(total_indirect_expenses=Sum('amount'))['total_indirect_expenses'] or 0

        total_expenses = int(total_discount_paid) + int(total_indirect_expenses)

        total_invoice = Fin_Invoice.objects.filter(Company_id=cmp).aggregate(total_invoice=Sum('grandtotal'))['total_invoice'] or 0
        total_recurring_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp).aggregate(total_recurring_invoice=Sum('grandtotal'))['total_recurring_invoice'] or 0
        total_retainer_invoice = Fin_Retainer_Invoice.objects.filter(Company_id=cmp).aggregate(total_retainer_invoice=Sum('Grand_total'))['total_retainer_invoice'] or 0
        total_sales_account = int(total_invoice) + int(total_recurring_invoice) + int(total_retainer_invoice)

        total_bill_discount = Fin_Purchase_Bill_Item.objects.filter(company_id=cmp).aggregate(total_bill_discount=Sum('discount'))['total_bill_discount'] or 0
        total_indirect_income = int(total_bill_discount) + int(total_discount_recurringinvoice)

        closing_stock = Fin_Items.objects.filter(Company_id=cmp)
        total_closing_stock = Fin_Items.objects.filter(Company_id=cmp).aggregate(total_closing_stock=Sum('current_stock'))['total_closing_stock'] or 0

        total_profit =  int(total_opening_stock) + int(total_purchase_account) + int(total_expenses)
        total_loss = int(total_sales_account) + int(total_indirect_income) + int(total_closing_stock)
        difference = int(total_profit) - int(total_loss)

        context = {
            'cmp':cmp,
            'allmodules':allmodules,
            'total_opening_stock':total_opening_stock,
            'opening_stock':opening_stock,
            'total_purchase_account':total_purchase_account,
            'total_discount_paid':total_discount_paid,
            'indirect_expenses':indirect_expenses,
            'total_expenses':total_expenses,
            'total_sales_account':total_sales_account,
            'total_indirect_income':total_indirect_income,
            'closing_stock':closing_stock,
            'total_closing_stock':total_closing_stock,
            'total_profit':total_profit,
            'total_loss':total_loss,
            'difference':difference,
        }


        template_path = 'company/reports/profit_loss_pdf.html'
        template = get_template(template_path)

        html  = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
        pdf = result.getvalue()
        filename = f'Report_Profit & Loss A/C'
        subject = f"Report_Profit & Loss A/C"
        email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Profit & Loss A/C. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)

        messages.success(request, 'Report has been shared via email successfully..!')
        return redirect('fin_profitloss')
    return redirect('fin_profitloss')
#End
#---------------------------------------horizontal profit & loss A/C--------------------
def horizontal_profit_loss(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id=s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id=s_id)
        cmp = com.company_id

    if request.method == 'POST':
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

            total_invoice = Fin_Invoice.objects.filter(Company_id=cmp,invoice_date__range=(start_date, end_date)).aggregate(total_invoice=Sum('grandtotal'))['total_invoice'] or 0
            total_recurring_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp,start_date__range=(start_date, end_date)).aggregate(total_recurring_invoice=Sum('grandtotal'))['total_recurring_invoice'] or 0
            total_retainer_invoice = Fin_Retainer_Invoice.objects.filter(Company_id=cmp,Retainer_Invoice_date__range=(start_date, end_date)).aggregate(total_retainer_invoice=Sum('Grand_total'))['total_retainer_invoice'] or 0
            total_sales_account = int(total_invoice) + int(total_recurring_invoice) + int(total_retainer_invoice)

            total_opening_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date)).aggregate(total_opening_stock=Sum('opening_stock'))['total_opening_stock'] or 0

            purchase_account = Fin_Recurring_Bills.objects.filter(company_id=cmp,date__range=(start_date, end_date))
            total_recurring_bill = Fin_Recurring_Bills.objects.filter(company_id=cmp,date__range=(start_date, end_date)).aggregate(total_recurring_bill=Sum('grand_total'))['total_recurring_bill'] or 0
            purchase_bill_account = Fin_Purchase_Bill.objects.filter(company_id=cmp,bill_date__range=(start_date, end_date))
            total_bill = Fin_Purchase_Bill.objects.filter(company_id=cmp,bill_date__range=(start_date, end_date)).aggregate(total_bill=Sum('grandtotal'))['total_bill'] or 0
            total_purchase_account = int(total_recurring_bill) + int(total_bill)

            total_closing_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date)).aggregate(total_closing_stock=Sum('current_stock'))['total_closing_stock'] or 0

            total_cost_of_sales = int(total_opening_stock) + int(total_purchase_account) + int(total_closing_stock)

            difference = int(total_sales_account) - int(total_cost_of_sales)

            total_bill_discount = Fin_Purchase_Bill_Item.objects.filter(company_id=cmp).aggregate(total_bill_discount=Sum('discount'))['total_bill_discount'] or 0

            recurr_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp,start_date__range=(start_date, end_date))

            if recurr_invoice == None:

                total_recurring_discount = 0

            else:
                total_recurring_discount = 0

                for r in recurr_invoice:
                    total_recurring_discounts = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice_id=r.id).aggregate(total_discount_recurringinvoice=Sum('discount'))['total_discount_recurringinvoice'] or 0
                    total_recurring_discount += float(total_recurring_discounts)

            total_indirect_income = int(total_bill_discount) + int(total_recurring_discount)

            invoice = Fin_Invoice.objects.filter(Company_id=cmp,invoice_date__range=(start_date, end_date))

            if invoice == None:

                total_discount_invoice = 0
                
            else:
                total_discount_invoice = 0

                for i in invoice:
                    total_discount_invoices = Fin_Invoice_Items.objects.filter(Invoice_id=i.id).aggregate(total_discount_invoice=Sum('discount'))['total_discount_invoice'] or 0
                    total_discount_invoice += float(total_discount_invoices)

            total_discount_paid = int(total_discount_invoice) + int(total_recurring_discount)

            indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp,expense_date__range=(start_date, end_date))
            total_indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp,expense_date__range=(start_date, end_date)).aggregate(total_indirect_expenses=Sum('amount'))['total_indirect_expenses'] or 0

            total_expenses = int(total_discount_paid) + int(total_indirect_expenses)

            total = int(difference) + int(total_indirect_income)

            net_difference = int(total) - int(total_expenses)

            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_sales_account':total_sales_account,
                'total_opening_stock':total_opening_stock,
                'total_purchase_account':total_purchase_account,
                'total_closing_stock':total_closing_stock,
                'total_cost_of_sales':total_cost_of_sales,
                'difference':difference,
                'total_indirect_income':total_indirect_income,
                'total_discount_paid':total_discount_paid,
                'indirect_expenses':indirect_expenses,
                'total_indirect_expenses':total_indirect_expenses,
                'total_expenses':total_expenses,
                'total':total,
                'net_difference':net_difference,
                'start_date':start_date,
                'end_date':end_date,
            }
            return render(request,'company/reports/horizontal_profit_loss.html',context)

    allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

    total_invoice = Fin_Invoice.objects.filter(Company_id=cmp).aggregate(total_invoice=Sum('grandtotal'))['total_invoice'] or 0
    total_recurring_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp).aggregate(total_recurring_invoice=Sum('grandtotal'))['total_recurring_invoice'] or 0
    total_retainer_invoice = Fin_Retainer_Invoice.objects.filter(Company_id=cmp).aggregate(total_retainer_invoice=Sum('Grand_total'))['total_retainer_invoice'] or 0
    total_sales_account = int(total_invoice) + int(total_recurring_invoice) + int(total_retainer_invoice)

    total_opening_stock = Fin_Items.objects.filter(Company_id=cmp).aggregate(total_opening_stock=Sum('opening_stock'))['total_opening_stock'] or 0

    purchase_account = Fin_Recurring_Bills.objects.filter(company_id=cmp)
    total_recurring_bill = Fin_Recurring_Bills.objects.filter(company_id=cmp).aggregate(total_recurring_bill=Sum('grand_total'))['total_recurring_bill'] or 0
    purchase_bill_account = Fin_Purchase_Bill.objects.filter(company_id=cmp)
    total_bill = Fin_Purchase_Bill.objects.filter(company_id=cmp).aggregate(total_bill=Sum('grandtotal'))['total_bill'] or 0
    total_purchase_account = int(total_recurring_bill) + int(total_bill)

    total_closing_stock = Fin_Items.objects.filter(Company_id=cmp).aggregate(total_closing_stock=Sum('current_stock'))['total_closing_stock'] or 0

    total_cost_of_sales = int(total_opening_stock) + int(total_purchase_account) + int(total_closing_stock)

    difference = int(total_sales_account) - int(total_cost_of_sales)

    total_bill_discount = Fin_Purchase_Bill_Item.objects.filter(company_id=cmp).aggregate(total_bill_discount=Sum('discount'))['total_bill_discount'] or 0

    recurr_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp)

    if recurr_invoice == None:

        total_recurring_discount = 0

    else:
        total_recurring_discount = 0

        for r in recurr_invoice:
            total_recurring_discounts = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice_id=r.id).aggregate(total_discount_recurringinvoice=Sum('discount'))['total_discount_recurringinvoice'] or 0
            total_recurring_discount += float(total_recurring_discounts)

    total_indirect_income = int(total_bill_discount) + int(total_recurring_discount)

    invoice = Fin_Invoice.objects.filter(Company_id=cmp)

    if invoice == None:

        total_discount_invoice = 0
        
    else:
        total_discount_invoice = 0

        for i in invoice:
            total_discount_invoices = Fin_Invoice_Items.objects.filter(Invoice_id=i.id).aggregate(total_discount_invoice=Sum('discount'))['total_discount_invoice'] or 0
            total_discount_invoice += float(total_discount_invoices)

    total_discount_paid = int(total_discount_invoice) + int(total_recurring_discount)

    indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp)
    total_indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp).aggregate(total_indirect_expenses=Sum('amount'))['total_indirect_expenses'] or 0

    total_expenses = int(total_discount_paid) + int(total_indirect_expenses)

    total = int(difference) + int(total_indirect_income)

    net_difference = int(total) - int(total_expenses)

    context = {
        'cmp':cmp,
        'allmodules':allmodules,
        'total_sales_account':total_sales_account,
        'total_opening_stock':total_opening_stock,
        'total_purchase_account':total_purchase_account,
        'total_closing_stock':total_closing_stock,
        'total_cost_of_sales':total_cost_of_sales,
        'difference':difference,
        'total_indirect_income':total_indirect_income,
        'total_discount_paid':total_discount_paid,
        'indirect_expenses':indirect_expenses,
        'total_indirect_expenses':total_indirect_expenses,
        'total_expenses':total_expenses,
        'total':total,
        'net_difference':net_difference,
    }
    return render(request,'company/reports/horizontal_profit_loss.html',context)

def horizontal_profitloss_mail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id=s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id=s_id)
        cmp = com.company_id

    if request.method == 'POST':
        emails_string = request.POST['email_ids']

                
        emails_list = [email.strip() for email in emails_string.split(',')]
        email_message = request.POST['email_message']
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

            total_invoice = Fin_Invoice.objects.filter(Company_id=cmp,invoice_date__range=(start_date, end_date)).aggregate(total_invoice=Sum('grandtotal'))['total_invoice'] or 0
            total_recurring_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp,start_date__range=(start_date, end_date)).aggregate(total_recurring_invoice=Sum('grandtotal'))['total_recurring_invoice'] or 0
            total_retainer_invoice = Fin_Retainer_Invoice.objects.filter(Company_id=cmp,Retainer_Invoice_date__range=(start_date, end_date)).aggregate(total_retainer_invoice=Sum('Grand_total'))['total_retainer_invoice'] or 0
            total_sales_account = int(total_invoice) + int(total_recurring_invoice) + int(total_retainer_invoice)

            total_opening_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date)).aggregate(total_opening_stock=Sum('opening_stock'))['total_opening_stock'] or 0

            purchase_account = Fin_Recurring_Bills.objects.filter(company_id=cmp,date__range=(start_date, end_date))
            total_recurring_bill = Fin_Recurring_Bills.objects.filter(company_id=cmp,date__range=(start_date, end_date)).aggregate(total_recurring_bill=Sum('grand_total'))['total_recurring_bill'] or 0
            purchase_bill_account = Fin_Purchase_Bill.objects.filter(company_id=cmp,bill_date__range=(start_date, end_date))
            total_bill = Fin_Purchase_Bill.objects.filter(company_id=cmp,bill_date__range=(start_date, end_date)).aggregate(total_bill=Sum('grandtotal'))['total_bill'] or 0
            total_purchase_account = int(total_recurring_bill) + int(total_bill)

            total_closing_stock = Fin_Items.objects.filter(Company_id=cmp,item_created__range=(start_date, end_date)).aggregate(total_closing_stock=Sum('current_stock'))['total_closing_stock'] or 0

            total_cost_of_sales = int(total_opening_stock) + int(total_purchase_account) + int(total_closing_stock)

            difference = int(total_sales_account) - int(total_cost_of_sales)

            total_bill_discount = Fin_Purchase_Bill_Item.objects.filter(company_id=cmp).aggregate(total_bill_discount=Sum('discount'))['total_bill_discount'] or 0

            recurr_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp,start_date__range=(start_date, end_date))

            if recurr_invoice:

                for r in recurr_invoice:
                    total_recurring_discount = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice_id=r.id).aggregate(total_discount_recurringinvoice=Sum('discount'))['total_discount_recurringinvoice'] or 0
            else:
                total_recurring_discount = 0

            total_indirect_income = int(total_bill_discount) + int(total_recurring_discount)

            invoice = Fin_Invoice.objects.filter(Company_id=cmp,invoice_date__range=(start_date, end_date))

            if invoice:
                for i in invoice:
                    total_discount_invoice = Fin_Invoice_Items.objects.filter(Invoice_id=i.id).aggregate(total_discount_invoice=Sum('discount'))['total_discount_invoice'] or 0
            else:
                total_discount_invoice = 0

            total_discount_paid = int(total_discount_invoice) + int(total_recurring_discount)

            indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp,expense_date__range=(start_date, end_date))
            total_indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp,expense_date__range=(start_date, end_date)).aggregate(total_indirect_expenses=Sum('amount'))['total_indirect_expenses'] or 0

            total_expenses = int(total_discount_paid) + int(total_indirect_expenses)

            total = int(difference) + int(total_indirect_income)

            net_difference = int(total) - int(total_expenses)

            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_sales_account':total_sales_account,
                'total_opening_stock':total_opening_stock,
                'total_purchase_account':total_purchase_account,
                'total_closing_stock':total_closing_stock,
                'total_cost_of_sales':total_cost_of_sales,
                'difference':difference,
                'total_indirect_income':total_indirect_income,
                'total_discount_paid':total_discount_paid,
                'indirect_expenses':indirect_expenses,
                'total_indirect_expenses':total_indirect_expenses,
                'total_expenses':total_expenses,
                'total':total,
                'net_difference':net_difference,
                'start_date':start_date,
                'end_date':end_date,
            }

        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        total_invoice = Fin_Invoice.objects.filter(Company_id=cmp).aggregate(total_invoice=Sum('grandtotal'))['total_invoice'] or 0
        total_recurring_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp).aggregate(total_recurring_invoice=Sum('grandtotal'))['total_recurring_invoice'] or 0
        total_retainer_invoice = Fin_Retainer_Invoice.objects.filter(Company_id=cmp).aggregate(total_retainer_invoice=Sum('Grand_total'))['total_retainer_invoice'] or 0
        total_sales_account = int(total_invoice) + int(total_recurring_invoice) + int(total_retainer_invoice)

        total_opening_stock = Fin_Items.objects.filter(Company_id=cmp).aggregate(total_opening_stock=Sum('opening_stock'))['total_opening_stock'] or 0

        purchase_account = Fin_Recurring_Bills.objects.filter(company_id=cmp)
        total_recurring_bill = Fin_Recurring_Bills.objects.filter(company_id=cmp).aggregate(total_recurring_bill=Sum('grand_total'))['total_recurring_bill'] or 0
        purchase_bill_account = Fin_Purchase_Bill.objects.filter(company_id=cmp)
        total_bill = Fin_Purchase_Bill.objects.filter(company_id=cmp).aggregate(total_bill=Sum('grandtotal'))['total_bill'] or 0
        total_purchase_account = int(total_recurring_bill) + int(total_bill)

        total_closing_stock = Fin_Items.objects.filter(Company_id=cmp).aggregate(total_closing_stock=Sum('current_stock'))['total_closing_stock'] or 0

        total_cost_of_sales = int(total_opening_stock) + int(total_purchase_account) + int(total_closing_stock)

        difference = int(total_sales_account) - int(total_cost_of_sales)

        total_bill_discount = Fin_Purchase_Bill_Item.objects.filter(company_id=cmp).aggregate(total_bill_discount=Sum('discount'))['total_bill_discount'] or 0

        recurr_invoice = Fin_Recurring_Invoice.objects.filter(Company_id=cmp,start_date__range=(start_date, end_date))

        if recurr_invoice == None:

            total_recurring_discount = 0

        else:
            total_recurring_discount = 0

            for r in recurr_invoice:
                total_recurring_discounts = Fin_Recurring_Invoice_Items.objects.filter(RecInvoice_id=r.id).aggregate(total_discount_recurringinvoice=Sum('discount'))['total_discount_recurringinvoice'] or 0
                total_recurring_discount += float(total_recurring_discounts)

        total_indirect_income = int(total_bill_discount) + int(total_recurring_discount)

        invoice = Fin_Invoice.objects.filter(Company_id=cmp,invoice_date__range=(start_date, end_date))

        if invoice == None:

            total_discount_invoice = 0
                
        else:
            total_discount_invoice = 0

            for i in invoice:
                total_discount_invoices = Fin_Invoice_Items.objects.filter(Invoice_id=i.id).aggregate(total_discount_invoice=Sum('discount'))['total_discount_invoice'] or 0
                total_discount_invoice += float(total_discount_invoices)

        total_discount_paid = int(total_discount_invoice) + int(total_recurring_discount)

        indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp)
        total_indirect_expenses = Fin_Expense.objects.filter(Company_id=cmp).aggregate(total_indirect_expenses=Sum('amount'))['total_indirect_expenses'] or 0

        total_expenses = int(total_discount_paid) + int(total_indirect_expenses)

        total = int(difference) + int(total_indirect_income)

        net_difference = int(total) - int(total_expenses)

        context = {
            'cmp':cmp,
            'allmodules':allmodules,
            'total_sales_account':total_sales_account,
            'total_opening_stock':total_opening_stock,
            'total_purchase_account':total_purchase_account,
            'total_closing_stock':total_closing_stock,
            'total_cost_of_sales':total_cost_of_sales,
            'difference':difference,
            'total_indirect_income':total_indirect_income,
            'total_discount_paid':total_discount_paid,
            'indirect_expenses':indirect_expenses,
            'total_indirect_expenses':total_indirect_expenses,
            'total_expenses':total_expenses,
            'total':total,
            'net_difference':net_difference,
        }

        template_path = 'company/reports/horizontal_profit_loss_pdf.html'
        template = get_template(template_path)

        html  = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
        pdf = result.getvalue()
        filename = f'Report_Horizontal_Profit & Loss A/C'
        subject = f"Report_Horizontal_Profit & Loss A/C"
        email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Horizontal Profit & Loss A/C. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)

        messages.success(request, 'Report has been shared via email successfully..!')
        return redirect('horizontal_profitloss')
    return redirect('horizontal_profitloss')

# End

#---------------------------------------Balance sheet--------------------

def balance_sheet(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id=s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id=s_id)
        cmp = com.company_id

    if request.method == 'POST':
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
    
            total_bank_loan = Fin_BankHolder.objects.filter(Company_id=cmp,Date__range=(start_date, end_date)).aggregate(total_bank_loan=Sum('ArithmeticErrormount'))['total_bank_loan'] or 0

            sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp,date__range=(start_date, end_date))
            total_sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp,date__range=(start_date, end_date)).aggregate(total_sundry_creditors=Sum('current_balance'))['total_sundry_creditors'] or 0
            
            total_loan_advance = Employee.objects.filter(company_id=cmp,date_of_joining__range=(start_date, end_date)).aggregate(total_loan_advance=Sum('salary_amount'))['total_loan_advance'] or 0

            total_sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp,date__range=(start_date, end_date)).aggregate(total_sundry_debitors=Sum('current_balance'))['total_sundry_debitors'] or 0

            total_current_asset = int(total_loan_advance) + int(total_sundry_debitors)

            total_liability = int(total_bank_loan) + int(total_sundry_creditors) 

            difference = int(total_current_asset) - int(total_liability)


            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_bank_loan':total_bank_loan,
                'total_sundry_creditors':total_sundry_creditors,
                'sundry_creditors':sundry_creditors,
                'total_loan_advance':total_loan_advance,
                'total_sundry_debitors':total_sundry_debitors,
                'total_current_asset':total_current_asset,
                'total_liability':total_liability,
                'difference':difference,
                'start_date':start_date,
                'end_date':end_date,
            }
            return render(request,'company/reports/balance_sheet.html',context)
    
    allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
    
    total_bank_loan = Fin_BankHolder.objects.filter(Company_id=cmp).aggregate(total_bank_loan=Sum('ArithmeticErrormount'))['total_bank_loan'] or 0

    sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp)
    total_sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp).aggregate(total_sundry_creditors=Sum('current_balance'))['total_sundry_creditors'] or 0
    
    total_loan_advance = Employee.objects.filter(company_id=cmp).aggregate(total_loan_advance=Sum('salary_amount'))['total_loan_advance'] or 0

    total_sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp).aggregate(total_sundry_debitors=Sum('current_balance'))['total_sundry_debitors'] or 0

    total_current_asset = int(total_loan_advance) + int(total_sundry_debitors)

    total_liability = int(total_bank_loan) + int(total_sundry_creditors) 

    difference = int(total_current_asset) - int(total_liability)


    context = {
        'cmp':cmp,
        'allmodules':allmodules,
        'total_bank_loan':total_bank_loan,
        'total_sundry_creditors':total_sundry_creditors,
        'sundry_creditors':sundry_creditors,
        'total_loan_advance':total_loan_advance,
        'total_sundry_debitors':total_sundry_debitors,
        'total_current_asset':total_current_asset,
        'total_liability':total_liability,
        'difference':difference,
    }
    return render(request,'company/reports/balance_sheet.html',context)

def balance_sheet_mail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id=s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id=s_id)
        cmp = com.company_id

    if request.method == 'POST':
        emails_string = request.POST['email_ids']

                
        emails_list = [email.strip() for email in emails_string.split(',')]
        email_message = request.POST['email_message']
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
    
            total_bank_loan = Fin_BankHolder.objects.filter(Company_id=cmp,Date__range=(start_date, end_date)).aggregate(total_bank_loan=Sum('ArithmeticErrormount'))['total_bank_loan'] or 0

            sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp,date__range=(start_date, end_date))
            total_sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp,date__range=(start_date, end_date)).aggregate(total_sundry_creditors=Sum('current_balance'))['total_sundry_creditors'] or 0
            
            total_loan_advance = Employee.objects.filter(company_id=cmp,date_of_joining__range=(start_date, end_date)).aggregate(total_loan_advance=Sum('salary_amount'))['total_loan_advance'] or 0

            total_sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp,date__range=(start_date, end_date)).aggregate(total_sundry_debitors=Sum('current_balance'))['total_sundry_debitors'] or 0

            total_current_asset = int(total_loan_advance) + int(total_sundry_debitors)

            total_liability = int(total_bank_loan) + int(total_sundry_creditors) 

            difference = int(total_current_asset) - int(total_liability)


            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_bank_loan':total_bank_loan,
                'total_sundry_creditors':total_sundry_creditors,
                'sundry_creditors':sundry_creditors,
                'total_loan_advance':total_loan_advance,
                'total_sundry_debitors':total_sundry_debitors,
                'total_current_asset':total_current_asset,
                'total_liability':total_liability,
                'difference':difference,
                'start_date':start_date,
                'end_date':end_date,
            }

        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')
    
        total_bank_loan = Fin_BankHolder.objects.filter(Company_id=cmp).aggregate(total_bank_loan=Sum('ArithmeticErrormount'))['total_bank_loan'] or 0

        sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp)
        total_sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp).aggregate(total_sundry_creditors=Sum('current_balance'))['total_sundry_creditors'] or 0
        
        total_loan_advance = Employee.objects.filter(company_id=cmp).aggregate(total_loan_advance=Sum('salary_amount'))['total_loan_advance'] or 0

        total_sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp).aggregate(total_sundry_debitors=Sum('current_balance'))['total_sundry_debitors'] or 0

        total_current_asset = int(total_loan_advance) + int(total_sundry_debitors)

        total_liability = int(total_bank_loan) + int(total_sundry_creditors) 

        difference = int(total_current_asset) - int(total_liability)


        context = {
            'cmp':cmp,
            'allmodules':allmodules,
            'total_bank_loan':total_bank_loan,
            'total_sundry_creditors':total_sundry_creditors,
            'sundry_creditors':sundry_creditors,
            'total_loan_advance':total_loan_advance,
            'total_sundry_debitors':total_sundry_debitors,
            'total_current_asset':total_current_asset,
            'total_liability':total_liability,
            'difference':difference,
        }

        template_path = 'company/reports/balance_sheet_pdf.html'
        template = get_template(template_path)

        html  = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
        pdf = result.getvalue()
        filename = f'Report_Balance_Sheet'
        subject = f"Report_Balance_Sheet"
        email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Balance Sheet. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)

        messages.success(request, 'Report has been shared via email successfully..!')
        return redirect('balancesheet')
    return redirect('balancesheet')

# End

#---------------------------------------Vertical Balance sheet--------------------

def vertical_balance_sheet(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id=s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id=s_id)
        cmp = com.company_id

    if request.method == 'POST':
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

            total_bank_loan = Fin_BankHolder.objects.filter(Company_id=cmp,Date__range=(start_date, end_date)).aggregate(total_bank_loan=Sum('ArithmeticErrormount'))['total_bank_loan'] or 0

            sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp,date__range=(start_date, end_date))
            total_sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp,date__range=(start_date, end_date)).aggregate(total_sundry_creditors=Sum('current_balance'))['total_sundry_creditors'] or 0

            total_loan_advance = Employee.objects.filter(company_id=cmp,date_of_joining__range=(start_date, end_date)).aggregate(total_loan_advance=Sum('salary_amount'))['total_loan_advance'] or 0

            sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp,date__range=(start_date, end_date))
            total_sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp,date__range=(start_date, end_date)).aggregate(total_sundry_debitors=Sum('current_balance'))['total_sundry_debitors'] or 0

            total_current_asset = int(total_loan_advance) + int(total_sundry_debitors)

            total_liability = int(total_bank_loan) + int(total_sundry_creditors) 

            difference = int(total_current_asset) - int(total_liability)

            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_bank_loan':total_bank_loan,
                'sundry_creditors':sundry_creditors,
                'total_sundry_creditors':total_sundry_creditors,
                'total_loan_advance':total_loan_advance,
                'sundry_debitors':sundry_debitors,
                'total_sundry_debitors':total_sundry_debitors,
                'total_current_asset':total_current_asset,
                'total_liability':total_liability,
                'difference':difference,
                'start_date':start_date,
                'end_date':end_date,
            }
            return render(request,'company/reports/vertical_balance_sheet.html',context)

    allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

    total_bank_loan = Fin_BankHolder.objects.filter(Company_id=cmp).aggregate(total_bank_loan=Sum('ArithmeticErrormount'))['total_bank_loan'] or 0

    sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp)
    total_sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp).aggregate(total_sundry_creditors=Sum('current_balance'))['total_sundry_creditors'] or 0

    total_loan_advance = Employee.objects.filter(company_id=cmp).aggregate(total_loan_advance=Sum('salary_amount'))['total_loan_advance'] or 0

    sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp)
    total_sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp).aggregate(total_sundry_debitors=Sum('current_balance'))['total_sundry_debitors'] or 0

    total_current_asset = int(total_loan_advance) + int(total_sundry_debitors)

    total_liability = int(total_bank_loan) + int(total_sundry_creditors) 

    difference = int(total_current_asset) - int(total_liability)

    context = {
        'cmp':cmp,
        'allmodules':allmodules,
        'total_bank_loan':total_bank_loan,
        'sundry_creditors':sundry_creditors,
        'total_sundry_creditors':total_sundry_creditors,
        'total_loan_advance':total_loan_advance,
        'sundry_debitors':sundry_debitors,
        'total_sundry_debitors':total_sundry_debitors,
        'total_current_asset':total_current_asset,
        'total_liability':total_liability,
        'difference':difference,
    }
    return render(request,'company/reports/vertical_balance_sheet.html',context)

def vertical_balance_sheet_mail(request):
    if 's_id' in request.session:
        s_id = request.session['s_id']
        data = Fin_Login_Details.objects.get(id=s_id)
    if data.User_Type == "Company":
        com = Fin_Company_Details.objects.get(Login_Id=s_id)
        cmp = com
    else:
        com = Fin_Staff_Details.objects.get(Login_Id=s_id)
        cmp = com.company_id

    if request.method == 'POST':
        emails_string = request.POST['email_ids']

                
        emails_list = [email.strip() for email in emails_string.split(',')]
        email_message = request.POST['email_message']
        start_date_str = request.POST.get('from_date')
        end_date_str = request.POST.get('to_date')

        if start_date_str and end_date_str:
            # Convert date strings to datetime objects
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

            allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

            total_bank_loan = Fin_BankHolder.objects.filter(Company_id=cmp,Date__range=(start_date, end_date)).aggregate(total_bank_loan=Sum('ArithmeticErrormount'))['total_bank_loan'] or 0

            sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp,date__range=(start_date, end_date))
            total_sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp,date__range=(start_date, end_date)).aggregate(total_sundry_creditors=Sum('current_balance'))['total_sundry_creditors'] or 0

            total_loan_advance = Employee.objects.filter(company_id=cmp,date_of_joining__range=(start_date, end_date)).aggregate(total_loan_advance=Sum('salary_amount'))['total_loan_advance'] or 0

            sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp,date__range=(start_date, end_date))
            total_sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp,date__range=(start_date, end_date)).aggregate(total_sundry_debitors=Sum('current_balance'))['total_sundry_debitors'] or 0

            total_current_asset = int(total_loan_advance) + int(total_sundry_debitors)

            total_liability = int(total_bank_loan) + int(total_sundry_creditors) 

            difference = int(total_current_asset) - int(total_liability)

            context = {
                'cmp':cmp,
                'allmodules':allmodules,
                'total_bank_loan':total_bank_loan,
                'sundry_creditors':sundry_creditors,
                'total_sundry_creditors':total_sundry_creditors,
                'total_loan_advance':total_loan_advance,
                'sundry_debitors':sundry_debitors,
                'total_sundry_debitors':total_sundry_debitors,
                'total_current_asset':total_current_asset,
                'total_liability':total_liability,
                'difference':difference,
                'start_date':start_date,
                'end_date':end_date,
            }
        
        allmodules = Fin_Modules_List.objects.get(company_id=cmp, status='New')

        total_bank_loan = Fin_BankHolder.objects.filter(Company_id=cmp).aggregate(total_bank_loan=Sum('ArithmeticErrormount'))['total_bank_loan'] or 0

        sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp)
        total_sundry_creditors = Fin_Customers.objects.filter(Company_id=cmp).aggregate(total_sundry_creditors=Sum('current_balance'))['total_sundry_creditors'] or 0

        total_loan_advance = Employee.objects.filter(company_id=cmp).aggregate(total_loan_advance=Sum('salary_amount'))['total_loan_advance'] or 0

        sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp)
        total_sundry_debitors = Fin_Vendors.objects.filter(Company_id=cmp).aggregate(total_sundry_debitors=Sum('current_balance'))['total_sundry_debitors'] or 0

        total_current_asset = int(total_loan_advance) + int(total_sundry_debitors)

        total_liability = int(total_bank_loan) + int(total_sundry_creditors) 

        difference = int(total_current_asset) - int(total_liability)

        context = {
            'cmp':cmp,
            'allmodules':allmodules,
            'total_bank_loan':total_bank_loan,
            'sundry_creditors':sundry_creditors,
            'total_sundry_creditors':total_sundry_creditors,
            'total_loan_advance':total_loan_advance,
            'sundry_debitors':sundry_debitors,
            'total_sundry_debitors':total_sundry_debitors,
            'total_current_asset':total_current_asset,
            'total_liability':total_liability,
            'difference':difference,
        }

        template_path = 'company/reports/vertical_balance_sheet_pdf.html'
        template = get_template(template_path)

        html  = template.render(context)
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)
        pdf = result.getvalue()
        filename = f'Report_Balance_Sheet'
        subject = f"Report_Balance_Sheet"
        email = EmailMessage(subject, f"Hi,\nPlease find the attached Report for - Balance Sheet. \n{email_message}\n\n--\nRegards,\n{com.Company_name}\n{com.Address}\n{com.State} - {com.Country}\n{com.Contact}", from_email=settings.EMAIL_HOST_USER, to=emails_list)
        email.attach(filename, pdf, "application/pdf")
        email.send(fail_silently=False)

        messages.success(request, 'Report has been shared via email successfully..!')
        return redirect('vertical_balance_sheet')
    return redirect('vertical_balance_sheet')

# End

